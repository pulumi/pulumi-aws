// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.outputs.ReplicationGroupLogDeliveryConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticache/replicationGroup:ReplicationGroup")
public final class ReplicationGroup extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="applyImmediately", flag="unknown_applyImmediately")
    private Boolean value_applyImmediately;
    private boolean unknown_applyImmediately;
    public Boolean applyImmediately() {
        if (!unknown_applyImmediately) return value_applyImmediately;
        throw new UndeferrableValueException("Value 'ReplicationGroup.applyImmediately' is not present");
    }

    /**
     * ARN of the created ElastiCache Replication Group.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ReplicationGroup.arn' is not present");
    }

    /**
     * Whether to enable encryption at rest.
     * When `engine` is `redis`, default is `false`.
     * When `engine` is `valkey`, default is `true`.
     * 
     */
    @PolicyResourceProperty(name="atRestEncryptionEnabled", flag="unknown_atRestEncryptionEnabled")
    private Boolean value_atRestEncryptionEnabled;
    private boolean unknown_atRestEncryptionEnabled;
    public Boolean atRestEncryptionEnabled() {
        if (!unknown_atRestEncryptionEnabled) return value_atRestEncryptionEnabled;
        throw new UndeferrableValueException("Value 'ReplicationGroup.atRestEncryptionEnabled' is not present");
    }

    /**
     * Password used to access a password protected server. Can be specified only if `transit_encryption_enabled = true`.
     * 
     */
    @PolicyResourceProperty(name="authToken", flag="unknown_authToken")
    private @Nullable String value_authToken;
    private boolean unknown_authToken;
    public @Nullable String authToken() {
        if (!unknown_authToken) return value_authToken;
        throw new UndeferrableValueException("Value 'ReplicationGroup.authToken' is not present");
    }

    /**
     * Strategy to use when updating the `auth_token`. Valid values are `SET`, `ROTATE`, and `DELETE`. Defaults to `ROTATE`.
     * 
     */
    @PolicyResourceProperty(name="authTokenUpdateStrategy", flag="unknown_authTokenUpdateStrategy")
    private @Nullable String value_authTokenUpdateStrategy;
    private boolean unknown_authTokenUpdateStrategy;
    public @Nullable String authTokenUpdateStrategy() {
        if (!unknown_authTokenUpdateStrategy) return value_authTokenUpdateStrategy;
        throw new UndeferrableValueException("Value 'ReplicationGroup.authTokenUpdateStrategy' is not present");
    }

    /**
     * Specifies whether minor version engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window.
     * Only supported for engine types `&#34;redis&#34;` and `&#34;valkey&#34;` and if the engine version is 6 or higher.
     * Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="autoMinorVersionUpgrade", flag="unknown_autoMinorVersionUpgrade")
    private Boolean value_autoMinorVersionUpgrade;
    private boolean unknown_autoMinorVersionUpgrade;
    public Boolean autoMinorVersionUpgrade() {
        if (!unknown_autoMinorVersionUpgrade) return value_autoMinorVersionUpgrade;
        throw new UndeferrableValueException("Value 'ReplicationGroup.autoMinorVersionUpgrade' is not present");
    }

    /**
     * Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. If enabled, `num_cache_clusters` must be greater than 1. Must be enabled for Redis (cluster mode enabled) replication groups. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="automaticFailoverEnabled", flag="unknown_automaticFailoverEnabled")
    private @Nullable Boolean value_automaticFailoverEnabled;
    private boolean unknown_automaticFailoverEnabled;
    public @Nullable Boolean automaticFailoverEnabled() {
        if (!unknown_automaticFailoverEnabled) return value_automaticFailoverEnabled;
        throw new UndeferrableValueException("Value 'ReplicationGroup.automaticFailoverEnabled' is not present");
    }

    /**
     * Indicates if cluster mode is enabled.
     * 
     */
    @PolicyResourceProperty(name="clusterEnabled", flag="unknown_clusterEnabled")
    private Boolean value_clusterEnabled;
    private boolean unknown_clusterEnabled;
    public Boolean clusterEnabled() {
        if (!unknown_clusterEnabled) return value_clusterEnabled;
        throw new UndeferrableValueException("Value 'ReplicationGroup.clusterEnabled' is not present");
    }

    /**
     * Specifies whether cluster mode is enabled or disabled. Valid values are `enabled` or `disabled` or `compatible`
     * 
     */
    @PolicyResourceProperty(name="clusterMode", flag="unknown_clusterMode")
    private String value_clusterMode;
    private boolean unknown_clusterMode;
    public String clusterMode() {
        if (!unknown_clusterMode) return value_clusterMode;
        throw new UndeferrableValueException("Value 'ReplicationGroup.clusterMode' is not present");
    }

    /**
     * Address of the replication group configuration endpoint when cluster mode is enabled.
     * 
     */
    @PolicyResourceProperty(name="configurationEndpointAddress", flag="unknown_configurationEndpointAddress")
    private String value_configurationEndpointAddress;
    private boolean unknown_configurationEndpointAddress;
    public String configurationEndpointAddress() {
        if (!unknown_configurationEndpointAddress) return value_configurationEndpointAddress;
        throw new UndeferrableValueException("Value 'ReplicationGroup.configurationEndpointAddress' is not present");
    }

    /**
     * Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to `true` when using r6gd nodes.
     * 
     */
    @PolicyResourceProperty(name="dataTieringEnabled", flag="unknown_dataTieringEnabled")
    private Boolean value_dataTieringEnabled;
    private boolean unknown_dataTieringEnabled;
    public Boolean dataTieringEnabled() {
        if (!unknown_dataTieringEnabled) return value_dataTieringEnabled;
        throw new UndeferrableValueException("Value 'ReplicationGroup.dataTieringEnabled' is not present");
    }

    /**
     * User-created description for the replication group. Must not be empty.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'ReplicationGroup.description' is not present");
    }

    /**
     * Name of the cache engine to be used for the clusters in this replication group.
     * Valid values are `redis` or `valkey`.
     * Default is `redis`.
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private @Nullable String value_engine;
    private boolean unknown_engine;
    public @Nullable String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'ReplicationGroup.engine' is not present");
    }

    /**
     * Version number of the cache engine to be used for the cache clusters in this replication group.
     * If the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
     * If the version is 6, the major and minor version can be set, e.g., `6.2`,
     * or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
     * Otherwise, specify the full version desired, e.g., `5.0.6`.
     * The actual engine version used is returned in the attribute `engine_version_actual`, see Attribute Reference below.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'ReplicationGroup.engineVersion' is not present");
    }

    /**
     * Because ElastiCache pulls the latest minor or patch for a version, this attribute returns the running version of the cache engine.
     * 
     */
    @PolicyResourceProperty(name="engineVersionActual", flag="unknown_engineVersionActual")
    private String value_engineVersionActual;
    private boolean unknown_engineVersionActual;
    public String engineVersionActual() {
        if (!unknown_engineVersionActual) return value_engineVersionActual;
        throw new UndeferrableValueException("Value 'ReplicationGroup.engineVersionActual' is not present");
    }

    /**
     * The name of your final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster. If omitted, no final snapshot will be made.
     * 
     */
    @PolicyResourceProperty(name="finalSnapshotIdentifier", flag="unknown_finalSnapshotIdentifier")
    private @Nullable String value_finalSnapshotIdentifier;
    private boolean unknown_finalSnapshotIdentifier;
    public @Nullable String finalSnapshotIdentifier() {
        if (!unknown_finalSnapshotIdentifier) return value_finalSnapshotIdentifier;
        throw new UndeferrableValueException("Value 'ReplicationGroup.finalSnapshotIdentifier' is not present");
    }

    /**
     * The ID of the global replication group to which this replication group should belong. If this parameter is specified, the replication group is added to the specified global replication group as a secondary replication group; otherwise, the replication group is not part of any global replication group. If `global_replication_group_id` is set, the `num_node_groups` parameter cannot be set.
     * 
     */
    @PolicyResourceProperty(name="globalReplicationGroupId", flag="unknown_globalReplicationGroupId")
    private String value_globalReplicationGroupId;
    private boolean unknown_globalReplicationGroupId;
    public String globalReplicationGroupId() {
        if (!unknown_globalReplicationGroupId) return value_globalReplicationGroupId;
        throw new UndeferrableValueException("Value 'ReplicationGroup.globalReplicationGroupId' is not present");
    }

    /**
     * The IP version to advertise in the discovery protocol. Valid values are `ipv4` or `ipv6`.
     * 
     */
    @PolicyResourceProperty(name="ipDiscovery", flag="unknown_ipDiscovery")
    private String value_ipDiscovery;
    private boolean unknown_ipDiscovery;
    public String ipDiscovery() {
        if (!unknown_ipDiscovery) return value_ipDiscovery;
        throw new UndeferrableValueException("Value 'ReplicationGroup.ipDiscovery' is not present");
    }

    /**
     * The ARN of the key that you wish to use if encrypting at rest. If not supplied, uses service managed encryption. Can be specified only if `at_rest_encryption_enabled = true`.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private @Nullable String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public @Nullable String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'ReplicationGroup.kmsKeyId' is not present");
    }

    /**
     * Specifies the destination and format of Redis OSS/Valkey [SLOWLOG](https://redis.io/commands/slowlog) or Redis OSS/Valkey [Engine Log](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log). See the documentation on [Amazon ElastiCache](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log). See Log Delivery Configuration below for more details.
     * 
     */
    @PolicyResourceProperty(name="logDeliveryConfigurations", flag="unknown_logDeliveryConfigurations")
    private @Nullable List<ReplicationGroupLogDeliveryConfiguration> value_logDeliveryConfigurations;
    private boolean unknown_logDeliveryConfigurations;
    public @Nullable List<ReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations() {
        if (!unknown_logDeliveryConfigurations) return value_logDeliveryConfigurations;
        throw new UndeferrableValueException("Value 'ReplicationGroup.logDeliveryConfigurations' is not present");
    }

    /**
     * Specifies the weekly time range for when maintenance on the cache cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:05:00-sun:09:00`
     * 
     */
    @PolicyResourceProperty(name="maintenanceWindow", flag="unknown_maintenanceWindow")
    private String value_maintenanceWindow;
    private boolean unknown_maintenanceWindow;
    public String maintenanceWindow() {
        if (!unknown_maintenanceWindow) return value_maintenanceWindow;
        throw new UndeferrableValueException("Value 'ReplicationGroup.maintenanceWindow' is not present");
    }

    /**
     * Identifiers of all the nodes that are part of this replication group.
     * 
     */
    @PolicyResourceProperty(name="memberClusters", flag="unknown_memberClusters")
    private List<String> value_memberClusters;
    private boolean unknown_memberClusters;
    public List<String> memberClusters() {
        if (!unknown_memberClusters) return value_memberClusters;
        throw new UndeferrableValueException("Value 'ReplicationGroup.memberClusters' is not present");
    }

    /**
     * Specifies whether to enable Multi-AZ Support for the replication group.
     * If `true`, `automatic_failover_enabled` must also be enabled.
     * Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="multiAzEnabled", flag="unknown_multiAzEnabled")
    private @Nullable Boolean value_multiAzEnabled;
    private boolean unknown_multiAzEnabled;
    public @Nullable Boolean multiAzEnabled() {
        if (!unknown_multiAzEnabled) return value_multiAzEnabled;
        throw new UndeferrableValueException("Value 'ReplicationGroup.multiAzEnabled' is not present");
    }

    /**
     * The IP versions for cache cluster connections. Valid values are `ipv4`, `ipv6` or `dual_stack`.
     * 
     */
    @PolicyResourceProperty(name="networkType", flag="unknown_networkType")
    private String value_networkType;
    private boolean unknown_networkType;
    public String networkType() {
        if (!unknown_networkType) return value_networkType;
        throw new UndeferrableValueException("Value 'ReplicationGroup.networkType' is not present");
    }

    /**
     * Instance class to be used.
     * See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
     * Required unless `global_replication_group_id` is set.
     * Cannot be set if `global_replication_group_id` is set.
     * 
     */
    @PolicyResourceProperty(name="nodeType", flag="unknown_nodeType")
    private String value_nodeType;
    private boolean unknown_nodeType;
    public String nodeType() {
        if (!unknown_nodeType) return value_nodeType;
        throw new UndeferrableValueException("Value 'ReplicationGroup.nodeType' is not present");
    }

    /**
     * ARN of an SNS topic to send ElastiCache notifications to. Example: `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     * 
     */
    @PolicyResourceProperty(name="notificationTopicArn", flag="unknown_notificationTopicArn")
    private @Nullable String value_notificationTopicArn;
    private boolean unknown_notificationTopicArn;
    public @Nullable String notificationTopicArn() {
        if (!unknown_notificationTopicArn) return value_notificationTopicArn;
        throw new UndeferrableValueException("Value 'ReplicationGroup.notificationTopicArn' is not present");
    }

    /**
     * Number of cache clusters (primary and replicas) this replication group will have.
     * If `automatic_failover_enabled` or `multi_az_enabled` are `true`, must be at least 2.
     * Updates will occur before other modifications.
     * Conflicts with `num_node_groups` and `replicas_per_node_group`.
     * Defaults to `1`.
     * 
     */
    @PolicyResourceProperty(name="numCacheClusters", flag="unknown_numCacheClusters")
    private Integer value_numCacheClusters;
    private boolean unknown_numCacheClusters;
    public Integer numCacheClusters() {
        if (!unknown_numCacheClusters) return value_numCacheClusters;
        throw new UndeferrableValueException("Value 'ReplicationGroup.numCacheClusters' is not present");
    }

    /**
     * Number of node groups (shards) for this Redis replication group.
     * Changing this number will trigger a resizing operation before other settings modifications.
     * Conflicts with `num_cache_clusters`.
     * 
     */
    @PolicyResourceProperty(name="numNodeGroups", flag="unknown_numNodeGroups")
    private Integer value_numNodeGroups;
    private boolean unknown_numNodeGroups;
    public Integer numNodeGroups() {
        if (!unknown_numNodeGroups) return value_numNodeGroups;
        throw new UndeferrableValueException("Value 'ReplicationGroup.numNodeGroups' is not present");
    }

    /**
     * Name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. To enable &#34;cluster mode&#34;, i.e., data sharding, use a parameter group that has the parameter `cluster-enabled` set to true.
     * 
     */
    @PolicyResourceProperty(name="parameterGroupName", flag="unknown_parameterGroupName")
    private String value_parameterGroupName;
    private boolean unknown_parameterGroupName;
    public String parameterGroupName() {
        if (!unknown_parameterGroupName) return value_parameterGroupName;
        throw new UndeferrableValueException("Value 'ReplicationGroup.parameterGroupName' is not present");
    }

    /**
     * Port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private @Nullable Integer value_port;
    private boolean unknown_port;
    public @Nullable Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'ReplicationGroup.port' is not present");
    }

    /**
     * List of EC2 availability zones in which the replication group&#39;s cache clusters will be created. The order of the availability zones in the list is considered. The first item in the list will be the primary node. Ignored when updating.
     * 
     */
    @PolicyResourceProperty(name="preferredCacheClusterAzs", flag="unknown_preferredCacheClusterAzs")
    private @Nullable List<String> value_preferredCacheClusterAzs;
    private boolean unknown_preferredCacheClusterAzs;
    public @Nullable List<String> preferredCacheClusterAzs() {
        if (!unknown_preferredCacheClusterAzs) return value_preferredCacheClusterAzs;
        throw new UndeferrableValueException("Value 'ReplicationGroup.preferredCacheClusterAzs' is not present");
    }

    /**
     * (Redis only) Address of the endpoint for the primary node in the replication group, if the cluster mode is disabled.
     * 
     */
    @PolicyResourceProperty(name="primaryEndpointAddress", flag="unknown_primaryEndpointAddress")
    private String value_primaryEndpointAddress;
    private boolean unknown_primaryEndpointAddress;
    public String primaryEndpointAddress() {
        if (!unknown_primaryEndpointAddress) return value_primaryEndpointAddress;
        throw new UndeferrableValueException("Value 'ReplicationGroup.primaryEndpointAddress' is not present");
    }

    /**
     * (Redis only) Address of the endpoint for the reader node in the replication group, if the cluster mode is disabled.
     * 
     */
    @PolicyResourceProperty(name="readerEndpointAddress", flag="unknown_readerEndpointAddress")
    private String value_readerEndpointAddress;
    private boolean unknown_readerEndpointAddress;
    public String readerEndpointAddress() {
        if (!unknown_readerEndpointAddress) return value_readerEndpointAddress;
        throw new UndeferrableValueException("Value 'ReplicationGroup.readerEndpointAddress' is not present");
    }

    /**
     * Number of replica nodes in each node group.
     * Changing this number will trigger a resizing operation before other settings modifications.
     * Valid values are 0 to 5.
     * Conflicts with `num_cache_clusters`.
     * Can only be set if `num_node_groups` is set.
     * 
     */
    @PolicyResourceProperty(name="replicasPerNodeGroup", flag="unknown_replicasPerNodeGroup")
    private Integer value_replicasPerNodeGroup;
    private boolean unknown_replicasPerNodeGroup;
    public Integer replicasPerNodeGroup() {
        if (!unknown_replicasPerNodeGroup) return value_replicasPerNodeGroup;
        throw new UndeferrableValueException("Value 'ReplicationGroup.replicasPerNodeGroup' is not present");
    }

    /**
     * Replication group identifier. This parameter is stored as a lowercase string.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="replicationGroupId", flag="unknown_replicationGroupId")
    private String value_replicationGroupId;
    private boolean unknown_replicationGroupId;
    public String replicationGroupId() {
        if (!unknown_replicationGroupId) return value_replicationGroupId;
        throw new UndeferrableValueException("Value 'ReplicationGroup.replicationGroupId' is not present");
    }

    /**
     * IDs of one or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud.
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'ReplicationGroup.securityGroupIds' is not present");
    }

    /**
     * Names of one or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud.
     * 
     */
    @PolicyResourceProperty(name="securityGroupNames", flag="unknown_securityGroupNames")
    private List<String> value_securityGroupNames;
    private boolean unknown_securityGroupNames;
    public List<String> securityGroupNames() {
        if (!unknown_securityGroupNames) return value_securityGroupNames;
        throw new UndeferrableValueException("Value 'ReplicationGroup.securityGroupNames' is not present");
    }

    /**
     * List of ARNs that identify Redis RDB snapshot files stored in Amazon S3. The names object names cannot contain any commas.
     * 
     */
    @PolicyResourceProperty(name="snapshotArns", flag="unknown_snapshotArns")
    private @Nullable List<String> value_snapshotArns;
    private boolean unknown_snapshotArns;
    public @Nullable List<String> snapshotArns() {
        if (!unknown_snapshotArns) return value_snapshotArns;
        throw new UndeferrableValueException("Value 'ReplicationGroup.snapshotArns' is not present");
    }

    /**
     * Name of a snapshot from which to restore data into the new node group. Changing the `snapshot_name` forces a new resource.
     * 
     */
    @PolicyResourceProperty(name="snapshotName", flag="unknown_snapshotName")
    private @Nullable String value_snapshotName;
    private boolean unknown_snapshotName;
    public @Nullable String snapshotName() {
        if (!unknown_snapshotName) return value_snapshotName;
        throw new UndeferrableValueException("Value 'ReplicationGroup.snapshotName' is not present");
    }

    /**
     * Number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of `snapshot_retention_limit` is set to zero (0), backups are turned off. Please note that setting a `snapshot_retention_limit` is not supported on cache.t1.micro cache nodes
     * 
     */
    @PolicyResourceProperty(name="snapshotRetentionLimit", flag="unknown_snapshotRetentionLimit")
    private @Nullable Integer value_snapshotRetentionLimit;
    private boolean unknown_snapshotRetentionLimit;
    public @Nullable Integer snapshotRetentionLimit() {
        if (!unknown_snapshotRetentionLimit) return value_snapshotRetentionLimit;
        throw new UndeferrableValueException("Value 'ReplicationGroup.snapshotRetentionLimit' is not present");
    }

    /**
     * Daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: `05:00-09:00`
     * 
     */
    @PolicyResourceProperty(name="snapshotWindow", flag="unknown_snapshotWindow")
    private String value_snapshotWindow;
    private boolean unknown_snapshotWindow;
    public String snapshotWindow() {
        if (!unknown_snapshotWindow) return value_snapshotWindow;
        throw new UndeferrableValueException("Value 'ReplicationGroup.snapshotWindow' is not present");
    }

    /**
     * Name of the cache subnet group to be used for the replication group.
     * 
     */
    @PolicyResourceProperty(name="subnetGroupName", flag="unknown_subnetGroupName")
    private String value_subnetGroupName;
    private boolean unknown_subnetGroupName;
    public String subnetGroupName() {
        if (!unknown_subnetGroupName) return value_subnetGroupName;
        throw new UndeferrableValueException("Value 'ReplicationGroup.subnetGroupName' is not present");
    }

    /**
     * Map of tags to assign to the resource. Adding tags to this resource will add or overwrite any existing tags on the clusters in the replication group and not to the group itself. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ReplicationGroup.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ReplicationGroup.tagsAll' is not present");
    }

    /**
     * Whether to enable encryption in transit.
     * Changing this argument with an `engine_version` &lt; `7.0.5` will force a replacement.
     * Engine versions prior to `7.0.5` only allow this transit encryption to be configured during creation of the replication group.
     * 
     */
    @PolicyResourceProperty(name="transitEncryptionEnabled", flag="unknown_transitEncryptionEnabled")
    private Boolean value_transitEncryptionEnabled;
    private boolean unknown_transitEncryptionEnabled;
    public Boolean transitEncryptionEnabled() {
        if (!unknown_transitEncryptionEnabled) return value_transitEncryptionEnabled;
        throw new UndeferrableValueException("Value 'ReplicationGroup.transitEncryptionEnabled' is not present");
    }

    /**
     * A setting that enables clients to migrate to in-transit encryption with no downtime.
     * Valid values are `preferred` and `required`.
     * When enabling encryption on an existing replication group, this must first be set to `preferred` before setting it to `required` in a subsequent apply.
     * See the `TransitEncryptionMode` field in the [`CreateReplicationGroup` API documentation](https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateReplicationGroup.html) for additional details.
     * 
     */
    @PolicyResourceProperty(name="transitEncryptionMode", flag="unknown_transitEncryptionMode")
    private String value_transitEncryptionMode;
    private boolean unknown_transitEncryptionMode;
    public String transitEncryptionMode() {
        if (!unknown_transitEncryptionMode) return value_transitEncryptionMode;
        throw new UndeferrableValueException("Value 'ReplicationGroup.transitEncryptionMode' is not present");
    }

    /**
     * User Group ID to associate with the replication group. Only a maximum of one (1) user group ID is valid. **NOTE:** This argument _is_ a set because the AWS specification allows for multiple IDs. However, in practice, AWS only allows a maximum size of one.
     * 
     */
    @PolicyResourceProperty(name="userGroupIds", flag="unknown_userGroupIds")
    private @Nullable List<String> value_userGroupIds;
    private boolean unknown_userGroupIds;
    public @Nullable List<String> userGroupIds() {
        if (!unknown_userGroupIds) return value_userGroupIds;
        throw new UndeferrableValueException("Value 'ReplicationGroup.userGroupIds' is not present");
    }

}
