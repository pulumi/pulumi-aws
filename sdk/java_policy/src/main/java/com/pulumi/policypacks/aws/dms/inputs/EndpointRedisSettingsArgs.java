// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class EndpointRedisSettingsArgs {

    /**
     * The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
     * 
     */
    @PolicyResourceProperty(name="authPassword", flag="unknown_authPassword")
    private String value_authPassword;
    private boolean unknown_authPassword;
    public String authPassword() {
        if (!unknown_authPassword) return value_authPassword;
        throw new UndeferrableValueException("Value 'EndpointRedisSettingsArgs.authPassword' is not present");
    }

    /**
     * The type of authentication to perform when connecting to a Redis target. Options include `none`, `auth-token`, and `auth-role`. The `auth-token` option requires an `auth_password` value to be provided. The `auth-role` option requires `auth_user_name` and `auth_password` values to be provided.
     * 
     */
    @PolicyResourceProperty(name="authType", flag="unknown_authType")
    private String value_authType;
    private boolean unknown_authType;
    public String authType() {
        if (!unknown_authType) return value_authType;
        throw new UndeferrableValueException("Value 'EndpointRedisSettingsArgs.authType' is not present");
    }

    /**
     * The username provided with the `auth-role` option of the AuthType setting for a Redis target endpoint.
     * 
     */
    @PolicyResourceProperty(name="authUserName", flag="unknown_authUserName")
    private String value_authUserName;
    private boolean unknown_authUserName;
    public String authUserName() {
        if (!unknown_authUserName) return value_authUserName;
        throw new UndeferrableValueException("Value 'EndpointRedisSettingsArgs.authUserName' is not present");
    }

    /**
     * Transmission Control Protocol (TCP) port for the endpoint.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'EndpointRedisSettingsArgs.port' is not present");
    }

    /**
     * Fully qualified domain name of the endpoint.
     * 
     */
    @PolicyResourceProperty(name="serverName", flag="unknown_serverName")
    private String value_serverName;
    private boolean unknown_serverName;
    public String serverName() {
        if (!unknown_serverName) return value_serverName;
        throw new UndeferrableValueException("Value 'EndpointRedisSettingsArgs.serverName' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
     * 
     */
    @PolicyResourceProperty(name="sslCaCertificateArn", flag="unknown_sslCaCertificateArn")
    private String value_sslCaCertificateArn;
    private boolean unknown_sslCaCertificateArn;
    public String sslCaCertificateArn() {
        if (!unknown_sslCaCertificateArn) return value_sslCaCertificateArn;
        throw new UndeferrableValueException("Value 'EndpointRedisSettingsArgs.sslCaCertificateArn' is not present");
    }

    /**
     * The plaintext option doesn&#39;t provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include `plaintext`, `ssl-encryption`. The default is `ssl-encryption`.
     * 
     */
    @PolicyResourceProperty(name="sslSecurityProtocol", flag="unknown_sslSecurityProtocol")
    private String value_sslSecurityProtocol;
    private boolean unknown_sslSecurityProtocol;
    public String sslSecurityProtocol() {
        if (!unknown_sslSecurityProtocol) return value_sslSecurityProtocol;
        throw new UndeferrableValueException("Value 'EndpointRedisSettingsArgs.sslSecurityProtocol' is not present");
    }

}
