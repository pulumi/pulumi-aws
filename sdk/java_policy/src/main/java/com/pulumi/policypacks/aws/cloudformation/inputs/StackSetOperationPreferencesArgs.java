// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudformation.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class StackSetOperationPreferencesArgs {

    /**
     * The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
     * 
     */
    private UndeferrableValue<Integer> failureToleranceCount;

    public Integer failureToleranceCount() {
        if (failureToleranceCount == null) return null;
        return failureToleranceCount.getValue("StackSetOperationPreferencesArgs.failureToleranceCount");
    }

    /**
     * The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
     * 
     */
    private UndeferrableValue<Integer> failureTolerancePercentage;

    public Integer failureTolerancePercentage() {
        if (failureTolerancePercentage == null) return null;
        return failureTolerancePercentage.getValue("StackSetOperationPreferencesArgs.failureTolerancePercentage");
    }

    /**
     * The maximum number of accounts in which to perform this operation at one time.
     * 
     */
    private UndeferrableValue<Integer> maxConcurrentCount;

    public Integer maxConcurrentCount() {
        if (maxConcurrentCount == null) return null;
        return maxConcurrentCount.getValue("StackSetOperationPreferencesArgs.maxConcurrentCount");
    }

    /**
     * The maximum percentage of accounts in which to perform this operation at one time.
     * 
     */
    private UndeferrableValue<Integer> maxConcurrentPercentage;

    public Integer maxConcurrentPercentage() {
        if (maxConcurrentPercentage == null) return null;
        return maxConcurrentPercentage.getValue("StackSetOperationPreferencesArgs.maxConcurrentPercentage");
    }

    /**
     * The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
     * 
     */
    private UndeferrableValue<String> regionConcurrencyType;

    public String regionConcurrencyType() {
        if (regionConcurrencyType == null) return null;
        return regionConcurrencyType.getValue("StackSetOperationPreferencesArgs.regionConcurrencyType");
    }

    /**
     * The order of the Regions in where you want to perform the stack operation.
     * 
     */
    private UndeferrableValue<List<String>> regionOrders;

    public List<String> regionOrders() {
        if (regionOrders == null) return null;
        return regionOrders.getValue("StackSetOperationPreferencesArgs.regionOrders");
    }

}
