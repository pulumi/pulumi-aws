// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkfirewall;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationCertificate;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationCertificateAuthority;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationEncryptionConfiguration;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationTimeouts;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationTlsInspectionConfiguration;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:networkfirewall/tlsInspectionConfiguration:TlsInspectionConfiguration")
public final class TlsInspectionConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the TLS Inspection Configuration.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("TlsInspectionConfiguration.arn");
    }

    /**
     * Certificate Manager certificate block. See Certificate Authority below for details.
     * 
     */
    private UndeferrableValue<List<TlsInspectionConfigurationCertificateAuthority>> certificateAuthorities;

    public List<TlsInspectionConfigurationCertificateAuthority> certificateAuthorities() {
        if (certificateAuthorities == null) return null;
        return certificateAuthorities.getValue("TlsInspectionConfiguration.certificateAuthorities");
    }

    /**
     * List of certificate blocks describing certificates associated with the TLS inspection configuration. See Certificates below for details.
     * 
     */
    private UndeferrableValue<List<TlsInspectionConfigurationCertificate>> certificates;

    public List<TlsInspectionConfigurationCertificate> certificates() {
        if (certificates == null) return null;
        return certificates.getValue("TlsInspectionConfiguration.certificates");
    }

    /**
     * Description of the TLS inspection configuration.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("TlsInspectionConfiguration.description");
    }

    /**
     * Encryption configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<List<TlsInspectionConfigurationEncryptionConfiguration>> encryptionConfigurations;

    public List<TlsInspectionConfigurationEncryptionConfiguration> encryptionConfigurations() {
        if (encryptionConfigurations == null) return null;
        return encryptionConfigurations.getValue("TlsInspectionConfiguration.encryptionConfigurations");
    }

    /**
     * Descriptive name of the TLS inspection configuration.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("TlsInspectionConfiguration.name");
    }

    /**
     * Number of firewall policies that use this TLS inspection configuration.
     * 
     */
    private UndeferrableValue<Integer> numberOfAssociations;

    public Integer numberOfAssociations() {
        if (numberOfAssociations == null) return null;
        return numberOfAssociations.getValue("TlsInspectionConfiguration.numberOfAssociations");
    }

    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TlsInspectionConfiguration.tags");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("TlsInspectionConfiguration.tagsAll");
    }

    private @Nullable UndeferrableValue<TlsInspectionConfigurationTimeouts> timeouts;

    public @Nullable TlsInspectionConfigurationTimeouts timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("TlsInspectionConfiguration.timeouts");
    }

    /**
     * TLS inspection configuration block. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    private @Nullable UndeferrableValue<TlsInspectionConfigurationTlsInspectionConfiguration> tlsInspectionConfiguration;

    public @Nullable TlsInspectionConfigurationTlsInspectionConfiguration tlsInspectionConfiguration() {
        if (tlsInspectionConfiguration == null) return null;
        return tlsInspectionConfiguration.getValue("TlsInspectionConfiguration.tlsInspectionConfiguration");
    }

    /**
     * A unique identifier for the TLS inspection configuration.
     * 
     */
    private UndeferrableValue<String> tlsInspectionConfigurationId;

    public String tlsInspectionConfigurationId() {
        if (tlsInspectionConfigurationId == null) return null;
        return tlsInspectionConfigurationId.getValue("TlsInspectionConfiguration.tlsInspectionConfigurationId");
    }

    /**
     * String token used when updating the rule group.
     * 
     */
    private UndeferrableValue<String> updateToken;

    public String updateToken() {
        if (updateToken == null) return null;
        return updateToken.getValue("TlsInspectionConfiguration.updateToken");
    }

}
