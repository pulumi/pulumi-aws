// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkfirewall;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationCertificate;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationCertificateAuthority;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationEncryptionConfiguration;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationTimeouts;
import com.pulumi.policypacks.aws.networkfirewall.outputs.TlsInspectionConfigurationTlsInspectionConfiguration;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:networkfirewall/tlsInspectionConfiguration:TlsInspectionConfiguration")
public final class TlsInspectionConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the TLS Inspection Configuration.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.arn' is not present");
    }

    /**
     * Certificate Manager certificate block. See Certificate Authority below for details.
     * 
     */
    @PolicyResourceProperty(name="certificateAuthorities", flag="unknown_certificateAuthorities")
    private List<TlsInspectionConfigurationCertificateAuthority> value_certificateAuthorities;
    private boolean unknown_certificateAuthorities;
    public List<TlsInspectionConfigurationCertificateAuthority> certificateAuthorities() {
        if (!unknown_certificateAuthorities) return value_certificateAuthorities;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.certificateAuthorities' is not present");
    }

    /**
     * List of certificate blocks describing certificates associated with the TLS inspection configuration. See Certificates below for details.
     * 
     */
    @PolicyResourceProperty(name="certificates", flag="unknown_certificates")
    private List<TlsInspectionConfigurationCertificate> value_certificates;
    private boolean unknown_certificates;
    public List<TlsInspectionConfigurationCertificate> certificates() {
        if (!unknown_certificates) return value_certificates;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.certificates' is not present");
    }

    /**
     * Description of the TLS inspection configuration.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.description' is not present");
    }

    /**
     * Encryption configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="encryptionConfigurations", flag="unknown_encryptionConfigurations")
    private List<TlsInspectionConfigurationEncryptionConfiguration> value_encryptionConfigurations;
    private boolean unknown_encryptionConfigurations;
    public List<TlsInspectionConfigurationEncryptionConfiguration> encryptionConfigurations() {
        if (!unknown_encryptionConfigurations) return value_encryptionConfigurations;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.encryptionConfigurations' is not present");
    }

    /**
     * Descriptive name of the TLS inspection configuration.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.name' is not present");
    }

    /**
     * Number of firewall policies that use this TLS inspection configuration.
     * 
     */
    @PolicyResourceProperty(name="numberOfAssociations", flag="unknown_numberOfAssociations")
    private Integer value_numberOfAssociations;
    private boolean unknown_numberOfAssociations;
    public Integer numberOfAssociations() {
        if (!unknown_numberOfAssociations) return value_numberOfAssociations;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.numberOfAssociations' is not present");
    }

    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable TlsInspectionConfigurationTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable TlsInspectionConfigurationTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.timeouts' is not present");
    }

    /**
     * TLS inspection configuration block. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="tlsInspectionConfiguration", flag="unknown_tlsInspectionConfiguration")
    private @Nullable TlsInspectionConfigurationTlsInspectionConfiguration value_tlsInspectionConfiguration;
    private boolean unknown_tlsInspectionConfiguration;
    public @Nullable TlsInspectionConfigurationTlsInspectionConfiguration tlsInspectionConfiguration() {
        if (!unknown_tlsInspectionConfiguration) return value_tlsInspectionConfiguration;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.tlsInspectionConfiguration' is not present");
    }

    /**
     * A unique identifier for the TLS inspection configuration.
     * 
     */
    @PolicyResourceProperty(name="tlsInspectionConfigurationId", flag="unknown_tlsInspectionConfigurationId")
    private String value_tlsInspectionConfigurationId;
    private boolean unknown_tlsInspectionConfigurationId;
    public String tlsInspectionConfigurationId() {
        if (!unknown_tlsInspectionConfigurationId) return value_tlsInspectionConfigurationId;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.tlsInspectionConfigurationId' is not present");
    }

    /**
     * String token used when updating the rule group.
     * 
     */
    @PolicyResourceProperty(name="updateToken", flag="unknown_updateToken")
    private String value_updateToken;
    private boolean unknown_updateToken;
    public String updateToken() {
        if (!unknown_updateToken) return value_updateToken;
        throw new UndeferrableValueException("Value 'TlsInspectionConfiguration.updateToken' is not present");
    }

}
