// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ssmincidents;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ssmincidents.outputs.ReplicationSetRegion;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ssmincidents/replicationSet:ReplicationSet")
public final class ReplicationSet extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the replication set.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ReplicationSet.arn' is not present");
    }

    /**
     * The ARN of the user who created the replication set.
     * 
     */
    @PolicyResourceProperty(name="createdBy", flag="unknown_createdBy")
    private String value_createdBy;
    private boolean unknown_createdBy;
    public String createdBy() {
        if (!unknown_createdBy) return value_createdBy;
        throw new UndeferrableValueException("Value 'ReplicationSet.createdBy' is not present");
    }

    /**
     * If `true`, the last region in a replication set cannot be deleted.
     * 
     */
    @PolicyResourceProperty(name="deletionProtected", flag="unknown_deletionProtected")
    private Boolean value_deletionProtected;
    private boolean unknown_deletionProtected;
    public Boolean deletionProtected() {
        if (!unknown_deletionProtected) return value_deletionProtected;
        throw new UndeferrableValueException("Value 'ReplicationSet.deletionProtected' is not present");
    }

    /**
     * A timestamp showing when the replication set was last modified.
     * 
     */
    @PolicyResourceProperty(name="lastModifiedBy", flag="unknown_lastModifiedBy")
    private String value_lastModifiedBy;
    private boolean unknown_lastModifiedBy;
    public String lastModifiedBy() {
        if (!unknown_lastModifiedBy) return value_lastModifiedBy;
        throw new UndeferrableValueException("Value 'ReplicationSet.lastModifiedBy' is not present");
    }

    @PolicyResourceProperty(name="regions", flag="unknown_regions")
    private List<ReplicationSetRegion> value_regions;
    private boolean unknown_regions;
    public List<ReplicationSetRegion> regions() {
        if (!unknown_regions) return value_regions;
        throw new UndeferrableValueException("Value 'ReplicationSet.regions' is not present");
    }

    /**
     * The current status of the Region.
     * * Valid Values: `ACTIVE` | `CREATING` | `UPDATING` | `DELETING` | `FAILED`
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'ReplicationSet.status' is not present");
    }

    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ReplicationSet.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ReplicationSet.tagsAll' is not present");
    }

}
