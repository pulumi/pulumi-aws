// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class ContainerServiceDeploymentVersionContainerArgs {

    /**
     * The launch command for the container. A list of string.
     * 
     */
    private UndeferrableValue<List<String>> commands;

    public List<String> commands() {
        if (commands == null) return null;
        return commands.getValue("ContainerServiceDeploymentVersionContainerArgs.commands");
    }

    /**
     * The name for the container.
     * 
     */
    private UndeferrableValue<String> containerName;

    public String containerName() {
        if (containerName == null) return null;
        return containerName.getValue("ContainerServiceDeploymentVersionContainerArgs.containerName");
    }

    /**
     * A key-value map of the environment variables of the container.
     * 
     */
    private UndeferrableValue<Map<String,String>> environment;

    public Map<String,String> environment() {
        if (environment == null) return null;
        return environment.getValue("ContainerServiceDeploymentVersionContainerArgs.environment");
    }

    /**
     * The name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don&#39;t start with a colon. For example, `nginx:latest` or `nginx`.
     * 
     */
    private UndeferrableValue<String> image;

    public String image() {
        if (image == null) return null;
        return image.getValue("ContainerServiceDeploymentVersionContainerArgs.image");
    }

    /**
     * A key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
     * 
     */
    private UndeferrableValue<Map<String,String>> ports;

    public Map<String,String> ports() {
        if (ports == null) return null;
        return ports.getValue("ContainerServiceDeploymentVersionContainerArgs.ports");
    }

}
