// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticache/globalReplicationGroup:GlobalReplicationGroup")
public final class GlobalReplicationGroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
     * When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
     * 
     */
    @PolicyResourceProperty(name="automaticFailoverEnabled", flag="unknown_automaticFailoverEnabled")
    private Boolean value_automaticFailoverEnabled;
    private boolean unknown_automaticFailoverEnabled;
    public Boolean automaticFailoverEnabled() {
        if (!unknown_automaticFailoverEnabled) return value_automaticFailoverEnabled;
        throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.automaticFailoverEnabled' is not present");
    }

    /**
     * The instance class used.
     * See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
     * and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
     * When creating, by default the Global Replication Group inherits the node type of the primary replication group.
     * 
     */
    @PolicyResourceProperty(name="cacheNodeType", flag="unknown_cacheNodeType")
    private String value_cacheNodeType;
    private boolean unknown_cacheNodeType;
    public String cacheNodeType() {
        if (!unknown_cacheNodeType) return value_cacheNodeType;
        throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.cacheNodeType' is not present");
    }

    /**
     * Redis version to use for the Global Replication Group.
     * When creating, by default the Global Replication Group inherits the version of the primary replication group.
     * If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
     * Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
     * When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
     * When the version is 6, the major and minor version can be set, e.g., `6.2`,
     * or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
     * The actual engine version used is returned in the attribute `engine_version_actual`, see Attribute Reference below.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.engineVersion' is not present");
    }

    /**
     * A user-created description for the global replication group.
     * 
     */
    @PolicyResourceProperty(name="globalReplicationGroupDescription", flag="unknown_globalReplicationGroupDescription")
    private String value_globalReplicationGroupDescription;
    private boolean unknown_globalReplicationGroupDescription;
    public String globalReplicationGroupDescription() {
        if (!unknown_globalReplicationGroupDescription) return value_globalReplicationGroupDescription;
        throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.globalReplicationGroupDescription' is not present");
    }

    /**
     * The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
     * 
     */
    @PolicyResourceProperty(name="globalReplicationGroupIdSuffix", flag="unknown_globalReplicationGroupIdSuffix")
    private String value_globalReplicationGroupIdSuffix;
    private boolean unknown_globalReplicationGroupIdSuffix;
    public String globalReplicationGroupIdSuffix() {
        if (!unknown_globalReplicationGroupIdSuffix) return value_globalReplicationGroupIdSuffix;
        throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.globalReplicationGroupIdSuffix' is not present");
    }

    /**
     * The number of node groups (shards) on the global replication group.
     * 
     */
    @PolicyResourceProperty(name="numNodeGroups", flag="unknown_numNodeGroups")
    private Integer value_numNodeGroups;
    private boolean unknown_numNodeGroups;
    public Integer numNodeGroups() {
        if (!unknown_numNodeGroups) return value_numNodeGroups;
        throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.numNodeGroups' is not present");
    }

    /**
     * An ElastiCache Parameter Group to use for the Global Replication Group.
     * Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
     * Specifying without a major version upgrade will fail.
     * Note that ElastiCache creates a copy of this parameter group for each member replication group.
     * 
     */
    @PolicyResourceProperty(name="parameterGroupName", flag="unknown_parameterGroupName")
    private String value_parameterGroupName;
    private boolean unknown_parameterGroupName;
    public String parameterGroupName() {
        if (!unknown_parameterGroupName) return value_parameterGroupName;
        throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.parameterGroupName' is not present");
    }

    /**
     * The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
     * 
     */
    @PolicyResourceProperty(name="primaryReplicationGroupId", flag="unknown_primaryReplicationGroupId")
    private String value_primaryReplicationGroupId;
    private boolean unknown_primaryReplicationGroupId;
    public String primaryReplicationGroupId() {
        if (!unknown_primaryReplicationGroupId) return value_primaryReplicationGroupId;
        throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.primaryReplicationGroupId' is not present");
    }

}
