// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.sagemaker.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.sagemaker.outputs.ModelContainerImageConfig;
import com.pulumi.policypacks.aws.sagemaker.outputs.ModelContainerModelDataSource;
import com.pulumi.policypacks.aws.sagemaker.outputs.ModelContainerMultiModelConfig;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class ModelContainer {

    /**
     * The DNS host name for the container.
     * 
     */
    @PolicyResourceProperty(name="containerHostname", flag="unknown_containerHostname")
    private @Nullable String value_containerHostname;
    private boolean unknown_containerHostname;
    public @Nullable String containerHostname() {
        if (!unknown_containerHostname) return value_containerHostname;
        throw new UndeferrableValueException("Value 'ModelContainer.containerHostname' is not present");
    }

    /**
     * Environment variables for the Docker container.
     * A list of key value pairs.
     * 
     */
    @PolicyResourceProperty(name="environment", flag="unknown_environment")
    private @Nullable Map<String,String> value_environment;
    private boolean unknown_environment;
    public @Nullable Map<String,String> environment() {
        if (!unknown_environment) return value_environment;
        throw new UndeferrableValueException("Value 'ModelContainer.environment' is not present");
    }

    /**
     * The registry path where the inference code image is stored in Amazon ECR.
     * 
     */
    @PolicyResourceProperty(name="image", flag="unknown_image")
    private @Nullable String value_image;
    private boolean unknown_image;
    public @Nullable String image() {
        if (!unknown_image) return value_image;
        throw new UndeferrableValueException("Value 'ModelContainer.image' is not present");
    }

    /**
     * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
     * 
     */
    @PolicyResourceProperty(name="imageConfig", flag="unknown_imageConfig")
    private @Nullable ModelContainerImageConfig value_imageConfig;
    private boolean unknown_imageConfig;
    public @Nullable ModelContainerImageConfig imageConfig() {
        if (!unknown_imageConfig) return value_imageConfig;
        throw new UndeferrableValueException("Value 'ModelContainer.imageConfig' is not present");
    }

    /**
     * The inference specification name in the model package version.
     * 
     */
    @PolicyResourceProperty(name="inferenceSpecificationName", flag="unknown_inferenceSpecificationName")
    private @Nullable String value_inferenceSpecificationName;
    private boolean unknown_inferenceSpecificationName;
    public @Nullable String inferenceSpecificationName() {
        if (!unknown_inferenceSpecificationName) return value_inferenceSpecificationName;
        throw new UndeferrableValueException("Value 'ModelContainer.inferenceSpecificationName' is not present");
    }

    /**
     * The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
     * 
     */
    @PolicyResourceProperty(name="mode", flag="unknown_mode")
    private @Nullable String value_mode;
    private boolean unknown_mode;
    public @Nullable String mode() {
        if (!unknown_mode) return value_mode;
        throw new UndeferrableValueException("Value 'ModelContainer.mode' is not present");
    }

    /**
     * The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see [Deploying uncompressed models](https://docs.aws.amazon.com/sagemaker/latest/dg/large-model-inference-uncompressed.html) in the _AWS SageMaker AI Developer Guide_.
     * 
     */
    @PolicyResourceProperty(name="modelDataSource", flag="unknown_modelDataSource")
    private @Nullable ModelContainerModelDataSource value_modelDataSource;
    private boolean unknown_modelDataSource;
    public @Nullable ModelContainerModelDataSource modelDataSource() {
        if (!unknown_modelDataSource) return value_modelDataSource;
        throw new UndeferrableValueException("Value 'ModelContainer.modelDataSource' is not present");
    }

    /**
     * The URL for the S3 location where model artifacts are stored.
     * 
     */
    @PolicyResourceProperty(name="modelDataUrl", flag="unknown_modelDataUrl")
    private @Nullable String value_modelDataUrl;
    private boolean unknown_modelDataUrl;
    public @Nullable String modelDataUrl() {
        if (!unknown_modelDataUrl) return value_modelDataUrl;
        throw new UndeferrableValueException("Value 'ModelContainer.modelDataUrl' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the model package to use to create the model.
     * 
     */
    @PolicyResourceProperty(name="modelPackageName", flag="unknown_modelPackageName")
    private @Nullable String value_modelPackageName;
    private boolean unknown_modelPackageName;
    public @Nullable String modelPackageName() {
        if (!unknown_modelPackageName) return value_modelPackageName;
        throw new UndeferrableValueException("Value 'ModelContainer.modelPackageName' is not present");
    }

    /**
     * Specifies additional configuration for multi-model endpoints. see Multi Model Config.
     * 
     */
    @PolicyResourceProperty(name="multiModelConfig", flag="unknown_multiModelConfig")
    private @Nullable ModelContainerMultiModelConfig value_multiModelConfig;
    private boolean unknown_multiModelConfig;
    public @Nullable ModelContainerMultiModelConfig multiModelConfig() {
        if (!unknown_multiModelConfig) return value_multiModelConfig;
        throw new UndeferrableValueException("Value 'ModelContainer.multiModelConfig' is not present");
    }

}
