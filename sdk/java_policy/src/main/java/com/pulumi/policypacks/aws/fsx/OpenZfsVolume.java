// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.fsx.outputs.OpenZfsVolumeNfsExports;
import com.pulumi.policypacks.aws.fsx.outputs.OpenZfsVolumeOriginSnapshot;
import com.pulumi.policypacks.aws.fsx.outputs.OpenZfsVolumeUserAndGroupQuota;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:fsx/openZfsVolume:OpenZfsVolume")
public final class OpenZfsVolume extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name of the file system.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.arn' is not present");
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
     * 
     */
    @PolicyResourceProperty(name="copyTagsToSnapshots", flag="unknown_copyTagsToSnapshots")
    private @Nullable Boolean value_copyTagsToSnapshots;
    private boolean unknown_copyTagsToSnapshots;
    public @Nullable Boolean copyTagsToSnapshots() {
        if (!unknown_copyTagsToSnapshots) return value_copyTagsToSnapshots;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.copyTagsToSnapshots' is not present");
    }

    /**
     * Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don&#39;t specify compression option will inherit from parent volume. This option on file system applies to the root volume.
     * 
     */
    @PolicyResourceProperty(name="dataCompressionType", flag="unknown_dataCompressionType")
    private @Nullable String value_dataCompressionType;
    private boolean unknown_dataCompressionType;
    public @Nullable String dataCompressionType() {
        if (!unknown_dataCompressionType) return value_dataCompressionType;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.dataCompressionType' is not present");
    }

    /**
     * Whether to delete all child volumes and snapshots. Valid values: `DELETE_CHILD_VOLUMES_AND_SNAPSHOTS`. This configuration must be applied separately before attempting to delete the resource to have the desired behavior..
     * 
     */
    @PolicyResourceProperty(name="deleteVolumeOptions", flag="unknown_deleteVolumeOptions")
    private @Nullable String value_deleteVolumeOptions;
    private boolean unknown_deleteVolumeOptions;
    public @Nullable String deleteVolumeOptions() {
        if (!unknown_deleteVolumeOptions) return value_deleteVolumeOptions;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.deleteVolumeOptions' is not present");
    }

    /**
     * The name of the Volume. You can use a maximum of 203 alphanumeric characters, plus the underscore (_) special character.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.name' is not present");
    }

    /**
     * NFS export configuration for the root volume. Exactly 1 item. See `nfs_exports` Block Below for details.
     * 
     */
    @PolicyResourceProperty(name="nfsExports", flag="unknown_nfsExports")
    private @Nullable OpenZfsVolumeNfsExports value_nfsExports;
    private boolean unknown_nfsExports;
    public @Nullable OpenZfsVolumeNfsExports nfsExports() {
        if (!unknown_nfsExports) return value_nfsExports;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.nfsExports' is not present");
    }

    /**
     * Specifies the configuration to use when creating the OpenZFS volume. See `origin_snapshot` Block below for details.
     * 
     */
    @PolicyResourceProperty(name="originSnapshot", flag="unknown_originSnapshot")
    private @Nullable OpenZfsVolumeOriginSnapshot value_originSnapshot;
    private boolean unknown_originSnapshot;
    public @Nullable OpenZfsVolumeOriginSnapshot originSnapshot() {
        if (!unknown_originSnapshot) return value_originSnapshot;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.originSnapshot' is not present");
    }

    /**
     * The volume id of volume that will be the parent volume for the volume being created, this could be the root volume created from the `aws.fsx.OpenZfsFileSystem` resource with the `root_volume_id` or the `id` property of another `aws.fsx.OpenZfsVolume`.
     * 
     */
    @PolicyResourceProperty(name="parentVolumeId", flag="unknown_parentVolumeId")
    private String value_parentVolumeId;
    private boolean unknown_parentVolumeId;
    public String parentVolumeId() {
        if (!unknown_parentVolumeId) return value_parentVolumeId;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.parentVolumeId' is not present");
    }

    /**
     * specifies whether the volume is read-only. Default is false.
     * 
     */
    @PolicyResourceProperty(name="readOnly", flag="unknown_readOnly")
    private Boolean value_readOnly;
    private boolean unknown_readOnly;
    public Boolean readOnly() {
        if (!unknown_readOnly) return value_readOnly;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.readOnly' is not present");
    }

    /**
     * The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
     * 
     */
    @PolicyResourceProperty(name="recordSizeKib", flag="unknown_recordSizeKib")
    private @Nullable Integer value_recordSizeKib;
    private boolean unknown_recordSizeKib;
    public @Nullable Integer recordSizeKib() {
        if (!unknown_recordSizeKib) return value_recordSizeKib;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.recordSizeKib' is not present");
    }

    /**
     * The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent.
     * 
     */
    @PolicyResourceProperty(name="storageCapacityQuotaGib", flag="unknown_storageCapacityQuotaGib")
    private Integer value_storageCapacityQuotaGib;
    private boolean unknown_storageCapacityQuotaGib;
    public Integer storageCapacityQuotaGib() {
        if (!unknown_storageCapacityQuotaGib) return value_storageCapacityQuotaGib;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.storageCapacityQuotaGib' is not present");
    }

    /**
     * The amount of storage in gibibytes (GiB) to reserve from the parent volume.
     * 
     */
    @PolicyResourceProperty(name="storageCapacityReservationGib", flag="unknown_storageCapacityReservationGib")
    private Integer value_storageCapacityReservationGib;
    private boolean unknown_storageCapacityReservationGib;
    public Integer storageCapacityReservationGib() {
        if (!unknown_storageCapacityReservationGib) return value_storageCapacityReservationGib;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.storageCapacityReservationGib' is not present");
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.tagsAll' is not present");
    }

    /**
     * Specify how much storage users or groups can use on the volume. Maximum of 100 items. See `user_and_group_quotas` Block Below.
     * 
     */
    @PolicyResourceProperty(name="userAndGroupQuotas", flag="unknown_userAndGroupQuotas")
    private List<OpenZfsVolumeUserAndGroupQuota> value_userAndGroupQuotas;
    private boolean unknown_userAndGroupQuotas;
    public List<OpenZfsVolumeUserAndGroupQuota> userAndGroupQuotas() {
        if (!unknown_userAndGroupQuotas) return value_userAndGroupQuotas;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.userAndGroupQuotas' is not present");
    }

    @PolicyResourceProperty(name="volumeType", flag="unknown_volumeType")
    private @Nullable String value_volumeType;
    private boolean unknown_volumeType;
    public @Nullable String volumeType() {
        if (!unknown_volumeType) return value_volumeType;
        throw new UndeferrableValueException("Value 'OpenZfsVolume.volumeType' is not present");
    }

}
