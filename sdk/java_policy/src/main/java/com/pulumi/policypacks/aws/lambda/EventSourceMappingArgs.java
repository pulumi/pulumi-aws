// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lambda;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingDestinationConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingDocumentDbEventSourceConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingFilterCriteriaArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingMetricsConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingProvisionedPollerConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingScalingConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingSelfManagedEventSourceArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingSelfManagedKafkaEventSourceConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingSourceAccessConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lambda/eventSourceMapping:EventSourceMapping")
public final class EventSourceMappingArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Additional configuration block for Amazon Managed Kafka sources. Incompatible with &#34;self_managed_event_source&#34; and &#34;self_managed_kafka_event_source_config&#34;. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="amazonManagedKafkaEventSourceConfig", flag="unknown_amazonManagedKafkaEventSourceConfig")
    private EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs value_amazonManagedKafkaEventSourceConfig;
    private boolean unknown_amazonManagedKafkaEventSourceConfig;
    public EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs amazonManagedKafkaEventSourceConfig() {
        if (!unknown_amazonManagedKafkaEventSourceConfig) return value_amazonManagedKafkaEventSourceConfig;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.amazonManagedKafkaEventSourceConfig' is not present");
    }

    /**
     * The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
     * 
     */
    @PolicyResourceProperty(name="batchSize", flag="unknown_batchSize")
    private Integer value_batchSize;
    private boolean unknown_batchSize;
    public Integer batchSize() {
        if (!unknown_batchSize) return value_batchSize;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.batchSize' is not present");
    }

    /**
     * - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="bisectBatchOnFunctionError", flag="unknown_bisectBatchOnFunctionError")
    private Boolean value_bisectBatchOnFunctionError;
    private boolean unknown_bisectBatchOnFunctionError;
    public Boolean bisectBatchOnFunctionError() {
        if (!unknown_bisectBatchOnFunctionError) return value_bisectBatchOnFunctionError;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.bisectBatchOnFunctionError' is not present");
    }

    /**
     * - (Optional) An Amazon SQS queue, Amazon SNS topic or Amazon S3 bucket (only available for Kafka sources) destination for failed records. Only available for stream sources (DynamoDB and Kinesis) and Kafka sources (Amazon MSK and Self-managed Apache Kafka). Detailed below.
     * 
     */
    @PolicyResourceProperty(name="destinationConfig", flag="unknown_destinationConfig")
    private EventSourceMappingDestinationConfigArgs value_destinationConfig;
    private boolean unknown_destinationConfig;
    public EventSourceMappingDestinationConfigArgs destinationConfig() {
        if (!unknown_destinationConfig) return value_destinationConfig;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.destinationConfig' is not present");
    }

    /**
     * - (Optional) Configuration settings for a DocumentDB event source. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="documentDbEventSourceConfig", flag="unknown_documentDbEventSourceConfig")
    private EventSourceMappingDocumentDbEventSourceConfigArgs value_documentDbEventSourceConfig;
    private boolean unknown_documentDbEventSourceConfig;
    public EventSourceMappingDocumentDbEventSourceConfigArgs documentDbEventSourceConfig() {
        if (!unknown_documentDbEventSourceConfig) return value_documentDbEventSourceConfig;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.documentDbEventSourceConfig' is not present");
    }

    /**
     * Determines if the mapping is enabled. This parameter can be used to enable or disable the mapping, both during resource creation and for already created resources. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.enabled' is not present");
    }

    /**
     * The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
     * 
     */
    @PolicyResourceProperty(name="eventSourceArn", flag="unknown_eventSourceArn")
    private String value_eventSourceArn;
    private boolean unknown_eventSourceArn;
    public String eventSourceArn() {
        if (!unknown_eventSourceArn) return value_eventSourceArn;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.eventSourceArn' is not present");
    }

    /**
     * The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="filterCriteria", flag="unknown_filterCriteria")
    private EventSourceMappingFilterCriteriaArgs value_filterCriteria;
    private boolean unknown_filterCriteria;
    public EventSourceMappingFilterCriteriaArgs filterCriteria() {
        if (!unknown_filterCriteria) return value_filterCriteria;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.filterCriteria' is not present");
    }

    /**
     * The name or the ARN of the Lambda function that will be subscribing to events.
     * 
     */
    @PolicyResourceProperty(name="functionName", flag="unknown_functionName")
    private String value_functionName;
    private boolean unknown_functionName;
    public String functionName() {
        if (!unknown_functionName) return value_functionName;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.functionName' is not present");
    }

    /**
     * A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
     * 
     */
    @PolicyResourceProperty(name="functionResponseTypes", flag="unknown_functionResponseTypes")
    private List<String> value_functionResponseTypes;
    private boolean unknown_functionResponseTypes;
    public List<String> functionResponseTypes() {
        if (!unknown_functionResponseTypes) return value_functionResponseTypes;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.functionResponseTypes' is not present");
    }

    /**
     * The ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function&#39;s filter criteria.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.kmsKeyArn' is not present");
    }

    /**
     * The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximum_batching_window_in_seconds` expires or `batch_size` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
     * 
     */
    @PolicyResourceProperty(name="maximumBatchingWindowInSeconds", flag="unknown_maximumBatchingWindowInSeconds")
    private Integer value_maximumBatchingWindowInSeconds;
    private boolean unknown_maximumBatchingWindowInSeconds;
    public Integer maximumBatchingWindowInSeconds() {
        if (!unknown_maximumBatchingWindowInSeconds) return value_maximumBatchingWindowInSeconds;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.maximumBatchingWindowInSeconds' is not present");
    }

    /**
     * - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
     * 
     */
    @PolicyResourceProperty(name="maximumRecordAgeInSeconds", flag="unknown_maximumRecordAgeInSeconds")
    private Integer value_maximumRecordAgeInSeconds;
    private boolean unknown_maximumRecordAgeInSeconds;
    public Integer maximumRecordAgeInSeconds() {
        if (!unknown_maximumRecordAgeInSeconds) return value_maximumRecordAgeInSeconds;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.maximumRecordAgeInSeconds' is not present");
    }

    /**
     * - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
     * 
     */
    @PolicyResourceProperty(name="maximumRetryAttempts", flag="unknown_maximumRetryAttempts")
    private Integer value_maximumRetryAttempts;
    private boolean unknown_maximumRetryAttempts;
    public Integer maximumRetryAttempts() {
        if (!unknown_maximumRetryAttempts) return value_maximumRetryAttempts;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.maximumRetryAttempts' is not present");
    }

    /**
     * - (Optional) CloudWatch metrics configuration of the event source. Only available for stream sources (DynamoDB and Kinesis) and SQS queues. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="metricsConfig", flag="unknown_metricsConfig")
    private EventSourceMappingMetricsConfigArgs value_metricsConfig;
    private boolean unknown_metricsConfig;
    public EventSourceMappingMetricsConfigArgs metricsConfig() {
        if (!unknown_metricsConfig) return value_metricsConfig;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.metricsConfig' is not present");
    }

    /**
     * - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
     * 
     */
    @PolicyResourceProperty(name="parallelizationFactor", flag="unknown_parallelizationFactor")
    private Integer value_parallelizationFactor;
    private boolean unknown_parallelizationFactor;
    public Integer parallelizationFactor() {
        if (!unknown_parallelizationFactor) return value_parallelizationFactor;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.parallelizationFactor' is not present");
    }

    /**
     * - (Optional) Event poller configuration for the event source. Only valid for Amazon MSK or self-managed Apache Kafka sources. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="provisionedPollerConfig", flag="unknown_provisionedPollerConfig")
    private EventSourceMappingProvisionedPollerConfigArgs value_provisionedPollerConfig;
    private boolean unknown_provisionedPollerConfig;
    public EventSourceMappingProvisionedPollerConfigArgs provisionedPollerConfig() {
        if (!unknown_provisionedPollerConfig) return value_provisionedPollerConfig;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.provisionedPollerConfig' is not present");
    }

    /**
     * The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
     * 
     */
    @PolicyResourceProperty(name="queues", flag="unknown_queues")
    private String value_queues;
    private boolean unknown_queues;
    public String queues() {
        if (!unknown_queues) return value_queues;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.queues' is not present");
    }

    /**
     * Scaling configuration of the event source. Only available for SQS queues. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="scalingConfig", flag="unknown_scalingConfig")
    private EventSourceMappingScalingConfigArgs value_scalingConfig;
    private boolean unknown_scalingConfig;
    public EventSourceMappingScalingConfigArgs scalingConfig() {
        if (!unknown_scalingConfig) return value_scalingConfig;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.scalingConfig' is not present");
    }

    /**
     * - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `source_access_configuration`. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="selfManagedEventSource", flag="unknown_selfManagedEventSource")
    private EventSourceMappingSelfManagedEventSourceArgs value_selfManagedEventSource;
    private boolean unknown_selfManagedEventSource;
    public EventSourceMappingSelfManagedEventSourceArgs selfManagedEventSource() {
        if (!unknown_selfManagedEventSource) return value_selfManagedEventSource;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.selfManagedEventSource' is not present");
    }

    /**
     * Additional configuration block for Self Managed Kafka sources. Incompatible with &#34;event_source_arn&#34; and &#34;amazon_managed_kafka_event_source_config&#34;. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="selfManagedKafkaEventSourceConfig", flag="unknown_selfManagedKafkaEventSourceConfig")
    private EventSourceMappingSelfManagedKafkaEventSourceConfigArgs value_selfManagedKafkaEventSourceConfig;
    private boolean unknown_selfManagedKafkaEventSourceConfig;
    public EventSourceMappingSelfManagedKafkaEventSourceConfigArgs selfManagedKafkaEventSourceConfig() {
        if (!unknown_selfManagedKafkaEventSourceConfig) return value_selfManagedKafkaEventSourceConfig;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.selfManagedKafkaEventSourceConfig' is not present");
    }

    /**
     * For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `self_managed_event_source`. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="sourceAccessConfigurations", flag="unknown_sourceAccessConfigurations")
    private List<EventSourceMappingSourceAccessConfigurationArgs> value_sourceAccessConfigurations;
    private boolean unknown_sourceAccessConfigurations;
    public List<EventSourceMappingSourceAccessConfigurationArgs> sourceAccessConfigurations() {
        if (!unknown_sourceAccessConfigurations) return value_sourceAccessConfigurations;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.sourceAccessConfigurations' is not present");
    }

    /**
     * The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
     * 
     */
    @PolicyResourceProperty(name="startingPosition", flag="unknown_startingPosition")
    private String value_startingPosition;
    private boolean unknown_startingPosition;
    public String startingPosition() {
        if (!unknown_startingPosition) return value_startingPosition;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.startingPosition' is not present");
    }

    /**
     * A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `starting_position` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
     * 
     */
    @PolicyResourceProperty(name="startingPositionTimestamp", flag="unknown_startingPositionTimestamp")
    private String value_startingPositionTimestamp;
    private boolean unknown_startingPositionTimestamp;
    public String startingPositionTimestamp() {
        if (!unknown_startingPositionTimestamp) return value_startingPositionTimestamp;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.startingPositionTimestamp' is not present");
    }

    /**
     * Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.tags' is not present");
    }

    /**
     * The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
     * 
     */
    @PolicyResourceProperty(name="topics", flag="unknown_topics")
    private List<String> value_topics;
    private boolean unknown_topics;
    public List<String> topics() {
        if (!unknown_topics) return value_topics;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.topics' is not present");
    }

    /**
     * The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
     * 
     */
    @PolicyResourceProperty(name="tumblingWindowInSeconds", flag="unknown_tumblingWindowInSeconds")
    private Integer value_tumblingWindowInSeconds;
    private boolean unknown_tumblingWindowInSeconds;
    public Integer tumblingWindowInSeconds() {
        if (!unknown_tumblingWindowInSeconds) return value_tumblingWindowInSeconds;
        throw new UndeferrableValueException("Value 'EventSourceMappingArgs.tumblingWindowInSeconds' is not present");
    }

}
