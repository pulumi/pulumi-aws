// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lambda;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingDestinationConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingDocumentDbEventSourceConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingFilterCriteriaArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingMetricsConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingProvisionedPollerConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingScalingConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingSelfManagedEventSourceArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingSelfManagedKafkaEventSourceConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.EventSourceMappingSourceAccessConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lambda/eventSourceMapping:EventSourceMapping")
public final class EventSourceMappingArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Additional configuration block for Amazon Managed Kafka sources. Incompatible with &#34;self_managed_event_source&#34; and &#34;self_managed_kafka_event_source_config&#34;. Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs> amazonManagedKafkaEventSourceConfig;

    public EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs amazonManagedKafkaEventSourceConfig() {
        if (amazonManagedKafkaEventSourceConfig == null) return null;
        return amazonManagedKafkaEventSourceConfig.getValue("EventSourceMappingArgs.amazonManagedKafkaEventSourceConfig");
    }

    /**
     * The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
     * 
     */
    private UndeferrableValue<Integer> batchSize;

    public Integer batchSize() {
        if (batchSize == null) return null;
        return batchSize.getValue("EventSourceMappingArgs.batchSize");
    }

    /**
     * - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> bisectBatchOnFunctionError;

    public Boolean bisectBatchOnFunctionError() {
        if (bisectBatchOnFunctionError == null) return null;
        return bisectBatchOnFunctionError.getValue("EventSourceMappingArgs.bisectBatchOnFunctionError");
    }

    /**
     * - (Optional) An Amazon SQS queue, Amazon SNS topic or Amazon S3 bucket (only available for Kafka sources) destination for failed records. Only available for stream sources (DynamoDB and Kinesis) and Kafka sources (Amazon MSK and Self-managed Apache Kafka). Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingDestinationConfigArgs> destinationConfig;

    public EventSourceMappingDestinationConfigArgs destinationConfig() {
        if (destinationConfig == null) return null;
        return destinationConfig.getValue("EventSourceMappingArgs.destinationConfig");
    }

    /**
     * - (Optional) Configuration settings for a DocumentDB event source. Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingDocumentDbEventSourceConfigArgs> documentDbEventSourceConfig;

    public EventSourceMappingDocumentDbEventSourceConfigArgs documentDbEventSourceConfig() {
        if (documentDbEventSourceConfig == null) return null;
        return documentDbEventSourceConfig.getValue("EventSourceMappingArgs.documentDbEventSourceConfig");
    }

    /**
     * Determines if the mapping is enabled. This parameter can be used to enable or disable the mapping, both during resource creation and for already created resources. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("EventSourceMappingArgs.enabled");
    }

    /**
     * The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
     * 
     */
    private UndeferrableValue<String> eventSourceArn;

    public String eventSourceArn() {
        if (eventSourceArn == null) return null;
        return eventSourceArn.getValue("EventSourceMappingArgs.eventSourceArn");
    }

    /**
     * The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingFilterCriteriaArgs> filterCriteria;

    public EventSourceMappingFilterCriteriaArgs filterCriteria() {
        if (filterCriteria == null) return null;
        return filterCriteria.getValue("EventSourceMappingArgs.filterCriteria");
    }

    /**
     * The name or the ARN of the Lambda function that will be subscribing to events.
     * 
     */
    private UndeferrableValue<String> functionName;

    public String functionName() {
        if (functionName == null) return null;
        return functionName.getValue("EventSourceMappingArgs.functionName");
    }

    /**
     * A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
     * 
     */
    private UndeferrableValue<List<String>> functionResponseTypes;

    public List<String> functionResponseTypes() {
        if (functionResponseTypes == null) return null;
        return functionResponseTypes.getValue("EventSourceMappingArgs.functionResponseTypes");
    }

    /**
     * The ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function&#39;s filter criteria.
     * 
     */
    private UndeferrableValue<String> kmsKeyArn;

    public String kmsKeyArn() {
        if (kmsKeyArn == null) return null;
        return kmsKeyArn.getValue("EventSourceMappingArgs.kmsKeyArn");
    }

    /**
     * The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximum_batching_window_in_seconds` expires or `batch_size` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
     * 
     */
    private UndeferrableValue<Integer> maximumBatchingWindowInSeconds;

    public Integer maximumBatchingWindowInSeconds() {
        if (maximumBatchingWindowInSeconds == null) return null;
        return maximumBatchingWindowInSeconds.getValue("EventSourceMappingArgs.maximumBatchingWindowInSeconds");
    }

    /**
     * - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
     * 
     */
    private UndeferrableValue<Integer> maximumRecordAgeInSeconds;

    public Integer maximumRecordAgeInSeconds() {
        if (maximumRecordAgeInSeconds == null) return null;
        return maximumRecordAgeInSeconds.getValue("EventSourceMappingArgs.maximumRecordAgeInSeconds");
    }

    /**
     * - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
     * 
     */
    private UndeferrableValue<Integer> maximumRetryAttempts;

    public Integer maximumRetryAttempts() {
        if (maximumRetryAttempts == null) return null;
        return maximumRetryAttempts.getValue("EventSourceMappingArgs.maximumRetryAttempts");
    }

    /**
     * - (Optional) CloudWatch metrics configuration of the event source. Only available for stream sources (DynamoDB and Kinesis) and SQS queues. Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingMetricsConfigArgs> metricsConfig;

    public EventSourceMappingMetricsConfigArgs metricsConfig() {
        if (metricsConfig == null) return null;
        return metricsConfig.getValue("EventSourceMappingArgs.metricsConfig");
    }

    /**
     * - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
     * 
     */
    private UndeferrableValue<Integer> parallelizationFactor;

    public Integer parallelizationFactor() {
        if (parallelizationFactor == null) return null;
        return parallelizationFactor.getValue("EventSourceMappingArgs.parallelizationFactor");
    }

    /**
     * - (Optional) Event poller configuration for the event source. Only valid for Amazon MSK or self-managed Apache Kafka sources. Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingProvisionedPollerConfigArgs> provisionedPollerConfig;

    public EventSourceMappingProvisionedPollerConfigArgs provisionedPollerConfig() {
        if (provisionedPollerConfig == null) return null;
        return provisionedPollerConfig.getValue("EventSourceMappingArgs.provisionedPollerConfig");
    }

    /**
     * The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
     * 
     */
    private UndeferrableValue<String> queues;

    public String queues() {
        if (queues == null) return null;
        return queues.getValue("EventSourceMappingArgs.queues");
    }

    /**
     * Scaling configuration of the event source. Only available for SQS queues. Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingScalingConfigArgs> scalingConfig;

    public EventSourceMappingScalingConfigArgs scalingConfig() {
        if (scalingConfig == null) return null;
        return scalingConfig.getValue("EventSourceMappingArgs.scalingConfig");
    }

    /**
     * - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `source_access_configuration`. Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource;

    public EventSourceMappingSelfManagedEventSourceArgs selfManagedEventSource() {
        if (selfManagedEventSource == null) return null;
        return selfManagedEventSource.getValue("EventSourceMappingArgs.selfManagedEventSource");
    }

    /**
     * Additional configuration block for Self Managed Kafka sources. Incompatible with &#34;event_source_arn&#34; and &#34;amazon_managed_kafka_event_source_config&#34;. Detailed below.
     * 
     */
    private UndeferrableValue<EventSourceMappingSelfManagedKafkaEventSourceConfigArgs> selfManagedKafkaEventSourceConfig;

    public EventSourceMappingSelfManagedKafkaEventSourceConfigArgs selfManagedKafkaEventSourceConfig() {
        if (selfManagedKafkaEventSourceConfig == null) return null;
        return selfManagedKafkaEventSourceConfig.getValue("EventSourceMappingArgs.selfManagedKafkaEventSourceConfig");
    }

    /**
     * For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `self_managed_event_source`. Detailed below.
     * 
     */
    private UndeferrableValue<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations;

    public List<EventSourceMappingSourceAccessConfigurationArgs> sourceAccessConfigurations() {
        if (sourceAccessConfigurations == null) return null;
        return sourceAccessConfigurations.getValue("EventSourceMappingArgs.sourceAccessConfigurations");
    }

    /**
     * The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
     * 
     */
    private UndeferrableValue<String> startingPosition;

    public String startingPosition() {
        if (startingPosition == null) return null;
        return startingPosition.getValue("EventSourceMappingArgs.startingPosition");
    }

    /**
     * A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `starting_position` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
     * 
     */
    private UndeferrableValue<String> startingPositionTimestamp;

    public String startingPositionTimestamp() {
        if (startingPositionTimestamp == null) return null;
        return startingPositionTimestamp.getValue("EventSourceMappingArgs.startingPositionTimestamp");
    }

    /**
     * Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EventSourceMappingArgs.tags");
    }

    /**
     * The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
     * 
     */
    private UndeferrableValue<List<String>> topics;

    public List<String> topics() {
        if (topics == null) return null;
        return topics.getValue("EventSourceMappingArgs.topics");
    }

    /**
     * The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
     * 
     */
    private UndeferrableValue<Integer> tumblingWindowInSeconds;

    public Integer tumblingWindowInSeconds() {
        if (tumblingWindowInSeconds == null) return null;
        return tumblingWindowInSeconds.getValue("EventSourceMappingArgs.tumblingWindowInSeconds");
    }

}
