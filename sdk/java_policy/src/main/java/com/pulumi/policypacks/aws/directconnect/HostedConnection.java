// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directconnect;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;


@PolicyResourceType(type="aws:directconnect/hostedConnection:HostedConnection")
public final class HostedConnection extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Direct Connect endpoint on which the physical connection terminates.
     * 
     */
    @PolicyResourceProperty(name="awsDevice", flag="unknown_awsDevice")
    private String value_awsDevice;
    private boolean unknown_awsDevice;
    public String awsDevice() {
        if (!unknown_awsDevice) return value_awsDevice;
        throw new UndeferrableValueException("Value 'HostedConnection.awsDevice' is not present");
    }

    /**
     * The bandwidth of the connection. Valid values for dedicated connections: 1Gbps, 10Gbps. Valid values for hosted connections: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps, and 25Gbps. Case sensitive. Refer to the AWS Direct Connection supported bandwidths for [Hosted Connections](https://docs.aws.amazon.com/directconnect/latest/UserGuide/hosted_connection.html).
     * 
     */
    @PolicyResourceProperty(name="bandwidth", flag="unknown_bandwidth")
    private String value_bandwidth;
    private boolean unknown_bandwidth;
    public String bandwidth() {
        if (!unknown_bandwidth) return value_bandwidth;
        throw new UndeferrableValueException("Value 'HostedConnection.bandwidth' is not present");
    }

    /**
     * The ID of the interconnect or LAG.
     * 
     */
    @PolicyResourceProperty(name="connectionId", flag="unknown_connectionId")
    private String value_connectionId;
    private boolean unknown_connectionId;
    public String connectionId() {
        if (!unknown_connectionId) return value_connectionId;
        throw new UndeferrableValueException("Value 'HostedConnection.connectionId' is not present");
    }

    /**
     * Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
     * 
     */
    @PolicyResourceProperty(name="hasLogicalRedundancy", flag="unknown_hasLogicalRedundancy")
    private String value_hasLogicalRedundancy;
    private boolean unknown_hasLogicalRedundancy;
    public String hasLogicalRedundancy() {
        if (!unknown_hasLogicalRedundancy) return value_hasLogicalRedundancy;
        throw new UndeferrableValueException("Value 'HostedConnection.hasLogicalRedundancy' is not present");
    }

    /**
     * Boolean value representing if jumbo frames have been enabled for this connection.
     * 
     */
    @PolicyResourceProperty(name="jumboFrameCapable", flag="unknown_jumboFrameCapable")
    private Boolean value_jumboFrameCapable;
    private boolean unknown_jumboFrameCapable;
    public Boolean jumboFrameCapable() {
        if (!unknown_jumboFrameCapable) return value_jumboFrameCapable;
        throw new UndeferrableValueException("Value 'HostedConnection.jumboFrameCapable' is not present");
    }

    /**
     * The ID of the LAG.
     * 
     */
    @PolicyResourceProperty(name="lagId", flag="unknown_lagId")
    private String value_lagId;
    private boolean unknown_lagId;
    public String lagId() {
        if (!unknown_lagId) return value_lagId;
        throw new UndeferrableValueException("Value 'HostedConnection.lagId' is not present");
    }

    /**
     * The time of the most recent call to [DescribeLoa](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLoa.html) for this connection.
     * 
     */
    @PolicyResourceProperty(name="loaIssueTime", flag="unknown_loaIssueTime")
    private String value_loaIssueTime;
    private boolean unknown_loaIssueTime;
    public String loaIssueTime() {
        if (!unknown_loaIssueTime) return value_loaIssueTime;
        throw new UndeferrableValueException("Value 'HostedConnection.loaIssueTime' is not present");
    }

    /**
     * The location of the connection.
     * 
     */
    @PolicyResourceProperty(name="location", flag="unknown_location")
    private String value_location;
    private boolean unknown_location;
    public String location() {
        if (!unknown_location) return value_location;
        throw new UndeferrableValueException("Value 'HostedConnection.location' is not present");
    }

    /**
     * The name of the connection.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'HostedConnection.name' is not present");
    }

    /**
     * The ID of the AWS account of the customer for the connection.
     * 
     */
    @PolicyResourceProperty(name="ownerAccountId", flag="unknown_ownerAccountId")
    private String value_ownerAccountId;
    private boolean unknown_ownerAccountId;
    public String ownerAccountId() {
        if (!unknown_ownerAccountId) return value_ownerAccountId;
        throw new UndeferrableValueException("Value 'HostedConnection.ownerAccountId' is not present");
    }

    /**
     * The name of the AWS Direct Connect service provider associated with the connection.
     * 
     */
    @PolicyResourceProperty(name="partnerName", flag="unknown_partnerName")
    private String value_partnerName;
    private boolean unknown_partnerName;
    public String partnerName() {
        if (!unknown_partnerName) return value_partnerName;
        throw new UndeferrableValueException("Value 'HostedConnection.partnerName' is not present");
    }

    /**
     * The name of the service provider associated with the connection.
     * 
     */
    @PolicyResourceProperty(name="providerName", flag="unknown_providerName")
    private String value_providerName;
    private boolean unknown_providerName;
    public String providerName() {
        if (!unknown_providerName) return value_providerName;
        throw new UndeferrableValueException("Value 'HostedConnection.providerName' is not present");
    }

    /**
     * The AWS Region where the connection is located.
     * 
     */
    @PolicyResourceProperty(name="region", flag="unknown_region")
    private String value_region;
    private boolean unknown_region;
    public String region() {
        if (!unknown_region) return value_region;
        throw new UndeferrableValueException("Value 'HostedConnection.region' is not present");
    }

    /**
     * The state of the connection. Possible values include: ordering, requested, pending, available, down, deleting, deleted, rejected, unknown. See [AllocateHostedConnection](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_AllocateHostedConnection.html) for a description of each connection state.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'HostedConnection.state' is not present");
    }

    /**
     * The dedicated VLAN provisioned to the hosted connection.
     * 
     */
    @PolicyResourceProperty(name="vlan", flag="unknown_vlan")
    private Integer value_vlan;
    private boolean unknown_vlan;
    public Integer vlan() {
        if (!unknown_vlan) return value_vlan;
        throw new UndeferrableValueException("Value 'HostedConnection.vlan' is not present");
    }

}
