// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.datazone;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.datazone.outputs.EnvironmentLastDeployment;
import com.pulumi.policypacks.aws.datazone.outputs.EnvironmentProvisionedResource;
import com.pulumi.policypacks.aws.datazone.outputs.EnvironmentTimeouts;
import com.pulumi.policypacks.aws.datazone.outputs.EnvironmentUserParameter;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:datazone/environment:Environment")
public final class Environment extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ID of the Amazon Web Services account where the environment exists
     * 
     */
    @PolicyResourceProperty(name="accountIdentifier", flag="unknown_accountIdentifier")
    private String value_accountIdentifier;
    private boolean unknown_accountIdentifier;
    public String accountIdentifier() {
        if (!unknown_accountIdentifier) return value_accountIdentifier;
        throw new UndeferrableValueException("Value 'Environment.accountIdentifier' is not present");
    }

    /**
     * The Amazon Web Services region where the environment exists.
     * 
     */
    @PolicyResourceProperty(name="accountRegion", flag="unknown_accountRegion")
    private String value_accountRegion;
    private boolean unknown_accountRegion;
    public String accountRegion() {
        if (!unknown_accountRegion) return value_accountRegion;
        throw new UndeferrableValueException("Value 'Environment.accountRegion' is not present");
    }

    /**
     * The blueprint with which the environment is created.
     * 
     */
    @PolicyResourceProperty(name="blueprintIdentifier", flag="unknown_blueprintIdentifier")
    private String value_blueprintIdentifier;
    private boolean unknown_blueprintIdentifier;
    public String blueprintIdentifier() {
        if (!unknown_blueprintIdentifier) return value_blueprintIdentifier;
        throw new UndeferrableValueException("Value 'Environment.blueprintIdentifier' is not present");
    }

    /**
     * The time the environment was created.
     * 
     */
    @PolicyResourceProperty(name="createdAt", flag="unknown_createdAt")
    private String value_createdAt;
    private boolean unknown_createdAt;
    public String createdAt() {
        if (!unknown_createdAt) return value_createdAt;
        throw new UndeferrableValueException("Value 'Environment.createdAt' is not present");
    }

    /**
     * The user who created the environment.
     * 
     */
    @PolicyResourceProperty(name="createdBy", flag="unknown_createdBy")
    private String value_createdBy;
    private boolean unknown_createdBy;
    public String createdBy() {
        if (!unknown_createdBy) return value_createdBy;
        throw new UndeferrableValueException("Value 'Environment.createdBy' is not present");
    }

    /**
     * The description of the environment.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Environment.description' is not present");
    }

    /**
     * The ID of the domain where the environment exists.
     * 
     */
    @PolicyResourceProperty(name="domainIdentifier", flag="unknown_domainIdentifier")
    private String value_domainIdentifier;
    private boolean unknown_domainIdentifier;
    public String domainIdentifier() {
        if (!unknown_domainIdentifier) return value_domainIdentifier;
        throw new UndeferrableValueException("Value 'Environment.domainIdentifier' is not present");
    }

    /**
     * The business glossary terms that can be used in this environment.
     * 
     */
    @PolicyResourceProperty(name="glossaryTerms", flag="unknown_glossaryTerms")
    private @Nullable List<String> value_glossaryTerms;
    private boolean unknown_glossaryTerms;
    public @Nullable List<String> glossaryTerms() {
        if (!unknown_glossaryTerms) return value_glossaryTerms;
        throw new UndeferrableValueException("Value 'Environment.glossaryTerms' is not present");
    }

    /**
     * The details of the last deployment of the environment.
     * 
     */
    @PolicyResourceProperty(name="lastDeployments", flag="unknown_lastDeployments")
    private List<EnvironmentLastDeployment> value_lastDeployments;
    private boolean unknown_lastDeployments;
    public List<EnvironmentLastDeployment> lastDeployments() {
        if (!unknown_lastDeployments) return value_lastDeployments;
        throw new UndeferrableValueException("Value 'Environment.lastDeployments' is not present");
    }

    /**
     * The name of the environment.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Environment.name' is not present");
    }

    /**
     * The ID of the profile with which the environment is created.
     * 
     */
    @PolicyResourceProperty(name="profileIdentifier", flag="unknown_profileIdentifier")
    private String value_profileIdentifier;
    private boolean unknown_profileIdentifier;
    public String profileIdentifier() {
        if (!unknown_profileIdentifier) return value_profileIdentifier;
        throw new UndeferrableValueException("Value 'Environment.profileIdentifier' is not present");
    }

    /**
     * The ID of the project where the environment exists.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="projectIdentifier", flag="unknown_projectIdentifier")
    private String value_projectIdentifier;
    private boolean unknown_projectIdentifier;
    public String projectIdentifier() {
        if (!unknown_projectIdentifier) return value_projectIdentifier;
        throw new UndeferrableValueException("Value 'Environment.projectIdentifier' is not present");
    }

    /**
     * The provider of the environment.
     * 
     */
    @PolicyResourceProperty(name="providerEnvironment", flag="unknown_providerEnvironment")
    private String value_providerEnvironment;
    private boolean unknown_providerEnvironment;
    public String providerEnvironment() {
        if (!unknown_providerEnvironment) return value_providerEnvironment;
        throw new UndeferrableValueException("Value 'Environment.providerEnvironment' is not present");
    }

    @PolicyResourceProperty(name="provisionedResources", flag="unknown_provisionedResources")
    private List<EnvironmentProvisionedResource> value_provisionedResources;
    private boolean unknown_provisionedResources;
    public List<EnvironmentProvisionedResource> provisionedResources() {
        if (!unknown_provisionedResources) return value_provisionedResources;
        throw new UndeferrableValueException("Value 'Environment.provisionedResources' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable EnvironmentTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable EnvironmentTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'Environment.timeouts' is not present");
    }

    /**
     * The user parameters that are used in the environment. See User Parameters for more information.
     * 
     */
    @PolicyResourceProperty(name="userParameters", flag="unknown_userParameters")
    private @Nullable List<EnvironmentUserParameter> value_userParameters;
    private boolean unknown_userParameters;
    public @Nullable List<EnvironmentUserParameter> userParameters() {
        if (!unknown_userParameters) return value_userParameters;
        throw new UndeferrableValueException("Value 'Environment.userParameters' is not present");
    }

}
