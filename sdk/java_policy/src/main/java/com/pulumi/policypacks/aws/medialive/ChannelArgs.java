// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelCdiInputSpecificationArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelDestinationArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelInputAttachmentArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelInputSpecificationArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelMaintenanceArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelVpcArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:medialive/channel:Channel")
public final class ChannelArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specification of CDI inputs for this channel. See CDI Input Specification for more details.
     * 
     */
    private UndeferrableValue<ChannelCdiInputSpecificationArgs> cdiInputSpecification;

    public ChannelCdiInputSpecificationArgs cdiInputSpecification() {
        if (cdiInputSpecification == null) return null;
        return cdiInputSpecification.getValue("ChannelArgs.cdiInputSpecification");
    }

    /**
     * Concise argument description.
     * 
     */
    private UndeferrableValue<String> channelClass;

    public String channelClass() {
        if (channelClass == null) return null;
        return channelClass.getValue("ChannelArgs.channelClass");
    }

    /**
     * Destinations for channel. See Destinations for more details.
     * 
     */
    private UndeferrableValue<List<ChannelDestinationArgs>> destinations;

    public List<ChannelDestinationArgs> destinations() {
        if (destinations == null) return null;
        return destinations.getValue("ChannelArgs.destinations");
    }

    /**
     * Encoder settings. See Encoder Settings for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsArgs> encoderSettings;

    public ChannelEncoderSettingsArgs encoderSettings() {
        if (encoderSettings == null) return null;
        return encoderSettings.getValue("ChannelArgs.encoderSettings");
    }

    /**
     * Input attachments for the channel. See Input Attachments for more details.
     * 
     */
    private UndeferrableValue<List<ChannelInputAttachmentArgs>> inputAttachments;

    public List<ChannelInputAttachmentArgs> inputAttachments() {
        if (inputAttachments == null) return null;
        return inputAttachments.getValue("ChannelArgs.inputAttachments");
    }

    /**
     * Specification of network and file inputs for the channel.
     * 
     */
    private UndeferrableValue<ChannelInputSpecificationArgs> inputSpecification;

    public ChannelInputSpecificationArgs inputSpecification() {
        if (inputSpecification == null) return null;
        return inputSpecification.getValue("ChannelArgs.inputSpecification");
    }

    /**
     * The log level to write to Cloudwatch logs.
     * 
     */
    private UndeferrableValue<String> logLevel;

    public String logLevel() {
        if (logLevel == null) return null;
        return logLevel.getValue("ChannelArgs.logLevel");
    }

    /**
     * Maintenance settings for this channel. See Maintenance for more details.
     * 
     */
    private UndeferrableValue<ChannelMaintenanceArgs> maintenance;

    public ChannelMaintenanceArgs maintenance() {
        if (maintenance == null) return null;
        return maintenance.getValue("ChannelArgs.maintenance");
    }

    /**
     * Name of the Channel.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ChannelArgs.name");
    }

    /**
     * Concise argument description.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("ChannelArgs.roleArn");
    }

    /**
     * Whether to start/stop channel. Default: `false`
     * 
     */
    private UndeferrableValue<Boolean> startChannel;

    public Boolean startChannel() {
        if (startChannel == null) return null;
        return startChannel.getValue("ChannelArgs.startChannel");
    }

    /**
     * A map of tags to assign to the channel. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ChannelArgs.tags");
    }

    /**
     * Settings for the VPC outputs. See VPC for more details.
     * 
     */
    private UndeferrableValue<ChannelVpcArgs> vpc;

    public ChannelVpcArgs vpc() {
        if (vpc == null) return null;
        return vpc.getValue("ChannelArgs.vpc");
    }

}
