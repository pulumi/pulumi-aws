// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class LaunchTemplateBlockDeviceMappingEbsArgs {

    /**
     * Whether the volume should be destroyed on instance termination.
     * See [Preserving Amazon EBS Volumes on Instance Termination](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/preserving-volumes-on-termination.html) for more information.
     * 
     */
    @PolicyResourceProperty(name="deleteOnTermination", flag="unknown_deleteOnTermination")
    private String value_deleteOnTermination;
    private boolean unknown_deleteOnTermination;
    public String deleteOnTermination() {
        if (!unknown_deleteOnTermination) return value_deleteOnTermination;
        throw new UndeferrableValueException("Value 'LaunchTemplateBlockDeviceMappingEbsArgs.deleteOnTermination' is not present");
    }

    /**
     * Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
     * Cannot be used with `snapshot_id`.
     * 
     */
    @PolicyResourceProperty(name="encrypted", flag="unknown_encrypted")
    private String value_encrypted;
    private boolean unknown_encrypted;
    public String encrypted() {
        if (!unknown_encrypted) return value_encrypted;
        throw new UndeferrableValueException("Value 'LaunchTemplateBlockDeviceMappingEbsArgs.encrypted' is not present");
    }

    /**
     * The amount of provisioned [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
     * This must be set with a `volume_type` of `&#34;io1/io2/gp3&#34;`.
     * 
     */
    @PolicyResourceProperty(name="iops", flag="unknown_iops")
    private Integer value_iops;
    private boolean unknown_iops;
    public Integer iops() {
        if (!unknown_iops) return value_iops;
        throw new UndeferrableValueException("Value 'LaunchTemplateBlockDeviceMappingEbsArgs.iops' is not present");
    }

    /**
     * The ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume.
     * `encrypted` must be set to `true` when this is set.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'LaunchTemplateBlockDeviceMappingEbsArgs.kmsKeyId' is not present");
    }

    /**
     * The Snapshot ID to mount.
     * 
     */
    @PolicyResourceProperty(name="snapshotId", flag="unknown_snapshotId")
    private String value_snapshotId;
    private boolean unknown_snapshotId;
    public String snapshotId() {
        if (!unknown_snapshotId) return value_snapshotId;
        throw new UndeferrableValueException("Value 'LaunchTemplateBlockDeviceMappingEbsArgs.snapshotId' is not present");
    }

    /**
     * The throughput to provision for a `gp3` volume in MiB/s (specified as an integer, e.g., 500), with a maximum of 1,000 MiB/s.
     * 
     */
    @PolicyResourceProperty(name="throughput", flag="unknown_throughput")
    private Integer value_throughput;
    private boolean unknown_throughput;
    public Integer throughput() {
        if (!unknown_throughput) return value_throughput;
        throw new UndeferrableValueException("Value 'LaunchTemplateBlockDeviceMappingEbsArgs.throughput' is not present");
    }

    /**
     * The size of the volume in gigabytes.
     * 
     */
    @PolicyResourceProperty(name="volumeSize", flag="unknown_volumeSize")
    private Integer value_volumeSize;
    private boolean unknown_volumeSize;
    public Integer volumeSize() {
        if (!unknown_volumeSize) return value_volumeSize;
        throw new UndeferrableValueException("Value 'LaunchTemplateBlockDeviceMappingEbsArgs.volumeSize' is not present");
    }

    /**
     * The volume type.
     * Can be one of `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1`.
     * 
     */
    @PolicyResourceProperty(name="volumeType", flag="unknown_volumeType")
    private String value_volumeType;
    private boolean unknown_volumeType;
    public String volumeType() {
        if (!unknown_volumeType) return value_volumeType;
        throw new UndeferrableValueException("Value 'LaunchTemplateBlockDeviceMappingEbsArgs.volumeType' is not present");
    }

}
