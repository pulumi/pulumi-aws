// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkfirewall.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyPolicyVariablesArgs;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyStatefulEngineOptionsArgs;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceArgs;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyStatelessCustomActionArgs;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyStatelessRuleGroupReferenceArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class FirewallPolicyFirewallPolicyArgs {

    /**
     * . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
     * 
     */
    private UndeferrableValue<FirewallPolicyFirewallPolicyPolicyVariablesArgs> policyVariables;

    public FirewallPolicyFirewallPolicyPolicyVariablesArgs policyVariables() {
        if (policyVariables == null) return null;
        return policyVariables.getValue("FirewallPolicyFirewallPolicyArgs.policyVariables");
    }

    /**
     * Set of actions to take on a packet if it does not match any stateful rules in the policy. This can only be specified if the policy has a `stateful_engine_options` block with a `rule_order` value of `STRICT_ORDER`. You can specify one of either or neither values of `aws:drop_strict` or `aws:drop_established`, as well as any combination of `aws:alert_strict` and `aws:alert_established`.
     * 
     */
    private UndeferrableValue<List<String>> statefulDefaultActions;

    public List<String> statefulDefaultActions() {
        if (statefulDefaultActions == null) return null;
        return statefulDefaultActions.getValue("FirewallPolicyFirewallPolicyArgs.statefulDefaultActions");
    }

    /**
     * A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
     * 
     */
    private UndeferrableValue<FirewallPolicyFirewallPolicyStatefulEngineOptionsArgs> statefulEngineOptions;

    public FirewallPolicyFirewallPolicyStatefulEngineOptionsArgs statefulEngineOptions() {
        if (statefulEngineOptions == null) return null;
        return statefulEngineOptions.getValue("FirewallPolicyFirewallPolicyArgs.statefulEngineOptions");
    }

    /**
     * Set of configuration blocks containing references to the stateful rule groups that are used in the policy. See Stateful Rule Group Reference below for details.
     * 
     */
    private UndeferrableValue<List<FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceArgs>> statefulRuleGroupReferences;

    public List<FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceArgs> statefulRuleGroupReferences() {
        if (statefulRuleGroupReferences == null) return null;
        return statefulRuleGroupReferences.getValue("FirewallPolicyFirewallPolicyArgs.statefulRuleGroupReferences");
    }

    /**
     * Set of configuration blocks describing the custom action definitions that are available for use in the firewall policy&#39;s `stateless_default_actions`. See Stateless Custom Action below for details.
     * 
     */
    private UndeferrableValue<List<FirewallPolicyFirewallPolicyStatelessCustomActionArgs>> statelessCustomActions;

    public List<FirewallPolicyFirewallPolicyStatelessCustomActionArgs> statelessCustomActions() {
        if (statelessCustomActions == null) return null;
        return statelessCustomActions.getValue("FirewallPolicyFirewallPolicyArgs.statelessCustomActions");
    }

    /**
     * Set of actions to take on a packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
     * In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
     * 
     */
    private UndeferrableValue<List<String>> statelessDefaultActions;

    public List<String> statelessDefaultActions() {
        if (statelessDefaultActions == null) return null;
        return statelessDefaultActions.getValue("FirewallPolicyFirewallPolicyArgs.statelessDefaultActions");
    }

    /**
     * Set of actions to take on a fragmented packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
     * In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
     * 
     */
    private UndeferrableValue<List<String>> statelessFragmentDefaultActions;

    public List<String> statelessFragmentDefaultActions() {
        if (statelessFragmentDefaultActions == null) return null;
        return statelessFragmentDefaultActions.getValue("FirewallPolicyFirewallPolicyArgs.statelessFragmentDefaultActions");
    }

    /**
     * Set of configuration blocks containing references to the stateless rule groups that are used in the policy. See Stateless Rule Group Reference below for details.
     * 
     */
    private UndeferrableValue<List<FirewallPolicyFirewallPolicyStatelessRuleGroupReferenceArgs>> statelessRuleGroupReferences;

    public List<FirewallPolicyFirewallPolicyStatelessRuleGroupReferenceArgs> statelessRuleGroupReferences() {
        if (statelessRuleGroupReferences == null) return null;
        return statelessRuleGroupReferences.getValue("FirewallPolicyFirewallPolicyArgs.statelessRuleGroupReferences");
    }

    /**
     * The (ARN) of the TLS Inspection policy to attach to the FW Policy.  This must be added at creation of the resource per AWS documentation. &#34;You can only add a TLS inspection configuration to a new policy, not to an existing policy.&#34;  This cannot be removed from a FW Policy.
     * 
     */
    private UndeferrableValue<String> tlsInspectionConfigurationArn;

    public String tlsInspectionConfigurationArn() {
        if (tlsInspectionConfigurationArn == null) return null;
        return tlsInspectionConfigurationArn.getValue("FirewallPolicyFirewallPolicyArgs.tlsInspectionConfigurationArn");
    }

}
