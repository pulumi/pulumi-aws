// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkfirewall.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyPolicyVariablesArgs;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyStatefulEngineOptionsArgs;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceArgs;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyStatelessCustomActionArgs;
import com.pulumi.policypacks.aws.networkfirewall.inputs.FirewallPolicyFirewallPolicyStatelessRuleGroupReferenceArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class FirewallPolicyFirewallPolicyArgs {

    /**
     * . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
     * 
     */
    @PolicyResourceProperty(name="policyVariables", flag="unknown_policyVariables")
    private FirewallPolicyFirewallPolicyPolicyVariablesArgs value_policyVariables;
    private boolean unknown_policyVariables;
    public FirewallPolicyFirewallPolicyPolicyVariablesArgs policyVariables() {
        if (!unknown_policyVariables) return value_policyVariables;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.policyVariables' is not present");
    }

    /**
     * Set of actions to take on a packet if it does not match any stateful rules in the policy. This can only be specified if the policy has a `stateful_engine_options` block with a `rule_order` value of `STRICT_ORDER`. You can specify one of either or neither values of `aws:drop_strict` or `aws:drop_established`, as well as any combination of `aws:alert_strict` and `aws:alert_established`.
     * 
     */
    @PolicyResourceProperty(name="statefulDefaultActions", flag="unknown_statefulDefaultActions")
    private List<String> value_statefulDefaultActions;
    private boolean unknown_statefulDefaultActions;
    public List<String> statefulDefaultActions() {
        if (!unknown_statefulDefaultActions) return value_statefulDefaultActions;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.statefulDefaultActions' is not present");
    }

    /**
     * A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
     * 
     */
    @PolicyResourceProperty(name="statefulEngineOptions", flag="unknown_statefulEngineOptions")
    private FirewallPolicyFirewallPolicyStatefulEngineOptionsArgs value_statefulEngineOptions;
    private boolean unknown_statefulEngineOptions;
    public FirewallPolicyFirewallPolicyStatefulEngineOptionsArgs statefulEngineOptions() {
        if (!unknown_statefulEngineOptions) return value_statefulEngineOptions;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.statefulEngineOptions' is not present");
    }

    /**
     * Set of configuration blocks containing references to the stateful rule groups that are used in the policy. See Stateful Rule Group Reference below for details.
     * 
     */
    @PolicyResourceProperty(name="statefulRuleGroupReferences", flag="unknown_statefulRuleGroupReferences")
    private List<FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceArgs> value_statefulRuleGroupReferences;
    private boolean unknown_statefulRuleGroupReferences;
    public List<FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceArgs> statefulRuleGroupReferences() {
        if (!unknown_statefulRuleGroupReferences) return value_statefulRuleGroupReferences;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.statefulRuleGroupReferences' is not present");
    }

    /**
     * Set of configuration blocks describing the custom action definitions that are available for use in the firewall policy&#39;s `stateless_default_actions`. See Stateless Custom Action below for details.
     * 
     */
    @PolicyResourceProperty(name="statelessCustomActions", flag="unknown_statelessCustomActions")
    private List<FirewallPolicyFirewallPolicyStatelessCustomActionArgs> value_statelessCustomActions;
    private boolean unknown_statelessCustomActions;
    public List<FirewallPolicyFirewallPolicyStatelessCustomActionArgs> statelessCustomActions() {
        if (!unknown_statelessCustomActions) return value_statelessCustomActions;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.statelessCustomActions' is not present");
    }

    /**
     * Set of actions to take on a packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
     * In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
     * 
     */
    @PolicyResourceProperty(name="statelessDefaultActions", flag="unknown_statelessDefaultActions")
    private List<String> value_statelessDefaultActions;
    private boolean unknown_statelessDefaultActions;
    public List<String> statelessDefaultActions() {
        if (!unknown_statelessDefaultActions) return value_statelessDefaultActions;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.statelessDefaultActions' is not present");
    }

    /**
     * Set of actions to take on a fragmented packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
     * In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
     * 
     */
    @PolicyResourceProperty(name="statelessFragmentDefaultActions", flag="unknown_statelessFragmentDefaultActions")
    private List<String> value_statelessFragmentDefaultActions;
    private boolean unknown_statelessFragmentDefaultActions;
    public List<String> statelessFragmentDefaultActions() {
        if (!unknown_statelessFragmentDefaultActions) return value_statelessFragmentDefaultActions;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.statelessFragmentDefaultActions' is not present");
    }

    /**
     * Set of configuration blocks containing references to the stateless rule groups that are used in the policy. See Stateless Rule Group Reference below for details.
     * 
     */
    @PolicyResourceProperty(name="statelessRuleGroupReferences", flag="unknown_statelessRuleGroupReferences")
    private List<FirewallPolicyFirewallPolicyStatelessRuleGroupReferenceArgs> value_statelessRuleGroupReferences;
    private boolean unknown_statelessRuleGroupReferences;
    public List<FirewallPolicyFirewallPolicyStatelessRuleGroupReferenceArgs> statelessRuleGroupReferences() {
        if (!unknown_statelessRuleGroupReferences) return value_statelessRuleGroupReferences;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.statelessRuleGroupReferences' is not present");
    }

    /**
     * The (ARN) of the TLS Inspection policy to attach to the FW Policy.  This must be added at creation of the resource per AWS documentation. &#34;You can only add a TLS inspection configuration to a new policy, not to an existing policy.&#34;  This cannot be removed from a FW Policy.
     * 
     */
    @PolicyResourceProperty(name="tlsInspectionConfigurationArn", flag="unknown_tlsInspectionConfigurationArn")
    private String value_tlsInspectionConfigurationArn;
    private boolean unknown_tlsInspectionConfigurationArn;
    public String tlsInspectionConfigurationArn() {
        if (!unknown_tlsInspectionConfigurationArn) return value_tlsInspectionConfigurationArn;
        throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.tlsInspectionConfigurationArn' is not present");
    }

}
