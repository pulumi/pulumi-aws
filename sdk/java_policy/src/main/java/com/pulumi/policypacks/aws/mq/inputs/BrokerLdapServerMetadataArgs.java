// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.mq.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class BrokerLdapServerMetadataArgs {

    /**
     * List of a fully qualified domain name of the LDAP server and an optional failover server.
     * 
     */
    private UndeferrableValue<List<String>> hosts;

    public List<String> hosts() {
        if (hosts == null) return null;
        return hosts.getValue("BrokerLdapServerMetadataArgs.hosts");
    }

    /**
     * Fully qualified name of the directory to search for a userâ€™s groups.
     * 
     */
    private UndeferrableValue<String> roleBase;

    public String roleBase() {
        if (roleBase == null) return null;
        return roleBase.getValue("BrokerLdapServerMetadataArgs.roleBase");
    }

    /**
     * Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
     * 
     */
    private UndeferrableValue<String> roleName;

    public String roleName() {
        if (roleName == null) return null;
        return roleName.getValue("BrokerLdapServerMetadataArgs.roleName");
    }

    /**
     * Search criteria for groups.
     * 
     */
    private UndeferrableValue<String> roleSearchMatching;

    public String roleSearchMatching() {
        if (roleSearchMatching == null) return null;
        return roleSearchMatching.getValue("BrokerLdapServerMetadataArgs.roleSearchMatching");
    }

    /**
     * Whether the directory search scope is the entire sub-tree.
     * 
     */
    private UndeferrableValue<Boolean> roleSearchSubtree;

    public Boolean roleSearchSubtree() {
        if (roleSearchSubtree == null) return null;
        return roleSearchSubtree.getValue("BrokerLdapServerMetadataArgs.roleSearchSubtree");
    }

    /**
     * Service account password.
     * 
     */
    private UndeferrableValue<String> serviceAccountPassword;

    public String serviceAccountPassword() {
        if (serviceAccountPassword == null) return null;
        return serviceAccountPassword.getValue("BrokerLdapServerMetadataArgs.serviceAccountPassword");
    }

    /**
     * Service account username.
     * 
     */
    private UndeferrableValue<String> serviceAccountUsername;

    public String serviceAccountUsername() {
        if (serviceAccountUsername == null) return null;
        return serviceAccountUsername.getValue("BrokerLdapServerMetadataArgs.serviceAccountUsername");
    }

    /**
     * Fully qualified name of the directory where you want to search for users.
     * 
     */
    private UndeferrableValue<String> userBase;

    public String userBase() {
        if (userBase == null) return null;
        return userBase.getValue("BrokerLdapServerMetadataArgs.userBase");
    }

    /**
     * Specifies the name of the LDAP attribute for the user group membership.
     * 
     */
    private UndeferrableValue<String> userRoleName;

    public String userRoleName() {
        if (userRoleName == null) return null;
        return userRoleName.getValue("BrokerLdapServerMetadataArgs.userRoleName");
    }

    /**
     * Search criteria for users.
     * 
     */
    private UndeferrableValue<String> userSearchMatching;

    public String userSearchMatching() {
        if (userSearchMatching == null) return null;
        return userSearchMatching.getValue("BrokerLdapServerMetadataArgs.userSearchMatching");
    }

    /**
     * Whether the directory search scope is the entire sub-tree.
     * 
     */
    private UndeferrableValue<Boolean> userSearchSubtree;

    public Boolean userSearchSubtree() {
        if (userSearchSubtree == null) return null;
        return userSearchSubtree.getValue("BrokerLdapServerMetadataArgs.userSearchSubtree");
    }

}
