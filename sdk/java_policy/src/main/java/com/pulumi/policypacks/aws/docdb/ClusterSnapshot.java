// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.docdb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;


@PolicyResourceType(type="aws:docdb/clusterSnapshot:ClusterSnapshot")
public final class ClusterSnapshot extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * List of EC2 Availability Zones that instances in the DocumentDB cluster snapshot can be restored in.
     * 
     */
    @PolicyResourceProperty(name="availabilityZones", flag="unknown_availabilityZones")
    private List<String> value_availabilityZones;
    private boolean unknown_availabilityZones;
    public List<String> availabilityZones() {
        if (!unknown_availabilityZones) return value_availabilityZones;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.availabilityZones' is not present");
    }

    /**
     * The DocumentDB Cluster Identifier from which to take the snapshot.
     * 
     */
    @PolicyResourceProperty(name="dbClusterIdentifier", flag="unknown_dbClusterIdentifier")
    private String value_dbClusterIdentifier;
    private boolean unknown_dbClusterIdentifier;
    public String dbClusterIdentifier() {
        if (!unknown_dbClusterIdentifier) return value_dbClusterIdentifier;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.dbClusterIdentifier' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) for the DocumentDB Cluster Snapshot.
     * 
     */
    @PolicyResourceProperty(name="dbClusterSnapshotArn", flag="unknown_dbClusterSnapshotArn")
    private String value_dbClusterSnapshotArn;
    private boolean unknown_dbClusterSnapshotArn;
    public String dbClusterSnapshotArn() {
        if (!unknown_dbClusterSnapshotArn) return value_dbClusterSnapshotArn;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.dbClusterSnapshotArn' is not present");
    }

    /**
     * The Identifier for the snapshot.
     * 
     */
    @PolicyResourceProperty(name="dbClusterSnapshotIdentifier", flag="unknown_dbClusterSnapshotIdentifier")
    private String value_dbClusterSnapshotIdentifier;
    private boolean unknown_dbClusterSnapshotIdentifier;
    public String dbClusterSnapshotIdentifier() {
        if (!unknown_dbClusterSnapshotIdentifier) return value_dbClusterSnapshotIdentifier;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.dbClusterSnapshotIdentifier' is not present");
    }

    /**
     * Specifies the name of the database engine.
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private String value_engine;
    private boolean unknown_engine;
    public String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.engine' is not present");
    }

    /**
     * Version of the database engine for this DocumentDB cluster snapshot.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.engineVersion' is not present");
    }

    /**
     * If storage_encrypted is true, the AWS KMS key identifier for the encrypted DocumentDB cluster snapshot.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.kmsKeyId' is not present");
    }

    /**
     * Port that the DocumentDB cluster was listening on at the time of the snapshot.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.port' is not present");
    }

    @PolicyResourceProperty(name="snapshotType", flag="unknown_snapshotType")
    private String value_snapshotType;
    private boolean unknown_snapshotType;
    public String snapshotType() {
        if (!unknown_snapshotType) return value_snapshotType;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.snapshotType' is not present");
    }

    @PolicyResourceProperty(name="sourceDbClusterSnapshotArn", flag="unknown_sourceDbClusterSnapshotArn")
    private String value_sourceDbClusterSnapshotArn;
    private boolean unknown_sourceDbClusterSnapshotArn;
    public String sourceDbClusterSnapshotArn() {
        if (!unknown_sourceDbClusterSnapshotArn) return value_sourceDbClusterSnapshotArn;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.sourceDbClusterSnapshotArn' is not present");
    }

    /**
     * The status of this DocumentDB Cluster Snapshot.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.status' is not present");
    }

    /**
     * Specifies whether the DocumentDB cluster snapshot is encrypted.
     * 
     */
    @PolicyResourceProperty(name="storageEncrypted", flag="unknown_storageEncrypted")
    private Boolean value_storageEncrypted;
    private boolean unknown_storageEncrypted;
    public Boolean storageEncrypted() {
        if (!unknown_storageEncrypted) return value_storageEncrypted;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.storageEncrypted' is not present");
    }

    /**
     * The VPC ID associated with the DocumentDB cluster snapshot.
     * 
     */
    @PolicyResourceProperty(name="vpcId", flag="unknown_vpcId")
    private String value_vpcId;
    private boolean unknown_vpcId;
    public String vpcId() {
        if (!unknown_vpcId) return value_vpcId;
        throw new UndeferrableValueException("Value 'ClusterSnapshot.vpcId' is not present");
    }

}
