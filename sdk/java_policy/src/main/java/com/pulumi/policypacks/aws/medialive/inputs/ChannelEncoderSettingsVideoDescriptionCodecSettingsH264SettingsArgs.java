// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs {

    /**
     * Enables or disables adaptive quantization.
     * 
     */
    private UndeferrableValue<String> adaptiveQuantization;

    public String adaptiveQuantization() {
        if (adaptiveQuantization == null) return null;
        return adaptiveQuantization.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.adaptiveQuantization");
    }

    /**
     * Indicates that AFD values will be written into the output stream.
     * 
     */
    private UndeferrableValue<String> afdSignaling;

    public String afdSignaling() {
        if (afdSignaling == null) return null;
        return afdSignaling.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.afdSignaling");
    }

    /**
     * Average bitrate in bits/second.
     * 
     */
    private UndeferrableValue<Integer> bitrate;

    public Integer bitrate() {
        if (bitrate == null) return null;
        return bitrate.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.bitrate");
    }

    private UndeferrableValue<Integer> bufFillPct;

    public Integer bufFillPct() {
        if (bufFillPct == null) return null;
        return bufFillPct.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.bufFillPct");
    }

    /**
     * Size of buffer in bits.
     * 
     */
    private UndeferrableValue<Integer> bufSize;

    public Integer bufSize() {
        if (bufSize == null) return null;
        return bufSize.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.bufSize");
    }

    /**
     * Includes color space metadata in the output.
     * 
     */
    private UndeferrableValue<String> colorMetadata;

    public String colorMetadata() {
        if (colorMetadata == null) return null;
        return colorMetadata.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.colorMetadata");
    }

    /**
     * Entropy encoding mode.
     * 
     */
    private UndeferrableValue<String> entropyEncoding;

    public String entropyEncoding() {
        if (entropyEncoding == null) return null;
        return entropyEncoding.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.entropyEncoding");
    }

    /**
     * Filters to apply to an encode. See H264 Filter Settings for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs> filterSettings;

    public ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs filterSettings() {
        if (filterSettings == null) return null;
        return filterSettings.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.filterSettings");
    }

    /**
     * Four bit AFD value to write on all frames of video in the output stream.
     * 
     */
    private UndeferrableValue<String> fixedAfd;

    public String fixedAfd() {
        if (fixedAfd == null) return null;
        return fixedAfd.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.fixedAfd");
    }

    private UndeferrableValue<String> flickerAq;

    public String flickerAq() {
        if (flickerAq == null) return null;
        return flickerAq.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.flickerAq");
    }

    /**
     * Controls whether coding is performed on a field basis or on a frame basis.
     * 
     */
    private UndeferrableValue<String> forceFieldPictures;

    public String forceFieldPictures() {
        if (forceFieldPictures == null) return null;
        return forceFieldPictures.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.forceFieldPictures");
    }

    /**
     * Indicates how the output video frame rate is specified.
     * 
     */
    private UndeferrableValue<String> framerateControl;

    public String framerateControl() {
        if (framerateControl == null) return null;
        return framerateControl.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.framerateControl");
    }

    /**
     * Framerate denominator.
     * 
     */
    private UndeferrableValue<Integer> framerateDenominator;

    public Integer framerateDenominator() {
        if (framerateDenominator == null) return null;
        return framerateDenominator.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.framerateDenominator");
    }

    /**
     * Framerate numerator.
     * 
     */
    private UndeferrableValue<Integer> framerateNumerator;

    public Integer framerateNumerator() {
        if (framerateNumerator == null) return null;
        return framerateNumerator.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.framerateNumerator");
    }

    /**
     * GOP-B reference.
     * 
     */
    private UndeferrableValue<String> gopBReference;

    public String gopBReference() {
        if (gopBReference == null) return null;
        return gopBReference.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopBReference");
    }

    /**
     * Frequency of closed GOPs.
     * 
     */
    private UndeferrableValue<Integer> gopClosedCadence;

    public Integer gopClosedCadence() {
        if (gopClosedCadence == null) return null;
        return gopClosedCadence.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopClosedCadence");
    }

    /**
     * Number of B-frames between reference frames.
     * 
     */
    private UndeferrableValue<Integer> gopNumBFrames;

    public Integer gopNumBFrames() {
        if (gopNumBFrames == null) return null;
        return gopNumBFrames.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopNumBFrames");
    }

    /**
     * GOP size in units of either frames of seconds per `gop_size_units`.
     * 
     */
    private UndeferrableValue<Double> gopSize;

    public Double gopSize() {
        if (gopSize == null) return null;
        return gopSize.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopSize");
    }

    /**
     * Indicates if the `gop_size` is specified in frames or seconds.
     * 
     */
    private UndeferrableValue<String> gopSizeUnits;

    public String gopSizeUnits() {
        if (gopSizeUnits == null) return null;
        return gopSizeUnits.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopSizeUnits");
    }

    /**
     * H264 level.
     * 
     */
    private UndeferrableValue<String> level;

    public String level() {
        if (level == null) return null;
        return level.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.level");
    }

    /**
     * Amount of lookahead.
     * 
     */
    private UndeferrableValue<String> lookAheadRateControl;

    public String lookAheadRateControl() {
        if (lookAheadRateControl == null) return null;
        return lookAheadRateControl.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.lookAheadRateControl");
    }

    /**
     * Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
     * 
     */
    private UndeferrableValue<Integer> maxBitrate;

    public Integer maxBitrate() {
        if (maxBitrate == null) return null;
        return maxBitrate.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.maxBitrate");
    }

    /**
     * Min interval.
     * 
     */
    private UndeferrableValue<Integer> minIInterval;

    public Integer minIInterval() {
        if (minIInterval == null) return null;
        return minIInterval.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.minIInterval");
    }

    /**
     * Number of reference frames to use.
     * 
     */
    private UndeferrableValue<Integer> numRefFrames;

    public Integer numRefFrames() {
        if (numRefFrames == null) return null;
        return numRefFrames.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.numRefFrames");
    }

    /**
     * Indicates how the output pixel aspect ratio is specified.
     * 
     */
    private UndeferrableValue<String> parControl;

    public String parControl() {
        if (parControl == null) return null;
        return parControl.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.parControl");
    }

    /**
     * Pixel Aspect Ratio denominator.
     * 
     */
    private UndeferrableValue<Integer> parDenominator;

    public Integer parDenominator() {
        if (parDenominator == null) return null;
        return parDenominator.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.parDenominator");
    }

    /**
     * Pixel Aspect Ratio numerator.
     * 
     */
    private UndeferrableValue<Integer> parNumerator;

    public Integer parNumerator() {
        if (parNumerator == null) return null;
        return parNumerator.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.parNumerator");
    }

    /**
     * H264 profile.
     * 
     */
    private UndeferrableValue<String> profile;

    public String profile() {
        if (profile == null) return null;
        return profile.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.profile");
    }

    /**
     * Quality level.
     * 
     */
    private UndeferrableValue<String> qualityLevel;

    public String qualityLevel() {
        if (qualityLevel == null) return null;
        return qualityLevel.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.qualityLevel");
    }

    /**
     * Controls the target quality for the video encode.
     * 
     */
    private UndeferrableValue<Integer> qvbrQualityLevel;

    public Integer qvbrQualityLevel() {
        if (qvbrQualityLevel == null) return null;
        return qvbrQualityLevel.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.qvbrQualityLevel");
    }

    /**
     * Rate control mode.
     * 
     */
    private UndeferrableValue<String> rateControlMode;

    public String rateControlMode() {
        if (rateControlMode == null) return null;
        return rateControlMode.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.rateControlMode");
    }

    /**
     * Sets the scan type of the output.
     * 
     */
    private UndeferrableValue<String> scanType;

    public String scanType() {
        if (scanType == null) return null;
        return scanType.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.scanType");
    }

    /**
     * Scene change detection.
     * 
     */
    private UndeferrableValue<String> sceneChangeDetect;

    public String sceneChangeDetect() {
        if (sceneChangeDetect == null) return null;
        return sceneChangeDetect.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.sceneChangeDetect");
    }

    /**
     * Number of slices per picture.
     * 
     */
    private UndeferrableValue<Integer> slices;

    public Integer slices() {
        if (slices == null) return null;
        return slices.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.slices");
    }

    /**
     * Softness.
     * 
     */
    private UndeferrableValue<Integer> softness;

    public Integer softness() {
        if (softness == null) return null;
        return softness.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.softness");
    }

    /**
     * Makes adjustments within each frame based on spatial variation of content complexity.
     * 
     */
    private UndeferrableValue<String> spatialAq;

    public String spatialAq() {
        if (spatialAq == null) return null;
        return spatialAq.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.spatialAq");
    }

    /**
     * Subgop length.
     * 
     */
    private UndeferrableValue<String> subgopLength;

    public String subgopLength() {
        if (subgopLength == null) return null;
        return subgopLength.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.subgopLength");
    }

    /**
     * Produces a bitstream compliant with SMPTE RP-2027.
     * 
     */
    private UndeferrableValue<String> syntax;

    public String syntax() {
        if (syntax == null) return null;
        return syntax.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.syntax");
    }

    /**
     * Makes adjustments within each frame based on temporal variation of content complexity.
     * 
     */
    private UndeferrableValue<String> temporalAq;

    public String temporalAq() {
        if (temporalAq == null) return null;
        return temporalAq.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.temporalAq");
    }

    /**
     * Determines how timecodes should be inserted into the video elementary stream.
     * 
     */
    private UndeferrableValue<String> timecodeInsertion;

    public String timecodeInsertion() {
        if (timecodeInsertion == null) return null;
        return timecodeInsertion.getValue("ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.timecodeInsertion");
    }

}
