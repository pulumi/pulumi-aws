// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs {

    /**
     * Enables or disables adaptive quantization.
     * 
     */
    @PolicyResourceProperty(name="adaptiveQuantization", flag="unknown_adaptiveQuantization")
    private String value_adaptiveQuantization;
    private boolean unknown_adaptiveQuantization;
    public String adaptiveQuantization() {
        if (!unknown_adaptiveQuantization) return value_adaptiveQuantization;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.adaptiveQuantization' is not present");
    }

    /**
     * Indicates that AFD values will be written into the output stream.
     * 
     */
    @PolicyResourceProperty(name="afdSignaling", flag="unknown_afdSignaling")
    private String value_afdSignaling;
    private boolean unknown_afdSignaling;
    public String afdSignaling() {
        if (!unknown_afdSignaling) return value_afdSignaling;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.afdSignaling' is not present");
    }

    /**
     * Average bitrate in bits/second.
     * 
     */
    @PolicyResourceProperty(name="bitrate", flag="unknown_bitrate")
    private Integer value_bitrate;
    private boolean unknown_bitrate;
    public Integer bitrate() {
        if (!unknown_bitrate) return value_bitrate;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.bitrate' is not present");
    }

    @PolicyResourceProperty(name="bufFillPct", flag="unknown_bufFillPct")
    private Integer value_bufFillPct;
    private boolean unknown_bufFillPct;
    public Integer bufFillPct() {
        if (!unknown_bufFillPct) return value_bufFillPct;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.bufFillPct' is not present");
    }

    /**
     * Size of buffer in bits.
     * 
     */
    @PolicyResourceProperty(name="bufSize", flag="unknown_bufSize")
    private Integer value_bufSize;
    private boolean unknown_bufSize;
    public Integer bufSize() {
        if (!unknown_bufSize) return value_bufSize;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.bufSize' is not present");
    }

    /**
     * Includes color space metadata in the output.
     * 
     */
    @PolicyResourceProperty(name="colorMetadata", flag="unknown_colorMetadata")
    private String value_colorMetadata;
    private boolean unknown_colorMetadata;
    public String colorMetadata() {
        if (!unknown_colorMetadata) return value_colorMetadata;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.colorMetadata' is not present");
    }

    /**
     * Entropy encoding mode.
     * 
     */
    @PolicyResourceProperty(name="entropyEncoding", flag="unknown_entropyEncoding")
    private String value_entropyEncoding;
    private boolean unknown_entropyEncoding;
    public String entropyEncoding() {
        if (!unknown_entropyEncoding) return value_entropyEncoding;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.entropyEncoding' is not present");
    }

    /**
     * Filters to apply to an encode. See H264 Filter Settings for more details.
     * 
     */
    @PolicyResourceProperty(name="filterSettings", flag="unknown_filterSettings")
    private ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs value_filterSettings;
    private boolean unknown_filterSettings;
    public ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs filterSettings() {
        if (!unknown_filterSettings) return value_filterSettings;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.filterSettings' is not present");
    }

    /**
     * Four bit AFD value to write on all frames of video in the output stream.
     * 
     */
    @PolicyResourceProperty(name="fixedAfd", flag="unknown_fixedAfd")
    private String value_fixedAfd;
    private boolean unknown_fixedAfd;
    public String fixedAfd() {
        if (!unknown_fixedAfd) return value_fixedAfd;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.fixedAfd' is not present");
    }

    @PolicyResourceProperty(name="flickerAq", flag="unknown_flickerAq")
    private String value_flickerAq;
    private boolean unknown_flickerAq;
    public String flickerAq() {
        if (!unknown_flickerAq) return value_flickerAq;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.flickerAq' is not present");
    }

    /**
     * Controls whether coding is performed on a field basis or on a frame basis.
     * 
     */
    @PolicyResourceProperty(name="forceFieldPictures", flag="unknown_forceFieldPictures")
    private String value_forceFieldPictures;
    private boolean unknown_forceFieldPictures;
    public String forceFieldPictures() {
        if (!unknown_forceFieldPictures) return value_forceFieldPictures;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.forceFieldPictures' is not present");
    }

    /**
     * Indicates how the output video frame rate is specified.
     * 
     */
    @PolicyResourceProperty(name="framerateControl", flag="unknown_framerateControl")
    private String value_framerateControl;
    private boolean unknown_framerateControl;
    public String framerateControl() {
        if (!unknown_framerateControl) return value_framerateControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.framerateControl' is not present");
    }

    /**
     * Framerate denominator.
     * 
     */
    @PolicyResourceProperty(name="framerateDenominator", flag="unknown_framerateDenominator")
    private Integer value_framerateDenominator;
    private boolean unknown_framerateDenominator;
    public Integer framerateDenominator() {
        if (!unknown_framerateDenominator) return value_framerateDenominator;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.framerateDenominator' is not present");
    }

    /**
     * Framerate numerator.
     * 
     */
    @PolicyResourceProperty(name="framerateNumerator", flag="unknown_framerateNumerator")
    private Integer value_framerateNumerator;
    private boolean unknown_framerateNumerator;
    public Integer framerateNumerator() {
        if (!unknown_framerateNumerator) return value_framerateNumerator;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.framerateNumerator' is not present");
    }

    /**
     * GOP-B reference.
     * 
     */
    @PolicyResourceProperty(name="gopBReference", flag="unknown_gopBReference")
    private String value_gopBReference;
    private boolean unknown_gopBReference;
    public String gopBReference() {
        if (!unknown_gopBReference) return value_gopBReference;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopBReference' is not present");
    }

    /**
     * Frequency of closed GOPs.
     * 
     */
    @PolicyResourceProperty(name="gopClosedCadence", flag="unknown_gopClosedCadence")
    private Integer value_gopClosedCadence;
    private boolean unknown_gopClosedCadence;
    public Integer gopClosedCadence() {
        if (!unknown_gopClosedCadence) return value_gopClosedCadence;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopClosedCadence' is not present");
    }

    /**
     * Number of B-frames between reference frames.
     * 
     */
    @PolicyResourceProperty(name="gopNumBFrames", flag="unknown_gopNumBFrames")
    private Integer value_gopNumBFrames;
    private boolean unknown_gopNumBFrames;
    public Integer gopNumBFrames() {
        if (!unknown_gopNumBFrames) return value_gopNumBFrames;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopNumBFrames' is not present");
    }

    /**
     * GOP size in units of either frames of seconds per `gop_size_units`.
     * 
     */
    @PolicyResourceProperty(name="gopSize", flag="unknown_gopSize")
    private Double value_gopSize;
    private boolean unknown_gopSize;
    public Double gopSize() {
        if (!unknown_gopSize) return value_gopSize;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopSize' is not present");
    }

    /**
     * Indicates if the `gop_size` is specified in frames or seconds.
     * 
     */
    @PolicyResourceProperty(name="gopSizeUnits", flag="unknown_gopSizeUnits")
    private String value_gopSizeUnits;
    private boolean unknown_gopSizeUnits;
    public String gopSizeUnits() {
        if (!unknown_gopSizeUnits) return value_gopSizeUnits;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.gopSizeUnits' is not present");
    }

    /**
     * H264 level.
     * 
     */
    @PolicyResourceProperty(name="level", flag="unknown_level")
    private String value_level;
    private boolean unknown_level;
    public String level() {
        if (!unknown_level) return value_level;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.level' is not present");
    }

    /**
     * Amount of lookahead.
     * 
     */
    @PolicyResourceProperty(name="lookAheadRateControl", flag="unknown_lookAheadRateControl")
    private String value_lookAheadRateControl;
    private boolean unknown_lookAheadRateControl;
    public String lookAheadRateControl() {
        if (!unknown_lookAheadRateControl) return value_lookAheadRateControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.lookAheadRateControl' is not present");
    }

    /**
     * Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
     * 
     */
    @PolicyResourceProperty(name="maxBitrate", flag="unknown_maxBitrate")
    private Integer value_maxBitrate;
    private boolean unknown_maxBitrate;
    public Integer maxBitrate() {
        if (!unknown_maxBitrate) return value_maxBitrate;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.maxBitrate' is not present");
    }

    /**
     * Min interval.
     * 
     */
    @PolicyResourceProperty(name="minIInterval", flag="unknown_minIInterval")
    private Integer value_minIInterval;
    private boolean unknown_minIInterval;
    public Integer minIInterval() {
        if (!unknown_minIInterval) return value_minIInterval;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.minIInterval' is not present");
    }

    /**
     * Number of reference frames to use.
     * 
     */
    @PolicyResourceProperty(name="numRefFrames", flag="unknown_numRefFrames")
    private Integer value_numRefFrames;
    private boolean unknown_numRefFrames;
    public Integer numRefFrames() {
        if (!unknown_numRefFrames) return value_numRefFrames;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.numRefFrames' is not present");
    }

    /**
     * Indicates how the output pixel aspect ratio is specified.
     * 
     */
    @PolicyResourceProperty(name="parControl", flag="unknown_parControl")
    private String value_parControl;
    private boolean unknown_parControl;
    public String parControl() {
        if (!unknown_parControl) return value_parControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.parControl' is not present");
    }

    /**
     * Pixel Aspect Ratio denominator.
     * 
     */
    @PolicyResourceProperty(name="parDenominator", flag="unknown_parDenominator")
    private Integer value_parDenominator;
    private boolean unknown_parDenominator;
    public Integer parDenominator() {
        if (!unknown_parDenominator) return value_parDenominator;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.parDenominator' is not present");
    }

    /**
     * Pixel Aspect Ratio numerator.
     * 
     */
    @PolicyResourceProperty(name="parNumerator", flag="unknown_parNumerator")
    private Integer value_parNumerator;
    private boolean unknown_parNumerator;
    public Integer parNumerator() {
        if (!unknown_parNumerator) return value_parNumerator;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.parNumerator' is not present");
    }

    /**
     * H264 profile.
     * 
     */
    @PolicyResourceProperty(name="profile", flag="unknown_profile")
    private String value_profile;
    private boolean unknown_profile;
    public String profile() {
        if (!unknown_profile) return value_profile;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.profile' is not present");
    }

    /**
     * Quality level.
     * 
     */
    @PolicyResourceProperty(name="qualityLevel", flag="unknown_qualityLevel")
    private String value_qualityLevel;
    private boolean unknown_qualityLevel;
    public String qualityLevel() {
        if (!unknown_qualityLevel) return value_qualityLevel;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.qualityLevel' is not present");
    }

    /**
     * Controls the target quality for the video encode.
     * 
     */
    @PolicyResourceProperty(name="qvbrQualityLevel", flag="unknown_qvbrQualityLevel")
    private Integer value_qvbrQualityLevel;
    private boolean unknown_qvbrQualityLevel;
    public Integer qvbrQualityLevel() {
        if (!unknown_qvbrQualityLevel) return value_qvbrQualityLevel;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.qvbrQualityLevel' is not present");
    }

    /**
     * Rate control mode.
     * 
     */
    @PolicyResourceProperty(name="rateControlMode", flag="unknown_rateControlMode")
    private String value_rateControlMode;
    private boolean unknown_rateControlMode;
    public String rateControlMode() {
        if (!unknown_rateControlMode) return value_rateControlMode;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.rateControlMode' is not present");
    }

    /**
     * Sets the scan type of the output.
     * 
     */
    @PolicyResourceProperty(name="scanType", flag="unknown_scanType")
    private String value_scanType;
    private boolean unknown_scanType;
    public String scanType() {
        if (!unknown_scanType) return value_scanType;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.scanType' is not present");
    }

    /**
     * Scene change detection.
     * 
     */
    @PolicyResourceProperty(name="sceneChangeDetect", flag="unknown_sceneChangeDetect")
    private String value_sceneChangeDetect;
    private boolean unknown_sceneChangeDetect;
    public String sceneChangeDetect() {
        if (!unknown_sceneChangeDetect) return value_sceneChangeDetect;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.sceneChangeDetect' is not present");
    }

    /**
     * Number of slices per picture.
     * 
     */
    @PolicyResourceProperty(name="slices", flag="unknown_slices")
    private Integer value_slices;
    private boolean unknown_slices;
    public Integer slices() {
        if (!unknown_slices) return value_slices;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.slices' is not present");
    }

    /**
     * Softness.
     * 
     */
    @PolicyResourceProperty(name="softness", flag="unknown_softness")
    private Integer value_softness;
    private boolean unknown_softness;
    public Integer softness() {
        if (!unknown_softness) return value_softness;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.softness' is not present");
    }

    /**
     * Makes adjustments within each frame based on spatial variation of content complexity.
     * 
     */
    @PolicyResourceProperty(name="spatialAq", flag="unknown_spatialAq")
    private String value_spatialAq;
    private boolean unknown_spatialAq;
    public String spatialAq() {
        if (!unknown_spatialAq) return value_spatialAq;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.spatialAq' is not present");
    }

    /**
     * Subgop length.
     * 
     */
    @PolicyResourceProperty(name="subgopLength", flag="unknown_subgopLength")
    private String value_subgopLength;
    private boolean unknown_subgopLength;
    public String subgopLength() {
        if (!unknown_subgopLength) return value_subgopLength;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.subgopLength' is not present");
    }

    /**
     * Produces a bitstream compliant with SMPTE RP-2027.
     * 
     */
    @PolicyResourceProperty(name="syntax", flag="unknown_syntax")
    private String value_syntax;
    private boolean unknown_syntax;
    public String syntax() {
        if (!unknown_syntax) return value_syntax;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.syntax' is not present");
    }

    /**
     * Makes adjustments within each frame based on temporal variation of content complexity.
     * 
     */
    @PolicyResourceProperty(name="temporalAq", flag="unknown_temporalAq")
    private String value_temporalAq;
    private boolean unknown_temporalAq;
    public String temporalAq() {
        if (!unknown_temporalAq) return value_temporalAq;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.temporalAq' is not present");
    }

    /**
     * Determines how timecodes should be inserted into the video elementary stream.
     * 
     */
    @PolicyResourceProperty(name="timecodeInsertion", flag="unknown_timecodeInsertion")
    private String value_timecodeInsertion;
    private boolean unknown_timecodeInsertion;
    public String timecodeInsertion() {
        if (!unknown_timecodeInsertion) return value_timecodeInsertion;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.timecodeInsertion' is not present");
    }

}
