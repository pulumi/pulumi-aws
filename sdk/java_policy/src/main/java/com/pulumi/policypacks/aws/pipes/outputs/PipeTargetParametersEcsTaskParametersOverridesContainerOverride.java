// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pipes.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PipeTargetParametersEcsTaskParametersOverridesContainerOverride {

    /**
     * List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> commands;

    public @Nullable List<String> commands() {
        if (commands == null) return null;
        return commands.getValue("PipeTargetParametersEcsTaskParametersOverridesContainerOverride.commands");
    }

    /**
     * The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
     * 
     */
    private @Nullable UndeferrableValue<Integer> cpu;

    public @Nullable Integer cpu() {
        if (cpu == null) return null;
        return cpu.getValue("PipeTargetParametersEcsTaskParametersOverridesContainerOverride.cpu");
    }

    /**
     * A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile>> environmentFiles;

    public @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile> environmentFiles() {
        if (environmentFiles == null) return null;
        return environmentFiles.getValue("PipeTargetParametersEcsTaskParametersOverridesContainerOverride.environmentFiles");
    }

    /**
     * The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment>> environments;

    public @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment> environments() {
        if (environments == null) return null;
        return environments.getValue("PipeTargetParametersEcsTaskParametersOverridesContainerOverride.environments");
    }

    /**
     * The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
     * 
     */
    private @Nullable UndeferrableValue<Integer> memory;

    public @Nullable Integer memory() {
        if (memory == null) return null;
        return memory.getValue("PipeTargetParametersEcsTaskParametersOverridesContainerOverride.memory");
    }

    /**
     * The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
     * 
     */
    private @Nullable UndeferrableValue<Integer> memoryReservation;

    public @Nullable Integer memoryReservation() {
        if (memoryReservation == null) return null;
        return memoryReservation.getValue("PipeTargetParametersEcsTaskParametersOverridesContainerOverride.memoryReservation");
    }

    /**
     * Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    private @Nullable UndeferrableValue<String> name;

    public @Nullable String name() {
        if (name == null) return null;
        return name.getValue("PipeTargetParametersEcsTaskParametersOverridesContainerOverride.name");
    }

    /**
     * The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement>> resourceRequirements;

    public @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement> resourceRequirements() {
        if (resourceRequirements == null) return null;
        return resourceRequirements.getValue("PipeTargetParametersEcsTaskParametersOverridesContainerOverride.resourceRequirements");
    }

}
