// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pipes.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PipeTargetParametersEcsTaskParametersOverridesContainerOverride {

    /**
     * List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
     * 
     */
    @PolicyResourceProperty(name="commands", flag="unknown_commands")
    private @Nullable List<String> value_commands;
    private boolean unknown_commands;
    public @Nullable List<String> commands() {
        if (!unknown_commands) return value_commands;
        throw new UndeferrableValueException("Value 'PipeTargetParametersEcsTaskParametersOverridesContainerOverride.commands' is not present");
    }

    /**
     * The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
     * 
     */
    @PolicyResourceProperty(name="cpu", flag="unknown_cpu")
    private @Nullable Integer value_cpu;
    private boolean unknown_cpu;
    public @Nullable Integer cpu() {
        if (!unknown_cpu) return value_cpu;
        throw new UndeferrableValueException("Value 'PipeTargetParametersEcsTaskParametersOverridesContainerOverride.cpu' is not present");
    }

    /**
     * A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="environmentFiles", flag="unknown_environmentFiles")
    private @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile> value_environmentFiles;
    private boolean unknown_environmentFiles;
    public @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile> environmentFiles() {
        if (!unknown_environmentFiles) return value_environmentFiles;
        throw new UndeferrableValueException("Value 'PipeTargetParametersEcsTaskParametersOverridesContainerOverride.environmentFiles' is not present");
    }

    /**
     * The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="environments", flag="unknown_environments")
    private @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment> value_environments;
    private boolean unknown_environments;
    public @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment> environments() {
        if (!unknown_environments) return value_environments;
        throw new UndeferrableValueException("Value 'PipeTargetParametersEcsTaskParametersOverridesContainerOverride.environments' is not present");
    }

    /**
     * The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
     * 
     */
    @PolicyResourceProperty(name="memory", flag="unknown_memory")
    private @Nullable Integer value_memory;
    private boolean unknown_memory;
    public @Nullable Integer memory() {
        if (!unknown_memory) return value_memory;
        throw new UndeferrableValueException("Value 'PipeTargetParametersEcsTaskParametersOverridesContainerOverride.memory' is not present");
    }

    /**
     * The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
     * 
     */
    @PolicyResourceProperty(name="memoryReservation", flag="unknown_memoryReservation")
    private @Nullable Integer value_memoryReservation;
    private boolean unknown_memoryReservation;
    public @Nullable Integer memoryReservation() {
        if (!unknown_memoryReservation) return value_memoryReservation;
        throw new UndeferrableValueException("Value 'PipeTargetParametersEcsTaskParametersOverridesContainerOverride.memoryReservation' is not present");
    }

    /**
     * Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private @Nullable String value_name;
    private boolean unknown_name;
    public @Nullable String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'PipeTargetParametersEcsTaskParametersOverridesContainerOverride.name' is not present");
    }

    /**
     * The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="resourceRequirements", flag="unknown_resourceRequirements")
    private @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement> value_resourceRequirements;
    private boolean unknown_resourceRequirements;
    public @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement> resourceRequirements() {
        if (!unknown_resourceRequirements) return value_resourceRequirements;
        throw new UndeferrableValueException("Value 'PipeTargetParametersEcsTaskParametersOverridesContainerOverride.resourceRequirements' is not present");
    }

}
