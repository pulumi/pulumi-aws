// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformCastColumnTypeOperation;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformCreateColumnsOperation;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformFilterOperation;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformProjectOperation;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformRenameColumnOperation;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformTagColumnOperation;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformUntagColumnOperation;
import javax.annotation.Nullable;


public final class DataSetLogicalTableMapDataTransform {

    /**
     * A transform operation that casts a column to a different type. See cast_column_type_operation.
     * 
     */
    private @Nullable UndeferrableValue<DataSetLogicalTableMapDataTransformCastColumnTypeOperation> castColumnTypeOperation;

    public @Nullable DataSetLogicalTableMapDataTransformCastColumnTypeOperation castColumnTypeOperation() {
        if (castColumnTypeOperation == null) return null;
        return castColumnTypeOperation.getValue("DataSetLogicalTableMapDataTransform.castColumnTypeOperation");
    }

    /**
     * An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
     * 
     */
    private @Nullable UndeferrableValue<DataSetLogicalTableMapDataTransformCreateColumnsOperation> createColumnsOperation;

    public @Nullable DataSetLogicalTableMapDataTransformCreateColumnsOperation createColumnsOperation() {
        if (createColumnsOperation == null) return null;
        return createColumnsOperation.getValue("DataSetLogicalTableMapDataTransform.createColumnsOperation");
    }

    /**
     * An operation that filters rows based on some condition. See filter_operation.
     * 
     */
    private @Nullable UndeferrableValue<DataSetLogicalTableMapDataTransformFilterOperation> filterOperation;

    public @Nullable DataSetLogicalTableMapDataTransformFilterOperation filterOperation() {
        if (filterOperation == null) return null;
        return filterOperation.getValue("DataSetLogicalTableMapDataTransform.filterOperation");
    }

    /**
     * An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
     * 
     */
    private @Nullable UndeferrableValue<DataSetLogicalTableMapDataTransformProjectOperation> projectOperation;

    public @Nullable DataSetLogicalTableMapDataTransformProjectOperation projectOperation() {
        if (projectOperation == null) return null;
        return projectOperation.getValue("DataSetLogicalTableMapDataTransform.projectOperation");
    }

    /**
     * An operation that renames a column. See rename_column_operation.
     * 
     */
    private @Nullable UndeferrableValue<DataSetLogicalTableMapDataTransformRenameColumnOperation> renameColumnOperation;

    public @Nullable DataSetLogicalTableMapDataTransformRenameColumnOperation renameColumnOperation() {
        if (renameColumnOperation == null) return null;
        return renameColumnOperation.getValue("DataSetLogicalTableMapDataTransform.renameColumnOperation");
    }

    /**
     * An operation that tags a column with additional information. See tag_column_operation.
     * 
     */
    private @Nullable UndeferrableValue<DataSetLogicalTableMapDataTransformTagColumnOperation> tagColumnOperation;

    public @Nullable DataSetLogicalTableMapDataTransformTagColumnOperation tagColumnOperation() {
        if (tagColumnOperation == null) return null;
        return tagColumnOperation.getValue("DataSetLogicalTableMapDataTransform.tagColumnOperation");
    }

    /**
     * A transform operation that removes tags associated with a column. See untag_column_operation.
     * 
     */
    private @Nullable UndeferrableValue<DataSetLogicalTableMapDataTransformUntagColumnOperation> untagColumnOperation;

    public @Nullable DataSetLogicalTableMapDataTransformUntagColumnOperation untagColumnOperation() {
        if (untagColumnOperation == null) return null;
        return untagColumnOperation.getValue("DataSetLogicalTableMapDataTransform.untagColumnOperation");
    }

}
