// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2transitgateway;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2transitgateway/transitGateway:TransitGateway")
public final class TransitGatewayArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is `64512` to `65534` for 16-bit ASNs and `4200000000` to `4294967294` for 32-bit ASNs. Default value: `64512`.
     * 
     * &gt; **NOTE:** Modifying `amazon_side_asn` on a Transit Gateway with active BGP sessions is [not allowed](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTransitGatewayOptions.html). You must first delete all Transit Gateway attachments that have BGP configured prior to modifying `amazon_side_asn`.
     * 
     */
    private UndeferrableValue<Integer> amazonSideAsn;

    public Integer amazonSideAsn() {
        if (amazonSideAsn == null) return null;
        return amazonSideAsn.getValue("TransitGatewayArgs.amazonSideAsn");
    }

    /**
     * Whether resource attachment requests are automatically accepted. Valid values: `disable`, `enable`. Default value: `disable`.
     * 
     */
    private UndeferrableValue<String> autoAcceptSharedAttachments;

    public String autoAcceptSharedAttachments() {
        if (autoAcceptSharedAttachments == null) return null;
        return autoAcceptSharedAttachments.getValue("TransitGatewayArgs.autoAcceptSharedAttachments");
    }

    /**
     * Whether resource attachments are automatically associated with the default association route table. Valid values: `disable`, `enable`. Default value: `enable`.
     * 
     */
    private UndeferrableValue<String> defaultRouteTableAssociation;

    public String defaultRouteTableAssociation() {
        if (defaultRouteTableAssociation == null) return null;
        return defaultRouteTableAssociation.getValue("TransitGatewayArgs.defaultRouteTableAssociation");
    }

    /**
     * Whether resource attachments automatically propagate routes to the default propagation route table. Valid values: `disable`, `enable`. Default value: `enable`.
     * 
     */
    private UndeferrableValue<String> defaultRouteTablePropagation;

    public String defaultRouteTablePropagation() {
        if (defaultRouteTablePropagation == null) return null;
        return defaultRouteTablePropagation.getValue("TransitGatewayArgs.defaultRouteTablePropagation");
    }

    /**
     * Description of the EC2 Transit Gateway.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("TransitGatewayArgs.description");
    }

    /**
     * Whether DNS support is enabled. Valid values: `disable`, `enable`. Default value: `enable`.
     * 
     */
    private UndeferrableValue<String> dnsSupport;

    public String dnsSupport() {
        if (dnsSupport == null) return null;
        return dnsSupport.getValue("TransitGatewayArgs.dnsSupport");
    }

    /**
     * Whether Multicast support is enabled. Required to use `ec2_transit_gateway_multicast_domain`. Valid values: `disable`, `enable`. Default value: `disable`.
     * 
     */
    private UndeferrableValue<String> multicastSupport;

    public String multicastSupport() {
        if (multicastSupport == null) return null;
        return multicastSupport.getValue("TransitGatewayArgs.multicastSupport");
    }

    /**
     * Whether Security Group Referencing Support is enabled. Valid values: `disable`, `enable`. Default value: `disable`.
     * 
     */
    private UndeferrableValue<String> securityGroupReferencingSupport;

    public String securityGroupReferencingSupport() {
        if (securityGroupReferencingSupport == null) return null;
        return securityGroupReferencingSupport.getValue("TransitGatewayArgs.securityGroupReferencingSupport");
    }

    /**
     * Key-value tags for the EC2 Transit Gateway. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TransitGatewayArgs.tags");
    }

    /**
     * One or more IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
     * 
     */
    private UndeferrableValue<List<String>> transitGatewayCidrBlocks;

    public List<String> transitGatewayCidrBlocks() {
        if (transitGatewayCidrBlocks == null) return null;
        return transitGatewayCidrBlocks.getValue("TransitGatewayArgs.transitGatewayCidrBlocks");
    }

    /**
     * Whether VPN Equal Cost Multipath Protocol support is enabled. Valid values: `disable`, `enable`. Default value: `enable`.
     * 
     */
    private UndeferrableValue<String> vpnEcmpSupport;

    public String vpnEcmpSupport() {
        if (vpnEcmpSupport == null) return null;
        return vpnEcmpSupport.getValue("TransitGatewayArgs.vpnEcmpSupport");
    }

}
