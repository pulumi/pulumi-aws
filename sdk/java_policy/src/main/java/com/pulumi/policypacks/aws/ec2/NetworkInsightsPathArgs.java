// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/networkInsightsPath:NetworkInsightsPath")
public final class NetworkInsightsPathArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * ID or ARN of the resource which is the destination of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
     * 
     */
    @PolicyResourceProperty(name="destination", flag="unknown_destination")
    private String value_destination;
    private boolean unknown_destination;
    public String destination() {
        if (!unknown_destination) return value_destination;
        throw new UndeferrableValueException("Value 'NetworkInsightsPathArgs.destination' is not present");
    }

    /**
     * IP address of the destination resource.
     * 
     */
    @PolicyResourceProperty(name="destinationIp", flag="unknown_destinationIp")
    private String value_destinationIp;
    private boolean unknown_destinationIp;
    public String destinationIp() {
        if (!unknown_destinationIp) return value_destinationIp;
        throw new UndeferrableValueException("Value 'NetworkInsightsPathArgs.destinationIp' is not present");
    }

    /**
     * Destination port to analyze access to.
     * 
     */
    @PolicyResourceProperty(name="destinationPort", flag="unknown_destinationPort")
    private Integer value_destinationPort;
    private boolean unknown_destinationPort;
    public Integer destinationPort() {
        if (!unknown_destinationPort) return value_destinationPort;
        throw new UndeferrableValueException("Value 'NetworkInsightsPathArgs.destinationPort' is not present");
    }

    /**
     * Protocol to use for analysis. Valid options are `tcp` or `udp`.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'NetworkInsightsPathArgs.protocol' is not present");
    }

    /**
     * ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
     * 
     */
    @PolicyResourceProperty(name="source", flag="unknown_source")
    private String value_source;
    private boolean unknown_source;
    public String source() {
        if (!unknown_source) return value_source;
        throw new UndeferrableValueException("Value 'NetworkInsightsPathArgs.source' is not present");
    }

    /**
     * IP address of the source resource.
     * 
     */
    @PolicyResourceProperty(name="sourceIp", flag="unknown_sourceIp")
    private String value_sourceIp;
    private boolean unknown_sourceIp;
    public String sourceIp() {
        if (!unknown_sourceIp) return value_sourceIp;
        throw new UndeferrableValueException("Value 'NetworkInsightsPathArgs.sourceIp' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'NetworkInsightsPathArgs.tags' is not present");
    }

}
