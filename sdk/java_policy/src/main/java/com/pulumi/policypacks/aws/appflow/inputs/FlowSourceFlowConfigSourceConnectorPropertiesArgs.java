// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appflow.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesS3Args;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs;
import com.pulumi.policypacks.aws.appflow.inputs.FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs;
import javax.annotation.Nullable;


public final class FlowSourceFlowConfigSourceConnectorPropertiesArgs {

    /**
     * Information that is required for querying Amplitude. See Generic Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="amplitude", flag="unknown_amplitude")
    private FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs value_amplitude;
    private boolean unknown_amplitude;
    public FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs amplitude() {
        if (!unknown_amplitude) return value_amplitude;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.amplitude' is not present");
    }

    /**
     * Properties that are applied when the custom connector is being used as a source. See Custom Connector Source Properties.
     * 
     */
    @PolicyResourceProperty(name="customConnector", flag="unknown_customConnector")
    private FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs value_customConnector;
    private boolean unknown_customConnector;
    public FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs customConnector() {
        if (!unknown_customConnector) return value_customConnector;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.customConnector' is not present");
    }

    /**
     * Information that is required for querying Datadog. See Generic Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="datadog", flag="unknown_datadog")
    private FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs value_datadog;
    private boolean unknown_datadog;
    public FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs datadog() {
        if (!unknown_datadog) return value_datadog;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.datadog' is not present");
    }

    /**
     * Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
     * 
     */
    @PolicyResourceProperty(name="dynatrace", flag="unknown_dynatrace")
    private FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs value_dynatrace;
    private boolean unknown_dynatrace;
    public FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs dynatrace() {
        if (!unknown_dynatrace) return value_dynatrace;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.dynatrace' is not present");
    }

    /**
     * Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
     * 
     */
    @PolicyResourceProperty(name="googleAnalytics", flag="unknown_googleAnalytics")
    private FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs value_googleAnalytics;
    private boolean unknown_googleAnalytics;
    public FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs googleAnalytics() {
        if (!unknown_googleAnalytics) return value_googleAnalytics;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.googleAnalytics' is not present");
    }

    /**
     * Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="inforNexus", flag="unknown_inforNexus")
    private FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs value_inforNexus;
    private boolean unknown_inforNexus;
    public FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs inforNexus() {
        if (!unknown_inforNexus) return value_inforNexus;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.inforNexus' is not present");
    }

    /**
     * Information that is required for querying Marketo. See Generic Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="marketo", flag="unknown_marketo")
    private FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs value_marketo;
    private boolean unknown_marketo;
    public FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs marketo() {
        if (!unknown_marketo) return value_marketo;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.marketo' is not present");
    }

    /**
     * Information that is required for querying Amazon S3. See S3 Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="s3", flag="unknown_s3")
    private FlowSourceFlowConfigSourceConnectorPropertiesS3Args value_s3;
    private boolean unknown_s3;
    public FlowSourceFlowConfigSourceConnectorPropertiesS3Args s3() {
        if (!unknown_s3) return value_s3;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.s3' is not present");
    }

    /**
     * Information that is required for querying Salesforce. See Salesforce Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="salesforce", flag="unknown_salesforce")
    private FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs value_salesforce;
    private boolean unknown_salesforce;
    public FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs salesforce() {
        if (!unknown_salesforce) return value_salesforce;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.salesforce' is not present");
    }

    /**
     * Information that is required for querying SAPOData as a flow source. See SAPO Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="sapoData", flag="unknown_sapoData")
    private FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs value_sapoData;
    private boolean unknown_sapoData;
    public FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs sapoData() {
        if (!unknown_sapoData) return value_sapoData;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.sapoData' is not present");
    }

    /**
     * Information that is required for querying ServiceNow. See Generic Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="serviceNow", flag="unknown_serviceNow")
    private FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs value_serviceNow;
    private boolean unknown_serviceNow;
    public FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs serviceNow() {
        if (!unknown_serviceNow) return value_serviceNow;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.serviceNow' is not present");
    }

    /**
     * Information that is required for querying Singular. See Generic Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="singular", flag="unknown_singular")
    private FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs value_singular;
    private boolean unknown_singular;
    public FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs singular() {
        if (!unknown_singular) return value_singular;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.singular' is not present");
    }

    /**
     * Information that is required for querying Slack. See Generic Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="slack", flag="unknown_slack")
    private FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs value_slack;
    private boolean unknown_slack;
    public FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs slack() {
        if (!unknown_slack) return value_slack;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.slack' is not present");
    }

    /**
     * Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
     * 
     */
    @PolicyResourceProperty(name="trendmicro", flag="unknown_trendmicro")
    private FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs value_trendmicro;
    private boolean unknown_trendmicro;
    public FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs trendmicro() {
        if (!unknown_trendmicro) return value_trendmicro;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.trendmicro' is not present");
    }

    /**
     * Information that is required for querying Veeva. See Veeva Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="veeva", flag="unknown_veeva")
    private FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs value_veeva;
    private boolean unknown_veeva;
    public FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs veeva() {
        if (!unknown_veeva) return value_veeva;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.veeva' is not present");
    }

    /**
     * Information that is required for querying Zendesk. See Generic Source Properties for more details.
     * 
     */
    @PolicyResourceProperty(name="zendesk", flag="unknown_zendesk")
    private FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs value_zendesk;
    private boolean unknown_zendesk;
    public FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs zendesk() {
        if (!unknown_zendesk) return value_zendesk;
        throw new UndeferrableValueException("Value 'FlowSourceFlowConfigSourceConnectorPropertiesArgs.zendesk' is not present");
    }

}
