// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lightsail/keyPair:KeyPair")
public final class KeyPairArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'KeyPairArgs.name' is not present");
    }

    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'KeyPairArgs.namePrefix' is not present");
    }

    /**
     * An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
     * 
     */
    @PolicyResourceProperty(name="pgpKey", flag="unknown_pgpKey")
    private String value_pgpKey;
    private boolean unknown_pgpKey;
    public String pgpKey() {
        if (!unknown_pgpKey) return value_pgpKey;
        throw new UndeferrableValueException("Value 'KeyPairArgs.pgpKey' is not present");
    }

    /**
     * The public key material. This public key will be imported into Lightsail
     * 
     */
    @PolicyResourceProperty(name="publicKey", flag="unknown_publicKey")
    private String value_publicKey;
    private boolean unknown_publicKey;
    public String publicKey() {
        if (!unknown_publicKey) return value_publicKey;
        throw new UndeferrableValueException("Value 'KeyPairArgs.publicKey' is not present");
    }

    /**
     * A map of tags to assign to the collection. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgp_key` is ignored if `public_key` is supplied.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'KeyPairArgs.tags' is not present");
    }

}
