// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.glue.outputs.CatalogTableStorageDescriptorColumn;
import com.pulumi.policypacks.aws.glue.outputs.CatalogTableStorageDescriptorSchemaReference;
import com.pulumi.policypacks.aws.glue.outputs.CatalogTableStorageDescriptorSerDeInfo;
import com.pulumi.policypacks.aws.glue.outputs.CatalogTableStorageDescriptorSkewedInfo;
import com.pulumi.policypacks.aws.glue.outputs.CatalogTableStorageDescriptorSortColumn;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class CatalogTableStorageDescriptor {

    /**
     * List of locations that point to the path where a Delta table is located.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> additionalLocations;

    public @Nullable List<String> additionalLocations() {
        if (additionalLocations == null) return null;
        return additionalLocations.getValue("CatalogTableStorageDescriptor.additionalLocations");
    }

    /**
     * List of reducer grouping columns, clustering columns, and bucketing columns in the table.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> bucketColumns;

    public @Nullable List<String> bucketColumns() {
        if (bucketColumns == null) return null;
        return bucketColumns.getValue("CatalogTableStorageDescriptor.bucketColumns");
    }

    /**
     * Configuration block for columns in the table. See `columns` below.
     * 
     */
    private @Nullable UndeferrableValue<List<CatalogTableStorageDescriptorColumn>> columns;

    public @Nullable List<CatalogTableStorageDescriptorColumn> columns() {
        if (columns == null) return null;
        return columns.getValue("CatalogTableStorageDescriptor.columns");
    }

    /**
     * Whether the data in the table is compressed.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> compressed;

    public @Nullable Boolean compressed() {
        if (compressed == null) return null;
        return compressed.getValue("CatalogTableStorageDescriptor.compressed");
    }

    /**
     * Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     * 
     */
    private @Nullable UndeferrableValue<String> inputFormat;

    public @Nullable String inputFormat() {
        if (inputFormat == null) return null;
        return inputFormat.getValue("CatalogTableStorageDescriptor.inputFormat");
    }

    /**
     * Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     * 
     */
    private @Nullable UndeferrableValue<String> location;

    public @Nullable String location() {
        if (location == null) return null;
        return location.getValue("CatalogTableStorageDescriptor.location");
    }

    /**
     * Must be specified if the table contains any dimension columns.
     * 
     */
    private @Nullable UndeferrableValue<Integer> numberOfBuckets;

    public @Nullable Integer numberOfBuckets() {
        if (numberOfBuckets == null) return null;
        return numberOfBuckets.getValue("CatalogTableStorageDescriptor.numberOfBuckets");
    }

    /**
     * Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     * 
     */
    private @Nullable UndeferrableValue<String> outputFormat;

    public @Nullable String outputFormat() {
        if (outputFormat == null) return null;
        return outputFormat.getValue("CatalogTableStorageDescriptor.outputFormat");
    }

    /**
     * User-supplied properties in key-value form.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> parameters;

    public @Nullable Map<String,String> parameters() {
        if (parameters == null) return null;
        return parameters.getValue("CatalogTableStorageDescriptor.parameters");
    }

    /**
     * Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
     * 
     */
    private @Nullable UndeferrableValue<CatalogTableStorageDescriptorSchemaReference> schemaReference;

    public @Nullable CatalogTableStorageDescriptorSchemaReference schemaReference() {
        if (schemaReference == null) return null;
        return schemaReference.getValue("CatalogTableStorageDescriptor.schemaReference");
    }

    /**
     * Configuration block for serialization and deserialization (&#34;SerDe&#34;) information. See `ser_de_info` below.
     * 
     */
    private @Nullable UndeferrableValue<CatalogTableStorageDescriptorSerDeInfo> serDeInfo;

    public @Nullable CatalogTableStorageDescriptorSerDeInfo serDeInfo() {
        if (serDeInfo == null) return null;
        return serDeInfo.getValue("CatalogTableStorageDescriptor.serDeInfo");
    }

    /**
     * Configuration block with information about values that appear very frequently in a column (skewed values). See `skewed_info` below.
     * 
     */
    private @Nullable UndeferrableValue<CatalogTableStorageDescriptorSkewedInfo> skewedInfo;

    public @Nullable CatalogTableStorageDescriptorSkewedInfo skewedInfo() {
        if (skewedInfo == null) return null;
        return skewedInfo.getValue("CatalogTableStorageDescriptor.skewedInfo");
    }

    /**
     * Configuration block for the sort order of each bucket in the table. See `sort_columns` below.
     * 
     */
    private @Nullable UndeferrableValue<List<CatalogTableStorageDescriptorSortColumn>> sortColumns;

    public @Nullable List<CatalogTableStorageDescriptorSortColumn> sortColumns() {
        if (sortColumns == null) return null;
        return sortColumns.getValue("CatalogTableStorageDescriptor.sortColumns");
    }

    /**
     * Whether the table data is stored in subdirectories.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> storedAsSubDirectories;

    public @Nullable Boolean storedAsSubDirectories() {
        if (storedAsSubDirectories == null) return null;
        return storedAsSubDirectories.getValue("CatalogTableStorageDescriptor.storedAsSubDirectories");
    }

}
