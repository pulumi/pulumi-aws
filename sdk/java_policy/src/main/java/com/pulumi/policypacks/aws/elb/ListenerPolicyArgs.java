// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elb/listenerPolicy:ListenerPolicy")
public final class ListenerPolicyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The load balancer to attach the policy to.
     * 
     */
    @PolicyResourceProperty(name="loadBalancerName", flag="unknown_loadBalancerName")
    private String value_loadBalancerName;
    private boolean unknown_loadBalancerName;
    public String loadBalancerName() {
        if (!unknown_loadBalancerName) return value_loadBalancerName;
        throw new UndeferrableValueException("Value 'ListenerPolicyArgs.loadBalancerName' is not present");
    }

    /**
     * The load balancer listener port to apply the policy to.
     * 
     */
    @PolicyResourceProperty(name="loadBalancerPort", flag="unknown_loadBalancerPort")
    private Integer value_loadBalancerPort;
    private boolean unknown_loadBalancerPort;
    public Integer loadBalancerPort() {
        if (!unknown_loadBalancerPort) return value_loadBalancerPort;
        throw new UndeferrableValueException("Value 'ListenerPolicyArgs.loadBalancerPort' is not present");
    }

    /**
     * List of Policy Names to apply to the backend server.
     * 
     */
    @PolicyResourceProperty(name="policyNames", flag="unknown_policyNames")
    private List<String> value_policyNames;
    private boolean unknown_policyNames;
    public List<String> policyNames() {
        if (!unknown_policyNames) return value_policyNames;
        throw new UndeferrableValueException("Value 'ListenerPolicyArgs.policyNames' is not present");
    }

    /**
     * Map of arbitrary keys and values that, when changed, will trigger an update.
     * 
     */
    @PolicyResourceProperty(name="triggers", flag="unknown_triggers")
    private Map<String,String> value_triggers;
    private boolean unknown_triggers;
    public Map<String,String> triggers() {
        if (!unknown_triggers) return value_triggers;
        throw new UndeferrableValueException("Value 'ListenerPolicyArgs.triggers' is not present");
    }

}
