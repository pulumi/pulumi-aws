// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.sagemaker;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.sagemaker.inputs.DomainDefaultSpaceSettingsArgs;
import com.pulumi.policypacks.aws.sagemaker.inputs.DomainDefaultUserSettingsArgs;
import com.pulumi.policypacks.aws.sagemaker.inputs.DomainDomainSettingsArgs;
import com.pulumi.policypacks.aws.sagemaker.inputs.DomainRetentionPolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:sagemaker/domain:Domain")
public final class DomainArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies the VPC used for non-EFS traffic. The default value is `PublicInternetOnly`. Valid values are `PublicInternetOnly` and `VpcOnly`.
     * 
     */
    private UndeferrableValue<String> appNetworkAccessType;

    public String appNetworkAccessType() {
        if (appNetworkAccessType == null) return null;
        return appNetworkAccessType.getValue("DomainArgs.appNetworkAccessType");
    }

    /**
     * The entity that creates and manages the required security groups for inter-app communication in `VPCOnly` mode. Valid values are `Service` and `Customer`.
     * 
     */
    private UndeferrableValue<String> appSecurityGroupManagement;

    public String appSecurityGroupManagement() {
        if (appSecurityGroupManagement == null) return null;
        return appSecurityGroupManagement.getValue("DomainArgs.appSecurityGroupManagement");
    }

    /**
     * The mode of authentication that members use to access the domain. Valid values are `IAM` and `SSO`.
     * 
     */
    private UndeferrableValue<String> authMode;

    public String authMode() {
        if (authMode == null) return null;
        return authMode.getValue("DomainArgs.authMode");
    }

    /**
     * The default space settings. See `default_space_settings` Block below.
     * 
     */
    private UndeferrableValue<DomainDefaultSpaceSettingsArgs> defaultSpaceSettings;

    public DomainDefaultSpaceSettingsArgs defaultSpaceSettings() {
        if (defaultSpaceSettings == null) return null;
        return defaultSpaceSettings.getValue("DomainArgs.defaultSpaceSettings");
    }

    /**
     * The default user settings. See `default_user_settings` Block below.
     * 
     */
    private UndeferrableValue<DomainDefaultUserSettingsArgs> defaultUserSettings;

    public DomainDefaultUserSettingsArgs defaultUserSettings() {
        if (defaultUserSettings == null) return null;
        return defaultUserSettings.getValue("DomainArgs.defaultUserSettings");
    }

    /**
     * The domain name.
     * 
     */
    private UndeferrableValue<String> domainName;

    public String domainName() {
        if (domainName == null) return null;
        return domainName.getValue("DomainArgs.domainName");
    }

    /**
     * The domain settings. See `domain_settings` Block below.
     * 
     */
    private UndeferrableValue<DomainDomainSettingsArgs> domainSettings;

    public DomainDomainSettingsArgs domainSettings() {
        if (domainSettings == null) return null;
        return domainSettings.getValue("DomainArgs.domainSettings");
    }

    /**
     * The AWS KMS customer managed CMK used to encrypt the EFS volume attached to the domain.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("DomainArgs.kmsKeyId");
    }

    /**
     * The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See `retention_policy` Block below.
     * 
     */
    private UndeferrableValue<DomainRetentionPolicyArgs> retentionPolicy;

    public DomainRetentionPolicyArgs retentionPolicy() {
        if (retentionPolicy == null) return null;
        return retentionPolicy.getValue("DomainArgs.retentionPolicy");
    }

    /**
     * The VPC subnets that Studio uses for communication.
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("DomainArgs.subnetIds");
    }

    /**
     * Indicates whether custom tag propagation is supported for the domain. Defaults to `DISABLED`. Valid values are: `ENABLED` and `DISABLED`.
     * 
     */
    private UndeferrableValue<String> tagPropagation;

    public String tagPropagation() {
        if (tagPropagation == null) return null;
        return tagPropagation.getValue("DomainArgs.tagPropagation");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DomainArgs.tags");
    }

    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> vpcId;

    public String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("DomainArgs.vpcId");
    }

}
