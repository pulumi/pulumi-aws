// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.sagemaker;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.sagemaker.inputs.DomainDefaultSpaceSettingsArgs;
import com.pulumi.policypacks.aws.sagemaker.inputs.DomainDefaultUserSettingsArgs;
import com.pulumi.policypacks.aws.sagemaker.inputs.DomainDomainSettingsArgs;
import com.pulumi.policypacks.aws.sagemaker.inputs.DomainRetentionPolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:sagemaker/domain:Domain")
public final class DomainArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies the VPC used for non-EFS traffic. The default value is `PublicInternetOnly`. Valid values are `PublicInternetOnly` and `VpcOnly`.
     * 
     */
    @PolicyResourceProperty(name="appNetworkAccessType", flag="unknown_appNetworkAccessType")
    private String value_appNetworkAccessType;
    private boolean unknown_appNetworkAccessType;
    public String appNetworkAccessType() {
        if (!unknown_appNetworkAccessType) return value_appNetworkAccessType;
        throw new UndeferrableValueException("Value 'DomainArgs.appNetworkAccessType' is not present");
    }

    /**
     * The entity that creates and manages the required security groups for inter-app communication in `VPCOnly` mode. Valid values are `Service` and `Customer`.
     * 
     */
    @PolicyResourceProperty(name="appSecurityGroupManagement", flag="unknown_appSecurityGroupManagement")
    private String value_appSecurityGroupManagement;
    private boolean unknown_appSecurityGroupManagement;
    public String appSecurityGroupManagement() {
        if (!unknown_appSecurityGroupManagement) return value_appSecurityGroupManagement;
        throw new UndeferrableValueException("Value 'DomainArgs.appSecurityGroupManagement' is not present");
    }

    /**
     * The mode of authentication that members use to access the domain. Valid values are `IAM` and `SSO`.
     * 
     */
    @PolicyResourceProperty(name="authMode", flag="unknown_authMode")
    private String value_authMode;
    private boolean unknown_authMode;
    public String authMode() {
        if (!unknown_authMode) return value_authMode;
        throw new UndeferrableValueException("Value 'DomainArgs.authMode' is not present");
    }

    /**
     * The default space settings. See `default_space_settings` Block below.
     * 
     */
    @PolicyResourceProperty(name="defaultSpaceSettings", flag="unknown_defaultSpaceSettings")
    private DomainDefaultSpaceSettingsArgs value_defaultSpaceSettings;
    private boolean unknown_defaultSpaceSettings;
    public DomainDefaultSpaceSettingsArgs defaultSpaceSettings() {
        if (!unknown_defaultSpaceSettings) return value_defaultSpaceSettings;
        throw new UndeferrableValueException("Value 'DomainArgs.defaultSpaceSettings' is not present");
    }

    /**
     * The default user settings. See `default_user_settings` Block below.
     * 
     */
    @PolicyResourceProperty(name="defaultUserSettings", flag="unknown_defaultUserSettings")
    private DomainDefaultUserSettingsArgs value_defaultUserSettings;
    private boolean unknown_defaultUserSettings;
    public DomainDefaultUserSettingsArgs defaultUserSettings() {
        if (!unknown_defaultUserSettings) return value_defaultUserSettings;
        throw new UndeferrableValueException("Value 'DomainArgs.defaultUserSettings' is not present");
    }

    /**
     * The domain name.
     * 
     */
    @PolicyResourceProperty(name="domainName", flag="unknown_domainName")
    private String value_domainName;
    private boolean unknown_domainName;
    public String domainName() {
        if (!unknown_domainName) return value_domainName;
        throw new UndeferrableValueException("Value 'DomainArgs.domainName' is not present");
    }

    /**
     * The domain settings. See `domain_settings` Block below.
     * 
     */
    @PolicyResourceProperty(name="domainSettings", flag="unknown_domainSettings")
    private DomainDomainSettingsArgs value_domainSettings;
    private boolean unknown_domainSettings;
    public DomainDomainSettingsArgs domainSettings() {
        if (!unknown_domainSettings) return value_domainSettings;
        throw new UndeferrableValueException("Value 'DomainArgs.domainSettings' is not present");
    }

    /**
     * The AWS KMS customer managed CMK used to encrypt the EFS volume attached to the domain.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'DomainArgs.kmsKeyId' is not present");
    }

    /**
     * The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See `retention_policy` Block below.
     * 
     */
    @PolicyResourceProperty(name="retentionPolicy", flag="unknown_retentionPolicy")
    private DomainRetentionPolicyArgs value_retentionPolicy;
    private boolean unknown_retentionPolicy;
    public DomainRetentionPolicyArgs retentionPolicy() {
        if (!unknown_retentionPolicy) return value_retentionPolicy;
        throw new UndeferrableValueException("Value 'DomainArgs.retentionPolicy' is not present");
    }

    /**
     * The VPC subnets that Studio uses for communication.
     * 
     */
    @PolicyResourceProperty(name="subnetIds", flag="unknown_subnetIds")
    private List<String> value_subnetIds;
    private boolean unknown_subnetIds;
    public List<String> subnetIds() {
        if (!unknown_subnetIds) return value_subnetIds;
        throw new UndeferrableValueException("Value 'DomainArgs.subnetIds' is not present");
    }

    /**
     * Indicates whether custom tag propagation is supported for the domain. Defaults to `DISABLED`. Valid values are: `ENABLED` and `DISABLED`.
     * 
     */
    @PolicyResourceProperty(name="tagPropagation", flag="unknown_tagPropagation")
    private String value_tagPropagation;
    private boolean unknown_tagPropagation;
    public String tagPropagation() {
        if (!unknown_tagPropagation) return value_tagPropagation;
        throw new UndeferrableValueException("Value 'DomainArgs.tagPropagation' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'DomainArgs.tags' is not present");
    }

    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="vpcId", flag="unknown_vpcId")
    private String value_vpcId;
    private boolean unknown_vpcId;
    public String vpcId() {
        if (!unknown_vpcId) return value_vpcId;
        throw new UndeferrableValueException("Value 'DomainArgs.vpcId' is not present");
    }

}
