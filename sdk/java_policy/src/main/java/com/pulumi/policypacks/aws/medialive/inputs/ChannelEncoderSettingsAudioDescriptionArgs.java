// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionArgs {

    /**
     * Advanced audio normalization settings. See Audio Normalization Settings for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs> audioNormalizationSettings;

    public ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs audioNormalizationSettings() {
        if (audioNormalizationSettings == null) return null;
        return audioNormalizationSettings.getValue("ChannelEncoderSettingsAudioDescriptionArgs.audioNormalizationSettings");
    }

    /**
     * The name of the audio selector used as the source for this AudioDescription.
     * 
     */
    private UndeferrableValue<String> audioSelectorName;

    public String audioSelectorName() {
        if (audioSelectorName == null) return null;
        return audioSelectorName.getValue("ChannelEncoderSettingsAudioDescriptionArgs.audioSelectorName");
    }

    /**
     * Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
     * 
     */
    private UndeferrableValue<String> audioType;

    public String audioType() {
        if (audioType == null) return null;
        return audioType.getValue("ChannelEncoderSettingsAudioDescriptionArgs.audioType");
    }

    /**
     * Determined how audio type is determined.
     * 
     */
    private UndeferrableValue<String> audioTypeControl;

    public String audioTypeControl() {
        if (audioTypeControl == null) return null;
        return audioTypeControl.getValue("ChannelEncoderSettingsAudioDescriptionArgs.audioTypeControl");
    }

    /**
     * Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs> audioWatermarkSettings;

    public ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs audioWatermarkSettings() {
        if (audioWatermarkSettings == null) return null;
        return audioWatermarkSettings.getValue("ChannelEncoderSettingsAudioDescriptionArgs.audioWatermarkSettings");
    }

    /**
     * Audio codec settings. See Audio Codec Settings for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs> codecSettings;

    public ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs codecSettings() {
        if (codecSettings == null) return null;
        return codecSettings.getValue("ChannelEncoderSettingsAudioDescriptionArgs.codecSettings");
    }

    private UndeferrableValue<String> languageCode;

    public String languageCode() {
        if (languageCode == null) return null;
        return languageCode.getValue("ChannelEncoderSettingsAudioDescriptionArgs.languageCode");
    }

    private UndeferrableValue<String> languageCodeControl;

    public String languageCodeControl() {
        if (languageCodeControl == null) return null;
        return languageCodeControl.getValue("ChannelEncoderSettingsAudioDescriptionArgs.languageCodeControl");
    }

    /**
     * The name of this audio description.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ChannelEncoderSettingsAudioDescriptionArgs.name");
    }

    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs> remixSettings;

    public ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs remixSettings() {
        if (remixSettings == null) return null;
        return remixSettings.getValue("ChannelEncoderSettingsAudioDescriptionArgs.remixSettings");
    }

    /**
     * Stream name RTMP destinations (URLs of type rtmp://)
     * 
     */
    private UndeferrableValue<String> streamName;

    public String streamName() {
        if (streamName == null) return null;
        return streamName.getValue("ChannelEncoderSettingsAudioDescriptionArgs.streamName");
    }

}
