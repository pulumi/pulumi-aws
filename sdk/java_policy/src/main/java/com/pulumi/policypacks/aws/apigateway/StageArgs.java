// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apigateway.inputs.StageAccessLogSettingsArgs;
import com.pulumi.policypacks.aws.apigateway.inputs.StageCanarySettingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigateway/stage:Stage")
public final class StageArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Enables access logs for the API stage. See Access Log Settings below.
     * 
     */
    private UndeferrableValue<StageAccessLogSettingsArgs> accessLogSettings;

    public StageAccessLogSettingsArgs accessLogSettings() {
        if (accessLogSettings == null) return null;
        return accessLogSettings.getValue("StageArgs.accessLogSettings");
    }

    /**
     * Whether a cache cluster is enabled for the stage
     * 
     */
    private UndeferrableValue<Boolean> cacheClusterEnabled;

    public Boolean cacheClusterEnabled() {
        if (cacheClusterEnabled == null) return null;
        return cacheClusterEnabled.getValue("StageArgs.cacheClusterEnabled");
    }

    /**
     * Size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
     * 
     */
    private UndeferrableValue<String> cacheClusterSize;

    public String cacheClusterSize() {
        if (cacheClusterSize == null) return null;
        return cacheClusterSize.getValue("StageArgs.cacheClusterSize");
    }

    /**
     * Configuration settings of a canary deployment. See Canary Settings below.
     * 
     */
    private UndeferrableValue<StageCanarySettingsArgs> canarySettings;

    public StageCanarySettingsArgs canarySettings() {
        if (canarySettings == null) return null;
        return canarySettings.getValue("StageArgs.canarySettings");
    }

    /**
     * Identifier of a client certificate for the stage.
     * 
     */
    private UndeferrableValue<String> clientCertificateId;

    public String clientCertificateId() {
        if (clientCertificateId == null) return null;
        return clientCertificateId.getValue("StageArgs.clientCertificateId");
    }

    /**
     * ID of the deployment that the stage points to
     * 
     */
    private UndeferrableValue<String> deployment;

    public String deployment() {
        if (deployment == null) return null;
        return deployment.getValue("StageArgs.deployment");
    }

    /**
     * Description of the stage.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("StageArgs.description");
    }

    /**
     * Version of the associated API documentation
     * 
     */
    private UndeferrableValue<String> documentationVersion;

    public String documentationVersion() {
        if (documentationVersion == null) return null;
        return documentationVersion.getValue("StageArgs.documentationVersion");
    }

    /**
     * ID of the associated REST API
     * 
     */
    private UndeferrableValue<String> restApi;

    public String restApi() {
        if (restApi == null) return null;
        return restApi.getValue("StageArgs.restApi");
    }

    /**
     * Name of the stage
     * 
     */
    private UndeferrableValue<String> stageName;

    public String stageName() {
        if (stageName == null) return null;
        return stageName.getValue("StageArgs.stageName");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("StageArgs.tags");
    }

    /**
     * Map that defines the stage variables
     * 
     */
    private UndeferrableValue<Map<String,String>> variables;

    public Map<String,String> variables() {
        if (variables == null) return null;
        return variables.getValue("StageArgs.variables");
    }

    /**
     * Whether active tracing with X-ray is enabled. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> xrayTracingEnabled;

    public Boolean xrayTracingEnabled() {
        if (xrayTracingEnabled == null) return null;
        return xrayTracingEnabled.getValue("StageArgs.xrayTracingEnabled");
    }

}
