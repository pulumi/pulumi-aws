// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.memorydb;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.memorydb.outputs.ClusterClusterEndpoint;
import com.pulumi.policypacks.aws.memorydb.outputs.ClusterShard;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:memorydb/cluster:Cluster")
public final class Cluster extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The name of the Access Control List to associate with the cluster.
     * 
     */
    private UndeferrableValue<String> aclName;

    public String aclName() {
        if (aclName == null) return null;
        return aclName.getValue("Cluster.aclName");
    }

    /**
     * The ARN of the cluster.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Cluster.arn");
    }

    /**
     * When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> autoMinorVersionUpgrade;

    public @Nullable Boolean autoMinorVersionUpgrade() {
        if (autoMinorVersionUpgrade == null) return null;
        return autoMinorVersionUpgrade.getValue("Cluster.autoMinorVersionUpgrade");
    }

    private UndeferrableValue<List<ClusterClusterEndpoint>> clusterEndpoints;

    public List<ClusterClusterEndpoint> clusterEndpoints() {
        if (clusterEndpoints == null) return null;
        return clusterEndpoints.getValue("Cluster.clusterEndpoints");
    }

    /**
     * Enables data tiering. This option is not supported by all instance types. For more information, see [Data tiering](https://docs.aws.amazon.com/memorydb/latest/devguide/data-tiering.html).
     * 
     */
    private @Nullable UndeferrableValue<Boolean> dataTiering;

    public @Nullable Boolean dataTiering() {
        if (dataTiering == null) return null;
        return dataTiering.getValue("Cluster.dataTiering");
    }

    /**
     * Description for the cluster. Defaults to `&#34;Managed by Pulumi&#34;`.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("Cluster.description");
    }

    /**
     * The engine that will run on your nodes. Supported values are `redis` and `valkey`.
     * 
     */
    private UndeferrableValue<String> engine;

    public String engine() {
        if (engine == null) return null;
        return engine.getValue("Cluster.engine");
    }

    /**
     * Patch version number of the engine used by the cluster.
     * 
     */
    private UndeferrableValue<String> enginePatchVersion;

    public String enginePatchVersion() {
        if (enginePatchVersion == null) return null;
        return enginePatchVersion.getValue("Cluster.enginePatchVersion");
    }

    /**
     * Version number of the engine to be used for the cluster. Downgrades are not supported.
     * 
     */
    private UndeferrableValue<String> engineVersion;

    public String engineVersion() {
        if (engineVersion == null) return null;
        return engineVersion.getValue("Cluster.engineVersion");
    }

    /**
     * Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
     * 
     */
    private @Nullable UndeferrableValue<String> finalSnapshotName;

    public @Nullable String finalSnapshotName() {
        if (finalSnapshotName == null) return null;
        return finalSnapshotName.getValue("Cluster.finalSnapshotName");
    }

    /**
     * ARN of the KMS key used to encrypt the cluster at rest.
     * 
     */
    private @Nullable UndeferrableValue<String> kmsKeyArn;

    public @Nullable String kmsKeyArn() {
        if (kmsKeyArn == null) return null;
        return kmsKeyArn.getValue("Cluster.kmsKeyArn");
    }

    /**
     * Specifies the weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
     * 
     */
    private UndeferrableValue<String> maintenanceWindow;

    public String maintenanceWindow() {
        if (maintenanceWindow == null) return null;
        return maintenanceWindow.getValue("Cluster.maintenanceWindow");
    }

    /**
     * The multi region cluster identifier specified on `aws.memorydb.MultiRegionCluster`.
     * 
     */
    private @Nullable UndeferrableValue<String> multiRegionClusterName;

    public @Nullable String multiRegionClusterName() {
        if (multiRegionClusterName == null) return null;
        return multiRegionClusterName.getValue("Cluster.multiRegionClusterName");
    }

    /**
     * Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("Cluster.name");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("Cluster.namePrefix");
    }

    /**
     * The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> nodeType;

    public String nodeType() {
        if (nodeType == null) return null;
        return nodeType.getValue("Cluster.nodeType");
    }

    /**
     * The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
     * 
     */
    private @Nullable UndeferrableValue<Integer> numReplicasPerShard;

    public @Nullable Integer numReplicasPerShard() {
        if (numReplicasPerShard == null) return null;
        return numReplicasPerShard.getValue("Cluster.numReplicasPerShard");
    }

    /**
     * The number of shards in the cluster. Defaults to `1`.
     * 
     */
    private @Nullable UndeferrableValue<Integer> numShards;

    public @Nullable Integer numShards() {
        if (numShards == null) return null;
        return numShards.getValue("Cluster.numShards");
    }

    /**
     * The name of the parameter group associated with the cluster.
     * 
     */
    private UndeferrableValue<String> parameterGroupName;

    public String parameterGroupName() {
        if (parameterGroupName == null) return null;
        return parameterGroupName.getValue("Cluster.parameterGroupName");
    }

    /**
     * The port number on which each of the nodes accepts connections. Defaults to `6379`.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("Cluster.port");
    }

    /**
     * Set of VPC Security Group ID-s to associate with this cluster.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> securityGroupIds;

    public @Nullable List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("Cluster.securityGroupIds");
    }

    /**
     * Set of shards in this cluster.
     * 
     */
    private UndeferrableValue<List<ClusterShard>> shards;

    public List<ClusterShard> shards() {
        if (shards == null) return null;
        return shards.getValue("Cluster.shards");
    }

    /**
     * List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> snapshotArns;

    public @Nullable List<String> snapshotArns() {
        if (snapshotArns == null) return null;
        return snapshotArns.getValue("Cluster.snapshotArns");
    }

    /**
     * The name of a snapshot from which to restore data into the new cluster.
     * 
     */
    private @Nullable UndeferrableValue<String> snapshotName;

    public @Nullable String snapshotName() {
        if (snapshotName == null) return null;
        return snapshotName.getValue("Cluster.snapshotName");
    }

    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
     * 
     */
    private UndeferrableValue<Integer> snapshotRetentionLimit;

    public Integer snapshotRetentionLimit() {
        if (snapshotRetentionLimit == null) return null;
        return snapshotRetentionLimit.getValue("Cluster.snapshotRetentionLimit");
    }

    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
     * 
     */
    private UndeferrableValue<String> snapshotWindow;

    public String snapshotWindow() {
        if (snapshotWindow == null) return null;
        return snapshotWindow.getValue("Cluster.snapshotWindow");
    }

    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    private @Nullable UndeferrableValue<String> snsTopicArn;

    public @Nullable String snsTopicArn() {
        if (snsTopicArn == null) return null;
        return snsTopicArn.getValue("Cluster.snsTopicArn");
    }

    /**
     * The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
     * 
     */
    private UndeferrableValue<String> subnetGroupName;

    public String subnetGroupName() {
        if (subnetGroupName == null) return null;
        return subnetGroupName.getValue("Cluster.subnetGroupName");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Cluster.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Cluster.tagsAll");
    }

    /**
     * A flag to enable in-transit encryption on the cluster. When set to `false`, the `acl_name` must be `open-access`. Defaults to `true`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> tlsEnabled;

    public @Nullable Boolean tlsEnabled() {
        if (tlsEnabled == null) return null;
        return tlsEnabled.getValue("Cluster.tlsEnabled");
    }

}
