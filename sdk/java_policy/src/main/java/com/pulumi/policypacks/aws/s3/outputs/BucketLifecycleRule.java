// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleRuleExpiration;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleRuleNoncurrentVersionExpiration;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleRuleNoncurrentVersionTransition;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleRuleTransition;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class BucketLifecycleRule {

    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    private @Nullable UndeferrableValue<Integer> abortIncompleteMultipartUploadDays;

    public @Nullable Integer abortIncompleteMultipartUploadDays() {
        if (abortIncompleteMultipartUploadDays == null) return null;
        return abortIncompleteMultipartUploadDays.getValue("BucketLifecycleRule.abortIncompleteMultipartUploadDays");
    }

    /**
     * Specifies lifecycle rule status.
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("BucketLifecycleRule.enabled");
    }

    /**
     * Specifies a period in the object&#39;s expire (documented below).
     * 
     */
    private @Nullable UndeferrableValue<BucketLifecycleRuleExpiration> expiration;

    public @Nullable BucketLifecycleRuleExpiration expiration() {
        if (expiration == null) return null;
        return expiration.getValue("BucketLifecycleRule.expiration");
    }

    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    private @Nullable UndeferrableValue<String> id;

    public @Nullable String id() {
        if (id == null) return null;
        return id.getValue("BucketLifecycleRule.id");
    }

    /**
     * Specifies when noncurrent object versions expire (documented below).
     * 
     */
    private @Nullable UndeferrableValue<BucketLifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpiration;

    public @Nullable BucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration() {
        if (noncurrentVersionExpiration == null) return null;
        return noncurrentVersionExpiration.getValue("BucketLifecycleRule.noncurrentVersionExpiration");
    }

    /**
     * Specifies when noncurrent object versions transitions (documented below).
     * 
     * At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
     * 
     */
    private @Nullable UndeferrableValue<List<BucketLifecycleRuleNoncurrentVersionTransition>> noncurrentVersionTransitions;

    public @Nullable List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions() {
        if (noncurrentVersionTransitions == null) return null;
        return noncurrentVersionTransitions.getValue("BucketLifecycleRule.noncurrentVersionTransitions");
    }

    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    private @Nullable UndeferrableValue<String> prefix;

    public @Nullable String prefix() {
        if (prefix == null) return null;
        return prefix.getValue("BucketLifecycleRule.prefix");
    }

    /**
     * Specifies object tags key and value.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("BucketLifecycleRule.tags");
    }

    /**
     * Specifies a period in the object&#39;s transitions (documented below).
     * 
     */
    private @Nullable UndeferrableValue<List<BucketLifecycleRuleTransition>> transitions;

    public @Nullable List<BucketLifecycleRuleTransition> transitions() {
        if (transitions == null) return null;
        return transitions.getValue("BucketLifecycleRule.transitions");
    }

}
