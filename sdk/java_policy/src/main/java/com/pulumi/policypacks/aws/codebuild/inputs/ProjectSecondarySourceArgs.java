// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codebuild.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.codebuild.inputs.ProjectSecondarySourceAuthArgs;
import com.pulumi.policypacks.aws.codebuild.inputs.ProjectSecondarySourceBuildStatusConfigArgs;
import com.pulumi.policypacks.aws.codebuild.inputs.ProjectSecondarySourceGitSubmodulesConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ProjectSecondarySourceArgs {

    /**
     * Information about the strategy CodeBuild should use when authenticating with the source code host.
     * Detailed below.
     * 
     */
    private UndeferrableValue<ProjectSecondarySourceAuthArgs> auth;

    public ProjectSecondarySourceAuthArgs auth() {
        if (auth == null) return null;
        return auth.getValue("ProjectSecondarySourceArgs.auth");
    }

    /**
     * Configuration block that contains information that defines how the build project
     * reports the build status to the source provider. This option is only used when the source provider is GitHub, GitHub
     * Enterprise, GitLab, GitLab Self Managed, or Bitbucket. `build_status_config` blocks are documented below.
     * 
     */
    private UndeferrableValue<ProjectSecondarySourceBuildStatusConfigArgs> buildStatusConfig;

    public ProjectSecondarySourceBuildStatusConfigArgs buildStatusConfig() {
        if (buildStatusConfig == null) return null;
        return buildStatusConfig.getValue("ProjectSecondarySourceArgs.buildStatusConfig");
    }

    /**
     * The build spec declaration to use for this build project&#39;s related builds. This must be set
     * when `type` is `NO_SOURCE`. It can either be a path to a file residing in the repository to be built or a local file
     * path leveraging the `file()` built-in.
     * 
     */
    private UndeferrableValue<String> buildspec;

    public String buildspec() {
        if (buildspec == null) return null;
        return buildspec.getValue("ProjectSecondarySourceArgs.buildspec");
    }

    /**
     * Truncate git history to this many commits. Use `0` for a `Full` checkout which you need
     * to run commands like `git branch --show-current`.
     * See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html)
     * for details.
     * 
     */
    private UndeferrableValue<Integer> gitCloneDepth;

    public Integer gitCloneDepth() {
        if (gitCloneDepth == null) return null;
        return gitCloneDepth.getValue("ProjectSecondarySourceArgs.gitCloneDepth");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<ProjectSecondarySourceGitSubmodulesConfigArgs> gitSubmodulesConfig;

    public ProjectSecondarySourceGitSubmodulesConfigArgs gitSubmodulesConfig() {
        if (gitSubmodulesConfig == null) return null;
        return gitSubmodulesConfig.getValue("ProjectSecondarySourceArgs.gitSubmodulesConfig");
    }

    /**
     * Ignore SSL warnings when connecting to source control.
     * 
     */
    private UndeferrableValue<Boolean> insecureSsl;

    public Boolean insecureSsl() {
        if (insecureSsl == null) return null;
        return insecureSsl.getValue("ProjectSecondarySourceArgs.insecureSsl");
    }

    /**
     * Location of the source code from git or s3.
     * 
     */
    private UndeferrableValue<String> location;

    public String location() {
        if (location == null) return null;
        return location.getValue("ProjectSecondarySourceArgs.location");
    }

    /**
     * Whether to report the status of a build&#39;s start and finish to your source provider.
     * This option is valid only when your source provider is GitHub, GitHub Enterprise, GitLab, GitLab Self Managed, or
     * Bitbucket.
     * 
     */
    private UndeferrableValue<Boolean> reportBuildStatus;

    public Boolean reportBuildStatus() {
        if (reportBuildStatus == null) return null;
        return reportBuildStatus.getValue("ProjectSecondarySourceArgs.reportBuildStatus");
    }

    /**
     * An identifier for this project source. The identifier can only contain alphanumeric
     * characters and underscores, and must be less than 128 characters in length.
     * 
     */
    private UndeferrableValue<String> sourceIdentifier;

    public String sourceIdentifier() {
        if (sourceIdentifier == null) return null;
        return sourceIdentifier.getValue("ProjectSecondarySourceArgs.sourceIdentifier");
    }

    /**
     * Type of repository that contains the source code to be built. Valid values: `BITBUCKET`,
     * `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `GITLAB`, `GITLAB_SELF_MANAGED`, `NO_SOURCE`, `S3`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ProjectSecondarySourceArgs.type");
    }

}
