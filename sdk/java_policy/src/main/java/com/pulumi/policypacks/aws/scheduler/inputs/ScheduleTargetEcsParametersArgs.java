// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.scheduler.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.scheduler.inputs.ScheduleTargetEcsParametersCapacityProviderStrategyArgs;
import com.pulumi.policypacks.aws.scheduler.inputs.ScheduleTargetEcsParametersNetworkConfigurationArgs;
import com.pulumi.policypacks.aws.scheduler.inputs.ScheduleTargetEcsParametersPlacementConstraintArgs;
import com.pulumi.policypacks.aws.scheduler.inputs.ScheduleTargetEcsParametersPlacementStrategyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class ScheduleTargetEcsParametersArgs {

    /**
     * Up to `6` capacity provider strategies to use for the task. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="capacityProviderStrategies", flag="unknown_capacityProviderStrategies")
    private List<ScheduleTargetEcsParametersCapacityProviderStrategyArgs> value_capacityProviderStrategies;
    private boolean unknown_capacityProviderStrategies;
    public List<ScheduleTargetEcsParametersCapacityProviderStrategyArgs> capacityProviderStrategies() {
        if (!unknown_capacityProviderStrategies) return value_capacityProviderStrategies;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.capacityProviderStrategies' is not present");
    }

    /**
     * Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
     * 
     */
    @PolicyResourceProperty(name="enableEcsManagedTags", flag="unknown_enableEcsManagedTags")
    private Boolean value_enableEcsManagedTags;
    private boolean unknown_enableEcsManagedTags;
    public Boolean enableEcsManagedTags() {
        if (!unknown_enableEcsManagedTags) return value_enableEcsManagedTags;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.enableEcsManagedTags' is not present");
    }

    /**
     * Specifies whether to enable the execute command functionality for the containers in this task.
     * 
     */
    @PolicyResourceProperty(name="enableExecuteCommand", flag="unknown_enableExecuteCommand")
    private Boolean value_enableExecuteCommand;
    private boolean unknown_enableExecuteCommand;
    public Boolean enableExecuteCommand() {
        if (!unknown_enableExecuteCommand) return value_enableExecuteCommand;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.enableExecuteCommand' is not present");
    }

    /**
     * Specifies an ECS task group for the task. At most 255 characters.
     * 
     */
    @PolicyResourceProperty(name="group", flag="unknown_group")
    private String value_group;
    private boolean unknown_group;
    public String group() {
        if (!unknown_group) return value_group;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.group' is not present");
    }

    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
     * 
     */
    @PolicyResourceProperty(name="launchType", flag="unknown_launchType")
    private String value_launchType;
    private boolean unknown_launchType;
    public String launchType() {
        if (!unknown_launchType) return value_launchType;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.launchType' is not present");
    }

    /**
     * Configures the networking associated with the task. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="networkConfiguration", flag="unknown_networkConfiguration")
    private ScheduleTargetEcsParametersNetworkConfigurationArgs value_networkConfiguration;
    private boolean unknown_networkConfiguration;
    public ScheduleTargetEcsParametersNetworkConfigurationArgs networkConfiguration() {
        if (!unknown_networkConfiguration) return value_networkConfiguration;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.networkConfiguration' is not present");
    }

    /**
     * A set of up to 10 placement constraints to use for the task. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="placementConstraints", flag="unknown_placementConstraints")
    private List<ScheduleTargetEcsParametersPlacementConstraintArgs> value_placementConstraints;
    private boolean unknown_placementConstraints;
    public List<ScheduleTargetEcsParametersPlacementConstraintArgs> placementConstraints() {
        if (!unknown_placementConstraints) return value_placementConstraints;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.placementConstraints' is not present");
    }

    /**
     * A set of up to 5 placement strategies. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="placementStrategies", flag="unknown_placementStrategies")
    private List<ScheduleTargetEcsParametersPlacementStrategyArgs> value_placementStrategies;
    private boolean unknown_placementStrategies;
    public List<ScheduleTargetEcsParametersPlacementStrategyArgs> placementStrategies() {
        if (!unknown_placementStrategies) return value_placementStrategies;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.placementStrategies' is not present");
    }

    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
     * 
     */
    @PolicyResourceProperty(name="platformVersion", flag="unknown_platformVersion")
    private String value_platformVersion;
    private boolean unknown_platformVersion;
    public String platformVersion() {
        if (!unknown_platformVersion) return value_platformVersion;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.platformVersion' is not present");
    }

    /**
     * Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
     * 
     */
    @PolicyResourceProperty(name="propagateTags", flag="unknown_propagateTags")
    private String value_propagateTags;
    private boolean unknown_propagateTags;
    public String propagateTags() {
        if (!unknown_propagateTags) return value_propagateTags;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.propagateTags' is not present");
    }

    /**
     * Reference ID to use for the task.
     * 
     */
    @PolicyResourceProperty(name="referenceId", flag="unknown_referenceId")
    private String value_referenceId;
    private boolean unknown_referenceId;
    public String referenceId() {
        if (!unknown_referenceId) return value_referenceId;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.referenceId' is not present");
    }

    /**
     * The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.tags' is not present");
    }

    /**
     * The number of tasks to create. Ranges from `1` (default) to `10`.
     * 
     */
    @PolicyResourceProperty(name="taskCount", flag="unknown_taskCount")
    private Integer value_taskCount;
    private boolean unknown_taskCount;
    public Integer taskCount() {
        if (!unknown_taskCount) return value_taskCount;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.taskCount' is not present");
    }

    /**
     * ARN of the task definition to use.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="taskDefinitionArn", flag="unknown_taskDefinitionArn")
    private String value_taskDefinitionArn;
    private boolean unknown_taskDefinitionArn;
    public String taskDefinitionArn() {
        if (!unknown_taskDefinitionArn) return value_taskDefinitionArn;
        throw new UndeferrableValueException("Value 'ScheduleTargetEcsParametersArgs.taskDefinitionArn' is not present");
    }

}
