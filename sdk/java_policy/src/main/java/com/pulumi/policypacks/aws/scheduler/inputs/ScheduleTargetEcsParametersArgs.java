// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.scheduler.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.scheduler.inputs.ScheduleTargetEcsParametersCapacityProviderStrategyArgs;
import com.pulumi.policypacks.aws.scheduler.inputs.ScheduleTargetEcsParametersNetworkConfigurationArgs;
import com.pulumi.policypacks.aws.scheduler.inputs.ScheduleTargetEcsParametersPlacementConstraintArgs;
import com.pulumi.policypacks.aws.scheduler.inputs.ScheduleTargetEcsParametersPlacementStrategyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class ScheduleTargetEcsParametersArgs {

    /**
     * Up to `6` capacity provider strategies to use for the task. Detailed below.
     * 
     */
    private UndeferrableValue<List<ScheduleTargetEcsParametersCapacityProviderStrategyArgs>> capacityProviderStrategies;

    public List<ScheduleTargetEcsParametersCapacityProviderStrategyArgs> capacityProviderStrategies() {
        if (capacityProviderStrategies == null) return null;
        return capacityProviderStrategies.getValue("ScheduleTargetEcsParametersArgs.capacityProviderStrategies");
    }

    /**
     * Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
     * 
     */
    private UndeferrableValue<Boolean> enableEcsManagedTags;

    public Boolean enableEcsManagedTags() {
        if (enableEcsManagedTags == null) return null;
        return enableEcsManagedTags.getValue("ScheduleTargetEcsParametersArgs.enableEcsManagedTags");
    }

    /**
     * Specifies whether to enable the execute command functionality for the containers in this task.
     * 
     */
    private UndeferrableValue<Boolean> enableExecuteCommand;

    public Boolean enableExecuteCommand() {
        if (enableExecuteCommand == null) return null;
        return enableExecuteCommand.getValue("ScheduleTargetEcsParametersArgs.enableExecuteCommand");
    }

    /**
     * Specifies an ECS task group for the task. At most 255 characters.
     * 
     */
    private UndeferrableValue<String> group;

    public String group() {
        if (group == null) return null;
        return group.getValue("ScheduleTargetEcsParametersArgs.group");
    }

    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
     * 
     */
    private UndeferrableValue<String> launchType;

    public String launchType() {
        if (launchType == null) return null;
        return launchType.getValue("ScheduleTargetEcsParametersArgs.launchType");
    }

    /**
     * Configures the networking associated with the task. Detailed below.
     * 
     */
    private UndeferrableValue<ScheduleTargetEcsParametersNetworkConfigurationArgs> networkConfiguration;

    public ScheduleTargetEcsParametersNetworkConfigurationArgs networkConfiguration() {
        if (networkConfiguration == null) return null;
        return networkConfiguration.getValue("ScheduleTargetEcsParametersArgs.networkConfiguration");
    }

    /**
     * A set of up to 10 placement constraints to use for the task. Detailed below.
     * 
     */
    private UndeferrableValue<List<ScheduleTargetEcsParametersPlacementConstraintArgs>> placementConstraints;

    public List<ScheduleTargetEcsParametersPlacementConstraintArgs> placementConstraints() {
        if (placementConstraints == null) return null;
        return placementConstraints.getValue("ScheduleTargetEcsParametersArgs.placementConstraints");
    }

    /**
     * A set of up to 5 placement strategies. Detailed below.
     * 
     */
    private UndeferrableValue<List<ScheduleTargetEcsParametersPlacementStrategyArgs>> placementStrategies;

    public List<ScheduleTargetEcsParametersPlacementStrategyArgs> placementStrategies() {
        if (placementStrategies == null) return null;
        return placementStrategies.getValue("ScheduleTargetEcsParametersArgs.placementStrategies");
    }

    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
     * 
     */
    private UndeferrableValue<String> platformVersion;

    public String platformVersion() {
        if (platformVersion == null) return null;
        return platformVersion.getValue("ScheduleTargetEcsParametersArgs.platformVersion");
    }

    /**
     * Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
     * 
     */
    private UndeferrableValue<String> propagateTags;

    public String propagateTags() {
        if (propagateTags == null) return null;
        return propagateTags.getValue("ScheduleTargetEcsParametersArgs.propagateTags");
    }

    /**
     * Reference ID to use for the task.
     * 
     */
    private UndeferrableValue<String> referenceId;

    public String referenceId() {
        if (referenceId == null) return null;
        return referenceId.getValue("ScheduleTargetEcsParametersArgs.referenceId");
    }

    /**
     * The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ScheduleTargetEcsParametersArgs.tags");
    }

    /**
     * The number of tasks to create. Ranges from `1` (default) to `10`.
     * 
     */
    private UndeferrableValue<Integer> taskCount;

    public Integer taskCount() {
        if (taskCount == null) return null;
        return taskCount.getValue("ScheduleTargetEcsParametersArgs.taskCount");
    }

    /**
     * ARN of the task definition to use.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> taskDefinitionArn;

    public String taskDefinitionArn() {
        if (taskDefinitionArn == null) return null;
        return taskDefinitionArn.getValue("ScheduleTargetEcsParametersArgs.taskDefinitionArn");
    }

}
