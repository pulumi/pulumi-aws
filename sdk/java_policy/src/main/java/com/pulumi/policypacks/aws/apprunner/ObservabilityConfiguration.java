// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apprunner;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apprunner.outputs.ObservabilityConfigurationTraceConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apprunner/observabilityConfiguration:ObservabilityConfiguration")
public final class ObservabilityConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of this observability configuration.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("ObservabilityConfiguration.arn");
    }

    /**
     * Whether the observability configuration has the highest `observability_configuration_revision` among all configurations that share the same `observability_configuration_name`.
     * 
     */
    private UndeferrableValue<Boolean> latest;

    public Boolean latest() {
        if (latest == null) return null;
        return latest.getValue("ObservabilityConfiguration.latest");
    }

    /**
     * Name of the observability configuration.
     * 
     */
    private UndeferrableValue<String> observabilityConfigurationName;

    public String observabilityConfigurationName() {
        if (observabilityConfigurationName == null) return null;
        return observabilityConfigurationName.getValue("ObservabilityConfiguration.observabilityConfigurationName");
    }

    /**
     * The revision of this observability configuration.
     * 
     */
    private UndeferrableValue<Integer> observabilityConfigurationRevision;

    public Integer observabilityConfigurationRevision() {
        if (observabilityConfigurationRevision == null) return null;
        return observabilityConfigurationRevision.getValue("ObservabilityConfiguration.observabilityConfigurationRevision");
    }

    /**
     * Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can&#39;t be used. It is permanently removed some time after deletion.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("ObservabilityConfiguration.status");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ObservabilityConfiguration.tags");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("ObservabilityConfiguration.tagsAll");
    }

    /**
     * Configuration of the tracing feature within this observability configuration. If you don&#39;t specify it, App Runner doesn&#39;t enable tracing. See Trace Configuration below for more details.
     * 
     */
    private @Nullable UndeferrableValue<ObservabilityConfigurationTraceConfiguration> traceConfiguration;

    public @Nullable ObservabilityConfigurationTraceConfiguration traceConfiguration() {
        if (traceConfiguration == null) return null;
        return traceConfiguration.getValue("ObservabilityConfiguration.traceConfiguration");
    }

}
