// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.sns;

import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;


@PolicyResourceType(type="aws:sns/topicSubscription:TopicSubscription")
public final class TopicSubscription extends com.pulumi.resources.PolicyResource {

    /**
     * ARN of the subscription.
     * 
     */
    public String arn;



    /**
     * Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
     * 
     */
    public Integer confirmationTimeoutInMinutes;



    /**
     * Whether the subscription confirmation request was authenticated.
     * 
     */
    public Boolean confirmationWasAuthenticated;



    /**
     * JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
     * 
     */
    public String deliveryPolicy;



    /**
     * Endpoint to send data to. The contents vary with the protocol. See details below.
     * 
     */
    public String endpoint;



    /**
     * Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
     * 
     */
    public Boolean endpointAutoConfirms;



    /**
     * JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
     * 
     */
    public String filterPolicy;



    /**
     * Whether the `filter_policy` applies to `MessageAttributes` (default) or `MessageBody`.
     * 
     */
    public String filterPolicyScope;



    /**
     * AWS account ID of the subscription&#39;s owner.
     * 
     */
    public String ownerId;



    /**
     * Whether the subscription has not been confirmed.
     * 
     */
    public Boolean pendingConfirmation;



    /**
     * Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
     * 
     */
    public String protocol;



    /**
     * Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
     * 
     */
    public Boolean rawMessageDelivery;



    /**
     * JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
     * 
     */
    public String redrivePolicy;



    /**
     * JSON String with the archived message replay policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-archiving-and-replay-subscriber.html) for more details.
     * 
     */
    public String replayPolicy;



    /**
     * ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
     * 
     */
    public String subscriptionRoleArn;



    /**
     * ARN of the SNS topic to subscribe to.
     * 
     * The following arguments are optional:
     * 
     */
    public String topic;



}
