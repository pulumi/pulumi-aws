// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.outputs.SpotFleetRequestLaunchSpecification;
import com.pulumi.policypacks.aws.ec2.outputs.SpotFleetRequestLaunchTemplateConfig;
import com.pulumi.policypacks.aws.ec2.outputs.SpotFleetRequestSpotMaintenanceStrategies;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/spotFleetRequest:SpotFleetRequest")
public final class SpotFleetRequest extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Indicates how to allocate the target capacity across
     * the Spot pools specified by the Spot fleet request. Valid values: `lowestPrice`, `diversified`, `capacityOptimized`, `capacityOptimizedPrioritized`, and `priceCapacityOptimized`. The default is
     * `lowestPrice`.
     * 
     */
    @PolicyResourceProperty(name="allocationStrategy", flag="unknown_allocationStrategy")
    private @Nullable String value_allocationStrategy;
    private boolean unknown_allocationStrategy;
    public @Nullable String allocationStrategy() {
        if (!unknown_allocationStrategy) return value_allocationStrategy;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.allocationStrategy' is not present");
    }

    @PolicyResourceProperty(name="clientToken", flag="unknown_clientToken")
    private String value_clientToken;
    private boolean unknown_clientToken;
    public String clientToken() {
        if (!unknown_clientToken) return value_clientToken;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.clientToken' is not present");
    }

    /**
     * Reserved.
     * 
     */
    @PolicyResourceProperty(name="context", flag="unknown_context")
    private @Nullable String value_context;
    private boolean unknown_context;
    public @Nullable String context() {
        if (!unknown_context) return value_context;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.context' is not present");
    }

    /**
     * Indicates whether running Spot
     * instances should be terminated if the target capacity of the Spot fleet
     * request is decreased below the current size of the Spot fleet.
     * 
     */
    @PolicyResourceProperty(name="excessCapacityTerminationPolicy", flag="unknown_excessCapacityTerminationPolicy")
    private @Nullable String value_excessCapacityTerminationPolicy;
    private boolean unknown_excessCapacityTerminationPolicy;
    public @Nullable String excessCapacityTerminationPolicy() {
        if (!unknown_excessCapacityTerminationPolicy) return value_excessCapacityTerminationPolicy;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.excessCapacityTerminationPolicy' is not present");
    }

    /**
     * The type of fleet request. Indicates whether the Spot Fleet only requests the target
     * capacity or also attempts to maintain it. Default is `maintain`.
     * 
     */
    @PolicyResourceProperty(name="fleetType", flag="unknown_fleetType")
    private @Nullable String value_fleetType;
    private boolean unknown_fleetType;
    public @Nullable String fleetType() {
        if (!unknown_fleetType) return value_fleetType;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.fleetType' is not present");
    }

    /**
     * Grants the Spot fleet permission to terminate
     * Spot instances on your behalf when you cancel its Spot fleet request using
     * CancelSpotFleetRequests or when the Spot fleet request expires, if you set
     * terminateInstancesWithExpiration.
     * 
     */
    @PolicyResourceProperty(name="iamFleetRole", flag="unknown_iamFleetRole")
    private String value_iamFleetRole;
    private boolean unknown_iamFleetRole;
    public String iamFleetRole() {
        if (!unknown_iamFleetRole) return value_iamFleetRole;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.iamFleetRole' is not present");
    }

    /**
     * Indicates whether a Spot
     * instance stops or terminates when it is interrupted. Default is
     * `terminate`.
     * 
     */
    @PolicyResourceProperty(name="instanceInterruptionBehaviour", flag="unknown_instanceInterruptionBehaviour")
    private @Nullable String value_instanceInterruptionBehaviour;
    private boolean unknown_instanceInterruptionBehaviour;
    public @Nullable String instanceInterruptionBehaviour() {
        if (!unknown_instanceInterruptionBehaviour) return value_instanceInterruptionBehaviour;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.instanceInterruptionBehaviour' is not present");
    }

    /**
     * The number of Spot pools across which to allocate your target Spot capacity.
     * Valid only when `allocation_strategy` is set to `lowestPrice`. Spot Fleet selects
     * the cheapest Spot pools and evenly allocates your target Spot capacity across
     * the number of Spot pools that you specify.
     * 
     */
    @PolicyResourceProperty(name="instancePoolsToUseCount", flag="unknown_instancePoolsToUseCount")
    private @Nullable Integer value_instancePoolsToUseCount;
    private boolean unknown_instancePoolsToUseCount;
    public @Nullable Integer instancePoolsToUseCount() {
        if (!unknown_instancePoolsToUseCount) return value_instancePoolsToUseCount;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.instancePoolsToUseCount' is not present");
    }

    /**
     * Used to define the launch configuration of the
     * spot-fleet request. Can be specified multiple times to define different bids
     * across different markets and instance types. Conflicts with `launch_template_config`. At least one of `launch_specification` or `launch_template_config` is required.
     * 
     * **Note**: This takes in similar but not
     * identical inputs as `aws.ec2.Instance`.  There are limitations on
     * what you can specify. See the list of officially supported inputs in the
     * [reference documentation](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetLaunchSpecification.html). Any normal `aws.ec2.Instance` parameter that corresponds to those inputs may be used and it have
     * a additional parameter `iam_instance_profile_arn` takes `aws.iam.InstanceProfile` attribute `arn` as input.
     * 
     */
    @PolicyResourceProperty(name="launchSpecifications", flag="unknown_launchSpecifications")
    private @Nullable List<SpotFleetRequestLaunchSpecification> value_launchSpecifications;
    private boolean unknown_launchSpecifications;
    public @Nullable List<SpotFleetRequestLaunchSpecification> launchSpecifications() {
        if (!unknown_launchSpecifications) return value_launchSpecifications;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.launchSpecifications' is not present");
    }

    /**
     * Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launch_specification`. At least one of `launch_specification` or `launch_template_config` is required.
     * 
     */
    @PolicyResourceProperty(name="launchTemplateConfigs", flag="unknown_launchTemplateConfigs")
    private @Nullable List<SpotFleetRequestLaunchTemplateConfig> value_launchTemplateConfigs;
    private boolean unknown_launchTemplateConfigs;
    public @Nullable List<SpotFleetRequestLaunchTemplateConfig> launchTemplateConfigs() {
        if (!unknown_launchTemplateConfigs) return value_launchTemplateConfigs;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.launchTemplateConfigs' is not present");
    }

    /**
     * A list of elastic load balancer names to add to the Spot fleet.
     * 
     */
    @PolicyResourceProperty(name="loadBalancers", flag="unknown_loadBalancers")
    private List<String> value_loadBalancers;
    private boolean unknown_loadBalancers;
    public List<String> loadBalancers() {
        if (!unknown_loadBalancers) return value_loadBalancers;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.loadBalancers' is not present");
    }

    /**
     * The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
     * 
     */
    @PolicyResourceProperty(name="onDemandAllocationStrategy", flag="unknown_onDemandAllocationStrategy")
    private @Nullable String value_onDemandAllocationStrategy;
    private boolean unknown_onDemandAllocationStrategy;
    public @Nullable String onDemandAllocationStrategy() {
        if (!unknown_onDemandAllocationStrategy) return value_onDemandAllocationStrategy;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.onDemandAllocationStrategy' is not present");
    }

    /**
     * The maximum amount per hour for On-Demand Instances that you&#39;re willing to pay. When the maximum amount you&#39;re willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
     * 
     */
    @PolicyResourceProperty(name="onDemandMaxTotalPrice", flag="unknown_onDemandMaxTotalPrice")
    private @Nullable String value_onDemandMaxTotalPrice;
    private boolean unknown_onDemandMaxTotalPrice;
    public @Nullable String onDemandMaxTotalPrice() {
        if (!unknown_onDemandMaxTotalPrice) return value_onDemandMaxTotalPrice;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.onDemandMaxTotalPrice' is not present");
    }

    /**
     * The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
     * 
     */
    @PolicyResourceProperty(name="onDemandTargetCapacity", flag="unknown_onDemandTargetCapacity")
    private @Nullable Integer value_onDemandTargetCapacity;
    private boolean unknown_onDemandTargetCapacity;
    public @Nullable Integer onDemandTargetCapacity() {
        if (!unknown_onDemandTargetCapacity) return value_onDemandTargetCapacity;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.onDemandTargetCapacity' is not present");
    }

    /**
     * Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
     * 
     */
    @PolicyResourceProperty(name="replaceUnhealthyInstances", flag="unknown_replaceUnhealthyInstances")
    private @Nullable Boolean value_replaceUnhealthyInstances;
    private boolean unknown_replaceUnhealthyInstances;
    public @Nullable Boolean replaceUnhealthyInstances() {
        if (!unknown_replaceUnhealthyInstances) return value_replaceUnhealthyInstances;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.replaceUnhealthyInstances' is not present");
    }

    /**
     * Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
     * 
     */
    @PolicyResourceProperty(name="spotMaintenanceStrategies", flag="unknown_spotMaintenanceStrategies")
    private @Nullable SpotFleetRequestSpotMaintenanceStrategies value_spotMaintenanceStrategies;
    private boolean unknown_spotMaintenanceStrategies;
    public @Nullable SpotFleetRequestSpotMaintenanceStrategies spotMaintenanceStrategies() {
        if (!unknown_spotMaintenanceStrategies) return value_spotMaintenanceStrategies;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.spotMaintenanceStrategies' is not present");
    }

    /**
     * The maximum bid price per unit hour.
     * 
     */
    @PolicyResourceProperty(name="spotPrice", flag="unknown_spotPrice")
    private @Nullable String value_spotPrice;
    private boolean unknown_spotPrice;
    public @Nullable String spotPrice() {
        if (!unknown_spotPrice) return value_spotPrice;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.spotPrice' is not present");
    }

    /**
     * The state of the Spot fleet request.
     * 
     */
    @PolicyResourceProperty(name="spotRequestState", flag="unknown_spotRequestState")
    private String value_spotRequestState;
    private boolean unknown_spotRequestState;
    public String spotRequestState() {
        if (!unknown_spotRequestState) return value_spotRequestState;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.spotRequestState' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.tagsAll' is not present");
    }

    /**
     * The number of units to request. You can choose to set the
     * target capacity in terms of instances or a performance characteristic that is
     * important to your application workload, such as vCPUs, memory, or I/O.
     * 
     */
    @PolicyResourceProperty(name="targetCapacity", flag="unknown_targetCapacity")
    private Integer value_targetCapacity;
    private boolean unknown_targetCapacity;
    public Integer targetCapacity() {
        if (!unknown_targetCapacity) return value_targetCapacity;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.targetCapacity' is not present");
    }

    /**
     * The unit for the target capacity. This can only be done with `instance_requirements` defined
     * 
     */
    @PolicyResourceProperty(name="targetCapacityUnitType", flag="unknown_targetCapacityUnitType")
    private @Nullable String value_targetCapacityUnitType;
    private boolean unknown_targetCapacityUnitType;
    public @Nullable String targetCapacityUnitType() {
        if (!unknown_targetCapacityUnitType) return value_targetCapacityUnitType;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.targetCapacityUnitType' is not present");
    }

    /**
     * A list of `aws.alb.TargetGroup` ARNs, for use with Application Load Balancing.
     * 
     */
    @PolicyResourceProperty(name="targetGroupArns", flag="unknown_targetGroupArns")
    private List<String> value_targetGroupArns;
    private boolean unknown_targetGroupArns;
    public List<String> targetGroupArns() {
        if (!unknown_targetGroupArns) return value_targetGroupArns;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.targetGroupArns' is not present");
    }

    /**
     * Indicates whether running Spot
     * instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
     * If no value is specified, the value of the `terminate_instances_with_expiration` argument is used.
     * 
     */
    @PolicyResourceProperty(name="terminateInstancesOnDelete", flag="unknown_terminateInstancesOnDelete")
    private @Nullable String value_terminateInstancesOnDelete;
    private boolean unknown_terminateInstancesOnDelete;
    public @Nullable String terminateInstancesOnDelete() {
        if (!unknown_terminateInstancesOnDelete) return value_terminateInstancesOnDelete;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.terminateInstancesOnDelete' is not present");
    }

    /**
     * Indicates whether running Spot
     * instances should be terminated when the Spot fleet request expires.
     * 
     */
    @PolicyResourceProperty(name="terminateInstancesWithExpiration", flag="unknown_terminateInstancesWithExpiration")
    private @Nullable Boolean value_terminateInstancesWithExpiration;
    private boolean unknown_terminateInstancesWithExpiration;
    public @Nullable Boolean terminateInstancesWithExpiration() {
        if (!unknown_terminateInstancesWithExpiration) return value_terminateInstancesWithExpiration;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.terminateInstancesWithExpiration' is not present");
    }

    /**
     * The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
     * 
     */
    @PolicyResourceProperty(name="validFrom", flag="unknown_validFrom")
    private @Nullable String value_validFrom;
    private boolean unknown_validFrom;
    public @Nullable String validFrom() {
        if (!unknown_validFrom) return value_validFrom;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.validFrom' is not present");
    }

    /**
     * The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
     * 
     */
    @PolicyResourceProperty(name="validUntil", flag="unknown_validUntil")
    private @Nullable String value_validUntil;
    private boolean unknown_validUntil;
    public @Nullable String validUntil() {
        if (!unknown_validUntil) return value_validUntil;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.validUntil' is not present");
    }

    /**
     * If set, this provider will
     * wait for the Spot Request to be fulfilled, and will throw an error if the
     * timeout of 10m is reached.
     * 
     */
    @PolicyResourceProperty(name="waitForFulfillment", flag="unknown_waitForFulfillment")
    private @Nullable Boolean value_waitForFulfillment;
    private boolean unknown_waitForFulfillment;
    public @Nullable Boolean waitForFulfillment() {
        if (!unknown_waitForFulfillment) return value_waitForFulfillment;
        throw new UndeferrableValueException("Value 'SpotFleetRequest.waitForFulfillment' is not present");
    }

}
