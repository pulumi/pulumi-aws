// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.servicediscovery;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.servicediscovery.inputs.ServiceDnsConfigArgs;
import com.pulumi.policypacks.aws.servicediscovery.inputs.ServiceHealthCheckConfigArgs;
import com.pulumi.policypacks.aws.servicediscovery.inputs.ServiceHealthCheckCustomConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:servicediscovery/service:Service")
public final class ServiceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The description of the service.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ServiceArgs.description");
    }

    /**
     * A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance. See `dns_config` Block for details.
     * 
     */
    private UndeferrableValue<ServiceDnsConfigArgs> dnsConfig;

    public ServiceDnsConfigArgs dnsConfig() {
        if (dnsConfig == null) return null;
        return dnsConfig.getValue("ServiceArgs.dnsConfig");
    }

    /**
     * A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> forceDestroy;

    public Boolean forceDestroy() {
        if (forceDestroy == null) return null;
        return forceDestroy.getValue("ServiceArgs.forceDestroy");
    }

    /**
     * A complex type that contains settings for an optional health check. Only for Public DNS namespaces. See `health_check_config` Block for details.
     * 
     */
    private UndeferrableValue<ServiceHealthCheckConfigArgs> healthCheckConfig;

    public ServiceHealthCheckConfigArgs healthCheckConfig() {
        if (healthCheckConfig == null) return null;
        return healthCheckConfig.getValue("ServiceArgs.healthCheckConfig");
    }

    /**
     * A complex type that contains settings for ECS managed health checks. See `health_check_custom_config` Block for details.
     * 
     */
    private UndeferrableValue<ServiceHealthCheckCustomConfigArgs> healthCheckCustomConfig;

    public ServiceHealthCheckCustomConfigArgs healthCheckCustomConfig() {
        if (healthCheckCustomConfig == null) return null;
        return healthCheckCustomConfig.getValue("ServiceArgs.healthCheckCustomConfig");
    }

    /**
     * The name of the service.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ServiceArgs.name");
    }

    /**
     * The ID of the namespace that you want to use to create the service.
     * 
     */
    private UndeferrableValue<String> namespaceId;

    public String namespaceId() {
        if (namespaceId == null) return null;
        return namespaceId.getValue("ServiceArgs.namespaceId");
    }

    /**
     * A map of tags to assign to the service. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ServiceArgs.tags");
    }

    /**
     * If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ServiceArgs.type");
    }

}
