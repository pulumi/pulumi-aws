// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.storagegateway;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:storagegateway/storedIscsiVolume:StoredIscsiVolume")
public final class StoredIscsiVolumeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The unique identifier for the gateway local disk that is configured as a stored volume.
     * 
     */
    private UndeferrableValue<String> diskId;

    public String diskId() {
        if (diskId == null) return null;
        return diskId.getValue("StoredIscsiVolumeArgs.diskId");
    }

    /**
     * The Amazon Resource Name (ARN) of the gateway.
     * 
     */
    private UndeferrableValue<String> gatewayArn;

    public String gatewayArn() {
        if (gatewayArn == null) return null;
        return gatewayArn.getValue("StoredIscsiVolumeArgs.gatewayArn");
    }

    /**
     * `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3. Optional.
     * 
     */
    private UndeferrableValue<Boolean> kmsEncrypted;

    public Boolean kmsEncrypted() {
        if (kmsEncrypted == null) return null;
        return kmsEncrypted.getValue("StoredIscsiVolumeArgs.kmsEncrypted");
    }

    /**
     * The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when `kms_encrypted` is `true`.
     * 
     */
    private UndeferrableValue<String> kmsKey;

    public String kmsKey() {
        if (kmsKey == null) return null;
        return kmsKey.getValue("StoredIscsiVolumeArgs.kmsKey");
    }

    /**
     * The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
     * 
     */
    private UndeferrableValue<String> networkInterfaceId;

    public String networkInterfaceId() {
        if (networkInterfaceId == null) return null;
        return networkInterfaceId.getValue("StoredIscsiVolumeArgs.networkInterfaceId");
    }

    /**
     * Specify this field as `true` if you want to preserve the data on the local disk. Otherwise, specifying this field as false creates an empty volume.
     * 
     */
    private UndeferrableValue<Boolean> preserveExistingData;

    public Boolean preserveExistingData() {
        if (preserveExistingData == null) return null;
        return preserveExistingData.getValue("StoredIscsiVolumeArgs.preserveExistingData");
    }

    /**
     * The snapshot ID of the snapshot to restore as the new stored volumeE.g., `snap-1122aabb`.
     * 
     */
    private UndeferrableValue<String> snapshotId;

    public String snapshotId() {
        if (snapshotId == null) return null;
        return snapshotId.getValue("StoredIscsiVolumeArgs.snapshotId");
    }

    /**
     * Key-value mapping of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("StoredIscsiVolumeArgs.tags");
    }

    /**
     * The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
     * 
     */
    private UndeferrableValue<String> targetName;

    public String targetName() {
        if (targetName == null) return null;
        return targetName.getValue("StoredIscsiVolumeArgs.targetName");
    }

}
