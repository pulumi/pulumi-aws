// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.storagegateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:storagegateway/storedIscsiVolume:StoredIscsiVolume")
public final class StoredIscsiVolumeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The unique identifier for the gateway local disk that is configured as a stored volume.
     * 
     */
    @PolicyResourceProperty(name="diskId", flag="unknown_diskId")
    private String value_diskId;
    private boolean unknown_diskId;
    public String diskId() {
        if (!unknown_diskId) return value_diskId;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.diskId' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the gateway.
     * 
     */
    @PolicyResourceProperty(name="gatewayArn", flag="unknown_gatewayArn")
    private String value_gatewayArn;
    private boolean unknown_gatewayArn;
    public String gatewayArn() {
        if (!unknown_gatewayArn) return value_gatewayArn;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.gatewayArn' is not present");
    }

    /**
     * `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3. Optional.
     * 
     */
    @PolicyResourceProperty(name="kmsEncrypted", flag="unknown_kmsEncrypted")
    private Boolean value_kmsEncrypted;
    private boolean unknown_kmsEncrypted;
    public Boolean kmsEncrypted() {
        if (!unknown_kmsEncrypted) return value_kmsEncrypted;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.kmsEncrypted' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when `kms_encrypted` is `true`.
     * 
     */
    @PolicyResourceProperty(name="kmsKey", flag="unknown_kmsKey")
    private String value_kmsKey;
    private boolean unknown_kmsKey;
    public String kmsKey() {
        if (!unknown_kmsKey) return value_kmsKey;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.kmsKey' is not present");
    }

    /**
     * The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
     * 
     */
    @PolicyResourceProperty(name="networkInterfaceId", flag="unknown_networkInterfaceId")
    private String value_networkInterfaceId;
    private boolean unknown_networkInterfaceId;
    public String networkInterfaceId() {
        if (!unknown_networkInterfaceId) return value_networkInterfaceId;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.networkInterfaceId' is not present");
    }

    /**
     * Specify this field as `true` if you want to preserve the data on the local disk. Otherwise, specifying this field as false creates an empty volume.
     * 
     */
    @PolicyResourceProperty(name="preserveExistingData", flag="unknown_preserveExistingData")
    private Boolean value_preserveExistingData;
    private boolean unknown_preserveExistingData;
    public Boolean preserveExistingData() {
        if (!unknown_preserveExistingData) return value_preserveExistingData;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.preserveExistingData' is not present");
    }

    /**
     * The snapshot ID of the snapshot to restore as the new stored volumeE.g., `snap-1122aabb`.
     * 
     */
    @PolicyResourceProperty(name="snapshotId", flag="unknown_snapshotId")
    private String value_snapshotId;
    private boolean unknown_snapshotId;
    public String snapshotId() {
        if (!unknown_snapshotId) return value_snapshotId;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.snapshotId' is not present");
    }

    /**
     * Key-value mapping of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.tags' is not present");
    }

    /**
     * The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
     * 
     */
    @PolicyResourceProperty(name="targetName", flag="unknown_targetName")
    private String value_targetName;
    private boolean unknown_targetName;
    public String targetName() {
        if (!unknown_targetName) return value_targetName;
        throw new UndeferrableValueException("Value 'StoredIscsiVolumeArgs.targetName' is not present");
    }

}
