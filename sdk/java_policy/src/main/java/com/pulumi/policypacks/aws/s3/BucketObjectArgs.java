// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3;

import com.pulumi.asset.AssetOrArchive;
import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:s3/bucketObject:BucketObject")
public final class BucketObjectArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Valid values are `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Defaults to `private`.
     * 
     */
    @PolicyResourceProperty(name="acl", flag="unknown_acl")
    private String value_acl;
    private boolean unknown_acl;
    public String acl() {
        if (!unknown_acl) return value_acl;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.acl' is not present");
    }

    /**
     * Name of the bucket to put the file in. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified.
     * 
     */
    @PolicyResourceProperty(name="bucket", flag="unknown_bucket")
    private String value_bucket;
    private boolean unknown_bucket;
    public String bucket() {
        if (!unknown_bucket) return value_bucket;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.bucket' is not present");
    }

    /**
     * Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
     * 
     */
    @PolicyResourceProperty(name="bucketKeyEnabled", flag="unknown_bucketKeyEnabled")
    private Boolean value_bucketKeyEnabled;
    private boolean unknown_bucketKeyEnabled;
    public Boolean bucketKeyEnabled() {
        if (!unknown_bucketKeyEnabled) return value_bucketKeyEnabled;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.bucketKeyEnabled' is not present");
    }

    /**
     * Caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.
     * 
     */
    @PolicyResourceProperty(name="cacheControl", flag="unknown_cacheControl")
    private String value_cacheControl;
    private boolean unknown_cacheControl;
    public String cacheControl() {
        if (!unknown_cacheControl) return value_cacheControl;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.cacheControl' is not present");
    }

    /**
     * Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
     * 
     */
    @PolicyResourceProperty(name="content", flag="unknown_content")
    private String value_content;
    private boolean unknown_content;
    public String content() {
        if (!unknown_content) return value_content;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.content' is not present");
    }

    /**
     * Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.
     * 
     */
    @PolicyResourceProperty(name="contentBase64", flag="unknown_contentBase64")
    private String value_contentBase64;
    private boolean unknown_contentBase64;
    public String contentBase64() {
        if (!unknown_contentBase64) return value_contentBase64;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.contentBase64' is not present");
    }

    /**
     * Presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.
     * 
     */
    @PolicyResourceProperty(name="contentDisposition", flag="unknown_contentDisposition")
    private String value_contentDisposition;
    private boolean unknown_contentDisposition;
    public String contentDisposition() {
        if (!unknown_contentDisposition) return value_contentDisposition;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.contentDisposition' is not present");
    }

    /**
     * Content encodings that have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.
     * 
     */
    @PolicyResourceProperty(name="contentEncoding", flag="unknown_contentEncoding")
    private String value_contentEncoding;
    private boolean unknown_contentEncoding;
    public String contentEncoding() {
        if (!unknown_contentEncoding) return value_contentEncoding;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.contentEncoding' is not present");
    }

    /**
     * Language the content is in e.g., en-US or en-GB.
     * 
     */
    @PolicyResourceProperty(name="contentLanguage", flag="unknown_contentLanguage")
    private String value_contentLanguage;
    private boolean unknown_contentLanguage;
    public String contentLanguage() {
        if (!unknown_contentLanguage) return value_contentLanguage;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.contentLanguage' is not present");
    }

    /**
     * Standard MIME type describing the format of the object data, e.g., application/octet-stream. All Valid MIME Types are valid for this input.
     * 
     */
    @PolicyResourceProperty(name="contentType", flag="unknown_contentType")
    private String value_contentType;
    private boolean unknown_contentType;
    public String contentType() {
        if (!unknown_contentType) return value_contentType;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.contentType' is not present");
    }

    /**
     * Triggers updates when the value changes. This attribute is not compatible with KMS encryption, `kms_key_id` or `server_side_encryption = &#34;aws:kms&#34;` (see `source_hash` instead).
     * 
     */
    @PolicyResourceProperty(name="etag", flag="unknown_etag")
    private String value_etag;
    private boolean unknown_etag;
    public String etag() {
        if (!unknown_etag) return value_etag;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.etag' is not present");
    }

    /**
     * Whether to allow the object to be deleted by removing any legal hold on any object version. Default is `false`. This value should be set to `true` only if the bucket has S3 object lock enabled.
     * 
     */
    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.forceDestroy' is not present");
    }

    /**
     * Name of the object once it is in the bucket.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="key", flag="unknown_key")
    private String value_key;
    private boolean unknown_key;
    public String key() {
        if (!unknown_key) return value_key;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.key' is not present");
    }

    /**
     * ARN of the KMS Key to use for object encryption. If the S3 Bucket has server-side encryption enabled, that value will automatically be used. If referencing the `aws.kms.Key` resource, use the `arn` attribute. If referencing the `aws.kms.Alias` data source or resource, use the `target_key_arn` attribute. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.kmsKeyId' is not present");
    }

    /**
     * Map of keys/values to provision metadata (will be automatically prefixed by `x-amz-meta-`, note that only lowercase label are currently supported by the AWS Go API).
     * 
     */
    @PolicyResourceProperty(name="metadata", flag="unknown_metadata")
    private Map<String,String> value_metadata;
    private boolean unknown_metadata;
    public Map<String,String> metadata() {
        if (!unknown_metadata) return value_metadata;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.metadata' is not present");
    }

    /**
     * [Legal hold](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-legal-holds) status that you want to apply to the specified object. Valid values are `ON` and `OFF`.
     * 
     */
    @PolicyResourceProperty(name="objectLockLegalHoldStatus", flag="unknown_objectLockLegalHoldStatus")
    private String value_objectLockLegalHoldStatus;
    private boolean unknown_objectLockLegalHoldStatus;
    public String objectLockLegalHoldStatus() {
        if (!unknown_objectLockLegalHoldStatus) return value_objectLockLegalHoldStatus;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.objectLockLegalHoldStatus' is not present");
    }

    /**
     * Object lock [retention mode](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-modes) that you want to apply to this object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
     * 
     */
    @PolicyResourceProperty(name="objectLockMode", flag="unknown_objectLockMode")
    private String value_objectLockMode;
    private boolean unknown_objectLockMode;
    public String objectLockMode() {
        if (!unknown_objectLockMode) return value_objectLockMode;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.objectLockMode' is not present");
    }

    /**
     * Date and time, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8), when this object&#39;s object lock will [expire](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-periods).
     * 
     */
    @PolicyResourceProperty(name="objectLockRetainUntilDate", flag="unknown_objectLockRetainUntilDate")
    private String value_objectLockRetainUntilDate;
    private boolean unknown_objectLockRetainUntilDate;
    public String objectLockRetainUntilDate() {
        if (!unknown_objectLockRetainUntilDate) return value_objectLockRetainUntilDate;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.objectLockRetainUntilDate' is not present");
    }

    /**
     * Server-side encryption of the object in S3. Valid values are &#34;`AES256`&#34; and &#34;`aws:kms`&#34;.
     * 
     */
    @PolicyResourceProperty(name="serverSideEncryption", flag="unknown_serverSideEncryption")
    private String value_serverSideEncryption;
    private boolean unknown_serverSideEncryption;
    public String serverSideEncryption() {
        if (!unknown_serverSideEncryption) return value_serverSideEncryption;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.serverSideEncryption' is not present");
    }

    /**
     * Path to a file that will be read and uploaded as raw bytes for the object content.
     * 
     */
    @PolicyResourceProperty(name="source", flag="unknown_source")
    private AssetOrArchive value_source;
    private boolean unknown_source;
    public AssetOrArchive source() {
        if (!unknown_source) return value_source;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.source' is not present");
    }

    /**
     * Triggers updates like `etag` but useful to address `etag` encryption limitations.
     * 
     */
    @PolicyResourceProperty(name="sourceHash", flag="unknown_sourceHash")
    private String value_sourceHash;
    private boolean unknown_sourceHash;
    public String sourceHash() {
        if (!unknown_sourceHash) return value_sourceHash;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.sourceHash' is not present");
    }

    /**
     * [Storage Class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html#AmazonS3-PutObject-request-header-StorageClass) for the object. Defaults to &#34;`STANDARD`&#34;.
     * 
     */
    @PolicyResourceProperty(name="storageClass", flag="unknown_storageClass")
    private String value_storageClass;
    private boolean unknown_storageClass;
    public String storageClass() {
        if (!unknown_storageClass) return value_storageClass;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.storageClass' is not present");
    }

    /**
     * Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.tags' is not present");
    }

    /**
     * Target URL for [website redirect](http://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html).
     * 
     * If no content is provided through `source`, `content` or `content_base64`, then the object will be empty.
     * 
     */
    @PolicyResourceProperty(name="websiteRedirect", flag="unknown_websiteRedirect")
    private String value_websiteRedirect;
    private boolean unknown_websiteRedirect;
    public String websiteRedirect() {
        if (!unknown_websiteRedirect) return value_websiteRedirect;
        throw new UndeferrableValueException("Value 'BucketObjectArgs.websiteRedirect' is not present");
    }

}
