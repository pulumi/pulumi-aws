// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3;

import com.pulumi.asset.AssetOrArchive;
import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:s3/bucketObject:BucketObject")
public final class BucketObjectArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Valid values are `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Defaults to `private`.
     * 
     */
    private UndeferrableValue<String> acl;

    public String acl() {
        if (acl == null) return null;
        return acl.getValue("BucketObjectArgs.acl");
    }

    /**
     * Name of the bucket to put the file in. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified.
     * 
     */
    private UndeferrableValue<String> bucket;

    public String bucket() {
        if (bucket == null) return null;
        return bucket.getValue("BucketObjectArgs.bucket");
    }

    /**
     * Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
     * 
     */
    private UndeferrableValue<Boolean> bucketKeyEnabled;

    public Boolean bucketKeyEnabled() {
        if (bucketKeyEnabled == null) return null;
        return bucketKeyEnabled.getValue("BucketObjectArgs.bucketKeyEnabled");
    }

    /**
     * Caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.
     * 
     */
    private UndeferrableValue<String> cacheControl;

    public String cacheControl() {
        if (cacheControl == null) return null;
        return cacheControl.getValue("BucketObjectArgs.cacheControl");
    }

    /**
     * Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
     * 
     */
    private UndeferrableValue<String> content;

    public String content() {
        if (content == null) return null;
        return content.getValue("BucketObjectArgs.content");
    }

    /**
     * Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.
     * 
     */
    private UndeferrableValue<String> contentBase64;

    public String contentBase64() {
        if (contentBase64 == null) return null;
        return contentBase64.getValue("BucketObjectArgs.contentBase64");
    }

    /**
     * Presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.
     * 
     */
    private UndeferrableValue<String> contentDisposition;

    public String contentDisposition() {
        if (contentDisposition == null) return null;
        return contentDisposition.getValue("BucketObjectArgs.contentDisposition");
    }

    /**
     * Content encodings that have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.
     * 
     */
    private UndeferrableValue<String> contentEncoding;

    public String contentEncoding() {
        if (contentEncoding == null) return null;
        return contentEncoding.getValue("BucketObjectArgs.contentEncoding");
    }

    /**
     * Language the content is in e.g., en-US or en-GB.
     * 
     */
    private UndeferrableValue<String> contentLanguage;

    public String contentLanguage() {
        if (contentLanguage == null) return null;
        return contentLanguage.getValue("BucketObjectArgs.contentLanguage");
    }

    /**
     * Standard MIME type describing the format of the object data, e.g., application/octet-stream. All Valid MIME Types are valid for this input.
     * 
     */
    private UndeferrableValue<String> contentType;

    public String contentType() {
        if (contentType == null) return null;
        return contentType.getValue("BucketObjectArgs.contentType");
    }

    /**
     * Triggers updates when the value changes. This attribute is not compatible with KMS encryption, `kms_key_id` or `server_side_encryption = &#34;aws:kms&#34;` (see `source_hash` instead).
     * 
     */
    private UndeferrableValue<String> etag;

    public String etag() {
        if (etag == null) return null;
        return etag.getValue("BucketObjectArgs.etag");
    }

    /**
     * Whether to allow the object to be deleted by removing any legal hold on any object version. Default is `false`. This value should be set to `true` only if the bucket has S3 object lock enabled.
     * 
     */
    private UndeferrableValue<Boolean> forceDestroy;

    public Boolean forceDestroy() {
        if (forceDestroy == null) return null;
        return forceDestroy.getValue("BucketObjectArgs.forceDestroy");
    }

    /**
     * Name of the object once it is in the bucket.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> key;

    public String key() {
        if (key == null) return null;
        return key.getValue("BucketObjectArgs.key");
    }

    /**
     * ARN of the KMS Key to use for object encryption. If the S3 Bucket has server-side encryption enabled, that value will automatically be used. If referencing the `aws.kms.Key` resource, use the `arn` attribute. If referencing the `aws.kms.Alias` data source or resource, use the `target_key_arn` attribute. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("BucketObjectArgs.kmsKeyId");
    }

    /**
     * Map of keys/values to provision metadata (will be automatically prefixed by `x-amz-meta-`, note that only lowercase label are currently supported by the AWS Go API).
     * 
     */
    private UndeferrableValue<Map<String,String>> metadata;

    public Map<String,String> metadata() {
        if (metadata == null) return null;
        return metadata.getValue("BucketObjectArgs.metadata");
    }

    /**
     * [Legal hold](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-legal-holds) status that you want to apply to the specified object. Valid values are `ON` and `OFF`.
     * 
     */
    private UndeferrableValue<String> objectLockLegalHoldStatus;

    public String objectLockLegalHoldStatus() {
        if (objectLockLegalHoldStatus == null) return null;
        return objectLockLegalHoldStatus.getValue("BucketObjectArgs.objectLockLegalHoldStatus");
    }

    /**
     * Object lock [retention mode](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-modes) that you want to apply to this object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
     * 
     */
    private UndeferrableValue<String> objectLockMode;

    public String objectLockMode() {
        if (objectLockMode == null) return null;
        return objectLockMode.getValue("BucketObjectArgs.objectLockMode");
    }

    /**
     * Date and time, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8), when this object&#39;s object lock will [expire](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-periods).
     * 
     */
    private UndeferrableValue<String> objectLockRetainUntilDate;

    public String objectLockRetainUntilDate() {
        if (objectLockRetainUntilDate == null) return null;
        return objectLockRetainUntilDate.getValue("BucketObjectArgs.objectLockRetainUntilDate");
    }

    /**
     * Server-side encryption of the object in S3. Valid values are &#34;`AES256`&#34; and &#34;`aws:kms`&#34;.
     * 
     */
    private UndeferrableValue<String> serverSideEncryption;

    public String serverSideEncryption() {
        if (serverSideEncryption == null) return null;
        return serverSideEncryption.getValue("BucketObjectArgs.serverSideEncryption");
    }

    /**
     * Path to a file that will be read and uploaded as raw bytes for the object content.
     * 
     */
    private UndeferrableValue<AssetOrArchive> source;

    public AssetOrArchive source() {
        if (source == null) return null;
        return source.getValue("BucketObjectArgs.source");
    }

    /**
     * Triggers updates like `etag` but useful to address `etag` encryption limitations.
     * 
     */
    private UndeferrableValue<String> sourceHash;

    public String sourceHash() {
        if (sourceHash == null) return null;
        return sourceHash.getValue("BucketObjectArgs.sourceHash");
    }

    /**
     * [Storage Class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html#AmazonS3-PutObject-request-header-StorageClass) for the object. Defaults to &#34;`STANDARD`&#34;.
     * 
     */
    private UndeferrableValue<String> storageClass;

    public String storageClass() {
        if (storageClass == null) return null;
        return storageClass.getValue("BucketObjectArgs.storageClass");
    }

    /**
     * Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("BucketObjectArgs.tags");
    }

    /**
     * Target URL for [website redirect](http://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html).
     * 
     * If no content is provided through `source`, `content` or `content_base64`, then the object will be empty.
     * 
     */
    private UndeferrableValue<String> websiteRedirect;

    public String websiteRedirect() {
        if (websiteRedirect == null) return null;
        return websiteRedirect.getValue("BucketObjectArgs.websiteRedirect");
    }

}
