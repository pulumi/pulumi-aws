// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.neptunegraph;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.neptunegraph.inputs.GraphTimeoutsArgs;
import com.pulumi.policypacks.aws.neptunegraph.inputs.GraphVectorSearchConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:neptunegraph/graph:Graph")
public final class GraphArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A value that indicates whether the graph has deletion protection enabled. The graph can&#39;t be deleted when deletion
     * protection is enabled.
     * 
     */
    @PolicyResourceProperty(name="deletionProtection", flag="unknown_deletionProtection")
    private Boolean value_deletionProtection;
    private boolean unknown_deletionProtection;
    public Boolean deletionProtection() {
        if (!unknown_deletionProtection) return value_deletionProtection;
        throw new UndeferrableValueException("Value 'GraphArgs.deletionProtection' is not present");
    }

    /**
     * The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
     * character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don&#39;t specify a graph
     * name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
     * UUID.
     * 
     */
    @PolicyResourceProperty(name="graphName", flag="unknown_graphName")
    private String value_graphName;
    private boolean unknown_graphName;
    public String graphName() {
        if (!unknown_graphName) return value_graphName;
        throw new UndeferrableValueException("Value 'GraphArgs.graphName' is not present");
    }

    /**
     * Allows user to specify name prefix and have remainder of name automatically generated.
     * 
     */
    @PolicyResourceProperty(name="graphNamePrefix", flag="unknown_graphNamePrefix")
    private String value_graphNamePrefix;
    private boolean unknown_graphNamePrefix;
    public String graphNamePrefix() {
        if (!unknown_graphNamePrefix) return value_graphNamePrefix;
        throw new UndeferrableValueException("Value 'GraphArgs.graphNamePrefix' is not present");
    }

    /**
     * Specifies a KMS key to use to encrypt data in the new graph. Value must be ARN of KMS Key.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyIdentifier", flag="unknown_kmsKeyIdentifier")
    private String value_kmsKeyIdentifier;
    private boolean unknown_kmsKeyIdentifier;
    public String kmsKeyIdentifier() {
        if (!unknown_kmsKeyIdentifier) return value_kmsKeyIdentifier;
        throw new UndeferrableValueException("Value 'GraphArgs.kmsKeyIdentifier' is not present");
    }

    /**
     * The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
     * 
     */
    @PolicyResourceProperty(name="provisionedMemory", flag="unknown_provisionedMemory")
    private Integer value_provisionedMemory;
    private boolean unknown_provisionedMemory;
    public Integer provisionedMemory() {
        if (!unknown_provisionedMemory) return value_provisionedMemory;
        throw new UndeferrableValueException("Value 'GraphArgs.provisionedMemory' is not present");
    }

    /**
     * Specifies whether or not the graph can be reachable over the internet. All access to graphs is IAM authenticated. When
     * the graph is publicly available, its domain name system (DNS) endpoint resolves to the public IP address from the
     * internet. When the graph isn&#39;t publicly available, you need to create a PrivateGraphEndpoint in a given VPC to ensure
     * the DNS name resolves to a private IP address that is reachable from the VPC.
     * 
     */
    @PolicyResourceProperty(name="publicConnectivity", flag="unknown_publicConnectivity")
    private Boolean value_publicConnectivity;
    private boolean unknown_publicConnectivity;
    public Boolean publicConnectivity() {
        if (!unknown_publicConnectivity) return value_publicConnectivity;
        throw new UndeferrableValueException("Value 'GraphArgs.publicConnectivity' is not present");
    }

    /**
     * The number of replicas in other AZs. Value must be between 0 and 2.
     * 
     */
    @PolicyResourceProperty(name="replicaCount", flag="unknown_replicaCount")
    private Integer value_replicaCount;
    private boolean unknown_replicaCount;
    public Integer replicaCount() {
        if (!unknown_replicaCount) return value_replicaCount;
        throw new UndeferrableValueException("Value 'GraphArgs.replicaCount' is not present");
    }

    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'GraphArgs.tags' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private GraphTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public GraphTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'GraphArgs.timeouts' is not present");
    }

    /**
     * Vector search configuration for the Neptune Graph
     * 
     */
    @PolicyResourceProperty(name="vectorSearchConfiguration", flag="unknown_vectorSearchConfiguration")
    private GraphVectorSearchConfigurationArgs value_vectorSearchConfiguration;
    private boolean unknown_vectorSearchConfiguration;
    public GraphVectorSearchConfigurationArgs vectorSearchConfiguration() {
        if (!unknown_vectorSearchConfiguration) return value_vectorSearchConfiguration;
        throw new UndeferrableValueException("Value 'GraphArgs.vectorSearchConfiguration' is not present");
    }

}
