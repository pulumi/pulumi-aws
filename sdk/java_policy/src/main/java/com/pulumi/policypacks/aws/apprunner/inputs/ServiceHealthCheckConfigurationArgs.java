// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apprunner.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ServiceHealthCheckConfigurationArgs {

    /**
     * Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.
     * 
     */
    private UndeferrableValue<Integer> healthyThreshold;

    public Integer healthyThreshold() {
        if (healthyThreshold == null) return null;
        return healthyThreshold.getValue("ServiceHealthCheckConfigurationArgs.healthyThreshold");
    }

    /**
     * Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.
     * 
     */
    private UndeferrableValue<Integer> interval;

    public Integer interval() {
        if (interval == null) return null;
        return interval.getValue("ServiceHealthCheckConfigurationArgs.interval");
    }

    /**
     * URL to send requests to for health checks. Defaults to `/`. Minimum length of 0. Maximum length of 51200.
     * 
     */
    private UndeferrableValue<String> path;

    public String path() {
        if (path == null) return null;
        return path.getValue("ServiceHealthCheckConfigurationArgs.path");
    }

    /**
     * IP protocol that App Runner uses to perform health checks for your service. Valid values: `TCP`, `HTTP`. Defaults to `TCP`. If you set protocol to `HTTP`, App Runner sends health check requests to the HTTP path specified by `path`.
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("ServiceHealthCheckConfigurationArgs.protocol");
    }

    /**
     * Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.
     * 
     */
    private UndeferrableValue<Integer> timeout;

    public Integer timeout() {
        if (timeout == null) return null;
        return timeout.getValue("ServiceHealthCheckConfigurationArgs.timeout");
    }

    /**
     * Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.
     * 
     */
    private UndeferrableValue<Integer> unhealthyThreshold;

    public Integer unhealthyThreshold() {
        if (unhealthyThreshold == null) return null;
        return unhealthyThreshold.getValue("ServiceHealthCheckConfigurationArgs.unhealthyThreshold");
    }

}
