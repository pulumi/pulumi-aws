// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.sns;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:sns/topicSubscription:TopicSubscription")
public final class TopicSubscriptionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
     * 
     */
    @PolicyResourceProperty(name="confirmationTimeoutInMinutes", flag="unknown_confirmationTimeoutInMinutes")
    private Integer value_confirmationTimeoutInMinutes;
    private boolean unknown_confirmationTimeoutInMinutes;
    public Integer confirmationTimeoutInMinutes() {
        if (!unknown_confirmationTimeoutInMinutes) return value_confirmationTimeoutInMinutes;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.confirmationTimeoutInMinutes' is not present");
    }

    /**
     * JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
     * 
     */
    @PolicyResourceProperty(name="deliveryPolicy", flag="unknown_deliveryPolicy")
    private String value_deliveryPolicy;
    private boolean unknown_deliveryPolicy;
    public String deliveryPolicy() {
        if (!unknown_deliveryPolicy) return value_deliveryPolicy;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.deliveryPolicy' is not present");
    }

    /**
     * Endpoint to send data to. The contents vary with the protocol. See details below.
     * 
     */
    @PolicyResourceProperty(name="endpoint", flag="unknown_endpoint")
    private String value_endpoint;
    private boolean unknown_endpoint;
    public String endpoint() {
        if (!unknown_endpoint) return value_endpoint;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.endpoint' is not present");
    }

    /**
     * Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="endpointAutoConfirms", flag="unknown_endpointAutoConfirms")
    private Boolean value_endpointAutoConfirms;
    private boolean unknown_endpointAutoConfirms;
    public Boolean endpointAutoConfirms() {
        if (!unknown_endpointAutoConfirms) return value_endpointAutoConfirms;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.endpointAutoConfirms' is not present");
    }

    /**
     * JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
     * 
     */
    @PolicyResourceProperty(name="filterPolicy", flag="unknown_filterPolicy")
    private String value_filterPolicy;
    private boolean unknown_filterPolicy;
    public String filterPolicy() {
        if (!unknown_filterPolicy) return value_filterPolicy;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.filterPolicy' is not present");
    }

    /**
     * Whether the `filter_policy` applies to `MessageAttributes` (default) or `MessageBody`.
     * 
     */
    @PolicyResourceProperty(name="filterPolicyScope", flag="unknown_filterPolicyScope")
    private String value_filterPolicyScope;
    private boolean unknown_filterPolicyScope;
    public String filterPolicyScope() {
        if (!unknown_filterPolicyScope) return value_filterPolicyScope;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.filterPolicyScope' is not present");
    }

    /**
     * Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.protocol' is not present");
    }

    /**
     * Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="rawMessageDelivery", flag="unknown_rawMessageDelivery")
    private Boolean value_rawMessageDelivery;
    private boolean unknown_rawMessageDelivery;
    public Boolean rawMessageDelivery() {
        if (!unknown_rawMessageDelivery) return value_rawMessageDelivery;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.rawMessageDelivery' is not present");
    }

    /**
     * JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
     * 
     */
    @PolicyResourceProperty(name="redrivePolicy", flag="unknown_redrivePolicy")
    private String value_redrivePolicy;
    private boolean unknown_redrivePolicy;
    public String redrivePolicy() {
        if (!unknown_redrivePolicy) return value_redrivePolicy;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.redrivePolicy' is not present");
    }

    /**
     * JSON String with the archived message replay policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-archiving-and-replay-subscriber.html) for more details.
     * 
     */
    @PolicyResourceProperty(name="replayPolicy", flag="unknown_replayPolicy")
    private String value_replayPolicy;
    private boolean unknown_replayPolicy;
    public String replayPolicy() {
        if (!unknown_replayPolicy) return value_replayPolicy;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.replayPolicy' is not present");
    }

    /**
     * ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
     * 
     */
    @PolicyResourceProperty(name="subscriptionRoleArn", flag="unknown_subscriptionRoleArn")
    private String value_subscriptionRoleArn;
    private boolean unknown_subscriptionRoleArn;
    public String subscriptionRoleArn() {
        if (!unknown_subscriptionRoleArn) return value_subscriptionRoleArn;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.subscriptionRoleArn' is not present");
    }

    /**
     * ARN of the SNS topic to subscribe to.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="topic", flag="unknown_topic")
    private String value_topic;
    private boolean unknown_topic;
    public String topic() {
        if (!unknown_topic) return value_topic;
        throw new UndeferrableValueException("Value 'TopicSubscriptionArgs.topic' is not present");
    }

}
