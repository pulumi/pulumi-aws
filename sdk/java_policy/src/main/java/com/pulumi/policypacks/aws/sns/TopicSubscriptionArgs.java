// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.sns;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:sns/topicSubscription:TopicSubscription")
public final class TopicSubscriptionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
     * 
     */
    private UndeferrableValue<Integer> confirmationTimeoutInMinutes;

    public Integer confirmationTimeoutInMinutes() {
        if (confirmationTimeoutInMinutes == null) return null;
        return confirmationTimeoutInMinutes.getValue("TopicSubscriptionArgs.confirmationTimeoutInMinutes");
    }

    /**
     * JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
     * 
     */
    private UndeferrableValue<String> deliveryPolicy;

    public String deliveryPolicy() {
        if (deliveryPolicy == null) return null;
        return deliveryPolicy.getValue("TopicSubscriptionArgs.deliveryPolicy");
    }

    /**
     * Endpoint to send data to. The contents vary with the protocol. See details below.
     * 
     */
    private UndeferrableValue<String> endpoint;

    public String endpoint() {
        if (endpoint == null) return null;
        return endpoint.getValue("TopicSubscriptionArgs.endpoint");
    }

    /**
     * Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> endpointAutoConfirms;

    public Boolean endpointAutoConfirms() {
        if (endpointAutoConfirms == null) return null;
        return endpointAutoConfirms.getValue("TopicSubscriptionArgs.endpointAutoConfirms");
    }

    /**
     * JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
     * 
     */
    private UndeferrableValue<String> filterPolicy;

    public String filterPolicy() {
        if (filterPolicy == null) return null;
        return filterPolicy.getValue("TopicSubscriptionArgs.filterPolicy");
    }

    /**
     * Whether the `filter_policy` applies to `MessageAttributes` (default) or `MessageBody`.
     * 
     */
    private UndeferrableValue<String> filterPolicyScope;

    public String filterPolicyScope() {
        if (filterPolicyScope == null) return null;
        return filterPolicyScope.getValue("TopicSubscriptionArgs.filterPolicyScope");
    }

    /**
     * Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("TopicSubscriptionArgs.protocol");
    }

    /**
     * Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> rawMessageDelivery;

    public Boolean rawMessageDelivery() {
        if (rawMessageDelivery == null) return null;
        return rawMessageDelivery.getValue("TopicSubscriptionArgs.rawMessageDelivery");
    }

    /**
     * JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
     * 
     */
    private UndeferrableValue<String> redrivePolicy;

    public String redrivePolicy() {
        if (redrivePolicy == null) return null;
        return redrivePolicy.getValue("TopicSubscriptionArgs.redrivePolicy");
    }

    /**
     * JSON String with the archived message replay policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-archiving-and-replay-subscriber.html) for more details.
     * 
     */
    private UndeferrableValue<String> replayPolicy;

    public String replayPolicy() {
        if (replayPolicy == null) return null;
        return replayPolicy.getValue("TopicSubscriptionArgs.replayPolicy");
    }

    /**
     * ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
     * 
     */
    private UndeferrableValue<String> subscriptionRoleArn;

    public String subscriptionRoleArn() {
        if (subscriptionRoleArn == null) return null;
        return subscriptionRoleArn.getValue("TopicSubscriptionArgs.subscriptionRoleArn");
    }

    /**
     * ARN of the SNS topic to subscribe to.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> topic;

    public String topic() {
        if (topic == null) return null;
        return topic.getValue("TopicSubscriptionArgs.topic");
    }

}
