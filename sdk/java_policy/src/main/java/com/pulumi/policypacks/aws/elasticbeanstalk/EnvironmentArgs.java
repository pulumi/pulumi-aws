// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticbeanstalk;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticbeanstalk.inputs.EnvironmentSettingArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticbeanstalk/environment:Environment")
public final class EnvironmentArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Name of the application that contains the version
     * to be deployed
     * 
     */
    private UndeferrableValue<String> application;

    public String application() {
        if (application == null) return null;
        return application.getValue("EnvironmentArgs.application");
    }

    /**
     * Prefix to use for the fully qualified DNS name of
     * the Environment.
     * 
     */
    private UndeferrableValue<String> cnamePrefix;

    public String cnamePrefix() {
        if (cnamePrefix == null) return null;
        return cnamePrefix.getValue("EnvironmentArgs.cnamePrefix");
    }

    /**
     * Short description of the Environment
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("EnvironmentArgs.description");
    }

    /**
     * A unique name for this Environment. This name is used
     * in the application URL
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("EnvironmentArgs.name");
    }

    /**
     * The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the Elastic Beanstalk [Platform](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html#cfn-beanstalk-environment-platformarn)
     * to use in deployment
     * 
     */
    private UndeferrableValue<String> platformArn;

    public String platformArn() {
        if (platformArn == null) return null;
        return platformArn.getValue("EnvironmentArgs.platformArn");
    }

    /**
     * The time between polling the AWS API to
     * check if changes have been applied. Use this to adjust the rate of API calls
     * for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
     * use the default behavior, which is an exponential backoff
     * 
     */
    private UndeferrableValue<String> pollInterval;

    public String pollInterval() {
        if (pollInterval == null) return null;
        return pollInterval.getValue("EnvironmentArgs.pollInterval");
    }

    /**
     * Option settings to configure the new Environment. These
     * override specific values that are set as defaults. The format is detailed
     * below in Option Settings
     * 
     */
    private UndeferrableValue<List<EnvironmentSettingArgs>> settings;

    public List<EnvironmentSettingArgs> settings() {
        if (settings == null) return null;
        return settings.getValue("EnvironmentArgs.settings");
    }

    /**
     * A solution stack to base your environment
     * off of. Example stacks can be found in the [Amazon API documentation](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)
     * 
     */
    private UndeferrableValue<String> solutionStackName;

    public String solutionStackName() {
        if (solutionStackName == null) return null;
        return solutionStackName.getValue("EnvironmentArgs.solutionStackName");
    }

    /**
     * A set of tags to apply to the Environment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EnvironmentArgs.tags");
    }

    /**
     * The name of the Elastic Beanstalk Configuration
     * template to use in deployment
     * 
     */
    private UndeferrableValue<String> templateName;

    public String templateName() {
        if (templateName == null) return null;
        return templateName.getValue("EnvironmentArgs.templateName");
    }

    /**
     * Elastic Beanstalk Environment tier. Valid values are `Worker`
     * or `WebServer`. If tier is left blank `WebServer` will be used.
     * 
     */
    private UndeferrableValue<String> tier;

    public String tier() {
        if (tier == null) return null;
        return tier.getValue("EnvironmentArgs.tier");
    }

    /**
     * The name of the Elastic Beanstalk Application Version
     * to use in deployment.
     * 
     */
    private UndeferrableValue<String> version;

    public String version() {
        if (version == null) return null;
        return version.getValue("EnvironmentArgs.version");
    }

    /**
     * The maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for an Elastic Beanstalk Environment to be in a ready state before timing
     * out.
     * 
     */
    private UndeferrableValue<String> waitForReadyTimeout;

    public String waitForReadyTimeout() {
        if (waitForReadyTimeout == null) return null;
        return waitForReadyTimeout.getValue("EnvironmentArgs.waitForReadyTimeout");
    }

}
