// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticbeanstalk;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticbeanstalk.inputs.EnvironmentSettingArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticbeanstalk/environment:Environment")
public final class EnvironmentArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Name of the application that contains the version
     * to be deployed
     * 
     */
    @PolicyResourceProperty(name="application", flag="unknown_application")
    private String value_application;
    private boolean unknown_application;
    public String application() {
        if (!unknown_application) return value_application;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.application' is not present");
    }

    /**
     * Prefix to use for the fully qualified DNS name of
     * the Environment.
     * 
     */
    @PolicyResourceProperty(name="cnamePrefix", flag="unknown_cnamePrefix")
    private String value_cnamePrefix;
    private boolean unknown_cnamePrefix;
    public String cnamePrefix() {
        if (!unknown_cnamePrefix) return value_cnamePrefix;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.cnamePrefix' is not present");
    }

    /**
     * Short description of the Environment
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.description' is not present");
    }

    /**
     * A unique name for this Environment. This name is used
     * in the application URL
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.name' is not present");
    }

    /**
     * The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the Elastic Beanstalk [Platform](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html#cfn-beanstalk-environment-platformarn)
     * to use in deployment
     * 
     */
    @PolicyResourceProperty(name="platformArn", flag="unknown_platformArn")
    private String value_platformArn;
    private boolean unknown_platformArn;
    public String platformArn() {
        if (!unknown_platformArn) return value_platformArn;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.platformArn' is not present");
    }

    /**
     * The time between polling the AWS API to
     * check if changes have been applied. Use this to adjust the rate of API calls
     * for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
     * use the default behavior, which is an exponential backoff
     * 
     */
    @PolicyResourceProperty(name="pollInterval", flag="unknown_pollInterval")
    private String value_pollInterval;
    private boolean unknown_pollInterval;
    public String pollInterval() {
        if (!unknown_pollInterval) return value_pollInterval;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.pollInterval' is not present");
    }

    /**
     * Option settings to configure the new Environment. These
     * override specific values that are set as defaults. The format is detailed
     * below in Option Settings
     * 
     */
    @PolicyResourceProperty(name="settings", flag="unknown_settings")
    private List<EnvironmentSettingArgs> value_settings;
    private boolean unknown_settings;
    public List<EnvironmentSettingArgs> settings() {
        if (!unknown_settings) return value_settings;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.settings' is not present");
    }

    /**
     * A solution stack to base your environment
     * off of. Example stacks can be found in the [Amazon API documentation](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)
     * 
     */
    @PolicyResourceProperty(name="solutionStackName", flag="unknown_solutionStackName")
    private String value_solutionStackName;
    private boolean unknown_solutionStackName;
    public String solutionStackName() {
        if (!unknown_solutionStackName) return value_solutionStackName;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.solutionStackName' is not present");
    }

    /**
     * A set of tags to apply to the Environment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.tags' is not present");
    }

    /**
     * The name of the Elastic Beanstalk Configuration
     * template to use in deployment
     * 
     */
    @PolicyResourceProperty(name="templateName", flag="unknown_templateName")
    private String value_templateName;
    private boolean unknown_templateName;
    public String templateName() {
        if (!unknown_templateName) return value_templateName;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.templateName' is not present");
    }

    /**
     * Elastic Beanstalk Environment tier. Valid values are `Worker`
     * or `WebServer`. If tier is left blank `WebServer` will be used.
     * 
     */
    @PolicyResourceProperty(name="tier", flag="unknown_tier")
    private String value_tier;
    private boolean unknown_tier;
    public String tier() {
        if (!unknown_tier) return value_tier;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.tier' is not present");
    }

    /**
     * The name of the Elastic Beanstalk Application Version
     * to use in deployment.
     * 
     */
    @PolicyResourceProperty(name="version", flag="unknown_version")
    private String value_version;
    private boolean unknown_version;
    public String version() {
        if (!unknown_version) return value_version;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.version' is not present");
    }

    /**
     * The maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for an Elastic Beanstalk Environment to be in a ready state before timing
     * out.
     * 
     */
    @PolicyResourceProperty(name="waitForReadyTimeout", flag="unknown_waitForReadyTimeout")
    private String value_waitForReadyTimeout;
    private boolean unknown_waitForReadyTimeout;
    public String waitForReadyTimeout() {
        if (!unknown_waitForReadyTimeout) return value_waitForReadyTimeout;
        throw new UndeferrableValueException("Value 'EnvironmentArgs.waitForReadyTimeout' is not present");
    }

}
