// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.outputs.UserAuthenticationMode;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticache/user:User")
public final class User extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Access permissions string used for this user. See [Specifying Permissions Using an Access String](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html#Access-string) for more details.
     * 
     */
    @PolicyResourceProperty(name="accessString", flag="unknown_accessString")
    private String value_accessString;
    private boolean unknown_accessString;
    public String accessString() {
        if (!unknown_accessString) return value_accessString;
        throw new UndeferrableValueException("Value 'User.accessString' is not present");
    }

    /**
     * The ARN of the created ElastiCache User.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'User.arn' is not present");
    }

    /**
     * Denotes the user&#39;s authentication properties. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="authenticationMode", flag="unknown_authenticationMode")
    private UserAuthenticationMode value_authenticationMode;
    private boolean unknown_authenticationMode;
    public UserAuthenticationMode authenticationMode() {
        if (!unknown_authenticationMode) return value_authenticationMode;
        throw new UndeferrableValueException("Value 'User.authenticationMode' is not present");
    }

    /**
     * The current supported values are `redis`, `valkey` (case insensitive).
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private String value_engine;
    private boolean unknown_engine;
    public String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'User.engine' is not present");
    }

    /**
     * Indicates a password is not required for this user.
     * 
     */
    @PolicyResourceProperty(name="noPasswordRequired", flag="unknown_noPasswordRequired")
    private @Nullable Boolean value_noPasswordRequired;
    private boolean unknown_noPasswordRequired;
    public @Nullable Boolean noPasswordRequired() {
        if (!unknown_noPasswordRequired) return value_noPasswordRequired;
        throw new UndeferrableValueException("Value 'User.noPasswordRequired' is not present");
    }

    /**
     * Passwords used for this user. You can create up to two passwords for each user.
     * 
     */
    @PolicyResourceProperty(name="passwords", flag="unknown_passwords")
    private @Nullable List<String> value_passwords;
    private boolean unknown_passwords;
    public @Nullable List<String> passwords() {
        if (!unknown_passwords) return value_passwords;
        throw new UndeferrableValueException("Value 'User.passwords' is not present");
    }

    /**
     * A list of tags to be added to this resource. A tag is a key-value pair.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'User.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'User.tagsAll' is not present");
    }

    /**
     * The ID of the user.
     * 
     */
    @PolicyResourceProperty(name="userId", flag="unknown_userId")
    private String value_userId;
    private boolean unknown_userId;
    public String userId() {
        if (!unknown_userId) return value_userId;
        throw new UndeferrableValueException("Value 'User.userId' is not present");
    }

    /**
     * The username of the user.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="userName", flag="unknown_userName")
    private String value_userName;
    private boolean unknown_userName;
    public String userName() {
        if (!unknown_userName) return value_userName;
        throw new UndeferrableValueException("Value 'User.userName' is not present");
    }

}
