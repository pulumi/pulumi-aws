// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.acmpca;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.List;


@PolicyResourceType(type="aws:acmpca/permission:Permission")
public final class Permission extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
     * 
     */
    @PolicyResourceProperty(name="actions", flag="unknown_actions")
    private List<String> value_actions;
    private boolean unknown_actions;
    public List<String> actions() {
        if (!unknown_actions) return value_actions;
        throw new UndeferrableValueException("Value 'Permission.actions' is not present");
    }

    /**
     * ARN of the CA that grants the permissions.
     * 
     */
    @PolicyResourceProperty(name="certificateAuthorityArn", flag="unknown_certificateAuthorityArn")
    private String value_certificateAuthorityArn;
    private boolean unknown_certificateAuthorityArn;
    public String certificateAuthorityArn() {
        if (!unknown_certificateAuthorityArn) return value_certificateAuthorityArn;
        throw new UndeferrableValueException("Value 'Permission.certificateAuthorityArn' is not present");
    }

    /**
     * IAM policy that is associated with the permission.
     * 
     */
    @PolicyResourceProperty(name="policy", flag="unknown_policy")
    private String value_policy;
    private boolean unknown_policy;
    public String policy() {
        if (!unknown_policy) return value_policy;
        throw new UndeferrableValueException("Value 'Permission.policy' is not present");
    }

    /**
     * AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
     * 
     */
    @PolicyResourceProperty(name="principal", flag="unknown_principal")
    private String value_principal;
    private boolean unknown_principal;
    public String principal() {
        if (!unknown_principal) return value_principal;
        throw new UndeferrableValueException("Value 'Permission.principal' is not present");
    }

    /**
     * ID of the calling account
     * 
     */
    @PolicyResourceProperty(name="sourceAccount", flag="unknown_sourceAccount")
    private String value_sourceAccount;
    private boolean unknown_sourceAccount;
    public String sourceAccount() {
        if (!unknown_sourceAccount) return value_sourceAccount;
        throw new UndeferrableValueException("Value 'Permission.sourceAccount' is not present");
    }

}
