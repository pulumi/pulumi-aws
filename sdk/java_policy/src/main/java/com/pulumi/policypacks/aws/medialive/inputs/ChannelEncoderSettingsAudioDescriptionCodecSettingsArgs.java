// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs {

    /**
     * Aac Settings. See AAC Settings for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs> aacSettings;

    public ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs aacSettings() {
        if (aacSettings == null) return null;
        return aacSettings.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs.aacSettings");
    }

    /**
     * Ac3 Settings. See AC3 Settings for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs> ac3Settings;

    public ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs ac3Settings() {
        if (ac3Settings == null) return null;
        return ac3Settings.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs.ac3Settings");
    }

    /**
     * Eac3 Atmos Settings. See EAC3 Atmos Settings
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs> eac3AtmosSettings;

    public ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs eac3AtmosSettings() {
        if (eac3AtmosSettings == null) return null;
        return eac3AtmosSettings.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs.eac3AtmosSettings");
    }

    /**
     * Eac3 Settings. See EAC3 Settings
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs> eac3Settings;

    public ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs eac3Settings() {
        if (eac3Settings == null) return null;
        return eac3Settings.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs.eac3Settings");
    }

    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs> mp2Settings;

    public ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs mp2Settings() {
        if (mp2Settings == null) return null;
        return mp2Settings.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs.mp2Settings");
    }

    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs> passThroughSettings;

    public ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs passThroughSettings() {
        if (passThroughSettings == null) return null;
        return passThroughSettings.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs.passThroughSettings");
    }

    private UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs> wavSettings;

    public ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs wavSettings() {
        if (wavSettings == null) return null;
        return wavSettings.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs.wavSettings");
    }

}
