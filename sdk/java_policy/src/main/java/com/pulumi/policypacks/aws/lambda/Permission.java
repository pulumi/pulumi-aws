// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lambda;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lambda/permission:Permission")
public final class Permission extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The AWS Lambda action you want to allow in this statement. (e.g., `lambda:InvokeFunction`)
     * 
     */
    @PolicyResourceProperty(name="action", flag="unknown_action")
    private String value_action;
    private boolean unknown_action;
    public String action() {
        if (!unknown_action) return value_action;
        throw new UndeferrableValueException("Value 'Permission.action' is not present");
    }

    /**
     * The Event Source Token to validate.  Used with [Alexa Skills](https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli).
     * 
     */
    @PolicyResourceProperty(name="eventSourceToken", flag="unknown_eventSourceToken")
    private @Nullable String value_eventSourceToken;
    private boolean unknown_eventSourceToken;
    public @Nullable String eventSourceToken() {
        if (!unknown_eventSourceToken) return value_eventSourceToken;
        throw new UndeferrableValueException("Value 'Permission.eventSourceToken' is not present");
    }

    /**
     * Name of the Lambda function whose resource policy you are updating
     * 
     */
    @PolicyResourceProperty(name="function", flag="unknown_function")
    private String value_function;
    private boolean unknown_function;
    public String function() {
        if (!unknown_function) return value_function;
        throw new UndeferrableValueException("Value 'Permission.function' is not present");
    }

    /**
     * Lambda Function URLs [authentication type](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html). Valid values are: `AWS_IAM` or `NONE`. Only supported for `lambda:InvokeFunctionUrl` action.
     * 
     */
    @PolicyResourceProperty(name="functionUrlAuthType", flag="unknown_functionUrlAuthType")
    private @Nullable String value_functionUrlAuthType;
    private boolean unknown_functionUrlAuthType;
    public @Nullable String functionUrlAuthType() {
        if (!unknown_functionUrlAuthType) return value_functionUrlAuthType;
        throw new UndeferrableValueException("Value 'Permission.functionUrlAuthType' is not present");
    }

    /**
     * The principal who is getting this permission e.g., `s3.amazonaws.com`, an AWS account ID, or AWS IAM principal, or AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
     * 
     */
    @PolicyResourceProperty(name="principal", flag="unknown_principal")
    private String value_principal;
    private boolean unknown_principal;
    public String principal() {
        if (!unknown_principal) return value_principal;
        throw new UndeferrableValueException("Value 'Permission.principal' is not present");
    }

    /**
     * The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
     * 
     * [1]: https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli
     * [2]: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html
     * [3]: https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html
     * 
     */
    @PolicyResourceProperty(name="principalOrgId", flag="unknown_principalOrgId")
    private @Nullable String value_principalOrgId;
    private boolean unknown_principalOrgId;
    public @Nullable String principalOrgId() {
        if (!unknown_principalOrgId) return value_principalOrgId;
        throw new UndeferrableValueException("Value 'Permission.principalOrgId' is not present");
    }

    /**
     * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
     * 
     */
    @PolicyResourceProperty(name="qualifier", flag="unknown_qualifier")
    private @Nullable String value_qualifier;
    private boolean unknown_qualifier;
    public @Nullable String qualifier() {
        if (!unknown_qualifier) return value_qualifier;
        throw new UndeferrableValueException("Value 'Permission.qualifier' is not present");
    }

    /**
     * This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
     * 
     */
    @PolicyResourceProperty(name="sourceAccount", flag="unknown_sourceAccount")
    private @Nullable String value_sourceAccount;
    private boolean unknown_sourceAccount;
    public @Nullable String sourceAccount() {
        if (!unknown_sourceAccount) return value_sourceAccount;
        throw new UndeferrableValueException("Value 'Permission.sourceAccount' is not present");
    }

    /**
     * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
     * Without this, any resource from `principal` will be granted permission â€“ even if that resource is from another account.
     * For S3, this should be the ARN of the S3 Bucket.
     * For EventBridge events, this should be the ARN of the EventBridge Rule.
     * For API Gateway, this should be the ARN of the API, as described [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
     * 
     */
    @PolicyResourceProperty(name="sourceArn", flag="unknown_sourceArn")
    private @Nullable String value_sourceArn;
    private boolean unknown_sourceArn;
    public @Nullable String sourceArn() {
        if (!unknown_sourceArn) return value_sourceArn;
        throw new UndeferrableValueException("Value 'Permission.sourceArn' is not present");
    }

    /**
     * A unique statement identifier. By default generated by the provider.
     * 
     */
    @PolicyResourceProperty(name="statementId", flag="unknown_statementId")
    private String value_statementId;
    private boolean unknown_statementId;
    public String statementId() {
        if (!unknown_statementId) return value_statementId;
        throw new UndeferrableValueException("Value 'Permission.statementId' is not present");
    }

    /**
     * A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statement_id`.
     * 
     */
    @PolicyResourceProperty(name="statementIdPrefix", flag="unknown_statementIdPrefix")
    private String value_statementIdPrefix;
    private boolean unknown_statementIdPrefix;
    public String statementIdPrefix() {
        if (!unknown_statementIdPrefix) return value_statementIdPrefix;
        throw new UndeferrableValueException("Value 'Permission.statementIdPrefix' is not present");
    }

}
