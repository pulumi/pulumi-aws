// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.m2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.m2.inputs.EnvironmentHighAvailabilityConfigArgs;
import com.pulumi.policypacks.aws.m2.inputs.EnvironmentStorageConfigurationArgs;
import com.pulumi.policypacks.aws.m2.inputs.EnvironmentTimeoutsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:m2/environment:Environment")
public final class EnvironmentArgs extends com.pulumi.resources.PolicyResourceInput {

    private UndeferrableValue<Boolean> applyChangesDuringMaintenanceWindow;

    public Boolean applyChangesDuringMaintenanceWindow() {
        if (applyChangesDuringMaintenanceWindow == null) return null;
        return applyChangesDuringMaintenanceWindow.getValue("EnvironmentArgs.applyChangesDuringMaintenanceWindow");
    }

    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("EnvironmentArgs.description");
    }

    /**
     * Engine type must be `microfocus` or `bluage`.
     * 
     */
    private UndeferrableValue<String> engineType;

    public String engineType() {
        if (engineType == null) return null;
        return engineType.getValue("EnvironmentArgs.engineType");
    }

    /**
     * The specific version of the engine for the Environment.
     * 
     */
    private UndeferrableValue<String> engineVersion;

    public String engineVersion() {
        if (engineVersion == null) return null;
        return engineVersion.getValue("EnvironmentArgs.engineVersion");
    }

    /**
     * Force update the environment even if applications are running.
     * 
     */
    private UndeferrableValue<Boolean> forceUpdate;

    public Boolean forceUpdate() {
        if (forceUpdate == null) return null;
        return forceUpdate.getValue("EnvironmentArgs.forceUpdate");
    }

    private UndeferrableValue<EnvironmentHighAvailabilityConfigArgs> highAvailabilityConfig;

    public EnvironmentHighAvailabilityConfigArgs highAvailabilityConfig() {
        if (highAvailabilityConfig == null) return null;
        return highAvailabilityConfig.getValue("EnvironmentArgs.highAvailabilityConfig");
    }

    /**
     * M2 Instance Type.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> instanceType;

    public String instanceType() {
        if (instanceType == null) return null;
        return instanceType.getValue("EnvironmentArgs.instanceType");
    }

    /**
     * ARN of the KMS key to use for the Environment.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("EnvironmentArgs.kmsKeyId");
    }

    /**
     * Name of the runtime environment. Must be unique within the account.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("EnvironmentArgs.name");
    }

    /**
     * Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
     * 
     */
    private UndeferrableValue<String> preferredMaintenanceWindow;

    public String preferredMaintenanceWindow() {
        if (preferredMaintenanceWindow == null) return null;
        return preferredMaintenanceWindow.getValue("EnvironmentArgs.preferredMaintenanceWindow");
    }

    /**
     * Allow applications deployed to this environment to be publicly accessible.
     * 
     */
    private UndeferrableValue<Boolean> publiclyAccessible;

    public Boolean publiclyAccessible() {
        if (publiclyAccessible == null) return null;
        return publiclyAccessible.getValue("EnvironmentArgs.publiclyAccessible");
    }

    /**
     * List of security group ids.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("EnvironmentArgs.securityGroupIds");
    }

    private UndeferrableValue<EnvironmentStorageConfigurationArgs> storageConfiguration;

    public EnvironmentStorageConfigurationArgs storageConfiguration() {
        if (storageConfiguration == null) return null;
        return storageConfiguration.getValue("EnvironmentArgs.storageConfiguration");
    }

    /**
     * List of subnet ids to deploy environment to.
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("EnvironmentArgs.subnetIds");
    }

    /**
     * Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EnvironmentArgs.tags");
    }

    private UndeferrableValue<EnvironmentTimeoutsArgs> timeouts;

    public EnvironmentTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("EnvironmentArgs.timeouts");
    }

}
