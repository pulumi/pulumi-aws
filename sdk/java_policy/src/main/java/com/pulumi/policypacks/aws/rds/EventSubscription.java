// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/eventSubscription:EventSubscription")
public final class EventSubscription extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name of the RDS event notification subscription
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("EventSubscription.arn");
    }

    /**
     * The AWS customer account associated with the RDS event notification subscription
     * 
     */
    private UndeferrableValue<String> customerAwsId;

    public String customerAwsId() {
        if (customerAwsId == null) return null;
        return customerAwsId.getValue("EventSubscription.customerAwsId");
    }

    /**
     * A boolean flag to enable/disable the subscription. Defaults to true.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> enabled;

    public @Nullable Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("EventSubscription.enabled");
    }

    /**
     * A list of event categories for a SourceType that you want to subscribe to. See http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html or run `aws rds describe-event-categories`.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> eventCategories;

    public @Nullable List<String> eventCategories() {
        if (eventCategories == null) return null;
        return eventCategories.getValue("EventSubscription.eventCategories");
    }

    /**
     * The name of the DB event subscription. By default generated by this provider.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("EventSubscription.name");
    }

    /**
     * The name of the DB event subscription. Conflicts with `name`.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("EventSubscription.namePrefix");
    }

    /**
     * The SNS topic to send events to.
     * 
     */
    private UndeferrableValue<String> snsTopic;

    public String snsTopic() {
        if (snsTopic == null) return null;
        return snsTopic.getValue("EventSubscription.snsTopic");
    }

    /**
     * A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> sourceIds;

    public @Nullable List<String> sourceIds() {
        if (sourceIds == null) return null;
        return sourceIds.getValue("EventSubscription.sourceIds");
    }

    /**
     * The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster`, `db-cluster-snapshot`, or `db-proxy`. If not set, all sources will be subscribed to.
     * 
     */
    private @Nullable UndeferrableValue<String> sourceType;

    public @Nullable String sourceType() {
        if (sourceType == null) return null;
        return sourceType.getValue("EventSubscription.sourceType");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EventSubscription.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("EventSubscription.tagsAll");
    }

}
