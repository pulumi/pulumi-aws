// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.s3.inputs.ObjectCopyGrantArgs;
import com.pulumi.policypacks.aws.s3.inputs.ObjectCopyOverrideProviderArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:s3/objectCopy:ObjectCopy")
public final class ObjectCopyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Valid values are `private`, `public-read`, `public-read-write`, `authenticated-read`, `aws-exec-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Conflicts with `grant`.
     * 
     */
    private UndeferrableValue<String> acl;

    public String acl() {
        if (acl == null) return null;
        return acl.getValue("ObjectCopyArgs.acl");
    }

    /**
     * Name of the bucket to put the file in.
     * 
     */
    private UndeferrableValue<String> bucket;

    public String bucket() {
        if (bucket == null) return null;
        return bucket.getValue("ObjectCopyArgs.bucket");
    }

    private UndeferrableValue<Boolean> bucketKeyEnabled;

    public Boolean bucketKeyEnabled() {
        if (bucketKeyEnabled == null) return null;
        return bucketKeyEnabled.getValue("ObjectCopyArgs.bucketKeyEnabled");
    }

    /**
     * Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.
     * 
     */
    private UndeferrableValue<String> cacheControl;

    public String cacheControl() {
        if (cacheControl == null) return null;
        return cacheControl.getValue("ObjectCopyArgs.cacheControl");
    }

    /**
     * Indicates the algorithm used to create the checksum for the object. If a value is specified and the object is encrypted with KMS, you must have permission to use the `kms:Decrypt` action. Valid values: `CRC32`, `CRC32C`, `CRC64NVME` `SHA1`, `SHA256`.
     * 
     */
    private UndeferrableValue<String> checksumAlgorithm;

    public String checksumAlgorithm() {
        if (checksumAlgorithm == null) return null;
        return checksumAlgorithm.getValue("ObjectCopyArgs.checksumAlgorithm");
    }

    /**
     * Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.
     * 
     */
    private UndeferrableValue<String> contentDisposition;

    public String contentDisposition() {
        if (contentDisposition == null) return null;
        return contentDisposition.getValue("ObjectCopyArgs.contentDisposition");
    }

    /**
     * Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.
     * 
     */
    private UndeferrableValue<String> contentEncoding;

    public String contentEncoding() {
        if (contentEncoding == null) return null;
        return contentEncoding.getValue("ObjectCopyArgs.contentEncoding");
    }

    /**
     * Language the content is in e.g., en-US or en-GB.
     * 
     */
    private UndeferrableValue<String> contentLanguage;

    public String contentLanguage() {
        if (contentLanguage == null) return null;
        return contentLanguage.getValue("ObjectCopyArgs.contentLanguage");
    }

    /**
     * Standard MIME type describing the format of the object data, e.g., `application/octet-stream`. All Valid MIME Types are valid for this input.
     * 
     */
    private UndeferrableValue<String> contentType;

    public String contentType() {
        if (contentType == null) return null;
        return contentType.getValue("ObjectCopyArgs.contentType");
    }

    /**
     * Copies the object if its entity tag (ETag) matches the specified tag.
     * 
     */
    private UndeferrableValue<String> copyIfMatch;

    public String copyIfMatch() {
        if (copyIfMatch == null) return null;
        return copyIfMatch.getValue("ObjectCopyArgs.copyIfMatch");
    }

    /**
     * Copies the object if it has been modified since the specified time, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    private UndeferrableValue<String> copyIfModifiedSince;

    public String copyIfModifiedSince() {
        if (copyIfModifiedSince == null) return null;
        return copyIfModifiedSince.getValue("ObjectCopyArgs.copyIfModifiedSince");
    }

    /**
     * Copies the object if its entity tag (ETag) is different than the specified ETag.
     * 
     */
    private UndeferrableValue<String> copyIfNoneMatch;

    public String copyIfNoneMatch() {
        if (copyIfNoneMatch == null) return null;
        return copyIfNoneMatch.getValue("ObjectCopyArgs.copyIfNoneMatch");
    }

    /**
     * Copies the object if it hasn&#39;t been modified since the specified time, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    private UndeferrableValue<String> copyIfUnmodifiedSince;

    public String copyIfUnmodifiedSince() {
        if (copyIfUnmodifiedSince == null) return null;
        return copyIfUnmodifiedSince.getValue("ObjectCopyArgs.copyIfUnmodifiedSince");
    }

    /**
     * Specifies the algorithm to use to when encrypting the object (for example, AES256).
     * 
     */
    private UndeferrableValue<String> customerAlgorithm;

    public String customerAlgorithm() {
        if (customerAlgorithm == null) return null;
        return customerAlgorithm.getValue("ObjectCopyArgs.customerAlgorithm");
    }

    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header.
     * 
     */
    private UndeferrableValue<String> customerKey;

    public String customerKey() {
        if (customerKey == null) return null;
        return customerKey.getValue("ObjectCopyArgs.customerKey");
    }

    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
     * 
     */
    private UndeferrableValue<String> customerKeyMd5;

    public String customerKeyMd5() {
        if (customerKeyMd5 == null) return null;
        return customerKeyMd5.getValue("ObjectCopyArgs.customerKeyMd5");
    }

    /**
     * Account id of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     * 
     */
    private UndeferrableValue<String> expectedBucketOwner;

    public String expectedBucketOwner() {
        if (expectedBucketOwner == null) return null;
        return expectedBucketOwner.getValue("ObjectCopyArgs.expectedBucketOwner");
    }

    /**
     * Account id of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     * 
     */
    private UndeferrableValue<String> expectedSourceBucketOwner;

    public String expectedSourceBucketOwner() {
        if (expectedSourceBucketOwner == null) return null;
        return expectedSourceBucketOwner.getValue("ObjectCopyArgs.expectedSourceBucketOwner");
    }

    /**
     * Date and time at which the object is no longer cacheable, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    private UndeferrableValue<String> expires;

    public String expires() {
        if (expires == null) return null;
        return expires.getValue("ObjectCopyArgs.expires");
    }

    /**
     * Allow the object to be deleted by removing any legal hold on any object version. Default is `false`. This value should be set to `true` only if the bucket has S3 object lock enabled.
     * 
     */
    private UndeferrableValue<Boolean> forceDestroy;

    public Boolean forceDestroy() {
        if (forceDestroy == null) return null;
        return forceDestroy.getValue("ObjectCopyArgs.forceDestroy");
    }

    /**
     * Configuration block for header grants. Documented below. Conflicts with `acl`.
     * 
     */
    private UndeferrableValue<List<ObjectCopyGrantArgs>> grants;

    public List<ObjectCopyGrantArgs> grants() {
        if (grants == null) return null;
        return grants.getValue("ObjectCopyArgs.grants");
    }

    /**
     * Name of the object once it is in the bucket.
     * 
     */
    private UndeferrableValue<String> key;

    public String key() {
        if (key == null) return null;
        return key.getValue("ObjectCopyArgs.key");
    }

    /**
     * Specifies the AWS KMS Encryption Context to use for object encryption. The value is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
     * 
     */
    private UndeferrableValue<String> kmsEncryptionContext;

    public String kmsEncryptionContext() {
        if (kmsEncryptionContext == null) return null;
        return kmsEncryptionContext.getValue("ObjectCopyArgs.kmsEncryptionContext");
    }

    /**
     * Specifies the AWS KMS Key ARN to use for object encryption. This value is a fully qualified **ARN** of the KMS Key. If using `aws.kms.Key`, use the exported `arn` attribute: `kms_key_id = aws_kms_key.foo.arn`
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("ObjectCopyArgs.kmsKeyId");
    }

    /**
     * Map of keys/values to provision metadata (will be automatically prefixed by `x-amz-meta-`, note that only lowercase label are currently supported by the AWS Go API).
     * 
     */
    private UndeferrableValue<Map<String,String>> metadata;

    public Map<String,String> metadata() {
        if (metadata == null) return null;
        return metadata.getValue("ObjectCopyArgs.metadata");
    }

    /**
     * Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
     * 
     */
    private UndeferrableValue<String> metadataDirective;

    public String metadataDirective() {
        if (metadataDirective == null) return null;
        return metadataDirective.getValue("ObjectCopyArgs.metadataDirective");
    }

    /**
     * The [legal hold](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-legal-holds) status that you want to apply to the specified object. Valid values are `ON` and `OFF`.
     * 
     */
    private UndeferrableValue<String> objectLockLegalHoldStatus;

    public String objectLockLegalHoldStatus() {
        if (objectLockLegalHoldStatus == null) return null;
        return objectLockLegalHoldStatus.getValue("ObjectCopyArgs.objectLockLegalHoldStatus");
    }

    /**
     * Object lock [retention mode](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-modes) that you want to apply to this object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
     * 
     */
    private UndeferrableValue<String> objectLockMode;

    public String objectLockMode() {
        if (objectLockMode == null) return null;
        return objectLockMode.getValue("ObjectCopyArgs.objectLockMode");
    }

    /**
     * Date and time, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8), when this object&#39;s object lock will [expire](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-periods).
     * 
     */
    private UndeferrableValue<String> objectLockRetainUntilDate;

    public String objectLockRetainUntilDate() {
        if (objectLockRetainUntilDate == null) return null;
        return objectLockRetainUntilDate.getValue("ObjectCopyArgs.objectLockRetainUntilDate");
    }

    private UndeferrableValue<ObjectCopyOverrideProviderArgs> overrideProvider;

    public ObjectCopyOverrideProviderArgs overrideProvider() {
        if (overrideProvider == null) return null;
        return overrideProvider.getValue("ObjectCopyArgs.overrideProvider");
    }

    /**
     * Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. For information about downloading objects from requester pays buckets, see Downloading Objects in Requestor Pays Buckets (https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 Developer Guide. If included, the only valid value is `requester`.
     * 
     */
    private UndeferrableValue<String> requestPayer;

    public String requestPayer() {
        if (requestPayer == null) return null;
        return requestPayer.getValue("ObjectCopyArgs.requestPayer");
    }

    /**
     * Specifies server-side encryption of the object in S3. Valid values are `AES256` and `aws:kms`.
     * 
     */
    private UndeferrableValue<String> serverSideEncryption;

    public String serverSideEncryption() {
        if (serverSideEncryption == null) return null;
        return serverSideEncryption.getValue("ObjectCopyArgs.serverSideEncryption");
    }

    /**
     * Specifies the source object for the copy operation. You specify the value in one of two formats. For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (`/`). For example, `testbucket/test1.json`. For objects accessed through access points, specify the ARN of the object as accessed through the access point, in the format `arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&lt;key&gt;`. For example, `arn:aws:s3:us-west-2:9999912999:accesspoint/my-access-point/object/testbucket/test1.json`.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> source;

    public String source() {
        if (source == null) return null;
        return source.getValue("ObjectCopyArgs.source");
    }

    /**
     * Specifies the algorithm to use when decrypting the source object (for example, AES256).
     * 
     */
    private UndeferrableValue<String> sourceCustomerAlgorithm;

    public String sourceCustomerAlgorithm() {
        if (sourceCustomerAlgorithm == null) return null;
        return sourceCustomerAlgorithm.getValue("ObjectCopyArgs.sourceCustomerAlgorithm");
    }

    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
     * 
     */
    private UndeferrableValue<String> sourceCustomerKey;

    public String sourceCustomerKey() {
        if (sourceCustomerKey == null) return null;
        return sourceCustomerKey.getValue("ObjectCopyArgs.sourceCustomerKey");
    }

    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
     * 
     */
    private UndeferrableValue<String> sourceCustomerKeyMd5;

    public String sourceCustomerKeyMd5() {
        if (sourceCustomerKeyMd5 == null) return null;
        return sourceCustomerKeyMd5.getValue("ObjectCopyArgs.sourceCustomerKeyMd5");
    }

    /**
     * Specifies the desired [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html#AmazonS3-CopyObject-request-header-StorageClass) for the object. Defaults to `STANDARD`.
     * 
     */
    private UndeferrableValue<String> storageClass;

    public String storageClass() {
        if (storageClass == null) return null;
        return storageClass.getValue("ObjectCopyArgs.storageClass");
    }

    /**
     * Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
     * 
     */
    private UndeferrableValue<String> taggingDirective;

    public String taggingDirective() {
        if (taggingDirective == null) return null;
        return taggingDirective.getValue("ObjectCopyArgs.taggingDirective");
    }

    /**
     * Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ObjectCopyArgs.tags");
    }

    /**
     * Specifies a target URL for [website redirect](http://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html).
     * 
     */
    private UndeferrableValue<String> websiteRedirect;

    public String websiteRedirect() {
        if (websiteRedirect == null) return null;
        return websiteRedirect.getValue("ObjectCopyArgs.websiteRedirect");
    }

}
