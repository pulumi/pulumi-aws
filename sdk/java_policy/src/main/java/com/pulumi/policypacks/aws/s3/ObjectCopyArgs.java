// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.s3.inputs.ObjectCopyGrantArgs;
import com.pulumi.policypacks.aws.s3.inputs.ObjectCopyOverrideProviderArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:s3/objectCopy:ObjectCopy")
public final class ObjectCopyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Valid values are `private`, `public-read`, `public-read-write`, `authenticated-read`, `aws-exec-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Conflicts with `grant`.
     * 
     */
    @PolicyResourceProperty(name="acl", flag="unknown_acl")
    private String value_acl;
    private boolean unknown_acl;
    public String acl() {
        if (!unknown_acl) return value_acl;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.acl' is not present");
    }

    /**
     * Name of the bucket to put the file in.
     * 
     */
    @PolicyResourceProperty(name="bucket", flag="unknown_bucket")
    private String value_bucket;
    private boolean unknown_bucket;
    public String bucket() {
        if (!unknown_bucket) return value_bucket;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.bucket' is not present");
    }

    @PolicyResourceProperty(name="bucketKeyEnabled", flag="unknown_bucketKeyEnabled")
    private Boolean value_bucketKeyEnabled;
    private boolean unknown_bucketKeyEnabled;
    public Boolean bucketKeyEnabled() {
        if (!unknown_bucketKeyEnabled) return value_bucketKeyEnabled;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.bucketKeyEnabled' is not present");
    }

    /**
     * Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.
     * 
     */
    @PolicyResourceProperty(name="cacheControl", flag="unknown_cacheControl")
    private String value_cacheControl;
    private boolean unknown_cacheControl;
    public String cacheControl() {
        if (!unknown_cacheControl) return value_cacheControl;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.cacheControl' is not present");
    }

    /**
     * Indicates the algorithm used to create the checksum for the object. If a value is specified and the object is encrypted with KMS, you must have permission to use the `kms:Decrypt` action. Valid values: `CRC32`, `CRC32C`, `CRC64NVME` `SHA1`, `SHA256`.
     * 
     */
    @PolicyResourceProperty(name="checksumAlgorithm", flag="unknown_checksumAlgorithm")
    private String value_checksumAlgorithm;
    private boolean unknown_checksumAlgorithm;
    public String checksumAlgorithm() {
        if (!unknown_checksumAlgorithm) return value_checksumAlgorithm;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.checksumAlgorithm' is not present");
    }

    /**
     * Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.
     * 
     */
    @PolicyResourceProperty(name="contentDisposition", flag="unknown_contentDisposition")
    private String value_contentDisposition;
    private boolean unknown_contentDisposition;
    public String contentDisposition() {
        if (!unknown_contentDisposition) return value_contentDisposition;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.contentDisposition' is not present");
    }

    /**
     * Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.
     * 
     */
    @PolicyResourceProperty(name="contentEncoding", flag="unknown_contentEncoding")
    private String value_contentEncoding;
    private boolean unknown_contentEncoding;
    public String contentEncoding() {
        if (!unknown_contentEncoding) return value_contentEncoding;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.contentEncoding' is not present");
    }

    /**
     * Language the content is in e.g., en-US or en-GB.
     * 
     */
    @PolicyResourceProperty(name="contentLanguage", flag="unknown_contentLanguage")
    private String value_contentLanguage;
    private boolean unknown_contentLanguage;
    public String contentLanguage() {
        if (!unknown_contentLanguage) return value_contentLanguage;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.contentLanguage' is not present");
    }

    /**
     * Standard MIME type describing the format of the object data, e.g., `application/octet-stream`. All Valid MIME Types are valid for this input.
     * 
     */
    @PolicyResourceProperty(name="contentType", flag="unknown_contentType")
    private String value_contentType;
    private boolean unknown_contentType;
    public String contentType() {
        if (!unknown_contentType) return value_contentType;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.contentType' is not present");
    }

    /**
     * Copies the object if its entity tag (ETag) matches the specified tag.
     * 
     */
    @PolicyResourceProperty(name="copyIfMatch", flag="unknown_copyIfMatch")
    private String value_copyIfMatch;
    private boolean unknown_copyIfMatch;
    public String copyIfMatch() {
        if (!unknown_copyIfMatch) return value_copyIfMatch;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.copyIfMatch' is not present");
    }

    /**
     * Copies the object if it has been modified since the specified time, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    @PolicyResourceProperty(name="copyIfModifiedSince", flag="unknown_copyIfModifiedSince")
    private String value_copyIfModifiedSince;
    private boolean unknown_copyIfModifiedSince;
    public String copyIfModifiedSince() {
        if (!unknown_copyIfModifiedSince) return value_copyIfModifiedSince;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.copyIfModifiedSince' is not present");
    }

    /**
     * Copies the object if its entity tag (ETag) is different than the specified ETag.
     * 
     */
    @PolicyResourceProperty(name="copyIfNoneMatch", flag="unknown_copyIfNoneMatch")
    private String value_copyIfNoneMatch;
    private boolean unknown_copyIfNoneMatch;
    public String copyIfNoneMatch() {
        if (!unknown_copyIfNoneMatch) return value_copyIfNoneMatch;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.copyIfNoneMatch' is not present");
    }

    /**
     * Copies the object if it hasn&#39;t been modified since the specified time, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    @PolicyResourceProperty(name="copyIfUnmodifiedSince", flag="unknown_copyIfUnmodifiedSince")
    private String value_copyIfUnmodifiedSince;
    private boolean unknown_copyIfUnmodifiedSince;
    public String copyIfUnmodifiedSince() {
        if (!unknown_copyIfUnmodifiedSince) return value_copyIfUnmodifiedSince;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.copyIfUnmodifiedSince' is not present");
    }

    /**
     * Specifies the algorithm to use to when encrypting the object (for example, AES256).
     * 
     */
    @PolicyResourceProperty(name="customerAlgorithm", flag="unknown_customerAlgorithm")
    private String value_customerAlgorithm;
    private boolean unknown_customerAlgorithm;
    public String customerAlgorithm() {
        if (!unknown_customerAlgorithm) return value_customerAlgorithm;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.customerAlgorithm' is not present");
    }

    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header.
     * 
     */
    @PolicyResourceProperty(name="customerKey", flag="unknown_customerKey")
    private String value_customerKey;
    private boolean unknown_customerKey;
    public String customerKey() {
        if (!unknown_customerKey) return value_customerKey;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.customerKey' is not present");
    }

    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
     * 
     */
    @PolicyResourceProperty(name="customerKeyMd5", flag="unknown_customerKeyMd5")
    private String value_customerKeyMd5;
    private boolean unknown_customerKeyMd5;
    public String customerKeyMd5() {
        if (!unknown_customerKeyMd5) return value_customerKeyMd5;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.customerKeyMd5' is not present");
    }

    /**
     * Account id of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     * 
     */
    @PolicyResourceProperty(name="expectedBucketOwner", flag="unknown_expectedBucketOwner")
    private String value_expectedBucketOwner;
    private boolean unknown_expectedBucketOwner;
    public String expectedBucketOwner() {
        if (!unknown_expectedBucketOwner) return value_expectedBucketOwner;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.expectedBucketOwner' is not present");
    }

    /**
     * Account id of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     * 
     */
    @PolicyResourceProperty(name="expectedSourceBucketOwner", flag="unknown_expectedSourceBucketOwner")
    private String value_expectedSourceBucketOwner;
    private boolean unknown_expectedSourceBucketOwner;
    public String expectedSourceBucketOwner() {
        if (!unknown_expectedSourceBucketOwner) return value_expectedSourceBucketOwner;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.expectedSourceBucketOwner' is not present");
    }

    /**
     * Date and time at which the object is no longer cacheable, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    @PolicyResourceProperty(name="expires", flag="unknown_expires")
    private String value_expires;
    private boolean unknown_expires;
    public String expires() {
        if (!unknown_expires) return value_expires;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.expires' is not present");
    }

    /**
     * Allow the object to be deleted by removing any legal hold on any object version. Default is `false`. This value should be set to `true` only if the bucket has S3 object lock enabled.
     * 
     */
    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.forceDestroy' is not present");
    }

    /**
     * Configuration block for header grants. Documented below. Conflicts with `acl`.
     * 
     */
    @PolicyResourceProperty(name="grants", flag="unknown_grants")
    private List<ObjectCopyGrantArgs> value_grants;
    private boolean unknown_grants;
    public List<ObjectCopyGrantArgs> grants() {
        if (!unknown_grants) return value_grants;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.grants' is not present");
    }

    /**
     * Name of the object once it is in the bucket.
     * 
     */
    @PolicyResourceProperty(name="key", flag="unknown_key")
    private String value_key;
    private boolean unknown_key;
    public String key() {
        if (!unknown_key) return value_key;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.key' is not present");
    }

    /**
     * Specifies the AWS KMS Encryption Context to use for object encryption. The value is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
     * 
     */
    @PolicyResourceProperty(name="kmsEncryptionContext", flag="unknown_kmsEncryptionContext")
    private String value_kmsEncryptionContext;
    private boolean unknown_kmsEncryptionContext;
    public String kmsEncryptionContext() {
        if (!unknown_kmsEncryptionContext) return value_kmsEncryptionContext;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.kmsEncryptionContext' is not present");
    }

    /**
     * Specifies the AWS KMS Key ARN to use for object encryption. This value is a fully qualified **ARN** of the KMS Key. If using `aws.kms.Key`, use the exported `arn` attribute: `kms_key_id = aws_kms_key.foo.arn`
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.kmsKeyId' is not present");
    }

    /**
     * Map of keys/values to provision metadata (will be automatically prefixed by `x-amz-meta-`, note that only lowercase label are currently supported by the AWS Go API).
     * 
     */
    @PolicyResourceProperty(name="metadata", flag="unknown_metadata")
    private Map<String,String> value_metadata;
    private boolean unknown_metadata;
    public Map<String,String> metadata() {
        if (!unknown_metadata) return value_metadata;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.metadata' is not present");
    }

    /**
     * Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
     * 
     */
    @PolicyResourceProperty(name="metadataDirective", flag="unknown_metadataDirective")
    private String value_metadataDirective;
    private boolean unknown_metadataDirective;
    public String metadataDirective() {
        if (!unknown_metadataDirective) return value_metadataDirective;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.metadataDirective' is not present");
    }

    /**
     * The [legal hold](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-legal-holds) status that you want to apply to the specified object. Valid values are `ON` and `OFF`.
     * 
     */
    @PolicyResourceProperty(name="objectLockLegalHoldStatus", flag="unknown_objectLockLegalHoldStatus")
    private String value_objectLockLegalHoldStatus;
    private boolean unknown_objectLockLegalHoldStatus;
    public String objectLockLegalHoldStatus() {
        if (!unknown_objectLockLegalHoldStatus) return value_objectLockLegalHoldStatus;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.objectLockLegalHoldStatus' is not present");
    }

    /**
     * Object lock [retention mode](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-modes) that you want to apply to this object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
     * 
     */
    @PolicyResourceProperty(name="objectLockMode", flag="unknown_objectLockMode")
    private String value_objectLockMode;
    private boolean unknown_objectLockMode;
    public String objectLockMode() {
        if (!unknown_objectLockMode) return value_objectLockMode;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.objectLockMode' is not present");
    }

    /**
     * Date and time, in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8), when this object&#39;s object lock will [expire](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-periods).
     * 
     */
    @PolicyResourceProperty(name="objectLockRetainUntilDate", flag="unknown_objectLockRetainUntilDate")
    private String value_objectLockRetainUntilDate;
    private boolean unknown_objectLockRetainUntilDate;
    public String objectLockRetainUntilDate() {
        if (!unknown_objectLockRetainUntilDate) return value_objectLockRetainUntilDate;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.objectLockRetainUntilDate' is not present");
    }

    @PolicyResourceProperty(name="overrideProvider", flag="unknown_overrideProvider")
    private ObjectCopyOverrideProviderArgs value_overrideProvider;
    private boolean unknown_overrideProvider;
    public ObjectCopyOverrideProviderArgs overrideProvider() {
        if (!unknown_overrideProvider) return value_overrideProvider;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.overrideProvider' is not present");
    }

    /**
     * Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. For information about downloading objects from requester pays buckets, see Downloading Objects in Requestor Pays Buckets (https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 Developer Guide. If included, the only valid value is `requester`.
     * 
     */
    @PolicyResourceProperty(name="requestPayer", flag="unknown_requestPayer")
    private String value_requestPayer;
    private boolean unknown_requestPayer;
    public String requestPayer() {
        if (!unknown_requestPayer) return value_requestPayer;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.requestPayer' is not present");
    }

    /**
     * Specifies server-side encryption of the object in S3. Valid values are `AES256` and `aws:kms`.
     * 
     */
    @PolicyResourceProperty(name="serverSideEncryption", flag="unknown_serverSideEncryption")
    private String value_serverSideEncryption;
    private boolean unknown_serverSideEncryption;
    public String serverSideEncryption() {
        if (!unknown_serverSideEncryption) return value_serverSideEncryption;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.serverSideEncryption' is not present");
    }

    /**
     * Specifies the source object for the copy operation. You specify the value in one of two formats. For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (`/`). For example, `testbucket/test1.json`. For objects accessed through access points, specify the ARN of the object as accessed through the access point, in the format `arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&lt;key&gt;`. For example, `arn:aws:s3:us-west-2:9999912999:accesspoint/my-access-point/object/testbucket/test1.json`.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="source", flag="unknown_source")
    private String value_source;
    private boolean unknown_source;
    public String source() {
        if (!unknown_source) return value_source;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.source' is not present");
    }

    /**
     * Specifies the algorithm to use when decrypting the source object (for example, AES256).
     * 
     */
    @PolicyResourceProperty(name="sourceCustomerAlgorithm", flag="unknown_sourceCustomerAlgorithm")
    private String value_sourceCustomerAlgorithm;
    private boolean unknown_sourceCustomerAlgorithm;
    public String sourceCustomerAlgorithm() {
        if (!unknown_sourceCustomerAlgorithm) return value_sourceCustomerAlgorithm;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.sourceCustomerAlgorithm' is not present");
    }

    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
     * 
     */
    @PolicyResourceProperty(name="sourceCustomerKey", flag="unknown_sourceCustomerKey")
    private String value_sourceCustomerKey;
    private boolean unknown_sourceCustomerKey;
    public String sourceCustomerKey() {
        if (!unknown_sourceCustomerKey) return value_sourceCustomerKey;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.sourceCustomerKey' is not present");
    }

    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.
     * 
     */
    @PolicyResourceProperty(name="sourceCustomerKeyMd5", flag="unknown_sourceCustomerKeyMd5")
    private String value_sourceCustomerKeyMd5;
    private boolean unknown_sourceCustomerKeyMd5;
    public String sourceCustomerKeyMd5() {
        if (!unknown_sourceCustomerKeyMd5) return value_sourceCustomerKeyMd5;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.sourceCustomerKeyMd5' is not present");
    }

    /**
     * Specifies the desired [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html#AmazonS3-CopyObject-request-header-StorageClass) for the object. Defaults to `STANDARD`.
     * 
     */
    @PolicyResourceProperty(name="storageClass", flag="unknown_storageClass")
    private String value_storageClass;
    private boolean unknown_storageClass;
    public String storageClass() {
        if (!unknown_storageClass) return value_storageClass;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.storageClass' is not present");
    }

    /**
     * Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
     * 
     */
    @PolicyResourceProperty(name="taggingDirective", flag="unknown_taggingDirective")
    private String value_taggingDirective;
    private boolean unknown_taggingDirective;
    public String taggingDirective() {
        if (!unknown_taggingDirective) return value_taggingDirective;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.taggingDirective' is not present");
    }

    /**
     * Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.tags' is not present");
    }

    /**
     * Specifies a target URL for [website redirect](http://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html).
     * 
     */
    @PolicyResourceProperty(name="websiteRedirect", flag="unknown_websiteRedirect")
    private String value_websiteRedirect;
    private boolean unknown_websiteRedirect;
    public String websiteRedirect() {
        if (!unknown_websiteRedirect) return value_websiteRedirect;
        throw new UndeferrableValueException("Value 'ObjectCopyArgs.websiteRedirect' is not present");
    }

}
