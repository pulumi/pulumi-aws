// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ssm;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ssm.inputs.PatchBaselineApprovalRuleArgs;
import com.pulumi.policypacks.aws.ssm.inputs.PatchBaselineGlobalFilterArgs;
import com.pulumi.policypacks.aws.ssm.inputs.PatchBaselineSourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ssm/patchBaseline:PatchBaseline")
public final class PatchBaselineArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Set of rules used to include patches in the baseline. Up to 10 approval rules can be specified. See `approval_rule` below.
     * 
     */
    private UndeferrableValue<List<PatchBaselineApprovalRuleArgs>> approvalRules;

    public List<PatchBaselineApprovalRuleArgs> approvalRules() {
        if (approvalRules == null) return null;
        return approvalRules.getValue("PatchBaselineArgs.approvalRules");
    }

    /**
     * List of explicitly approved patches for the baseline. Cannot be specified with `approval_rule`.
     * 
     */
    private UndeferrableValue<List<String>> approvedPatches;

    public List<String> approvedPatches() {
        if (approvedPatches == null) return null;
        return approvedPatches.getValue("PatchBaselineArgs.approvedPatches");
    }

    /**
     * Compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
     * 
     */
    private UndeferrableValue<String> approvedPatchesComplianceLevel;

    public String approvedPatchesComplianceLevel() {
        if (approvedPatchesComplianceLevel == null) return null;
        return approvedPatchesComplianceLevel.getValue("PatchBaselineArgs.approvedPatchesComplianceLevel");
    }

    /**
     * Whether the list of approved patches includes non-security updates that should be applied to the instances. Applies to Linux instances only.
     * 
     */
    private UndeferrableValue<Boolean> approvedPatchesEnableNonSecurity;

    public Boolean approvedPatchesEnableNonSecurity() {
        if (approvedPatchesEnableNonSecurity == null) return null;
        return approvedPatchesEnableNonSecurity.getValue("PatchBaselineArgs.approvedPatchesEnableNonSecurity");
    }

    /**
     * Description of the patch baseline.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("PatchBaselineArgs.description");
    }

    /**
     * Set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
     * 
     */
    private UndeferrableValue<List<PatchBaselineGlobalFilterArgs>> globalFilters;

    public List<PatchBaselineGlobalFilterArgs> globalFilters() {
        if (globalFilters == null) return null;
        return globalFilters.getValue("PatchBaselineArgs.globalFilters");
    }

    /**
     * Name of the patch baseline.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("PatchBaselineArgs.name");
    }

    /**
     * Operating system the patch baseline applies to. Valid values are `ALMA_LINUX`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `AMAZON_LINUX_2022`, `AMAZON_LINUX_2023`, `CENTOS`, `DEBIAN`, `MACOS`, `ORACLE_LINUX`, `RASPBIAN`, `REDHAT_ENTERPRISE_LINUX`, `ROCKY_LINUX`, `SUSE`, `UBUNTU`, and `WINDOWS`. The default value is `WINDOWS`.
     * 
     */
    private UndeferrableValue<String> operatingSystem;

    public String operatingSystem() {
        if (operatingSystem == null) return null;
        return operatingSystem.getValue("PatchBaselineArgs.operatingSystem");
    }

    /**
     * List of rejected patches.
     * 
     */
    private UndeferrableValue<List<String>> rejectedPatches;

    public List<String> rejectedPatches() {
        if (rejectedPatches == null) return null;
        return rejectedPatches.getValue("PatchBaselineArgs.rejectedPatches");
    }

    /**
     * Action for Patch Manager to take on patches included in the `rejected_patches` list. Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
     * 
     */
    private UndeferrableValue<String> rejectedPatchesAction;

    public String rejectedPatchesAction() {
        if (rejectedPatchesAction == null) return null;
        return rejectedPatchesAction.getValue("PatchBaselineArgs.rejectedPatchesAction");
    }

    /**
     * Configuration block with alternate sources for patches. Applies to Linux instances only. See `source` below.
     * 
     */
    private UndeferrableValue<List<PatchBaselineSourceArgs>> sources;

    public List<PatchBaselineSourceArgs> sources() {
        if (sources == null) return null;
        return sources.getValue("PatchBaselineArgs.sources");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("PatchBaselineArgs.tags");
    }

}
