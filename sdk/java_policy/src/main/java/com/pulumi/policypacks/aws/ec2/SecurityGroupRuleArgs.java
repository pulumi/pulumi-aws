// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.enums.ProtocolType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/securityGroupRule:SecurityGroupRule")
public final class SecurityGroupRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * List of CIDR blocks. Cannot be specified with `source_security_group_id` or `self`.
     * 
     */
    private UndeferrableValue<List<String>> cidrBlocks;

    public List<String> cidrBlocks() {
        if (cidrBlocks == null) return null;
        return cidrBlocks.getValue("SecurityGroupRuleArgs.cidrBlocks");
    }

    /**
     * Description of the rule.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("SecurityGroupRuleArgs.description");
    }

    /**
     * Start port (or ICMP type number if protocol is &#34;icmp&#34; or &#34;icmpv6&#34;).
     * 
     */
    private UndeferrableValue<Integer> fromPort;

    public Integer fromPort() {
        if (fromPort == null) return null;
        return fromPort.getValue("SecurityGroupRuleArgs.fromPort");
    }

    /**
     * List of IPv6 CIDR blocks. Cannot be specified with `source_security_group_id` or `self`.
     * 
     */
    private UndeferrableValue<List<String>> ipv6CidrBlocks;

    public List<String> ipv6CidrBlocks() {
        if (ipv6CidrBlocks == null) return null;
        return ipv6CidrBlocks.getValue("SecurityGroupRuleArgs.ipv6CidrBlocks");
    }

    /**
     * List of Prefix List IDs.
     * 
     */
    private UndeferrableValue<List<String>> prefixListIds;

    public List<String> prefixListIds() {
        if (prefixListIds == null) return null;
        return prefixListIds.getValue("SecurityGroupRuleArgs.prefixListIds");
    }

    /**
     * Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("SecurityGroupRuleArgs.protocol");
    }

    /**
     * Security group to apply this rule to.
     * 
     */
    private UndeferrableValue<String> securityGroupId;

    public String securityGroupId() {
        if (securityGroupId == null) return null;
        return securityGroupId.getValue("SecurityGroupRuleArgs.securityGroupId");
    }

    /**
     * Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidr_blocks`, `ipv6_cidr_blocks`, or `source_security_group_id`.
     * 
     */
    private UndeferrableValue<Boolean> self;

    public Boolean self() {
        if (self == null) return null;
        return self.getValue("SecurityGroupRuleArgs.self");
    }

    /**
     * Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidr_blocks`, `ipv6_cidr_blocks`, or `self`.
     * 
     */
    private UndeferrableValue<String> sourceSecurityGroupId;

    public String sourceSecurityGroupId() {
        if (sourceSecurityGroupId == null) return null;
        return sourceSecurityGroupId.getValue("SecurityGroupRuleArgs.sourceSecurityGroupId");
    }

    /**
     * End port (or ICMP code if protocol is &#34;icmp&#34;).
     * 
     */
    private UndeferrableValue<Integer> toPort;

    public Integer toPort() {
        if (toPort == null) return null;
        return toPort.getValue("SecurityGroupRuleArgs.toPort");
    }

    /**
     * Type of rule being created. Valid options are `ingress` (inbound)
     * or `egress` (outbound).
     * 
     * The following arguments are optional:
     * 
     * &gt; **Note** Although `cidr_blocks`, `ipv6_cidr_blocks`, `prefix_list_ids`, and `source_security_group_id` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("SecurityGroupRuleArgs.type");
    }

}
