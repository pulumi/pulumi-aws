// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.enums.ProtocolType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/securityGroupRule:SecurityGroupRule")
public final class SecurityGroupRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * List of CIDR blocks. Cannot be specified with `source_security_group_id` or `self`.
     * 
     */
    @PolicyResourceProperty(name="cidrBlocks", flag="unknown_cidrBlocks")
    private List<String> value_cidrBlocks;
    private boolean unknown_cidrBlocks;
    public List<String> cidrBlocks() {
        if (!unknown_cidrBlocks) return value_cidrBlocks;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.cidrBlocks' is not present");
    }

    /**
     * Description of the rule.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.description' is not present");
    }

    /**
     * Start port (or ICMP type number if protocol is &#34;icmp&#34; or &#34;icmpv6&#34;).
     * 
     */
    @PolicyResourceProperty(name="fromPort", flag="unknown_fromPort")
    private Integer value_fromPort;
    private boolean unknown_fromPort;
    public Integer fromPort() {
        if (!unknown_fromPort) return value_fromPort;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.fromPort' is not present");
    }

    /**
     * List of IPv6 CIDR blocks. Cannot be specified with `source_security_group_id` or `self`.
     * 
     */
    @PolicyResourceProperty(name="ipv6CidrBlocks", flag="unknown_ipv6CidrBlocks")
    private List<String> value_ipv6CidrBlocks;
    private boolean unknown_ipv6CidrBlocks;
    public List<String> ipv6CidrBlocks() {
        if (!unknown_ipv6CidrBlocks) return value_ipv6CidrBlocks;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.ipv6CidrBlocks' is not present");
    }

    /**
     * List of Prefix List IDs.
     * 
     */
    @PolicyResourceProperty(name="prefixListIds", flag="unknown_prefixListIds")
    private List<String> value_prefixListIds;
    private boolean unknown_prefixListIds;
    public List<String> prefixListIds() {
        if (!unknown_prefixListIds) return value_prefixListIds;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.prefixListIds' is not present");
    }

    /**
     * Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.protocol' is not present");
    }

    /**
     * Security group to apply this rule to.
     * 
     */
    @PolicyResourceProperty(name="securityGroupId", flag="unknown_securityGroupId")
    private String value_securityGroupId;
    private boolean unknown_securityGroupId;
    public String securityGroupId() {
        if (!unknown_securityGroupId) return value_securityGroupId;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.securityGroupId' is not present");
    }

    /**
     * Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidr_blocks`, `ipv6_cidr_blocks`, or `source_security_group_id`.
     * 
     */
    @PolicyResourceProperty(name="self", flag="unknown_self")
    private Boolean value_self;
    private boolean unknown_self;
    public Boolean self() {
        if (!unknown_self) return value_self;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.self' is not present");
    }

    /**
     * Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidr_blocks`, `ipv6_cidr_blocks`, or `self`.
     * 
     */
    @PolicyResourceProperty(name="sourceSecurityGroupId", flag="unknown_sourceSecurityGroupId")
    private String value_sourceSecurityGroupId;
    private boolean unknown_sourceSecurityGroupId;
    public String sourceSecurityGroupId() {
        if (!unknown_sourceSecurityGroupId) return value_sourceSecurityGroupId;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.sourceSecurityGroupId' is not present");
    }

    /**
     * End port (or ICMP code if protocol is &#34;icmp&#34;).
     * 
     */
    @PolicyResourceProperty(name="toPort", flag="unknown_toPort")
    private Integer value_toPort;
    private boolean unknown_toPort;
    public Integer toPort() {
        if (!unknown_toPort) return value_toPort;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.toPort' is not present");
    }

    /**
     * Type of rule being created. Valid options are `ingress` (inbound)
     * or `egress` (outbound).
     * 
     * The following arguments are optional:
     * 
     * &gt; **Note** Although `cidr_blocks`, `ipv6_cidr_blocks`, `prefix_list_ids`, and `source_security_group_id` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.type' is not present");
    }

}
