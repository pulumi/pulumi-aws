// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opsworks;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.opsworks.inputs.ApplicationAppSourceArgs;
import com.pulumi.policypacks.aws.opsworks.inputs.ApplicationEnvironmentArgs;
import com.pulumi.policypacks.aws.opsworks.inputs.ApplicationSslConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:opsworks/application:Application")
public final class ApplicationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * SCM configuration of the app as described below.
     * 
     */
    private UndeferrableValue<List<ApplicationAppSourceArgs>> appSources;

    public List<ApplicationAppSourceArgs> appSources() {
        if (appSources == null) return null;
        return appSources.getValue("ApplicationArgs.appSources");
    }

    /**
     * Run bundle install when deploying for application of type `rails`.
     * 
     */
    private UndeferrableValue<String> autoBundleOnDeploy;

    public String autoBundleOnDeploy() {
        if (autoBundleOnDeploy == null) return null;
        return autoBundleOnDeploy.getValue("ApplicationArgs.autoBundleOnDeploy");
    }

    /**
     * Specify activity and workflow workers for your app using the aws-flow gem.
     * 
     */
    private UndeferrableValue<String> awsFlowRubySettings;

    public String awsFlowRubySettings() {
        if (awsFlowRubySettings == null) return null;
        return awsFlowRubySettings.getValue("ApplicationArgs.awsFlowRubySettings");
    }

    /**
     * The data source&#39;s ARN.
     * 
     */
    private UndeferrableValue<String> dataSourceArn;

    public String dataSourceArn() {
        if (dataSourceArn == null) return null;
        return dataSourceArn.getValue("ApplicationArgs.dataSourceArn");
    }

    /**
     * The database name.
     * 
     */
    private UndeferrableValue<String> dataSourceDatabaseName;

    public String dataSourceDatabaseName() {
        if (dataSourceDatabaseName == null) return null;
        return dataSourceDatabaseName.getValue("ApplicationArgs.dataSourceDatabaseName");
    }

    /**
     * The data source&#39;s type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
     * 
     */
    private UndeferrableValue<String> dataSourceType;

    public String dataSourceType() {
        if (dataSourceType == null) return null;
        return dataSourceType.getValue("ApplicationArgs.dataSourceType");
    }

    /**
     * A description of the app.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ApplicationArgs.description");
    }

    /**
     * Subfolder for the document root for application of type `rails`.
     * 
     */
    private UndeferrableValue<String> documentRoot;

    public String documentRoot() {
        if (documentRoot == null) return null;
        return documentRoot.getValue("ApplicationArgs.documentRoot");
    }

    /**
     * A list of virtual host alias.
     * 
     */
    private UndeferrableValue<List<String>> domains;

    public List<String> domains() {
        if (domains == null) return null;
        return domains.getValue("ApplicationArgs.domains");
    }

    /**
     * Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
     * 
     */
    private UndeferrableValue<Boolean> enableSsl;

    public Boolean enableSsl() {
        if (enableSsl == null) return null;
        return enableSsl.getValue("ApplicationArgs.enableSsl");
    }

    /**
     * Object to define environment variables.  Object is described below.
     * 
     */
    private UndeferrableValue<List<ApplicationEnvironmentArgs>> environments;

    public List<ApplicationEnvironmentArgs> environments() {
        if (environments == null) return null;
        return environments.getValue("ApplicationArgs.environments");
    }

    /**
     * A human-readable name for the application.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ApplicationArgs.name");
    }

    /**
     * The name of the Rails environment for application of type `rails`.
     * 
     */
    private UndeferrableValue<String> railsEnv;

    public String railsEnv() {
        if (railsEnv == null) return null;
        return railsEnv.getValue("ApplicationArgs.railsEnv");
    }

    /**
     * A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
     * 
     */
    private UndeferrableValue<String> shortName;

    public String shortName() {
        if (shortName == null) return null;
        return shortName.getValue("ApplicationArgs.shortName");
    }

    /**
     * The SSL configuration of the app. Object is described below.
     * 
     */
    private UndeferrableValue<List<ApplicationSslConfigurationArgs>> sslConfigurations;

    public List<ApplicationSslConfigurationArgs> sslConfigurations() {
        if (sslConfigurations == null) return null;
        return sslConfigurations.getValue("ApplicationArgs.sslConfigurations");
    }

    /**
     * ID of the stack the application will belong to.
     * 
     */
    private UndeferrableValue<String> stackId;

    public String stackId() {
        if (stackId == null) return null;
        return stackId.getValue("ApplicationArgs.stackId");
    }

    /**
     * Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ApplicationArgs.type");
    }

}
