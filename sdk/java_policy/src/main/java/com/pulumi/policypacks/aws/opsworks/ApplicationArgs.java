// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opsworks;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.opsworks.inputs.ApplicationAppSourceArgs;
import com.pulumi.policypacks.aws.opsworks.inputs.ApplicationEnvironmentArgs;
import com.pulumi.policypacks.aws.opsworks.inputs.ApplicationSslConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:opsworks/application:Application")
public final class ApplicationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * SCM configuration of the app as described below.
     * 
     */
    @PolicyResourceProperty(name="appSources", flag="unknown_appSources")
    private List<ApplicationAppSourceArgs> value_appSources;
    private boolean unknown_appSources;
    public List<ApplicationAppSourceArgs> appSources() {
        if (!unknown_appSources) return value_appSources;
        throw new UndeferrableValueException("Value 'ApplicationArgs.appSources' is not present");
    }

    /**
     * Run bundle install when deploying for application of type `rails`.
     * 
     */
    @PolicyResourceProperty(name="autoBundleOnDeploy", flag="unknown_autoBundleOnDeploy")
    private String value_autoBundleOnDeploy;
    private boolean unknown_autoBundleOnDeploy;
    public String autoBundleOnDeploy() {
        if (!unknown_autoBundleOnDeploy) return value_autoBundleOnDeploy;
        throw new UndeferrableValueException("Value 'ApplicationArgs.autoBundleOnDeploy' is not present");
    }

    /**
     * Specify activity and workflow workers for your app using the aws-flow gem.
     * 
     */
    @PolicyResourceProperty(name="awsFlowRubySettings", flag="unknown_awsFlowRubySettings")
    private String value_awsFlowRubySettings;
    private boolean unknown_awsFlowRubySettings;
    public String awsFlowRubySettings() {
        if (!unknown_awsFlowRubySettings) return value_awsFlowRubySettings;
        throw new UndeferrableValueException("Value 'ApplicationArgs.awsFlowRubySettings' is not present");
    }

    /**
     * The data source&#39;s ARN.
     * 
     */
    @PolicyResourceProperty(name="dataSourceArn", flag="unknown_dataSourceArn")
    private String value_dataSourceArn;
    private boolean unknown_dataSourceArn;
    public String dataSourceArn() {
        if (!unknown_dataSourceArn) return value_dataSourceArn;
        throw new UndeferrableValueException("Value 'ApplicationArgs.dataSourceArn' is not present");
    }

    /**
     * The database name.
     * 
     */
    @PolicyResourceProperty(name="dataSourceDatabaseName", flag="unknown_dataSourceDatabaseName")
    private String value_dataSourceDatabaseName;
    private boolean unknown_dataSourceDatabaseName;
    public String dataSourceDatabaseName() {
        if (!unknown_dataSourceDatabaseName) return value_dataSourceDatabaseName;
        throw new UndeferrableValueException("Value 'ApplicationArgs.dataSourceDatabaseName' is not present");
    }

    /**
     * The data source&#39;s type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
     * 
     */
    @PolicyResourceProperty(name="dataSourceType", flag="unknown_dataSourceType")
    private String value_dataSourceType;
    private boolean unknown_dataSourceType;
    public String dataSourceType() {
        if (!unknown_dataSourceType) return value_dataSourceType;
        throw new UndeferrableValueException("Value 'ApplicationArgs.dataSourceType' is not present");
    }

    /**
     * A description of the app.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'ApplicationArgs.description' is not present");
    }

    /**
     * Subfolder for the document root for application of type `rails`.
     * 
     */
    @PolicyResourceProperty(name="documentRoot", flag="unknown_documentRoot")
    private String value_documentRoot;
    private boolean unknown_documentRoot;
    public String documentRoot() {
        if (!unknown_documentRoot) return value_documentRoot;
        throw new UndeferrableValueException("Value 'ApplicationArgs.documentRoot' is not present");
    }

    /**
     * A list of virtual host alias.
     * 
     */
    @PolicyResourceProperty(name="domains", flag="unknown_domains")
    private List<String> value_domains;
    private boolean unknown_domains;
    public List<String> domains() {
        if (!unknown_domains) return value_domains;
        throw new UndeferrableValueException("Value 'ApplicationArgs.domains' is not present");
    }

    /**
     * Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
     * 
     */
    @PolicyResourceProperty(name="enableSsl", flag="unknown_enableSsl")
    private Boolean value_enableSsl;
    private boolean unknown_enableSsl;
    public Boolean enableSsl() {
        if (!unknown_enableSsl) return value_enableSsl;
        throw new UndeferrableValueException("Value 'ApplicationArgs.enableSsl' is not present");
    }

    /**
     * Object to define environment variables.  Object is described below.
     * 
     */
    @PolicyResourceProperty(name="environments", flag="unknown_environments")
    private List<ApplicationEnvironmentArgs> value_environments;
    private boolean unknown_environments;
    public List<ApplicationEnvironmentArgs> environments() {
        if (!unknown_environments) return value_environments;
        throw new UndeferrableValueException("Value 'ApplicationArgs.environments' is not present");
    }

    /**
     * A human-readable name for the application.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ApplicationArgs.name' is not present");
    }

    /**
     * The name of the Rails environment for application of type `rails`.
     * 
     */
    @PolicyResourceProperty(name="railsEnv", flag="unknown_railsEnv")
    private String value_railsEnv;
    private boolean unknown_railsEnv;
    public String railsEnv() {
        if (!unknown_railsEnv) return value_railsEnv;
        throw new UndeferrableValueException("Value 'ApplicationArgs.railsEnv' is not present");
    }

    /**
     * A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
     * 
     */
    @PolicyResourceProperty(name="shortName", flag="unknown_shortName")
    private String value_shortName;
    private boolean unknown_shortName;
    public String shortName() {
        if (!unknown_shortName) return value_shortName;
        throw new UndeferrableValueException("Value 'ApplicationArgs.shortName' is not present");
    }

    /**
     * The SSL configuration of the app. Object is described below.
     * 
     */
    @PolicyResourceProperty(name="sslConfigurations", flag="unknown_sslConfigurations")
    private List<ApplicationSslConfigurationArgs> value_sslConfigurations;
    private boolean unknown_sslConfigurations;
    public List<ApplicationSslConfigurationArgs> sslConfigurations() {
        if (!unknown_sslConfigurations) return value_sslConfigurations;
        throw new UndeferrableValueException("Value 'ApplicationArgs.sslConfigurations' is not present");
    }

    /**
     * ID of the stack the application will belong to.
     * 
     */
    @PolicyResourceProperty(name="stackId", flag="unknown_stackId")
    private String value_stackId;
    private boolean unknown_stackId;
    public String stackId() {
        if (!unknown_stackId) return value_stackId;
        throw new UndeferrableValueException("Value 'ApplicationArgs.stackId' is not present");
    }

    /**
     * Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'ApplicationArgs.type' is not present");
    }

}
