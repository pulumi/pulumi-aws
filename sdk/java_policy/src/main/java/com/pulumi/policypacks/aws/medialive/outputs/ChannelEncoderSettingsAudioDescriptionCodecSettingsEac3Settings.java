// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings {

    /**
     * Sets the attenuation control.
     * 
     */
    @PolicyResourceProperty(name="attenuationControl", flag="unknown_attenuationControl")
    private @Nullable String value_attenuationControl;
    private boolean unknown_attenuationControl;
    public @Nullable String attenuationControl() {
        if (!unknown_attenuationControl) return value_attenuationControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.attenuationControl' is not present");
    }

    /**
     * Average bitrate in bits/second.
     * 
     */
    @PolicyResourceProperty(name="bitrate", flag="unknown_bitrate")
    private @Nullable Double value_bitrate;
    private boolean unknown_bitrate;
    public @Nullable Double bitrate() {
        if (!unknown_bitrate) return value_bitrate;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.bitrate' is not present");
    }

    /**
     * Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     * 
     */
    @PolicyResourceProperty(name="bitstreamMode", flag="unknown_bitstreamMode")
    private @Nullable String value_bitstreamMode;
    private boolean unknown_bitstreamMode;
    public @Nullable String bitstreamMode() {
        if (!unknown_bitstreamMode) return value_bitstreamMode;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.bitstreamMode' is not present");
    }

    /**
     * Dolby Digital Plus coding mode.
     * 
     */
    @PolicyResourceProperty(name="codingMode", flag="unknown_codingMode")
    private @Nullable String value_codingMode;
    private boolean unknown_codingMode;
    public @Nullable String codingMode() {
        if (!unknown_codingMode) return value_codingMode;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.codingMode' is not present");
    }

    @PolicyResourceProperty(name="dcFilter", flag="unknown_dcFilter")
    private @Nullable String value_dcFilter;
    private boolean unknown_dcFilter;
    public @Nullable String dcFilter() {
        if (!unknown_dcFilter) return value_dcFilter;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.dcFilter' is not present");
    }

    @PolicyResourceProperty(name="dialnorm", flag="unknown_dialnorm")
    private @Nullable Integer value_dialnorm;
    private boolean unknown_dialnorm;
    public @Nullable Integer dialnorm() {
        if (!unknown_dialnorm) return value_dialnorm;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.dialnorm' is not present");
    }

    /**
     * Sets the Dolby dynamic range compression profile.
     * 
     */
    @PolicyResourceProperty(name="drcLine", flag="unknown_drcLine")
    private @Nullable String value_drcLine;
    private boolean unknown_drcLine;
    public @Nullable String drcLine() {
        if (!unknown_drcLine) return value_drcLine;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.drcLine' is not present");
    }

    /**
     * Sets the profile for heavy Dolby dynamic range compression.
     * 
     */
    @PolicyResourceProperty(name="drcRf", flag="unknown_drcRf")
    private @Nullable String value_drcRf;
    private boolean unknown_drcRf;
    public @Nullable String drcRf() {
        if (!unknown_drcRf) return value_drcRf;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.drcRf' is not present");
    }

    @PolicyResourceProperty(name="lfeControl", flag="unknown_lfeControl")
    private @Nullable String value_lfeControl;
    private boolean unknown_lfeControl;
    public @Nullable String lfeControl() {
        if (!unknown_lfeControl) return value_lfeControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.lfeControl' is not present");
    }

    /**
     * When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     * 
     */
    @PolicyResourceProperty(name="lfeFilter", flag="unknown_lfeFilter")
    private @Nullable String value_lfeFilter;
    private boolean unknown_lfeFilter;
    public @Nullable String lfeFilter() {
        if (!unknown_lfeFilter) return value_lfeFilter;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.lfeFilter' is not present");
    }

    @PolicyResourceProperty(name="loRoCenterMixLevel", flag="unknown_loRoCenterMixLevel")
    private @Nullable Double value_loRoCenterMixLevel;
    private boolean unknown_loRoCenterMixLevel;
    public @Nullable Double loRoCenterMixLevel() {
        if (!unknown_loRoCenterMixLevel) return value_loRoCenterMixLevel;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.loRoCenterMixLevel' is not present");
    }

    @PolicyResourceProperty(name="loRoSurroundMixLevel", flag="unknown_loRoSurroundMixLevel")
    private @Nullable Double value_loRoSurroundMixLevel;
    private boolean unknown_loRoSurroundMixLevel;
    public @Nullable Double loRoSurroundMixLevel() {
        if (!unknown_loRoSurroundMixLevel) return value_loRoSurroundMixLevel;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.loRoSurroundMixLevel' is not present");
    }

    @PolicyResourceProperty(name="ltRtCenterMixLevel", flag="unknown_ltRtCenterMixLevel")
    private @Nullable Double value_ltRtCenterMixLevel;
    private boolean unknown_ltRtCenterMixLevel;
    public @Nullable Double ltRtCenterMixLevel() {
        if (!unknown_ltRtCenterMixLevel) return value_ltRtCenterMixLevel;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.ltRtCenterMixLevel' is not present");
    }

    @PolicyResourceProperty(name="ltRtSurroundMixLevel", flag="unknown_ltRtSurroundMixLevel")
    private @Nullable Double value_ltRtSurroundMixLevel;
    private boolean unknown_ltRtSurroundMixLevel;
    public @Nullable Double ltRtSurroundMixLevel() {
        if (!unknown_ltRtSurroundMixLevel) return value_ltRtSurroundMixLevel;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.ltRtSurroundMixLevel' is not present");
    }

    /**
     * Metadata control.
     * 
     */
    @PolicyResourceProperty(name="metadataControl", flag="unknown_metadataControl")
    private @Nullable String value_metadataControl;
    private boolean unknown_metadataControl;
    public @Nullable String metadataControl() {
        if (!unknown_metadataControl) return value_metadataControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.metadataControl' is not present");
    }

    @PolicyResourceProperty(name="passthroughControl", flag="unknown_passthroughControl")
    private @Nullable String value_passthroughControl;
    private boolean unknown_passthroughControl;
    public @Nullable String passthroughControl() {
        if (!unknown_passthroughControl) return value_passthroughControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.passthroughControl' is not present");
    }

    @PolicyResourceProperty(name="phaseControl", flag="unknown_phaseControl")
    private @Nullable String value_phaseControl;
    private boolean unknown_phaseControl;
    public @Nullable String phaseControl() {
        if (!unknown_phaseControl) return value_phaseControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.phaseControl' is not present");
    }

    @PolicyResourceProperty(name="stereoDownmix", flag="unknown_stereoDownmix")
    private @Nullable String value_stereoDownmix;
    private boolean unknown_stereoDownmix;
    public @Nullable String stereoDownmix() {
        if (!unknown_stereoDownmix) return value_stereoDownmix;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.stereoDownmix' is not present");
    }

    @PolicyResourceProperty(name="surroundExMode", flag="unknown_surroundExMode")
    private @Nullable String value_surroundExMode;
    private boolean unknown_surroundExMode;
    public @Nullable String surroundExMode() {
        if (!unknown_surroundExMode) return value_surroundExMode;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.surroundExMode' is not present");
    }

    @PolicyResourceProperty(name="surroundMode", flag="unknown_surroundMode")
    private @Nullable String value_surroundMode;
    private boolean unknown_surroundMode;
    public @Nullable String surroundMode() {
        if (!unknown_surroundMode) return value_surroundMode;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.surroundMode' is not present");
    }

}
