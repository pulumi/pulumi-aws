// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings {

    /**
     * Sets the attenuation control.
     * 
     */
    private @Nullable UndeferrableValue<String> attenuationControl;

    public @Nullable String attenuationControl() {
        if (attenuationControl == null) return null;
        return attenuationControl.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.attenuationControl");
    }

    /**
     * Average bitrate in bits/second.
     * 
     */
    private @Nullable UndeferrableValue<Double> bitrate;

    public @Nullable Double bitrate() {
        if (bitrate == null) return null;
        return bitrate.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.bitrate");
    }

    /**
     * Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     * 
     */
    private @Nullable UndeferrableValue<String> bitstreamMode;

    public @Nullable String bitstreamMode() {
        if (bitstreamMode == null) return null;
        return bitstreamMode.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.bitstreamMode");
    }

    /**
     * Dolby Digital Plus coding mode.
     * 
     */
    private @Nullable UndeferrableValue<String> codingMode;

    public @Nullable String codingMode() {
        if (codingMode == null) return null;
        return codingMode.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.codingMode");
    }

    private @Nullable UndeferrableValue<String> dcFilter;

    public @Nullable String dcFilter() {
        if (dcFilter == null) return null;
        return dcFilter.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.dcFilter");
    }

    private @Nullable UndeferrableValue<Integer> dialnorm;

    public @Nullable Integer dialnorm() {
        if (dialnorm == null) return null;
        return dialnorm.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.dialnorm");
    }

    /**
     * Sets the Dolby dynamic range compression profile.
     * 
     */
    private @Nullable UndeferrableValue<String> drcLine;

    public @Nullable String drcLine() {
        if (drcLine == null) return null;
        return drcLine.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.drcLine");
    }

    /**
     * Sets the profile for heavy Dolby dynamic range compression.
     * 
     */
    private @Nullable UndeferrableValue<String> drcRf;

    public @Nullable String drcRf() {
        if (drcRf == null) return null;
        return drcRf.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.drcRf");
    }

    private @Nullable UndeferrableValue<String> lfeControl;

    public @Nullable String lfeControl() {
        if (lfeControl == null) return null;
        return lfeControl.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.lfeControl");
    }

    /**
     * When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     * 
     */
    private @Nullable UndeferrableValue<String> lfeFilter;

    public @Nullable String lfeFilter() {
        if (lfeFilter == null) return null;
        return lfeFilter.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.lfeFilter");
    }

    private @Nullable UndeferrableValue<Double> loRoCenterMixLevel;

    public @Nullable Double loRoCenterMixLevel() {
        if (loRoCenterMixLevel == null) return null;
        return loRoCenterMixLevel.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.loRoCenterMixLevel");
    }

    private @Nullable UndeferrableValue<Double> loRoSurroundMixLevel;

    public @Nullable Double loRoSurroundMixLevel() {
        if (loRoSurroundMixLevel == null) return null;
        return loRoSurroundMixLevel.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.loRoSurroundMixLevel");
    }

    private @Nullable UndeferrableValue<Double> ltRtCenterMixLevel;

    public @Nullable Double ltRtCenterMixLevel() {
        if (ltRtCenterMixLevel == null) return null;
        return ltRtCenterMixLevel.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.ltRtCenterMixLevel");
    }

    private @Nullable UndeferrableValue<Double> ltRtSurroundMixLevel;

    public @Nullable Double ltRtSurroundMixLevel() {
        if (ltRtSurroundMixLevel == null) return null;
        return ltRtSurroundMixLevel.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.ltRtSurroundMixLevel");
    }

    /**
     * Metadata control.
     * 
     */
    private @Nullable UndeferrableValue<String> metadataControl;

    public @Nullable String metadataControl() {
        if (metadataControl == null) return null;
        return metadataControl.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.metadataControl");
    }

    private @Nullable UndeferrableValue<String> passthroughControl;

    public @Nullable String passthroughControl() {
        if (passthroughControl == null) return null;
        return passthroughControl.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.passthroughControl");
    }

    private @Nullable UndeferrableValue<String> phaseControl;

    public @Nullable String phaseControl() {
        if (phaseControl == null) return null;
        return phaseControl.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.phaseControl");
    }

    private @Nullable UndeferrableValue<String> stereoDownmix;

    public @Nullable String stereoDownmix() {
        if (stereoDownmix == null) return null;
        return stereoDownmix.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.stereoDownmix");
    }

    private @Nullable UndeferrableValue<String> surroundExMode;

    public @Nullable String surroundExMode() {
        if (surroundExMode == null) return null;
        return surroundExMode.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.surroundExMode");
    }

    private @Nullable UndeferrableValue<String> surroundMode;

    public @Nullable String surroundMode() {
        if (surroundMode == null) return null;
        return surroundMode.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings.surroundMode");
    }

}
