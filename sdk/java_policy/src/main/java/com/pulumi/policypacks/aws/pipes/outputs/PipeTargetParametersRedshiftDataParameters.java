// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pipes.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PipeTargetParametersRedshiftDataParameters {

    /**
     * The name of the database. Required when authenticating using temporary credentials.
     * 
     */
    @PolicyResourceProperty(name="database", flag="unknown_database")
    private String value_database;
    private boolean unknown_database;
    public String database() {
        if (!unknown_database) return value_database;
        throw new UndeferrableValueException("Value 'PipeTargetParametersRedshiftDataParameters.database' is not present");
    }

    /**
     * The database user name. Required when authenticating using temporary credentials.
     * 
     */
    @PolicyResourceProperty(name="dbUser", flag="unknown_dbUser")
    private @Nullable String value_dbUser;
    private boolean unknown_dbUser;
    public @Nullable String dbUser() {
        if (!unknown_dbUser) return value_dbUser;
        throw new UndeferrableValueException("Value 'PipeTargetParametersRedshiftDataParameters.dbUser' is not present");
    }

    /**
     * The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
     * 
     */
    @PolicyResourceProperty(name="secretManagerArn", flag="unknown_secretManagerArn")
    private @Nullable String value_secretManagerArn;
    private boolean unknown_secretManagerArn;
    public @Nullable String secretManagerArn() {
        if (!unknown_secretManagerArn) return value_secretManagerArn;
        throw new UndeferrableValueException("Value 'PipeTargetParametersRedshiftDataParameters.secretManagerArn' is not present");
    }

    /**
     * List of SQL statements text to run, each of maximum length of 100,000.
     * 
     */
    @PolicyResourceProperty(name="sqls", flag="unknown_sqls")
    private List<String> value_sqls;
    private boolean unknown_sqls;
    public List<String> sqls() {
        if (!unknown_sqls) return value_sqls;
        throw new UndeferrableValueException("Value 'PipeTargetParametersRedshiftDataParameters.sqls' is not present");
    }

    /**
     * The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
     * 
     */
    @PolicyResourceProperty(name="statementName", flag="unknown_statementName")
    private @Nullable String value_statementName;
    private boolean unknown_statementName;
    public @Nullable String statementName() {
        if (!unknown_statementName) return value_statementName;
        throw new UndeferrableValueException("Value 'PipeTargetParametersRedshiftDataParameters.statementName' is not present");
    }

    /**
     * Indicates whether to send an event back to EventBridge after the SQL statement runs.
     * 
     */
    @PolicyResourceProperty(name="withEvent", flag="unknown_withEvent")
    private @Nullable Boolean value_withEvent;
    private boolean unknown_withEvent;
    public @Nullable Boolean withEvent() {
        if (!unknown_withEvent) return value_withEvent;
        throw new UndeferrableValueException("Value 'PipeTargetParametersRedshiftDataParameters.withEvent' is not present");
    }

}
