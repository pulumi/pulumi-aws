// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshift;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshift/usageLimit:UsageLimit")
public final class UsageLimit extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number.
     * 
     */
    @PolicyResourceProperty(name="amount", flag="unknown_amount")
    private Integer value_amount;
    private boolean unknown_amount;
    public Integer amount() {
        if (!unknown_amount) return value_amount;
        throw new UndeferrableValueException("Value 'UsageLimit.amount' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the Redshift Usage Limit.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'UsageLimit.arn' is not present");
    }

    /**
     * The action that Amazon Redshift takes when the limit is reached. The default is `log`. Valid values are `log`, `emit-metric`, and `disable`.
     * 
     */
    @PolicyResourceProperty(name="breachAction", flag="unknown_breachAction")
    private @Nullable String value_breachAction;
    private boolean unknown_breachAction;
    public @Nullable String breachAction() {
        if (!unknown_breachAction) return value_breachAction;
        throw new UndeferrableValueException("Value 'UsageLimit.breachAction' is not present");
    }

    /**
     * The identifier of the cluster that you want to limit usage.
     * 
     */
    @PolicyResourceProperty(name="clusterIdentifier", flag="unknown_clusterIdentifier")
    private String value_clusterIdentifier;
    private boolean unknown_clusterIdentifier;
    public String clusterIdentifier() {
        if (!unknown_clusterIdentifier) return value_clusterIdentifier;
        throw new UndeferrableValueException("Value 'UsageLimit.clusterIdentifier' is not present");
    }

    /**
     * The Amazon Redshift feature that you want to limit. Valid values are `spectrum`, `concurrency-scaling`, and `cross-region-datasharing`.
     * 
     */
    @PolicyResourceProperty(name="featureType", flag="unknown_featureType")
    private String value_featureType;
    private boolean unknown_featureType;
    public String featureType() {
        if (!unknown_featureType) return value_featureType;
        throw new UndeferrableValueException("Value 'UsageLimit.featureType' is not present");
    }

    /**
     * The type of limit. Depending on the feature type, this can be based on a time duration or data size. If FeatureType is `spectrum`, then LimitType must be `data-scanned`. If FeatureType is `concurrency-scaling`, then LimitType must be `time`. If FeatureType is `cross-region-datasharing`, then LimitType must be `data-scanned`. Valid values are `data-scanned`, and `time`.
     * 
     */
    @PolicyResourceProperty(name="limitType", flag="unknown_limitType")
    private String value_limitType;
    private boolean unknown_limitType;
    public String limitType() {
        if (!unknown_limitType) return value_limitType;
        throw new UndeferrableValueException("Value 'UsageLimit.limitType' is not present");
    }

    /**
     * The time period that the amount applies to. A weekly period begins on Sunday. The default is `monthly`. Valid values are `daily`, `weekly`, and `monthly`.
     * 
     */
    @PolicyResourceProperty(name="period", flag="unknown_period")
    private @Nullable String value_period;
    private boolean unknown_period;
    public @Nullable String period() {
        if (!unknown_period) return value_period;
        throw new UndeferrableValueException("Value 'UsageLimit.period' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'UsageLimit.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'UsageLimit.tagsAll' is not present");
    }

}
