// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.mq;

import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.mq.BrokerConfiguration;
import com.pulumi.policypacks.aws.mq.BrokerEncryptionOptions;
import com.pulumi.policypacks.aws.mq.BrokerInstance;
import com.pulumi.policypacks.aws.mq.BrokerLdapServerMetadata;
import com.pulumi.policypacks.aws.mq.BrokerLogs;
import com.pulumi.policypacks.aws.mq.BrokerMaintenanceWindowStartTime;
import com.pulumi.policypacks.aws.mq.BrokerUser;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;


@PolicyResourceType(type="aws:mq/broker:Broker")
public final class Broker extends com.pulumi.resources.PolicyResource {

    /**
     * Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
     * 
     */
    public Boolean applyImmediately;



    /**
     * ARN of the broker.
     * 
     */
    public String arn;



    /**
     * Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engine_type` `RabbitMQ`.
     * 
     */
    public String authenticationStrategy;



    /**
     * Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
     * 
     */
    public Boolean autoMinorVersionUpgrade;



    /**
     * Name of the broker.
     * 
     */
    public String brokerName;



    /**
     * Configuration block for broker configuration. Applies to `engine_type` of `ActiveMQ` and `RabbitMQ` only. Detailed below.
     * 
     */
    public BrokerConfiguration configuration;



    /**
     * Defines whether this broker is a part of a data replication pair. Valid values are `CRDR` and `NONE`.
     * 
     */
    public String dataReplicationMode;



    /**
     * The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when `data_replication_mode` is `CRDR`.
     * 
     */
    public String dataReplicationPrimaryBrokerArn;



    /**
     * Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
     * 
     */
    public String deploymentMode;



    /**
     * Configuration block containing encryption options. Detailed below.
     * 
     */
    public BrokerEncryptionOptions encryptionOptions;



    /**
     * Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
     * 
     */
    public String engineType;



    /**
     * Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.17.6`.
     * 
     */
    public String engineVersion;



    /**
     * Broker&#39;s instance type. For example, `mq.t3.micro`, `mq.m5.large`.
     * 
     */
    public String hostInstanceType;



    /**
     * List of information about allocated brokers (both active &amp; standby).
     * 
     */
    public List<BrokerInstance> instances;



    /**
     * Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engine_type` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
     * 
     */
    public BrokerLdapServerMetadata ldapServerMetadata;



    /**
     * Configuration block for the logging configuration of the broker. Detailed below.
     * 
     */
    public BrokerLogs logs;



    /**
     * Configuration block for the maintenance window start time. Detailed below.
     * 
     */
    public BrokerMaintenanceWindowStartTime maintenanceWindowStartTime;



    /**
     * (Optional) The data replication mode that will be applied after reboot.
     * 
     */
    public String pendingDataReplicationMode;



    /**
     * Whether to enable connections from applications outside of the VPC that hosts the broker&#39;s subnets.
     * 
     */
    public Boolean publiclyAccessible;



    /**
     * List of security group IDs assigned to the broker.
     * 
     */
    public List<String> securityGroups;



    /**
     * Storage type of the broker. For `engine_type` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engine_type` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
     * 
     */
    public String storageType;



    /**
     * List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
     * 
     */
    public List<String> subnetIds;



    /**
     * Map of tags to assign to the broker. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags;



    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



    /**
     * Configuration block for broker users. For `engine_type` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    public List<BrokerUser> users;



}
