// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/clusterInstance:ClusterInstance")
public final class ClusterInstance extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default is`false`.
     * 
     */
    @PolicyResourceProperty(name="applyImmediately", flag="unknown_applyImmediately")
    private Boolean value_applyImmediately;
    private boolean unknown_applyImmediately;
    public Boolean applyImmediately() {
        if (!unknown_applyImmediately) return value_applyImmediately;
        throw new UndeferrableValueException("Value 'ClusterInstance.applyImmediately' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of cluster instance
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ClusterInstance.arn' is not present");
    }

    /**
     * Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. Default `true`.
     * 
     */
    @PolicyResourceProperty(name="autoMinorVersionUpgrade", flag="unknown_autoMinorVersionUpgrade")
    private @Nullable Boolean value_autoMinorVersionUpgrade;
    private boolean unknown_autoMinorVersionUpgrade;
    public @Nullable Boolean autoMinorVersionUpgrade() {
        if (!unknown_autoMinorVersionUpgrade) return value_autoMinorVersionUpgrade;
        throw new UndeferrableValueException("Value 'ClusterInstance.autoMinorVersionUpgrade' is not present");
    }

    /**
     * EC2 Availability Zone that the DB instance is created in. See [docs](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html) about the details.
     * 
     */
    @PolicyResourceProperty(name="availabilityZone", flag="unknown_availabilityZone")
    private String value_availabilityZone;
    private boolean unknown_availabilityZone;
    public String availabilityZone() {
        if (!unknown_availabilityZone) return value_availabilityZone;
        throw new UndeferrableValueException("Value 'ClusterInstance.availabilityZone' is not present");
    }

    /**
     * Identifier of the CA certificate for the DB instance.
     * 
     */
    @PolicyResourceProperty(name="caCertIdentifier", flag="unknown_caCertIdentifier")
    private String value_caCertIdentifier;
    private boolean unknown_caCertIdentifier;
    public String caCertIdentifier() {
        if (!unknown_caCertIdentifier) return value_caCertIdentifier;
        throw new UndeferrableValueException("Value 'ClusterInstance.caCertIdentifier' is not present");
    }

    /**
     * Identifier of the `aws.rds.Cluster` in which to launch this instance.
     * 
     */
    @PolicyResourceProperty(name="clusterIdentifier", flag="unknown_clusterIdentifier")
    private String value_clusterIdentifier;
    private boolean unknown_clusterIdentifier;
    public String clusterIdentifier() {
        if (!unknown_clusterIdentifier) return value_clusterIdentifier;
        throw new UndeferrableValueException("Value 'ClusterInstance.clusterIdentifier' is not present");
    }

    /**
     * Indicates whether to copy all of the user-defined tags from the DB instance to snapshots of the DB instance. Default `false`.
     * 
     */
    @PolicyResourceProperty(name="copyTagsToSnapshot", flag="unknown_copyTagsToSnapshot")
    private @Nullable Boolean value_copyTagsToSnapshot;
    private boolean unknown_copyTagsToSnapshot;
    public @Nullable Boolean copyTagsToSnapshot() {
        if (!unknown_copyTagsToSnapshot) return value_copyTagsToSnapshot;
        throw new UndeferrableValueException("Value 'ClusterInstance.copyTagsToSnapshot' is not present");
    }

    /**
     * Instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
     * 
     */
    @PolicyResourceProperty(name="customIamInstanceProfile", flag="unknown_customIamInstanceProfile")
    private @Nullable String value_customIamInstanceProfile;
    private boolean unknown_customIamInstanceProfile;
    public @Nullable String customIamInstanceProfile() {
        if (!unknown_customIamInstanceProfile) return value_customIamInstanceProfile;
        throw new UndeferrableValueException("Value 'ClusterInstance.customIamInstanceProfile' is not present");
    }

    /**
     * Name of the DB parameter group to associate with this instance.
     * 
     */
    @PolicyResourceProperty(name="dbParameterGroupName", flag="unknown_dbParameterGroupName")
    private String value_dbParameterGroupName;
    private boolean unknown_dbParameterGroupName;
    public String dbParameterGroupName() {
        if (!unknown_dbParameterGroupName) return value_dbParameterGroupName;
        throw new UndeferrableValueException("Value 'ClusterInstance.dbParameterGroupName' is not present");
    }

    /**
     * Specifies the DB subnet group to associate with this DB instance. The default behavior varies depending on whether `db_subnet_group_name` is specified. Please refer to official [AWS documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html) to understand how `db_subnet_group_name` and `publicly_accessible` parameters affect DB instance behaviour. **NOTE:** This must match the `db_subnet_group_name` of the attached `aws.rds.Cluster`.
     * 
     */
    @PolicyResourceProperty(name="dbSubnetGroupName", flag="unknown_dbSubnetGroupName")
    private String value_dbSubnetGroupName;
    private boolean unknown_dbSubnetGroupName;
    public String dbSubnetGroupName() {
        if (!unknown_dbSubnetGroupName) return value_dbSubnetGroupName;
        throw new UndeferrableValueException("Value 'ClusterInstance.dbSubnetGroupName' is not present");
    }

    /**
     * Region-unique, immutable identifier for the DB instance.
     * 
     */
    @PolicyResourceProperty(name="dbiResourceId", flag="unknown_dbiResourceId")
    private String value_dbiResourceId;
    private boolean unknown_dbiResourceId;
    public String dbiResourceId() {
        if (!unknown_dbiResourceId) return value_dbiResourceId;
        throw new UndeferrableValueException("Value 'ClusterInstance.dbiResourceId' is not present");
    }

    /**
     * DNS address for this instance. May not be writable
     * 
     */
    @PolicyResourceProperty(name="endpoint", flag="unknown_endpoint")
    private String value_endpoint;
    private boolean unknown_endpoint;
    public String endpoint() {
        if (!unknown_endpoint) return value_endpoint;
        throw new UndeferrableValueException("Value 'ClusterInstance.endpoint' is not present");
    }

    /**
     * Name of the database engine to be used for the RDS cluster instance.
     * Valid Values: `aurora-mysql`, `aurora-postgresql`, `mysql`, `postgres`.(Note that `mysql` and `postgres` are Multi-AZ RDS clusters).
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private String value_engine;
    private boolean unknown_engine;
    public String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'ClusterInstance.engine' is not present");
    }

    /**
     * Database engine version. Please note that to upgrade the `engine_version` of the instance, it must be done on the `aws.rds.Cluster` `engine_version`. Trying to upgrade in `aws_cluster_instance` will not update the `engine_version`.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'ClusterInstance.engineVersion' is not present");
    }

    /**
     * Database engine version
     * 
     */
    @PolicyResourceProperty(name="engineVersionActual", flag="unknown_engineVersionActual")
    private String value_engineVersionActual;
    private boolean unknown_engineVersionActual;
    public String engineVersionActual() {
        if (!unknown_engineVersionActual) return value_engineVersionActual;
        throw new UndeferrableValueException("Value 'ClusterInstance.engineVersionActual' is not present");
    }

    /**
     * Forces an instance to be destroyed when a part of a read replica cluster. **Note:** will promote the read replica to a standalone cluster before instance deletion.
     * 
     */
    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private @Nullable Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public @Nullable Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'ClusterInstance.forceDestroy' is not present");
    }

    /**
     * Identifier for the RDS instance, if omitted, Pulumi will assign a random, unique identifier.
     * 
     */
    @PolicyResourceProperty(name="identifier", flag="unknown_identifier")
    private String value_identifier;
    private boolean unknown_identifier;
    public String identifier() {
        if (!unknown_identifier) return value_identifier;
        throw new UndeferrableValueException("Value 'ClusterInstance.identifier' is not present");
    }

    /**
     * Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
     * 
     */
    @PolicyResourceProperty(name="identifierPrefix", flag="unknown_identifierPrefix")
    private String value_identifierPrefix;
    private boolean unknown_identifierPrefix;
    public String identifierPrefix() {
        if (!unknown_identifierPrefix) return value_identifierPrefix;
        throw new UndeferrableValueException("Value 'ClusterInstance.identifierPrefix' is not present");
    }

    /**
     * Instance class to use. For details on CPU and memory, see [Scaling Aurora DB Instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Managing.html). Aurora uses `db.*` instance classes/types. Please see [AWS Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) for currently available instance classes and complete details. For Aurora Serverless v2 use `db.serverless`.
     * 
     */
    @PolicyResourceProperty(name="instanceClass", flag="unknown_instanceClass")
    private String value_instanceClass;
    private boolean unknown_instanceClass;
    public String instanceClass() {
        if (!unknown_instanceClass) return value_instanceClass;
        throw new UndeferrableValueException("Value 'ClusterInstance.instanceClass' is not present");
    }

    /**
     * ARN for the KMS encryption key if one is set to the cluster.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'ClusterInstance.kmsKeyId' is not present");
    }

    /**
     * Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60.
     * 
     */
    @PolicyResourceProperty(name="monitoringInterval", flag="unknown_monitoringInterval")
    private @Nullable Integer value_monitoringInterval;
    private boolean unknown_monitoringInterval;
    public @Nullable Integer monitoringInterval() {
        if (!unknown_monitoringInterval) return value_monitoringInterval;
        throw new UndeferrableValueException("Value 'ClusterInstance.monitoringInterval' is not present");
    }

    /**
     * ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the [AWS Documentation](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html) what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
     * 
     */
    @PolicyResourceProperty(name="monitoringRoleArn", flag="unknown_monitoringRoleArn")
    private String value_monitoringRoleArn;
    private boolean unknown_monitoringRoleArn;
    public String monitoringRoleArn() {
        if (!unknown_monitoringRoleArn) return value_monitoringRoleArn;
        throw new UndeferrableValueException("Value 'ClusterInstance.monitoringRoleArn' is not present");
    }

    /**
     * Network type of the DB instance.
     * 
     */
    @PolicyResourceProperty(name="networkType", flag="unknown_networkType")
    private String value_networkType;
    private boolean unknown_networkType;
    public String networkType() {
        if (!unknown_networkType) return value_networkType;
        throw new UndeferrableValueException("Value 'ClusterInstance.networkType' is not present");
    }

    /**
     * Specifies whether Performance Insights is enabled or not. **NOTE:** When Performance Insights is configured at the cluster level through `aws.rds.Cluster`, this argument cannot be set to a value that conflicts with the cluster&#39;s configuration.
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsEnabled", flag="unknown_performanceInsightsEnabled")
    private Boolean value_performanceInsightsEnabled;
    private boolean unknown_performanceInsightsEnabled;
    public Boolean performanceInsightsEnabled() {
        if (!unknown_performanceInsightsEnabled) return value_performanceInsightsEnabled;
        throw new UndeferrableValueException("Value 'ClusterInstance.performanceInsightsEnabled' is not present");
    }

    /**
     * ARN for the KMS key to encrypt Performance Insights data. When specifying `performance_insights_kms_key_id`, `performance_insights_enabled` needs to be set to true.
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsKmsKeyId", flag="unknown_performanceInsightsKmsKeyId")
    private String value_performanceInsightsKmsKeyId;
    private boolean unknown_performanceInsightsKmsKeyId;
    public String performanceInsightsKmsKeyId() {
        if (!unknown_performanceInsightsKmsKeyId) return value_performanceInsightsKmsKeyId;
        throw new UndeferrableValueException("Value 'ClusterInstance.performanceInsightsKmsKeyId' is not present");
    }

    /**
     * Amount of time in days to retain Performance Insights data. Valid values are `7`, `731` (2 years) or a multiple of `31`. When specifying `performance_insights_retention_period`, `performance_insights_enabled` needs to be set to true. Defaults to &#39;7&#39;.
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsRetentionPeriod", flag="unknown_performanceInsightsRetentionPeriod")
    private Integer value_performanceInsightsRetentionPeriod;
    private boolean unknown_performanceInsightsRetentionPeriod;
    public Integer performanceInsightsRetentionPeriod() {
        if (!unknown_performanceInsightsRetentionPeriod) return value_performanceInsightsRetentionPeriod;
        throw new UndeferrableValueException("Value 'ClusterInstance.performanceInsightsRetentionPeriod' is not present");
    }

    /**
     * Database port
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'ClusterInstance.port' is not present");
    }

    /**
     * Daily time range during which automated backups are created if automated backups are enabled. Eg: &#34;04:00-09:00&#34;. **NOTE:** If `preferred_backup_window` is set at the cluster level, this argument **must** be omitted.
     * 
     */
    @PolicyResourceProperty(name="preferredBackupWindow", flag="unknown_preferredBackupWindow")
    private String value_preferredBackupWindow;
    private boolean unknown_preferredBackupWindow;
    public String preferredBackupWindow() {
        if (!unknown_preferredBackupWindow) return value_preferredBackupWindow;
        throw new UndeferrableValueException("Value 'ClusterInstance.preferredBackupWindow' is not present");
    }

    /**
     * Window to perform maintenance in. Syntax: &#34;ddd:hh24:mi-ddd:hh24:mi&#34;. Eg: &#34;Mon:00:00-Mon:03:00&#34;.
     * 
     */
    @PolicyResourceProperty(name="preferredMaintenanceWindow", flag="unknown_preferredMaintenanceWindow")
    private String value_preferredMaintenanceWindow;
    private boolean unknown_preferredMaintenanceWindow;
    public String preferredMaintenanceWindow() {
        if (!unknown_preferredMaintenanceWindow) return value_preferredMaintenanceWindow;
        throw new UndeferrableValueException("Value 'ClusterInstance.preferredMaintenanceWindow' is not present");
    }

    /**
     * Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoted to writer.
     * 
     */
    @PolicyResourceProperty(name="promotionTier", flag="unknown_promotionTier")
    private @Nullable Integer value_promotionTier;
    private boolean unknown_promotionTier;
    public @Nullable Integer promotionTier() {
        if (!unknown_promotionTier) return value_promotionTier;
        throw new UndeferrableValueException("Value 'ClusterInstance.promotionTier' is not present");
    }

    /**
     * Bool to control if instance is publicly accessible. Default `false`. See the documentation on [Creating DB Instances](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html) for more details on controlling this property.
     * 
     */
    @PolicyResourceProperty(name="publiclyAccessible", flag="unknown_publiclyAccessible")
    private Boolean value_publiclyAccessible;
    private boolean unknown_publiclyAccessible;
    public Boolean publiclyAccessible() {
        if (!unknown_publiclyAccessible) return value_publiclyAccessible;
        throw new UndeferrableValueException("Value 'ClusterInstance.publiclyAccessible' is not present");
    }

    /**
     * Specifies whether the DB cluster is encrypted.
     * 
     */
    @PolicyResourceProperty(name="storageEncrypted", flag="unknown_storageEncrypted")
    private Boolean value_storageEncrypted;
    private boolean unknown_storageEncrypted;
    public Boolean storageEncrypted() {
        if (!unknown_storageEncrypted) return value_storageEncrypted;
        throw new UndeferrableValueException("Value 'ClusterInstance.storageEncrypted' is not present");
    }

    /**
     * Map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ClusterInstance.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ClusterInstance.tagsAll' is not present");
    }

    /**
     * Boolean indicating if this instance is writable. `False` indicates this instance is a read replica.
     * 
     */
    @PolicyResourceProperty(name="writer", flag="unknown_writer")
    private Boolean value_writer;
    private boolean unknown_writer;
    public Boolean writer() {
        if (!unknown_writer) return value_writer;
        throw new UndeferrableValueException("Value 'ClusterInstance.writer' is not present");
    }

}
