// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshiftserverless;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshiftserverless/namespace:Namespace")
public final class Namespace extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of namespace&#39;s admin user credentials secret.
     * 
     */
    @PolicyResourceProperty(name="adminPasswordSecretArn", flag="unknown_adminPasswordSecretArn")
    private String value_adminPasswordSecretArn;
    private boolean unknown_adminPasswordSecretArn;
    public String adminPasswordSecretArn() {
        if (!unknown_adminPasswordSecretArn) return value_adminPasswordSecretArn;
        throw new UndeferrableValueException("Value 'Namespace.adminPasswordSecretArn' is not present");
    }

    /**
     * ID of the KMS key used to encrypt the namespace&#39;s admin credentials secret.
     * 
     */
    @PolicyResourceProperty(name="adminPasswordSecretKmsKeyId", flag="unknown_adminPasswordSecretKmsKeyId")
    private String value_adminPasswordSecretKmsKeyId;
    private boolean unknown_adminPasswordSecretKmsKeyId;
    public String adminPasswordSecretKmsKeyId() {
        if (!unknown_adminPasswordSecretKmsKeyId) return value_adminPasswordSecretKmsKeyId;
        throw new UndeferrableValueException("Value 'Namespace.adminPasswordSecretKmsKeyId' is not present");
    }

    /**
     * The password of the administrator for the first database created in the namespace.
     * Conflicts with `manage_admin_password` and `admin_user_password_wo`.
     * 
     */
    @PolicyResourceProperty(name="adminUserPassword", flag="unknown_adminUserPassword")
    private @Nullable String value_adminUserPassword;
    private boolean unknown_adminUserPassword;
    public @Nullable String adminUserPassword() {
        if (!unknown_adminUserPassword) return value_adminUserPassword;
        throw new UndeferrableValueException("Value 'Namespace.adminUserPassword' is not present");
    }

    /**
     * The username of the administrator for the first database created in the namespace.
     * 
     */
    @PolicyResourceProperty(name="adminUsername", flag="unknown_adminUsername")
    private String value_adminUsername;
    private boolean unknown_adminUsername;
    public String adminUsername() {
        if (!unknown_adminUsername) return value_adminUsername;
        throw new UndeferrableValueException("Value 'Namespace.adminUsername' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Namespace.arn' is not present");
    }

    /**
     * The name of the first database created in the namespace.
     * 
     */
    @PolicyResourceProperty(name="dbName", flag="unknown_dbName")
    private String value_dbName;
    private boolean unknown_dbName;
    public String dbName() {
        if (!unknown_dbName) return value_dbName;
        throw new UndeferrableValueException("Value 'Namespace.dbName' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `default_iam_role_arn`, it also must be part of `iam_roles`.
     * 
     */
    @PolicyResourceProperty(name="defaultIamRoleArn", flag="unknown_defaultIamRoleArn")
    private @Nullable String value_defaultIamRoleArn;
    private boolean unknown_defaultIamRoleArn;
    public @Nullable String defaultIamRoleArn() {
        if (!unknown_defaultIamRoleArn) return value_defaultIamRoleArn;
        throw new UndeferrableValueException("Value 'Namespace.defaultIamRoleArn' is not present");
    }

    /**
     * A list of IAM roles to associate with the namespace.
     * 
     */
    @PolicyResourceProperty(name="iamRoles", flag="unknown_iamRoles")
    private List<String> value_iamRoles;
    private boolean unknown_iamRoles;
    public List<String> iamRoles() {
        if (!unknown_iamRoles) return value_iamRoles;
        throw new UndeferrableValueException("Value 'Namespace.iamRoles' is not present");
    }

    /**
     * The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'Namespace.kmsKeyId' is not present");
    }

    /**
     * The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
     * 
     */
    @PolicyResourceProperty(name="logExports", flag="unknown_logExports")
    private @Nullable List<String> value_logExports;
    private boolean unknown_logExports;
    public @Nullable List<String> logExports() {
        if (!unknown_logExports) return value_logExports;
        throw new UndeferrableValueException("Value 'Namespace.logExports' is not present");
    }

    /**
     * Whether to use AWS SecretManager to manage namespace&#39;s admin credentials.
     * Conflicts with `admin_user_password` and `admin_user_password_wo`.
     * 
     */
    @PolicyResourceProperty(name="manageAdminPassword", flag="unknown_manageAdminPassword")
    private @Nullable Boolean value_manageAdminPassword;
    private boolean unknown_manageAdminPassword;
    public @Nullable Boolean manageAdminPassword() {
        if (!unknown_manageAdminPassword) return value_manageAdminPassword;
        throw new UndeferrableValueException("Value 'Namespace.manageAdminPassword' is not present");
    }

    /**
     * The Redshift Namespace ID.
     * 
     */
    @PolicyResourceProperty(name="namespaceId", flag="unknown_namespaceId")
    private String value_namespaceId;
    private boolean unknown_namespaceId;
    public String namespaceId() {
        if (!unknown_namespaceId) return value_namespaceId;
        throw new UndeferrableValueException("Value 'Namespace.namespaceId' is not present");
    }

    /**
     * The name of the namespace.
     * 
     */
    @PolicyResourceProperty(name="namespaceName", flag="unknown_namespaceName")
    private String value_namespaceName;
    private boolean unknown_namespaceName;
    public String namespaceName() {
        if (!unknown_namespaceName) return value_namespaceName;
        throw new UndeferrableValueException("Value 'Namespace.namespaceName' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Namespace.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Namespace.tagsAll' is not present");
    }

}
