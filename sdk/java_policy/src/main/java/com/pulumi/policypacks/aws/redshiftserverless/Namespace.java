// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshiftserverless;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshiftserverless/namespace:Namespace")
public final class Namespace extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of namespace&#39;s admin user credentials secret.
     * 
     */
    private UndeferrableValue<String> adminPasswordSecretArn;

    public String adminPasswordSecretArn() {
        if (adminPasswordSecretArn == null) return null;
        return adminPasswordSecretArn.getValue("Namespace.adminPasswordSecretArn");
    }

    /**
     * ID of the KMS key used to encrypt the namespace&#39;s admin credentials secret.
     * 
     */
    private UndeferrableValue<String> adminPasswordSecretKmsKeyId;

    public String adminPasswordSecretKmsKeyId() {
        if (adminPasswordSecretKmsKeyId == null) return null;
        return adminPasswordSecretKmsKeyId.getValue("Namespace.adminPasswordSecretKmsKeyId");
    }

    /**
     * The password of the administrator for the first database created in the namespace.
     * Conflicts with `manage_admin_password` and `admin_user_password_wo`.
     * 
     */
    private @Nullable UndeferrableValue<String> adminUserPassword;

    public @Nullable String adminUserPassword() {
        if (adminUserPassword == null) return null;
        return adminUserPassword.getValue("Namespace.adminUserPassword");
    }

    /**
     * The username of the administrator for the first database created in the namespace.
     * 
     */
    private UndeferrableValue<String> adminUsername;

    public String adminUsername() {
        if (adminUsername == null) return null;
        return adminUsername.getValue("Namespace.adminUsername");
    }

    /**
     * Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Namespace.arn");
    }

    /**
     * The name of the first database created in the namespace.
     * 
     */
    private UndeferrableValue<String> dbName;

    public String dbName() {
        if (dbName == null) return null;
        return dbName.getValue("Namespace.dbName");
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `default_iam_role_arn`, it also must be part of `iam_roles`.
     * 
     */
    private @Nullable UndeferrableValue<String> defaultIamRoleArn;

    public @Nullable String defaultIamRoleArn() {
        if (defaultIamRoleArn == null) return null;
        return defaultIamRoleArn.getValue("Namespace.defaultIamRoleArn");
    }

    /**
     * A list of IAM roles to associate with the namespace.
     * 
     */
    private UndeferrableValue<List<String>> iamRoles;

    public List<String> iamRoles() {
        if (iamRoles == null) return null;
        return iamRoles.getValue("Namespace.iamRoles");
    }

    /**
     * The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("Namespace.kmsKeyId");
    }

    /**
     * The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> logExports;

    public @Nullable List<String> logExports() {
        if (logExports == null) return null;
        return logExports.getValue("Namespace.logExports");
    }

    /**
     * Whether to use AWS SecretManager to manage namespace&#39;s admin credentials.
     * Conflicts with `admin_user_password` and `admin_user_password_wo`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> manageAdminPassword;

    public @Nullable Boolean manageAdminPassword() {
        if (manageAdminPassword == null) return null;
        return manageAdminPassword.getValue("Namespace.manageAdminPassword");
    }

    /**
     * The Redshift Namespace ID.
     * 
     */
    private UndeferrableValue<String> namespaceId;

    public String namespaceId() {
        if (namespaceId == null) return null;
        return namespaceId.getValue("Namespace.namespaceId");
    }

    /**
     * The name of the namespace.
     * 
     */
    private UndeferrableValue<String> namespaceName;

    public String namespaceName() {
        if (namespaceName == null) return null;
        return namespaceName.getValue("Namespace.namespaceName");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Namespace.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Namespace.tagsAll");
    }

}
