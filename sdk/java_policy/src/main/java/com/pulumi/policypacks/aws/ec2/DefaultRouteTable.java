// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.outputs.DefaultRouteTableRoute;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/defaultRouteTable:DefaultRouteTable")
public final class DefaultRouteTable extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the route table.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("DefaultRouteTable.arn");
    }

    /**
     * ID of the default route table.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> defaultRouteTableId;

    public String defaultRouteTableId() {
        if (defaultRouteTableId == null) return null;
        return defaultRouteTableId.getValue("DefaultRouteTable.defaultRouteTableId");
    }

    /**
     * ID of the AWS account that owns the route table.
     * 
     */
    private UndeferrableValue<String> ownerId;

    public String ownerId() {
        if (ownerId == null) return null;
        return ownerId.getValue("DefaultRouteTable.ownerId");
    }

    /**
     * List of virtual gateways for propagation.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> propagatingVgws;

    public @Nullable List<String> propagatingVgws() {
        if (propagatingVgws == null) return null;
        return propagatingVgws.getValue("DefaultRouteTable.propagatingVgws");
    }

    /**
     * Set of objects. Detailed below
     * 
     */
    private UndeferrableValue<List<DefaultRouteTableRoute>> routes;

    public List<DefaultRouteTableRoute> routes() {
        if (routes == null) return null;
        return routes.getValue("DefaultRouteTable.routes");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DefaultRouteTable.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("DefaultRouteTable.tagsAll");
    }

    /**
     * ID of the VPC.
     * 
     */
    private UndeferrableValue<String> vpcId;

    public String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("DefaultRouteTable.vpcId");
    }

}
