// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.timestreaminfluxdb;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.timestreaminfluxdb.inputs.DbInstanceLogDeliveryConfigurationArgs;
import com.pulumi.policypacks.aws.timestreaminfluxdb.inputs.DbInstanceTimeoutsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:timestreaminfluxdb/dbInstance:DbInstance")
public final class DbInstanceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. This argument is updatable. The argument `db_storage_type` places restrictions on this argument&#39;s minimum value. The following is a list of `db_storage_type` values and the corresponding minimum value for `allocated_storage`: ` &#34;InfluxIOIncludedT1&#34;:  `20` ,  `&#34;InfluxIOIncludedT2&#34; and ` &#34;InfluxIOIncludedT3&#34;:  `400`.
     * 
     */
    private UndeferrableValue<Integer> allocatedStorage;

    public Integer allocatedStorage() {
        if (allocatedStorage == null) return null;
        return allocatedStorage.getValue("DbInstanceArgs.allocatedStorage");
    }

    /**
     * Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
     * 
     */
    private UndeferrableValue<String> bucket;

    public String bucket() {
        if (bucket == null) return null;
        return bucket.getValue("DbInstanceArgs.bucket");
    }

    /**
     * Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `&#34;db.influx.medium&#34;`, `&#34;db.influx.large&#34;`, `&#34;db.influx.xlarge&#34;`, `&#34;db.influx.2xlarge&#34;`, `&#34;db.influx.4xlarge&#34;`, `&#34;db.influx.8xlarge&#34;`, `&#34;db.influx.12xlarge&#34;`, and `&#34;db.influx.16xlarge&#34;`. This argument is updatable.
     * 
     */
    private UndeferrableValue<String> dbInstanceType;

    public String dbInstanceType() {
        if (dbInstanceType == null) return null;
        return dbInstanceType.getValue("DbInstanceArgs.dbInstanceType");
    }

    /**
     * ID of the DB parameter group assigned to your DB instance. This argument is updatable. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `db_parameter_group_identifier`, removing `db_parameter_group_identifier` will cause the instance to be destroyed and recreated.
     * 
     */
    private UndeferrableValue<String> dbParameterGroupIdentifier;

    public String dbParameterGroupIdentifier() {
        if (dbParameterGroupIdentifier == null) return null;
        return dbParameterGroupIdentifier.getValue("DbInstanceArgs.dbParameterGroupIdentifier");
    }

    /**
     * Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `&#34;InfluxIOIncludedT1&#34;`, `&#34;InfluxIOIncludedT2&#34;`, and `&#34;InfluxIOIncludedT3&#34;`. If you use ` &#34;InfluxIOIncludedT2&#34; or &#34;InfluxIOIncludedT3&#34;, the minimum value for  `allocated_storage` is 400. This argument is updatable. For a single instance, after this argument has been updated once, it can only be updated again after 6 hours have passed.
     * 
     */
    private UndeferrableValue<String> dbStorageType;

    public String dbStorageType() {
        if (dbStorageType == null) return null;
        return dbStorageType.getValue("DbInstanceArgs.dbStorageType");
    }

    /**
     * Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `&#34;SINGLE_AZ&#34;`, `&#34;WITH_MULTIAZ_STANDBY&#34;`. This argument is updatable.
     * 
     */
    private UndeferrableValue<String> deploymentType;

    public String deploymentType() {
        if (deploymentType == null) return null;
        return deploymentType.getValue("DbInstanceArgs.deploymentType");
    }

    /**
     * Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
     * 
     */
    private UndeferrableValue<DbInstanceLogDeliveryConfigurationArgs> logDeliveryConfiguration;

    public DbInstanceLogDeliveryConfigurationArgs logDeliveryConfiguration() {
        if (logDeliveryConfiguration == null) return null;
        return logDeliveryConfiguration.getValue("DbInstanceArgs.logDeliveryConfiguration");
    }

    /**
     * Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("DbInstanceArgs.name");
    }

    /**
     * Specifies whether the networkType of the Timestream for InfluxDB instance is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
     * 
     */
    private UndeferrableValue<String> networkType;

    public String networkType() {
        if (networkType == null) return null;
        return networkType.getValue("DbInstanceArgs.networkType");
    }

    /**
     * Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
     * 
     */
    private UndeferrableValue<String> organization;

    public String organization() {
        if (organization == null) return null;
        return organization.getValue("DbInstanceArgs.organization");
    }

    /**
     * Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
     * 
     */
    private UndeferrableValue<String> password;

    public String password() {
        if (password == null) return null;
        return password.getValue("DbInstanceArgs.password");
    }

    /**
     * The port on which the instance accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("DbInstanceArgs.port");
    }

    /**
     * Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See &#34;Usage with Public Internet Access Enabled&#34; for an example configuration with all required resources for public internet access.
     * 
     */
    private UndeferrableValue<Boolean> publiclyAccessible;

    public Boolean publiclyAccessible() {
        if (publiclyAccessible == null) return null;
        return publiclyAccessible.getValue("DbInstanceArgs.publiclyAccessible");
    }

    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DbInstanceArgs.tags");
    }

    private UndeferrableValue<DbInstanceTimeoutsArgs> timeouts;

    public DbInstanceTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("DbInstanceArgs.timeouts");
    }

    /**
     * Username of the initial admin user created in InfluxDB. Must start with a letter and can&#39;t end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
     * 
     */
    private UndeferrableValue<String> username;

    public String username() {
        if (username == null) return null;
        return username.getValue("DbInstanceArgs.username");
    }

    /**
     * List of VPC security group IDs to associate with the DB instance.
     * 
     */
    private UndeferrableValue<List<String>> vpcSecurityGroupIds;

    public List<String> vpcSecurityGroupIds() {
        if (vpcSecurityGroupIds == null) return null;
        return vpcSecurityGroupIds.getValue("DbInstanceArgs.vpcSecurityGroupIds");
    }

    /**
     * List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<List<String>> vpcSubnetIds;

    public List<String> vpcSubnetIds() {
        if (vpcSubnetIds == null) return null;
        return vpcSubnetIds.getValue("DbInstanceArgs.vpcSubnetIds");
    }

}
