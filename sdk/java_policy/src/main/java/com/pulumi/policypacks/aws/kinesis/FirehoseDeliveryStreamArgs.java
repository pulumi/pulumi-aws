// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamElasticsearchConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamHttpEndpointConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamIcebergConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamKinesisSourceConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamMskSourceConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamOpensearchConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamOpensearchserverlessConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamServerSideEncryptionArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream")
public final class FirehoseDeliveryStreamArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The Amazon Resource Name (ARN) specifying the Stream
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("FirehoseDeliveryStreamArgs.arn");
    }

    /**
     * This is the destination to where the data is delivered. The only options are `s3` (Deprecated, use `extended_s3` instead), `extended_s3`, `redshift`, `elasticsearch`, `splunk`, `http_endpoint`, `opensearch`, `opensearchserverless` and `snowflake`.
     * 
     */
    private UndeferrableValue<String> destination;

    public String destination() {
        if (destination == null) return null;
        return destination.getValue("FirehoseDeliveryStreamArgs.destination");
    }

    private UndeferrableValue<String> destinationId;

    public String destinationId() {
        if (destinationId == null) return null;
        return destinationId.getValue("FirehoseDeliveryStreamArgs.destinationId");
    }

    /**
     * Configuration options when `destination` is `elasticsearch`. See `elasticsearch_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamElasticsearchConfigurationArgs> elasticsearchConfiguration;

    public FirehoseDeliveryStreamElasticsearchConfigurationArgs elasticsearchConfiguration() {
        if (elasticsearchConfiguration == null) return null;
        return elasticsearchConfiguration.getValue("FirehoseDeliveryStreamArgs.elasticsearchConfiguration");
    }

    /**
     * Enhanced configuration options for the s3 destination. See `extended_s3_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamExtendedS3ConfigurationArgs> extendedS3Configuration;

    public FirehoseDeliveryStreamExtendedS3ConfigurationArgs extendedS3Configuration() {
        if (extendedS3Configuration == null) return null;
        return extendedS3Configuration.getValue("FirehoseDeliveryStreamArgs.extendedS3Configuration");
    }

    /**
     * Configuration options when `destination` is `http_endpoint`. Requires the user to also specify an `s3_configuration` block.  See `http_endpoint_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamHttpEndpointConfigurationArgs> httpEndpointConfiguration;

    public FirehoseDeliveryStreamHttpEndpointConfigurationArgs httpEndpointConfiguration() {
        if (httpEndpointConfiguration == null) return null;
        return httpEndpointConfiguration.getValue("FirehoseDeliveryStreamArgs.httpEndpointConfiguration");
    }

    /**
     * Configuration options when `destination` is `iceberg`. See `iceberg_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamIcebergConfigurationArgs> icebergConfiguration;

    public FirehoseDeliveryStreamIcebergConfigurationArgs icebergConfiguration() {
        if (icebergConfiguration == null) return null;
        return icebergConfiguration.getValue("FirehoseDeliveryStreamArgs.icebergConfiguration");
    }

    /**
     * The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See `kinesis_source_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamKinesisSourceConfigurationArgs> kinesisSourceConfiguration;

    public FirehoseDeliveryStreamKinesisSourceConfigurationArgs kinesisSourceConfiguration() {
        if (kinesisSourceConfiguration == null) return null;
        return kinesisSourceConfiguration.getValue("FirehoseDeliveryStreamArgs.kinesisSourceConfiguration");
    }

    /**
     * The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See `msk_source_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamMskSourceConfigurationArgs> mskSourceConfiguration;

    public FirehoseDeliveryStreamMskSourceConfigurationArgs mskSourceConfiguration() {
        if (mskSourceConfiguration == null) return null;
        return mskSourceConfiguration.getValue("FirehoseDeliveryStreamArgs.mskSourceConfiguration");
    }

    /**
     * A name to identify the stream. This is unique to the AWS account and region the Stream is created in. When using for WAF logging, name must be prefixed with `aws-waf-logs-`. See [AWS Documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-policies.html#waf-policies-logging-config) for more details.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("FirehoseDeliveryStreamArgs.name");
    }

    /**
     * Configuration options when `destination` is `opensearch`. See `opensearch_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamOpensearchConfigurationArgs> opensearchConfiguration;

    public FirehoseDeliveryStreamOpensearchConfigurationArgs opensearchConfiguration() {
        if (opensearchConfiguration == null) return null;
        return opensearchConfiguration.getValue("FirehoseDeliveryStreamArgs.opensearchConfiguration");
    }

    /**
     * Configuration options when `destination` is `opensearchserverless`. See `opensearchserverless_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamOpensearchserverlessConfigurationArgs> opensearchserverlessConfiguration;

    public FirehoseDeliveryStreamOpensearchserverlessConfigurationArgs opensearchserverlessConfiguration() {
        if (opensearchserverlessConfiguration == null) return null;
        return opensearchserverlessConfiguration.getValue("FirehoseDeliveryStreamArgs.opensearchserverlessConfiguration");
    }

    /**
     * Configuration options when `destination` is `redshift`. Requires the user to also specify an `s3_configuration` block. See `redshift_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamRedshiftConfigurationArgs> redshiftConfiguration;

    public FirehoseDeliveryStreamRedshiftConfigurationArgs redshiftConfiguration() {
        if (redshiftConfiguration == null) return null;
        return redshiftConfiguration.getValue("FirehoseDeliveryStreamArgs.redshiftConfiguration");
    }

    /**
     * Encrypt at rest options. See `server_side_encryption` block below for details.
     * 
     * **NOTE:** Server-side encryption should not be enabled when a kinesis stream is configured as the source of the firehose delivery stream.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamServerSideEncryptionArgs> serverSideEncryption;

    public FirehoseDeliveryStreamServerSideEncryptionArgs serverSideEncryption() {
        if (serverSideEncryption == null) return null;
        return serverSideEncryption.getValue("FirehoseDeliveryStreamArgs.serverSideEncryption");
    }

    /**
     * Configuration options when `destination` is `snowflake`. See `snowflake_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationArgs> snowflakeConfiguration;

    public FirehoseDeliveryStreamSnowflakeConfigurationArgs snowflakeConfiguration() {
        if (snowflakeConfiguration == null) return null;
        return snowflakeConfiguration.getValue("FirehoseDeliveryStreamArgs.snowflakeConfiguration");
    }

    /**
     * Configuration options when `destination` is `splunk`. See `splunk_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSplunkConfigurationArgs> splunkConfiguration;

    public FirehoseDeliveryStreamSplunkConfigurationArgs splunkConfiguration() {
        if (splunkConfiguration == null) return null;
        return splunkConfiguration.getValue("FirehoseDeliveryStreamArgs.splunkConfiguration");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("FirehoseDeliveryStreamArgs.tags");
    }

    private UndeferrableValue<String> versionId;

    public String versionId() {
        if (versionId == null) return null;
        return versionId.getValue("FirehoseDeliveryStreamArgs.versionId");
    }

}
