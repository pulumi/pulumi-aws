// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamElasticsearchConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamHttpEndpointConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamIcebergConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamKinesisSourceConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamMskSourceConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamOpensearchConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamOpensearchserverlessConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamServerSideEncryptionArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream")
public final class FirehoseDeliveryStreamArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The Amazon Resource Name (ARN) specifying the Stream
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.arn' is not present");
    }

    /**
     * This is the destination to where the data is delivered. The only options are `s3` (Deprecated, use `extended_s3` instead), `extended_s3`, `redshift`, `elasticsearch`, `splunk`, `http_endpoint`, `opensearch`, `opensearchserverless` and `snowflake`.
     * 
     */
    @PolicyResourceProperty(name="destination", flag="unknown_destination")
    private String value_destination;
    private boolean unknown_destination;
    public String destination() {
        if (!unknown_destination) return value_destination;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.destination' is not present");
    }

    @PolicyResourceProperty(name="destinationId", flag="unknown_destinationId")
    private String value_destinationId;
    private boolean unknown_destinationId;
    public String destinationId() {
        if (!unknown_destinationId) return value_destinationId;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.destinationId' is not present");
    }

    /**
     * Configuration options when `destination` is `elasticsearch`. See `elasticsearch_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="elasticsearchConfiguration", flag="unknown_elasticsearchConfiguration")
    private FirehoseDeliveryStreamElasticsearchConfigurationArgs value_elasticsearchConfiguration;
    private boolean unknown_elasticsearchConfiguration;
    public FirehoseDeliveryStreamElasticsearchConfigurationArgs elasticsearchConfiguration() {
        if (!unknown_elasticsearchConfiguration) return value_elasticsearchConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.elasticsearchConfiguration' is not present");
    }

    /**
     * Enhanced configuration options for the s3 destination. See `extended_s3_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="extendedS3Configuration", flag="unknown_extendedS3Configuration")
    private FirehoseDeliveryStreamExtendedS3ConfigurationArgs value_extendedS3Configuration;
    private boolean unknown_extendedS3Configuration;
    public FirehoseDeliveryStreamExtendedS3ConfigurationArgs extendedS3Configuration() {
        if (!unknown_extendedS3Configuration) return value_extendedS3Configuration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.extendedS3Configuration' is not present");
    }

    /**
     * Configuration options when `destination` is `http_endpoint`. Requires the user to also specify an `s3_configuration` block.  See `http_endpoint_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="httpEndpointConfiguration", flag="unknown_httpEndpointConfiguration")
    private FirehoseDeliveryStreamHttpEndpointConfigurationArgs value_httpEndpointConfiguration;
    private boolean unknown_httpEndpointConfiguration;
    public FirehoseDeliveryStreamHttpEndpointConfigurationArgs httpEndpointConfiguration() {
        if (!unknown_httpEndpointConfiguration) return value_httpEndpointConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.httpEndpointConfiguration' is not present");
    }

    /**
     * Configuration options when `destination` is `iceberg`. See `iceberg_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="icebergConfiguration", flag="unknown_icebergConfiguration")
    private FirehoseDeliveryStreamIcebergConfigurationArgs value_icebergConfiguration;
    private boolean unknown_icebergConfiguration;
    public FirehoseDeliveryStreamIcebergConfigurationArgs icebergConfiguration() {
        if (!unknown_icebergConfiguration) return value_icebergConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.icebergConfiguration' is not present");
    }

    /**
     * The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See `kinesis_source_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="kinesisSourceConfiguration", flag="unknown_kinesisSourceConfiguration")
    private FirehoseDeliveryStreamKinesisSourceConfigurationArgs value_kinesisSourceConfiguration;
    private boolean unknown_kinesisSourceConfiguration;
    public FirehoseDeliveryStreamKinesisSourceConfigurationArgs kinesisSourceConfiguration() {
        if (!unknown_kinesisSourceConfiguration) return value_kinesisSourceConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.kinesisSourceConfiguration' is not present");
    }

    /**
     * The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See `msk_source_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="mskSourceConfiguration", flag="unknown_mskSourceConfiguration")
    private FirehoseDeliveryStreamMskSourceConfigurationArgs value_mskSourceConfiguration;
    private boolean unknown_mskSourceConfiguration;
    public FirehoseDeliveryStreamMskSourceConfigurationArgs mskSourceConfiguration() {
        if (!unknown_mskSourceConfiguration) return value_mskSourceConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.mskSourceConfiguration' is not present");
    }

    /**
     * A name to identify the stream. This is unique to the AWS account and region the Stream is created in. When using for WAF logging, name must be prefixed with `aws-waf-logs-`. See [AWS Documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-policies.html#waf-policies-logging-config) for more details.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.name' is not present");
    }

    /**
     * Configuration options when `destination` is `opensearch`. See `opensearch_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="opensearchConfiguration", flag="unknown_opensearchConfiguration")
    private FirehoseDeliveryStreamOpensearchConfigurationArgs value_opensearchConfiguration;
    private boolean unknown_opensearchConfiguration;
    public FirehoseDeliveryStreamOpensearchConfigurationArgs opensearchConfiguration() {
        if (!unknown_opensearchConfiguration) return value_opensearchConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.opensearchConfiguration' is not present");
    }

    /**
     * Configuration options when `destination` is `opensearchserverless`. See `opensearchserverless_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="opensearchserverlessConfiguration", flag="unknown_opensearchserverlessConfiguration")
    private FirehoseDeliveryStreamOpensearchserverlessConfigurationArgs value_opensearchserverlessConfiguration;
    private boolean unknown_opensearchserverlessConfiguration;
    public FirehoseDeliveryStreamOpensearchserverlessConfigurationArgs opensearchserverlessConfiguration() {
        if (!unknown_opensearchserverlessConfiguration) return value_opensearchserverlessConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.opensearchserverlessConfiguration' is not present");
    }

    /**
     * Configuration options when `destination` is `redshift`. Requires the user to also specify an `s3_configuration` block. See `redshift_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="redshiftConfiguration", flag="unknown_redshiftConfiguration")
    private FirehoseDeliveryStreamRedshiftConfigurationArgs value_redshiftConfiguration;
    private boolean unknown_redshiftConfiguration;
    public FirehoseDeliveryStreamRedshiftConfigurationArgs redshiftConfiguration() {
        if (!unknown_redshiftConfiguration) return value_redshiftConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.redshiftConfiguration' is not present");
    }

    /**
     * Encrypt at rest options. See `server_side_encryption` block below for details.
     * 
     * **NOTE:** Server-side encryption should not be enabled when a kinesis stream is configured as the source of the firehose delivery stream.
     * 
     */
    @PolicyResourceProperty(name="serverSideEncryption", flag="unknown_serverSideEncryption")
    private FirehoseDeliveryStreamServerSideEncryptionArgs value_serverSideEncryption;
    private boolean unknown_serverSideEncryption;
    public FirehoseDeliveryStreamServerSideEncryptionArgs serverSideEncryption() {
        if (!unknown_serverSideEncryption) return value_serverSideEncryption;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.serverSideEncryption' is not present");
    }

    /**
     * Configuration options when `destination` is `snowflake`. See `snowflake_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="snowflakeConfiguration", flag="unknown_snowflakeConfiguration")
    private FirehoseDeliveryStreamSnowflakeConfigurationArgs value_snowflakeConfiguration;
    private boolean unknown_snowflakeConfiguration;
    public FirehoseDeliveryStreamSnowflakeConfigurationArgs snowflakeConfiguration() {
        if (!unknown_snowflakeConfiguration) return value_snowflakeConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.snowflakeConfiguration' is not present");
    }

    /**
     * Configuration options when `destination` is `splunk`. See `splunk_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="splunkConfiguration", flag="unknown_splunkConfiguration")
    private FirehoseDeliveryStreamSplunkConfigurationArgs value_splunkConfiguration;
    private boolean unknown_splunkConfiguration;
    public FirehoseDeliveryStreamSplunkConfigurationArgs splunkConfiguration() {
        if (!unknown_splunkConfiguration) return value_splunkConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.splunkConfiguration' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.tags' is not present");
    }

    @PolicyResourceProperty(name="versionId", flag="unknown_versionId")
    private String value_versionId;
    private boolean unknown_versionId;
    public String versionId() {
        if (!unknown_versionId) return value_versionId;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamArgs.versionId' is not present");
    }

}
