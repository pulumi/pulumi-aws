// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.grafana;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:grafana/workspaceSamlConfiguration:WorkspaceSamlConfiguration")
public final class WorkspaceSamlConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The admin role values.
     * 
     */
    @PolicyResourceProperty(name="adminRoleValues", flag="unknown_adminRoleValues")
    private @Nullable List<String> value_adminRoleValues;
    private boolean unknown_adminRoleValues;
    public @Nullable List<String> adminRoleValues() {
        if (!unknown_adminRoleValues) return value_adminRoleValues;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.adminRoleValues' is not present");
    }

    /**
     * The allowed organizations.
     * 
     */
    @PolicyResourceProperty(name="allowedOrganizations", flag="unknown_allowedOrganizations")
    private @Nullable List<String> value_allowedOrganizations;
    private boolean unknown_allowedOrganizations;
    public @Nullable List<String> allowedOrganizations() {
        if (!unknown_allowedOrganizations) return value_allowedOrganizations;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.allowedOrganizations' is not present");
    }

    /**
     * The editor role values.
     * 
     */
    @PolicyResourceProperty(name="editorRoleValues", flag="unknown_editorRoleValues")
    private List<String> value_editorRoleValues;
    private boolean unknown_editorRoleValues;
    public List<String> editorRoleValues() {
        if (!unknown_editorRoleValues) return value_editorRoleValues;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.editorRoleValues' is not present");
    }

    /**
     * The email assertion.
     * 
     */
    @PolicyResourceProperty(name="emailAssertion", flag="unknown_emailAssertion")
    private String value_emailAssertion;
    private boolean unknown_emailAssertion;
    public String emailAssertion() {
        if (!unknown_emailAssertion) return value_emailAssertion;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.emailAssertion' is not present");
    }

    /**
     * The groups assertion.
     * 
     */
    @PolicyResourceProperty(name="groupsAssertion", flag="unknown_groupsAssertion")
    private @Nullable String value_groupsAssertion;
    private boolean unknown_groupsAssertion;
    public @Nullable String groupsAssertion() {
        if (!unknown_groupsAssertion) return value_groupsAssertion;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.groupsAssertion' is not present");
    }

    /**
     * The IDP Metadata URL. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
     * 
     */
    @PolicyResourceProperty(name="idpMetadataUrl", flag="unknown_idpMetadataUrl")
    private @Nullable String value_idpMetadataUrl;
    private boolean unknown_idpMetadataUrl;
    public @Nullable String idpMetadataUrl() {
        if (!unknown_idpMetadataUrl) return value_idpMetadataUrl;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.idpMetadataUrl' is not present");
    }

    /**
     * The IDP Metadata XML. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
     * 
     */
    @PolicyResourceProperty(name="idpMetadataXml", flag="unknown_idpMetadataXml")
    private @Nullable String value_idpMetadataXml;
    private boolean unknown_idpMetadataXml;
    public @Nullable String idpMetadataXml() {
        if (!unknown_idpMetadataXml) return value_idpMetadataXml;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.idpMetadataXml' is not present");
    }

    /**
     * The login assertion.
     * 
     */
    @PolicyResourceProperty(name="loginAssertion", flag="unknown_loginAssertion")
    private String value_loginAssertion;
    private boolean unknown_loginAssertion;
    public String loginAssertion() {
        if (!unknown_loginAssertion) return value_loginAssertion;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.loginAssertion' is not present");
    }

    /**
     * The login validity duration.
     * 
     */
    @PolicyResourceProperty(name="loginValidityDuration", flag="unknown_loginValidityDuration")
    private Integer value_loginValidityDuration;
    private boolean unknown_loginValidityDuration;
    public Integer loginValidityDuration() {
        if (!unknown_loginValidityDuration) return value_loginValidityDuration;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.loginValidityDuration' is not present");
    }

    /**
     * The name assertion.
     * 
     */
    @PolicyResourceProperty(name="nameAssertion", flag="unknown_nameAssertion")
    private String value_nameAssertion;
    private boolean unknown_nameAssertion;
    public String nameAssertion() {
        if (!unknown_nameAssertion) return value_nameAssertion;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.nameAssertion' is not present");
    }

    /**
     * The org assertion.
     * 
     */
    @PolicyResourceProperty(name="orgAssertion", flag="unknown_orgAssertion")
    private @Nullable String value_orgAssertion;
    private boolean unknown_orgAssertion;
    public @Nullable String orgAssertion() {
        if (!unknown_orgAssertion) return value_orgAssertion;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.orgAssertion' is not present");
    }

    /**
     * The role assertion.
     * 
     */
    @PolicyResourceProperty(name="roleAssertion", flag="unknown_roleAssertion")
    private @Nullable String value_roleAssertion;
    private boolean unknown_roleAssertion;
    public @Nullable String roleAssertion() {
        if (!unknown_roleAssertion) return value_roleAssertion;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.roleAssertion' is not present");
    }

    /**
     * The status of the SAML configuration.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.status' is not present");
    }

    /**
     * The workspace id.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="workspaceId", flag="unknown_workspaceId")
    private String value_workspaceId;
    private boolean unknown_workspaceId;
    public String workspaceId() {
        if (!unknown_workspaceId) return value_workspaceId;
        throw new UndeferrableValueException("Value 'WorkspaceSamlConfiguration.workspaceId' is not present");
    }

}
