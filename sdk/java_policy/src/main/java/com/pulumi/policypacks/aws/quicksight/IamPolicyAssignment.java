// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.outputs.IamPolicyAssignmentIdentities;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/iamPolicyAssignment:IamPolicyAssignment")
public final class IamPolicyAssignment extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Assignment ID.
     * 
     */
    @PolicyResourceProperty(name="assignmentId", flag="unknown_assignmentId")
    private String value_assignmentId;
    private boolean unknown_assignmentId;
    public String assignmentId() {
        if (!unknown_assignmentId) return value_assignmentId;
        throw new UndeferrableValueException("Value 'IamPolicyAssignment.assignmentId' is not present");
    }

    /**
     * Name of the assignment.
     * 
     */
    @PolicyResourceProperty(name="assignmentName", flag="unknown_assignmentName")
    private String value_assignmentName;
    private boolean unknown_assignmentName;
    public String assignmentName() {
        if (!unknown_assignmentName) return value_assignmentName;
        throw new UndeferrableValueException("Value 'IamPolicyAssignment.assignmentName' is not present");
    }

    /**
     * Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="assignmentStatus", flag="unknown_assignmentStatus")
    private String value_assignmentStatus;
    private boolean unknown_assignmentStatus;
    public String assignmentStatus() {
        if (!unknown_assignmentStatus) return value_assignmentStatus;
        throw new UndeferrableValueException("Value 'IamPolicyAssignment.assignmentStatus' is not present");
    }

    /**
     * AWS account ID.
     * 
     */
    @PolicyResourceProperty(name="awsAccountId", flag="unknown_awsAccountId")
    private String value_awsAccountId;
    private boolean unknown_awsAccountId;
    public String awsAccountId() {
        if (!unknown_awsAccountId) return value_awsAccountId;
        throw new UndeferrableValueException("Value 'IamPolicyAssignment.awsAccountId' is not present");
    }

    /**
     * Amazon QuickSight users, groups, or both to assign the policy to. See `identities` block.
     * 
     */
    @PolicyResourceProperty(name="identities", flag="unknown_identities")
    private @Nullable IamPolicyAssignmentIdentities value_identities;
    private boolean unknown_identities;
    public @Nullable IamPolicyAssignmentIdentities identities() {
        if (!unknown_identities) return value_identities;
        throw new UndeferrableValueException("Value 'IamPolicyAssignment.identities' is not present");
    }

    /**
     * Namespace that contains the assignment. Defaults to `default`.
     * 
     */
    @PolicyResourceProperty(name="namespace", flag="unknown_namespace")
    private String value_namespace;
    private boolean unknown_namespace;
    public String namespace() {
        if (!unknown_namespace) return value_namespace;
        throw new UndeferrableValueException("Value 'IamPolicyAssignment.namespace' is not present");
    }

    /**
     * ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
     * 
     */
    @PolicyResourceProperty(name="policyArn", flag="unknown_policyArn")
    private @Nullable String value_policyArn;
    private boolean unknown_policyArn;
    public @Nullable String policyArn() {
        if (!unknown_policyArn) return value_policyArn;
        throw new UndeferrableValueException("Value 'IamPolicyAssignment.policyArn' is not present");
    }

}
