// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class GroupMixedInstancesPolicyInstancesDistributionArgs {

    /**
     * Strategy to use when launching on-demand instances. Valid values: `prioritized`, `lowest-price`. Default: `prioritized`.
     * 
     */
    @PolicyResourceProperty(name="onDemandAllocationStrategy", flag="unknown_onDemandAllocationStrategy")
    private String value_onDemandAllocationStrategy;
    private boolean unknown_onDemandAllocationStrategy;
    public String onDemandAllocationStrategy() {
        if (!unknown_onDemandAllocationStrategy) return value_onDemandAllocationStrategy;
        throw new UndeferrableValueException("Value 'GroupMixedInstancesPolicyInstancesDistributionArgs.onDemandAllocationStrategy' is not present");
    }

    /**
     * Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
     * 
     */
    @PolicyResourceProperty(name="onDemandBaseCapacity", flag="unknown_onDemandBaseCapacity")
    private Integer value_onDemandBaseCapacity;
    private boolean unknown_onDemandBaseCapacity;
    public Integer onDemandBaseCapacity() {
        if (!unknown_onDemandBaseCapacity) return value_onDemandBaseCapacity;
        throw new UndeferrableValueException("Value 'GroupMixedInstancesPolicyInstancesDistributionArgs.onDemandBaseCapacity' is not present");
    }

    /**
     * Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
     * 
     */
    @PolicyResourceProperty(name="onDemandPercentageAboveBaseCapacity", flag="unknown_onDemandPercentageAboveBaseCapacity")
    private Integer value_onDemandPercentageAboveBaseCapacity;
    private boolean unknown_onDemandPercentageAboveBaseCapacity;
    public Integer onDemandPercentageAboveBaseCapacity() {
        if (!unknown_onDemandPercentageAboveBaseCapacity) return value_onDemandPercentageAboveBaseCapacity;
        throw new UndeferrableValueException("Value 'GroupMixedInstancesPolicyInstancesDistributionArgs.onDemandPercentageAboveBaseCapacity' is not present");
    }

    /**
     * How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`, `capacity-optimized-prioritized`, and `price-capacity-optimized`. Default: `lowest-price`.
     * 
     */
    @PolicyResourceProperty(name="spotAllocationStrategy", flag="unknown_spotAllocationStrategy")
    private String value_spotAllocationStrategy;
    private boolean unknown_spotAllocationStrategy;
    public String spotAllocationStrategy() {
        if (!unknown_spotAllocationStrategy) return value_spotAllocationStrategy;
        throw new UndeferrableValueException("Value 'GroupMixedInstancesPolicyInstancesDistributionArgs.spotAllocationStrategy' is not present");
    }

    /**
     * Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Only available with `spot_allocation_strategy` set to `lowest-price`. Otherwise it must be set to `0`, if it has been defined before. Default: `2`.
     * 
     */
    @PolicyResourceProperty(name="spotInstancePools", flag="unknown_spotInstancePools")
    private Integer value_spotInstancePools;
    private boolean unknown_spotInstancePools;
    public Integer spotInstancePools() {
        if (!unknown_spotInstancePools) return value_spotInstancePools;
        throw new UndeferrableValueException("Value 'GroupMixedInstancesPolicyInstancesDistributionArgs.spotInstancePools' is not present");
    }

    /**
     * Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
     * 
     */
    @PolicyResourceProperty(name="spotMaxPrice", flag="unknown_spotMaxPrice")
    private String value_spotMaxPrice;
    private boolean unknown_spotMaxPrice;
    public String spotMaxPrice() {
        if (!unknown_spotMaxPrice) return value_spotMaxPrice;
        throw new UndeferrableValueException("Value 'GroupMixedInstancesPolicyInstancesDistributionArgs.spotMaxPrice' is not present");
    }

}
