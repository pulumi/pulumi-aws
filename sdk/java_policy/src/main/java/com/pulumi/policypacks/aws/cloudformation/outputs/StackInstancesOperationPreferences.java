// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudformation.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class StackInstancesOperationPreferences {

    /**
     * How the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
     * 
     */
    private @Nullable UndeferrableValue<String> concurrencyMode;

    public @Nullable String concurrencyMode() {
        if (concurrencyMode == null) return null;
        return concurrencyMode.getValue("StackInstancesOperationPreferences.concurrencyMode");
    }

    /**
     * Number of accounts, per region, for which this operation can fail before CloudFormation stops the operation in that region.
     * 
     */
    private @Nullable UndeferrableValue<Integer> failureToleranceCount;

    public @Nullable Integer failureToleranceCount() {
        if (failureToleranceCount == null) return null;
        return failureToleranceCount.getValue("StackInstancesOperationPreferences.failureToleranceCount");
    }

    /**
     * Percentage of accounts, per region, for which this stack operation can fail before CloudFormation stops the operation in that region.
     * 
     */
    private @Nullable UndeferrableValue<Integer> failureTolerancePercentage;

    public @Nullable Integer failureTolerancePercentage() {
        if (failureTolerancePercentage == null) return null;
        return failureTolerancePercentage.getValue("StackInstancesOperationPreferences.failureTolerancePercentage");
    }

    /**
     * Maximum number of accounts in which to perform this operation at one time.
     * 
     */
    private @Nullable UndeferrableValue<Integer> maxConcurrentCount;

    public @Nullable Integer maxConcurrentCount() {
        if (maxConcurrentCount == null) return null;
        return maxConcurrentCount.getValue("StackInstancesOperationPreferences.maxConcurrentCount");
    }

    /**
     * Maximum percentage of accounts in which to perform this operation at one time.
     * 
     */
    private @Nullable UndeferrableValue<Integer> maxConcurrentPercentage;

    public @Nullable Integer maxConcurrentPercentage() {
        if (maxConcurrentPercentage == null) return null;
        return maxConcurrentPercentage.getValue("StackInstancesOperationPreferences.maxConcurrentPercentage");
    }

    /**
     * Concurrency type of deploying stack sets operations in regions, could be in parallel or one region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
     * 
     */
    private @Nullable UndeferrableValue<String> regionConcurrencyType;

    public @Nullable String regionConcurrencyType() {
        if (regionConcurrencyType == null) return null;
        return regionConcurrencyType.getValue("StackInstancesOperationPreferences.regionConcurrencyType");
    }

    /**
     * Order of the regions where you want to perform the stack operation.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> regionOrders;

    public @Nullable List<String> regionOrders() {
        if (regionOrders == null) return null;
        return regionOrders.getValue("StackInstancesOperationPreferences.regionOrders");
    }

}
