// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53domains;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.route53domains.inputs.RegisteredDomainAdminContactArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.RegisteredDomainBillingContactArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.RegisteredDomainNameServerArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.RegisteredDomainRegistrantContactArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.RegisteredDomainTechContactArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:route53domains/registeredDomain:RegisteredDomain")
public final class RegisteredDomainArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Details about the domain administrative contact. See Contact Blocks for more details.
     * 
     */
    @PolicyResourceProperty(name="adminContact", flag="unknown_adminContact")
    private RegisteredDomainAdminContactArgs value_adminContact;
    private boolean unknown_adminContact;
    public RegisteredDomainAdminContactArgs adminContact() {
        if (!unknown_adminContact) return value_adminContact;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.adminContact' is not present");
    }

    /**
     * Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
     * 
     */
    @PolicyResourceProperty(name="adminPrivacy", flag="unknown_adminPrivacy")
    private Boolean value_adminPrivacy;
    private boolean unknown_adminPrivacy;
    public Boolean adminPrivacy() {
        if (!unknown_adminPrivacy) return value_adminPrivacy;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.adminPrivacy' is not present");
    }

    /**
     * Whether the domain registration is set to renew automatically. Default: `true`.
     * 
     */
    @PolicyResourceProperty(name="autoRenew", flag="unknown_autoRenew")
    private Boolean value_autoRenew;
    private boolean unknown_autoRenew;
    public Boolean autoRenew() {
        if (!unknown_autoRenew) return value_autoRenew;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.autoRenew' is not present");
    }

    /**
     * Details about the domain billing contact. See Contact Blocks for more details.
     * 
     */
    @PolicyResourceProperty(name="billingContact", flag="unknown_billingContact")
    private RegisteredDomainBillingContactArgs value_billingContact;
    private boolean unknown_billingContact;
    public RegisteredDomainBillingContactArgs billingContact() {
        if (!unknown_billingContact) return value_billingContact;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.billingContact' is not present");
    }

    /**
     * Whether domain billing contact information is concealed from WHOIS queries. Default: `true`.
     * 
     */
    @PolicyResourceProperty(name="billingPrivacy", flag="unknown_billingPrivacy")
    private Boolean value_billingPrivacy;
    private boolean unknown_billingPrivacy;
    public Boolean billingPrivacy() {
        if (!unknown_billingPrivacy) return value_billingPrivacy;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.billingPrivacy' is not present");
    }

    /**
     * The name of the registered domain.
     * 
     */
    @PolicyResourceProperty(name="domainName", flag="unknown_domainName")
    private String value_domainName;
    private boolean unknown_domainName;
    public String domainName() {
        if (!unknown_domainName) return value_domainName;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.domainName' is not present");
    }

    /**
     * The list of nameservers for the domain. See `name_server` Blocks for more details.
     * 
     */
    @PolicyResourceProperty(name="nameServers", flag="unknown_nameServers")
    private List<RegisteredDomainNameServerArgs> value_nameServers;
    private boolean unknown_nameServers;
    public List<RegisteredDomainNameServerArgs> nameServers() {
        if (!unknown_nameServers) return value_nameServers;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.nameServers' is not present");
    }

    /**
     * Details about the domain registrant. See Contact Blocks for more details.
     * 
     */
    @PolicyResourceProperty(name="registrantContact", flag="unknown_registrantContact")
    private RegisteredDomainRegistrantContactArgs value_registrantContact;
    private boolean unknown_registrantContact;
    public RegisteredDomainRegistrantContactArgs registrantContact() {
        if (!unknown_registrantContact) return value_registrantContact;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.registrantContact' is not present");
    }

    /**
     * Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
     * 
     */
    @PolicyResourceProperty(name="registrantPrivacy", flag="unknown_registrantPrivacy")
    private Boolean value_registrantPrivacy;
    private boolean unknown_registrantPrivacy;
    public Boolean registrantPrivacy() {
        if (!unknown_registrantPrivacy) return value_registrantPrivacy;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.registrantPrivacy' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.tags' is not present");
    }

    /**
     * Details about the domain technical contact. See Contact Blocks for more details.
     * 
     */
    @PolicyResourceProperty(name="techContact", flag="unknown_techContact")
    private RegisteredDomainTechContactArgs value_techContact;
    private boolean unknown_techContact;
    public RegisteredDomainTechContactArgs techContact() {
        if (!unknown_techContact) return value_techContact;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.techContact' is not present");
    }

    /**
     * Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
     * 
     */
    @PolicyResourceProperty(name="techPrivacy", flag="unknown_techPrivacy")
    private Boolean value_techPrivacy;
    private boolean unknown_techPrivacy;
    public Boolean techPrivacy() {
        if (!unknown_techPrivacy) return value_techPrivacy;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.techPrivacy' is not present");
    }

    /**
     * Whether the domain is locked for transfer. Default: `true`.
     * 
     */
    @PolicyResourceProperty(name="transferLock", flag="unknown_transferLock")
    private Boolean value_transferLock;
    private boolean unknown_transferLock;
    public Boolean transferLock() {
        if (!unknown_transferLock) return value_transferLock;
        throw new UndeferrableValueException("Value 'RegisteredDomainArgs.transferLock' is not present");
    }

}
