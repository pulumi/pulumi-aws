// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opsworks;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.opsworks.inputs.MemcachedLayerCloudwatchConfigurationArgs;
import com.pulumi.policypacks.aws.opsworks.inputs.MemcachedLayerEbsVolumeArgs;
import com.pulumi.policypacks.aws.opsworks.inputs.MemcachedLayerLoadBasedAutoScalingArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:opsworks/memcachedLayer:MemcachedLayer")
public final class MemcachedLayerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Amount of memory to allocate for the cache on each instance, in megabytes. Defaults to 512MB.
     * 
     */
    private UndeferrableValue<Integer> allocatedMemory;

    public Integer allocatedMemory() {
        if (allocatedMemory == null) return null;
        return allocatedMemory.getValue("MemcachedLayerArgs.allocatedMemory");
    }

    /**
     * Whether to automatically assign an elastic IP address to the layer&#39;s instances.
     * 
     */
    private UndeferrableValue<Boolean> autoAssignElasticIps;

    public Boolean autoAssignElasticIps() {
        if (autoAssignElasticIps == null) return null;
        return autoAssignElasticIps.getValue("MemcachedLayerArgs.autoAssignElasticIps");
    }

    /**
     * For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer&#39;s instances.
     * 
     */
    private UndeferrableValue<Boolean> autoAssignPublicIps;

    public Boolean autoAssignPublicIps() {
        if (autoAssignPublicIps == null) return null;
        return autoAssignPublicIps.getValue("MemcachedLayerArgs.autoAssignPublicIps");
    }

    /**
     * Whether to enable auto-healing for the layer.
     * 
     */
    private UndeferrableValue<Boolean> autoHealing;

    public Boolean autoHealing() {
        if (autoHealing == null) return null;
        return autoHealing.getValue("MemcachedLayerArgs.autoHealing");
    }

    private UndeferrableValue<MemcachedLayerCloudwatchConfigurationArgs> cloudwatchConfiguration;

    public MemcachedLayerCloudwatchConfigurationArgs cloudwatchConfiguration() {
        if (cloudwatchConfiguration == null) return null;
        return cloudwatchConfiguration.getValue("MemcachedLayerArgs.cloudwatchConfiguration");
    }

    private UndeferrableValue<List<String>> customConfigureRecipes;

    public List<String> customConfigureRecipes() {
        if (customConfigureRecipes == null) return null;
        return customConfigureRecipes.getValue("MemcachedLayerArgs.customConfigureRecipes");
    }

    private UndeferrableValue<List<String>> customDeployRecipes;

    public List<String> customDeployRecipes() {
        if (customDeployRecipes == null) return null;
        return customDeployRecipes.getValue("MemcachedLayerArgs.customDeployRecipes");
    }

    /**
     * The ARN of an IAM profile that will be used for the layer&#39;s instances.
     * 
     */
    private UndeferrableValue<String> customInstanceProfileArn;

    public String customInstanceProfileArn() {
        if (customInstanceProfileArn == null) return null;
        return customInstanceProfileArn.getValue("MemcachedLayerArgs.customInstanceProfileArn");
    }

    /**
     * Custom JSON attributes to apply to the layer.
     * 
     */
    private UndeferrableValue<String> customJson;

    public String customJson() {
        if (customJson == null) return null;
        return customJson.getValue("MemcachedLayerArgs.customJson");
    }

    /**
     * Ids for a set of security groups to apply to the layer&#39;s instances.
     * 
     */
    private UndeferrableValue<List<String>> customSecurityGroupIds;

    public List<String> customSecurityGroupIds() {
        if (customSecurityGroupIds == null) return null;
        return customSecurityGroupIds.getValue("MemcachedLayerArgs.customSecurityGroupIds");
    }

    private UndeferrableValue<List<String>> customSetupRecipes;

    public List<String> customSetupRecipes() {
        if (customSetupRecipes == null) return null;
        return customSetupRecipes.getValue("MemcachedLayerArgs.customSetupRecipes");
    }

    private UndeferrableValue<List<String>> customShutdownRecipes;

    public List<String> customShutdownRecipes() {
        if (customShutdownRecipes == null) return null;
        return customShutdownRecipes.getValue("MemcachedLayerArgs.customShutdownRecipes");
    }

    private UndeferrableValue<List<String>> customUndeployRecipes;

    public List<String> customUndeployRecipes() {
        if (customUndeployRecipes == null) return null;
        return customUndeployRecipes.getValue("MemcachedLayerArgs.customUndeployRecipes");
    }

    /**
     * Whether to enable Elastic Load Balancing connection draining.
     * 
     */
    private UndeferrableValue<Boolean> drainElbOnShutdown;

    public Boolean drainElbOnShutdown() {
        if (drainElbOnShutdown == null) return null;
        return drainElbOnShutdown.getValue("MemcachedLayerArgs.drainElbOnShutdown");
    }

    /**
     * `ebs_volume` blocks, as described below, will each create an EBS volume and connect it to the layer&#39;s instances.
     * 
     */
    private UndeferrableValue<List<MemcachedLayerEbsVolumeArgs>> ebsVolumes;

    public List<MemcachedLayerEbsVolumeArgs> ebsVolumes() {
        if (ebsVolumes == null) return null;
        return ebsVolumes.getValue("MemcachedLayerArgs.ebsVolumes");
    }

    /**
     * Name of an Elastic Load Balancer to attach to this layer
     * 
     */
    private UndeferrableValue<String> elasticLoadBalancer;

    public String elasticLoadBalancer() {
        if (elasticLoadBalancer == null) return null;
        return elasticLoadBalancer.getValue("MemcachedLayerArgs.elasticLoadBalancer");
    }

    /**
     * Whether to install OS and package updates on each instance when it boots.
     * 
     */
    private UndeferrableValue<Boolean> installUpdatesOnBoot;

    public Boolean installUpdatesOnBoot() {
        if (installUpdatesOnBoot == null) return null;
        return installUpdatesOnBoot.getValue("MemcachedLayerArgs.installUpdatesOnBoot");
    }

    /**
     * The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
     * 
     */
    private UndeferrableValue<Integer> instanceShutdownTimeout;

    public Integer instanceShutdownTimeout() {
        if (instanceShutdownTimeout == null) return null;
        return instanceShutdownTimeout.getValue("MemcachedLayerArgs.instanceShutdownTimeout");
    }

    private UndeferrableValue<MemcachedLayerLoadBasedAutoScalingArgs> loadBasedAutoScaling;

    public MemcachedLayerLoadBasedAutoScalingArgs loadBasedAutoScaling() {
        if (loadBasedAutoScaling == null) return null;
        return loadBasedAutoScaling.getValue("MemcachedLayerArgs.loadBasedAutoScaling");
    }

    /**
     * A human-readable name for the layer.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("MemcachedLayerArgs.name");
    }

    /**
     * ID of the stack the layer will belong to.
     * 
     */
    private UndeferrableValue<String> stackId;

    public String stackId() {
        if (stackId == null) return null;
        return stackId.getValue("MemcachedLayerArgs.stackId");
    }

    /**
     * Names of a set of system packages to install on the layer&#39;s instances.
     * 
     */
    private UndeferrableValue<List<String>> systemPackages;

    public List<String> systemPackages() {
        if (systemPackages == null) return null;
        return systemPackages.getValue("MemcachedLayerArgs.systemPackages");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * The following extra optional arguments, all lists of Chef recipe names, allow
     * custom Chef recipes to be applied to layer instances at the five different
     * lifecycle events, if custom cookbooks are enabled on the layer&#39;s stack:
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("MemcachedLayerArgs.tags");
    }

    /**
     * Whether to use EBS-optimized instances.
     * 
     */
    private UndeferrableValue<Boolean> useEbsOptimizedInstances;

    public Boolean useEbsOptimizedInstances() {
        if (useEbsOptimizedInstances == null) return null;
        return useEbsOptimizedInstances.getValue("MemcachedLayerArgs.useEbsOptimizedInstances");
    }

}
