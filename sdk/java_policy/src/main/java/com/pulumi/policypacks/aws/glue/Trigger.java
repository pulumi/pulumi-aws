// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.glue.outputs.TriggerAction;
import com.pulumi.policypacks.aws.glue.outputs.TriggerEventBatchingCondition;
import com.pulumi.policypacks.aws.glue.outputs.TriggerPredicate;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:glue/trigger:Trigger")
public final class Trigger extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * List of actions initiated by this trigger when it fires. See Actions Below.
     * 
     */
    @PolicyResourceProperty(name="actions", flag="unknown_actions")
    private List<TriggerAction> value_actions;
    private boolean unknown_actions;
    public List<TriggerAction> actions() {
        if (!unknown_actions) return value_actions;
        throw new UndeferrableValueException("Value 'Trigger.actions' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of Glue Trigger
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Trigger.arn' is not present");
    }

    /**
     * A description of the new trigger.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Trigger.description' is not present");
    }

    /**
     * Start the trigger. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private @Nullable Boolean value_enabled;
    private boolean unknown_enabled;
    public @Nullable Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'Trigger.enabled' is not present");
    }

    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
     * 
     */
    @PolicyResourceProperty(name="eventBatchingConditions", flag="unknown_eventBatchingConditions")
    private @Nullable List<TriggerEventBatchingCondition> value_eventBatchingConditions;
    private boolean unknown_eventBatchingConditions;
    public @Nullable List<TriggerEventBatchingCondition> eventBatchingConditions() {
        if (!unknown_eventBatchingConditions) return value_eventBatchingConditions;
        throw new UndeferrableValueException("Value 'Trigger.eventBatchingConditions' is not present");
    }

    /**
     * The name of the trigger.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Trigger.name' is not present");
    }

    /**
     * A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
     * 
     */
    @PolicyResourceProperty(name="predicate", flag="unknown_predicate")
    private @Nullable TriggerPredicate value_predicate;
    private boolean unknown_predicate;
    public @Nullable TriggerPredicate predicate() {
        if (!unknown_predicate) return value_predicate;
        throw new UndeferrableValueException("Value 'Trigger.predicate' is not present");
    }

    /**
     * A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
     * 
     */
    @PolicyResourceProperty(name="schedule", flag="unknown_schedule")
    private @Nullable String value_schedule;
    private boolean unknown_schedule;
    public @Nullable String schedule() {
        if (!unknown_schedule) return value_schedule;
        throw new UndeferrableValueException("Value 'Trigger.schedule' is not present");
    }

    /**
     * Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
     * 
     */
    @PolicyResourceProperty(name="startOnCreation", flag="unknown_startOnCreation")
    private @Nullable Boolean value_startOnCreation;
    private boolean unknown_startOnCreation;
    public @Nullable Boolean startOnCreation() {
        if (!unknown_startOnCreation) return value_startOnCreation;
        throw new UndeferrableValueException("Value 'Trigger.startOnCreation' is not present");
    }

    /**
     * The current state of the trigger.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'Trigger.state' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Trigger.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Trigger.tagsAll' is not present");
    }

    /**
     * The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Trigger.type' is not present");
    }

    /**
     * A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
     * 
     */
    @PolicyResourceProperty(name="workflowName", flag="unknown_workflowName")
    private @Nullable String value_workflowName;
    private boolean unknown_workflowName;
    public @Nullable String workflowName() {
        if (!unknown_workflowName) return value_workflowName;
        throw new UndeferrableValueException("Value 'Trigger.workflowName' is not present");
    }

}
