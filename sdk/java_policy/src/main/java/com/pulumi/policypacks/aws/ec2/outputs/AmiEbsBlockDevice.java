// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class AmiEbsBlockDevice {

    /**
     * Boolean controlling whether the EBS volumes created to
     * support each created instance will be deleted once that instance is terminated.
     * 
     */
    @PolicyResourceProperty(name="deleteOnTermination", flag="unknown_deleteOnTermination")
    private @Nullable Boolean value_deleteOnTermination;
    private boolean unknown_deleteOnTermination;
    public @Nullable Boolean deleteOnTermination() {
        if (!unknown_deleteOnTermination) return value_deleteOnTermination;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.deleteOnTermination' is not present");
    }

    /**
     * Path at which the device is exposed to created instances.
     * 
     */
    @PolicyResourceProperty(name="deviceName", flag="unknown_deviceName")
    private String value_deviceName;
    private boolean unknown_deviceName;
    public String deviceName() {
        if (!unknown_deviceName) return value_deviceName;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.deviceName' is not present");
    }

    /**
     * Boolean controlling whether the created EBS volumes will be encrypted. Can&#39;t be used with `snapshot_id`.
     * 
     */
    @PolicyResourceProperty(name="encrypted", flag="unknown_encrypted")
    private @Nullable Boolean value_encrypted;
    private boolean unknown_encrypted;
    public @Nullable Boolean encrypted() {
        if (!unknown_encrypted) return value_encrypted;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.encrypted' is not present");
    }

    /**
     * Number of I/O operations per second the
     * created volumes will support.
     * 
     */
    @PolicyResourceProperty(name="iops", flag="unknown_iops")
    private @Nullable Integer value_iops;
    private boolean unknown_iops;
    public @Nullable Integer iops() {
        if (!unknown_iops) return value_iops;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.iops' is not present");
    }

    /**
     * ARN of the Outpost on which the snapshot is stored.
     * 
     * &gt; **Note:** You can specify `encrypted` or `snapshot_id` but not both.
     * 
     */
    @PolicyResourceProperty(name="outpostArn", flag="unknown_outpostArn")
    private @Nullable String value_outpostArn;
    private boolean unknown_outpostArn;
    public @Nullable String outpostArn() {
        if (!unknown_outpostArn) return value_outpostArn;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.outpostArn' is not present");
    }

    /**
     * ID of an EBS snapshot that will be used to initialize the created
     * EBS volumes. If set, the `volume_size` attribute must be at least as large as the referenced
     * snapshot.
     * 
     */
    @PolicyResourceProperty(name="snapshotId", flag="unknown_snapshotId")
    private @Nullable String value_snapshotId;
    private boolean unknown_snapshotId;
    public @Nullable String snapshotId() {
        if (!unknown_snapshotId) return value_snapshotId;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.snapshotId' is not present");
    }

    /**
     * Throughput that the EBS volume supports, in MiB/s. Only valid for `volume_type` of `gp3`.
     * 
     */
    @PolicyResourceProperty(name="throughput", flag="unknown_throughput")
    private @Nullable Integer value_throughput;
    private boolean unknown_throughput;
    public @Nullable Integer throughput() {
        if (!unknown_throughput) return value_throughput;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.throughput' is not present");
    }

    /**
     * Size of created volumes in GiB.
     * If `snapshot_id` is set and `volume_size` is omitted then the volume will have the same size
     * as the selected snapshot.
     * 
     */
    @PolicyResourceProperty(name="volumeSize", flag="unknown_volumeSize")
    private @Nullable Integer value_volumeSize;
    private boolean unknown_volumeSize;
    public @Nullable Integer volumeSize() {
        if (!unknown_volumeSize) return value_volumeSize;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.volumeSize' is not present");
    }

    /**
     * Type of EBS volume to create. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `standard`).
     * 
     */
    @PolicyResourceProperty(name="volumeType", flag="unknown_volumeType")
    private @Nullable String value_volumeType;
    private boolean unknown_volumeType;
    public @Nullable String volumeType() {
        if (!unknown_volumeType) return value_volumeType;
        throw new UndeferrableValueException("Value 'AmiEbsBlockDevice.volumeType' is not present");
    }

}
