// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.securitylake;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.securitylake.outputs.DataLakeConfiguration;
import com.pulumi.policypacks.aws.securitylake.outputs.DataLakeTimeouts;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:securitylake/dataLake:DataLake")
public final class DataLake extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Data Lake.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("DataLake.arn");
    }

    /**
     * Specify the Region or Regions that will contribute data to the rollup region.
     * 
     */
    private @Nullable UndeferrableValue<DataLakeConfiguration> configuration;

    public @Nullable DataLakeConfiguration configuration() {
        if (configuration == null) return null;
        return configuration.getValue("DataLake.configuration");
    }

    /**
     * The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
     * 
     */
    private UndeferrableValue<String> metaStoreManagerRoleArn;

    public String metaStoreManagerRoleArn() {
        if (metaStoreManagerRoleArn == null) return null;
        return metaStoreManagerRoleArn.getValue("DataLake.metaStoreManagerRoleArn");
    }

    /**
     * The ARN for the Amazon Security Lake Amazon S3 bucket.
     * 
     */
    private UndeferrableValue<String> s3BucketArn;

    public String s3BucketArn() {
        if (s3BucketArn == null) return null;
        return s3BucketArn.getValue("DataLake.s3BucketArn");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DataLake.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("DataLake.tagsAll");
    }

    private @Nullable UndeferrableValue<DataLakeTimeouts> timeouts;

    public @Nullable DataLakeTimeouts timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("DataLake.timeouts");
    }

}
