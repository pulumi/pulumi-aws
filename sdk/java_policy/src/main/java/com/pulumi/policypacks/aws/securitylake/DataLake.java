// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.securitylake;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.securitylake.outputs.DataLakeConfiguration;
import com.pulumi.policypacks.aws.securitylake.outputs.DataLakeTimeouts;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:securitylake/dataLake:DataLake")
public final class DataLake extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Data Lake.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'DataLake.arn' is not present");
    }

    /**
     * Specify the Region or Regions that will contribute data to the rollup region.
     * 
     */
    @PolicyResourceProperty(name="configuration", flag="unknown_configuration")
    private @Nullable DataLakeConfiguration value_configuration;
    private boolean unknown_configuration;
    public @Nullable DataLakeConfiguration configuration() {
        if (!unknown_configuration) return value_configuration;
        throw new UndeferrableValueException("Value 'DataLake.configuration' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
     * 
     */
    @PolicyResourceProperty(name="metaStoreManagerRoleArn", flag="unknown_metaStoreManagerRoleArn")
    private String value_metaStoreManagerRoleArn;
    private boolean unknown_metaStoreManagerRoleArn;
    public String metaStoreManagerRoleArn() {
        if (!unknown_metaStoreManagerRoleArn) return value_metaStoreManagerRoleArn;
        throw new UndeferrableValueException("Value 'DataLake.metaStoreManagerRoleArn' is not present");
    }

    /**
     * The ARN for the Amazon Security Lake Amazon S3 bucket.
     * 
     */
    @PolicyResourceProperty(name="s3BucketArn", flag="unknown_s3BucketArn")
    private String value_s3BucketArn;
    private boolean unknown_s3BucketArn;
    public String s3BucketArn() {
        if (!unknown_s3BucketArn) return value_s3BucketArn;
        throw new UndeferrableValueException("Value 'DataLake.s3BucketArn' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'DataLake.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'DataLake.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable DataLakeTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable DataLakeTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'DataLake.timeouts' is not present");
    }

}
