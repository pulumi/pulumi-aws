// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ebs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ebs/volume:Volume")
public final class Volume extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Volume ARN (e.g., arn:aws:ec2:us-east-1:123456789012:volume/vol-59fcb34e).
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Volume.arn' is not present");
    }

    /**
     * Availability zone where the EBS volume will exist.
     * 
     */
    @PolicyResourceProperty(name="availabilityZone", flag="unknown_availabilityZone")
    private String value_availabilityZone;
    private boolean unknown_availabilityZone;
    public String availabilityZone() {
        if (!unknown_availabilityZone) return value_availabilityZone;
        throw new UndeferrableValueException("Value 'Volume.availabilityZone' is not present");
    }

    /**
     * Timestamp when volume creation was initiated.
     * 
     */
    @PolicyResourceProperty(name="createTime", flag="unknown_createTime")
    private String value_createTime;
    private boolean unknown_createTime;
    public String createTime() {
        if (!unknown_createTime) return value_createTime;
        throw new UndeferrableValueException("Value 'Volume.createTime' is not present");
    }

    /**
     * If true, the disk will be encrypted.
     * 
     */
    @PolicyResourceProperty(name="encrypted", flag="unknown_encrypted")
    private Boolean value_encrypted;
    private boolean unknown_encrypted;
    public Boolean encrypted() {
        if (!unknown_encrypted) return value_encrypted;
        throw new UndeferrableValueException("Value 'Volume.encrypted' is not present");
    }

    /**
     * If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
     * 
     */
    @PolicyResourceProperty(name="finalSnapshot", flag="unknown_finalSnapshot")
    private @Nullable Boolean value_finalSnapshot;
    private boolean unknown_finalSnapshot;
    public @Nullable Boolean finalSnapshot() {
        if (!unknown_finalSnapshot) return value_finalSnapshot;
        throw new UndeferrableValueException("Value 'Volume.finalSnapshot' is not present");
    }

    /**
     * Amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
     * 
     */
    @PolicyResourceProperty(name="iops", flag="unknown_iops")
    private Integer value_iops;
    private boolean unknown_iops;
    public Integer iops() {
        if (!unknown_iops) return value_iops;
        throw new UndeferrableValueException("Value 'Volume.iops' is not present");
    }

    /**
     * ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'Volume.kmsKeyId' is not present");
    }

    /**
     * Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
     * 
     */
    @PolicyResourceProperty(name="multiAttachEnabled", flag="unknown_multiAttachEnabled")
    private @Nullable Boolean value_multiAttachEnabled;
    private boolean unknown_multiAttachEnabled;
    public @Nullable Boolean multiAttachEnabled() {
        if (!unknown_multiAttachEnabled) return value_multiAttachEnabled;
        throw new UndeferrableValueException("Value 'Volume.multiAttachEnabled' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the Outpost.
     * 
     */
    @PolicyResourceProperty(name="outpostArn", flag="unknown_outpostArn")
    private @Nullable String value_outpostArn;
    private boolean unknown_outpostArn;
    public @Nullable String outpostArn() {
        if (!unknown_outpostArn) return value_outpostArn;
        throw new UndeferrableValueException("Value 'Volume.outpostArn' is not present");
    }

    /**
     * Size of the drive in GiBs.
     * 
     */
    @PolicyResourceProperty(name="size", flag="unknown_size")
    private Integer value_size;
    private boolean unknown_size;
    public Integer size() {
        if (!unknown_size) return value_size;
        throw new UndeferrableValueException("Value 'Volume.size' is not present");
    }

    /**
     * A snapshot to base the EBS volume off of.
     * 
     */
    @PolicyResourceProperty(name="snapshotId", flag="unknown_snapshotId")
    private String value_snapshotId;
    private boolean unknown_snapshotId;
    public String snapshotId() {
        if (!unknown_snapshotId) return value_snapshotId;
        throw new UndeferrableValueException("Value 'Volume.snapshotId' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Volume.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Volume.tagsAll' is not present");
    }

    /**
     * Throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
     * 
     */
    @PolicyResourceProperty(name="throughput", flag="unknown_throughput")
    private Integer value_throughput;
    private boolean unknown_throughput;
    public Integer throughput() {
        if (!unknown_throughput) return value_throughput;
        throw new UndeferrableValueException("Value 'Volume.throughput' is not present");
    }

    /**
     * Type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
     * 
     * &gt; **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Volume.type' is not present");
    }

}
