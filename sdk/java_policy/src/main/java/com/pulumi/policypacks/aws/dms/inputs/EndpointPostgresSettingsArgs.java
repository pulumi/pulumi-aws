// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class EndpointPostgresSettingsArgs {

    /**
     * For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
     * 
     */
    private UndeferrableValue<String> afterConnectScript;

    public String afterConnectScript() {
        if (afterConnectScript == null) return null;
        return afterConnectScript.getValue("EndpointPostgresSettingsArgs.afterConnectScript");
    }

    /**
     * The Babelfish for Aurora PostgreSQL database name for the endpoint.
     * 
     */
    private UndeferrableValue<String> babelfishDatabaseName;

    public String babelfishDatabaseName() {
        if (babelfishDatabaseName == null) return null;
        return babelfishDatabaseName.getValue("EndpointPostgresSettingsArgs.babelfishDatabaseName");
    }

    /**
     * To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
     * 
     */
    private UndeferrableValue<Boolean> captureDdls;

    public Boolean captureDdls() {
        if (captureDdls == null) return null;
        return captureDdls.getValue("EndpointPostgresSettingsArgs.captureDdls");
    }

    /**
     * Specifies the default behavior of the replication&#39;s handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
     * 
     */
    private UndeferrableValue<String> databaseMode;

    public String databaseMode() {
        if (databaseMode == null) return null;
        return databaseMode.getValue("EndpointPostgresSettingsArgs.databaseMode");
    }

    /**
     * Sets the schema in which the operational DDL database artifacts are created. Default is `public`.
     * 
     */
    private UndeferrableValue<String> ddlArtifactsSchema;

    public String ddlArtifactsSchema() {
        if (ddlArtifactsSchema == null) return null;
        return ddlArtifactsSchema.getValue("EndpointPostgresSettingsArgs.ddlArtifactsSchema");
    }

    /**
     * Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is `60`.
     * 
     */
    private UndeferrableValue<Integer> executeTimeout;

    public Integer executeTimeout() {
        if (executeTimeout == null) return null;
        return executeTimeout.getValue("EndpointPostgresSettingsArgs.executeTimeout");
    }

    /**
     * When set to `true`, this value causes a task to fail if the actual size of a LOB column is greater than the specified `LobMaxSize`. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> failTasksOnLobTruncation;

    public Boolean failTasksOnLobTruncation() {
        if (failTasksOnLobTruncation == null) return null;
        return failTasksOnLobTruncation.getValue("EndpointPostgresSettingsArgs.failTasksOnLobTruncation");
    }

    /**
     * The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
     * 
     */
    private UndeferrableValue<Boolean> heartbeatEnable;

    public Boolean heartbeatEnable() {
        if (heartbeatEnable == null) return null;
        return heartbeatEnable.getValue("EndpointPostgresSettingsArgs.heartbeatEnable");
    }

    /**
     * Sets the WAL heartbeat frequency (in minutes). Default value is `5`.
     * 
     */
    private UndeferrableValue<Integer> heartbeatFrequency;

    public Integer heartbeatFrequency() {
        if (heartbeatFrequency == null) return null;
        return heartbeatFrequency.getValue("EndpointPostgresSettingsArgs.heartbeatFrequency");
    }

    /**
     * Sets the schema in which the heartbeat artifacts are created. Default value is `public`.
     * 
     */
    private UndeferrableValue<String> heartbeatSchema;

    public String heartbeatSchema() {
        if (heartbeatSchema == null) return null;
        return heartbeatSchema.getValue("EndpointPostgresSettingsArgs.heartbeatSchema");
    }

    /**
     * You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is `false`.
     * 
     */
    private UndeferrableValue<Boolean> mapBooleanAsBoolean;

    public Boolean mapBooleanAsBoolean() {
        if (mapBooleanAsBoolean == null) return null;
        return mapBooleanAsBoolean.getValue("EndpointPostgresSettingsArgs.mapBooleanAsBoolean");
    }

    /**
     * Optional When true, DMS migrates JSONB values as CLOB.
     * 
     */
    private UndeferrableValue<Boolean> mapJsonbAsClob;

    public Boolean mapJsonbAsClob() {
        if (mapJsonbAsClob == null) return null;
        return mapJsonbAsClob.getValue("EndpointPostgresSettingsArgs.mapJsonbAsClob");
    }

    /**
     * Optional When true, DMS migrates LONG values as VARCHAR.
     * 
     */
    private UndeferrableValue<String> mapLongVarcharAs;

    public String mapLongVarcharAs() {
        if (mapLongVarcharAs == null) return null;
        return mapLongVarcharAs.getValue("EndpointPostgresSettingsArgs.mapLongVarcharAs");
    }

    /**
     * Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is `32,768 KB`.
     * 
     */
    private UndeferrableValue<Integer> maxFileSize;

    public Integer maxFileSize() {
        if (maxFileSize == null) return null;
        return maxFileSize.getValue("EndpointPostgresSettingsArgs.maxFileSize");
    }

    /**
     * Specifies the plugin to use to create a replication slot. Valid values: `pglogical`, `test_decoding`.
     * 
     */
    private UndeferrableValue<String> pluginName;

    public String pluginName() {
        if (pluginName == null) return null;
        return pluginName.getValue("EndpointPostgresSettingsArgs.pluginName");
    }

    /**
     * Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
     * 
     */
    private UndeferrableValue<String> slotName;

    public String slotName() {
        if (slotName == null) return null;
        return slotName.getValue("EndpointPostgresSettingsArgs.slotName");
    }

}
