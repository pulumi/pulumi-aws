// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.inputs.ReservedCacheNodeTimeoutsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticache/reservedCacheNode:ReservedCacheNode")
public final class ReservedCacheNodeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Number of cache node instances to reserve.
     * Default value is `1`.
     * 
     */
    @PolicyResourceProperty(name="cacheNodeCount", flag="unknown_cacheNodeCount")
    private Integer value_cacheNodeCount;
    private boolean unknown_cacheNodeCount;
    public Integer cacheNodeCount() {
        if (!unknown_cacheNodeCount) return value_cacheNodeCount;
        throw new UndeferrableValueException("Value 'ReservedCacheNodeArgs.cacheNodeCount' is not present");
    }

    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="reservedCacheNodesOfferingId", flag="unknown_reservedCacheNodesOfferingId")
    private String value_reservedCacheNodesOfferingId;
    private boolean unknown_reservedCacheNodesOfferingId;
    public String reservedCacheNodesOfferingId() {
        if (!unknown_reservedCacheNodesOfferingId) return value_reservedCacheNodesOfferingId;
        throw new UndeferrableValueException("Value 'ReservedCacheNodeArgs.reservedCacheNodesOfferingId' is not present");
    }

    /**
     * Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ReservedCacheNodeArgs.tags' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private ReservedCacheNodeTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public ReservedCacheNodeTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'ReservedCacheNodeArgs.timeouts' is not present");
    }

}
