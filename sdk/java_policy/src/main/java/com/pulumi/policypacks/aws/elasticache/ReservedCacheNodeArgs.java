// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.inputs.ReservedCacheNodeTimeoutsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticache/reservedCacheNode:ReservedCacheNode")
public final class ReservedCacheNodeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Number of cache node instances to reserve.
     * Default value is `1`.
     * 
     */
    private UndeferrableValue<Integer> cacheNodeCount;

    public Integer cacheNodeCount() {
        if (cacheNodeCount == null) return null;
        return cacheNodeCount.getValue("ReservedCacheNodeArgs.cacheNodeCount");
    }

    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> reservedCacheNodesOfferingId;

    public String reservedCacheNodesOfferingId() {
        if (reservedCacheNodesOfferingId == null) return null;
        return reservedCacheNodesOfferingId.getValue("ReservedCacheNodeArgs.reservedCacheNodesOfferingId");
    }

    /**
     * Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ReservedCacheNodeArgs.tags");
    }

    private UndeferrableValue<ReservedCacheNodeTimeoutsArgs> timeouts;

    public ReservedCacheNodeTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("ReservedCacheNodeArgs.timeouts");
    }

}
