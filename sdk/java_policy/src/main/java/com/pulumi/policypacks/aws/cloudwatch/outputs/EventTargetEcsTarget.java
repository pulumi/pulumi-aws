// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.cloudwatch.outputs.EventTargetEcsTargetCapacityProviderStrategy;
import com.pulumi.policypacks.aws.cloudwatch.outputs.EventTargetEcsTargetNetworkConfiguration;
import com.pulumi.policypacks.aws.cloudwatch.outputs.EventTargetEcsTargetOrderedPlacementStrategy;
import com.pulumi.policypacks.aws.cloudwatch.outputs.EventTargetEcsTargetPlacementConstraint;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class EventTargetEcsTarget {

    /**
     * The capacity provider strategy to use for the task. If a `capacity_provider_strategy` specified, the `launch_type` parameter must be omitted. If no `capacity_provider_strategy` or `launch_type` is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
     * 
     */
    @PolicyResourceProperty(name="capacityProviderStrategies", flag="unknown_capacityProviderStrategies")
    private @Nullable List<EventTargetEcsTargetCapacityProviderStrategy> value_capacityProviderStrategies;
    private boolean unknown_capacityProviderStrategies;
    public @Nullable List<EventTargetEcsTargetCapacityProviderStrategy> capacityProviderStrategies() {
        if (!unknown_capacityProviderStrategies) return value_capacityProviderStrategies;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.capacityProviderStrategies' is not present");
    }

    /**
     * Specifies whether to enable Amazon ECS managed tags for the task.
     * 
     */
    @PolicyResourceProperty(name="enableEcsManagedTags", flag="unknown_enableEcsManagedTags")
    private @Nullable Boolean value_enableEcsManagedTags;
    private boolean unknown_enableEcsManagedTags;
    public @Nullable Boolean enableEcsManagedTags() {
        if (!unknown_enableEcsManagedTags) return value_enableEcsManagedTags;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.enableEcsManagedTags' is not present");
    }

    /**
     * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
     * 
     */
    @PolicyResourceProperty(name="enableExecuteCommand", flag="unknown_enableExecuteCommand")
    private @Nullable Boolean value_enableExecuteCommand;
    private boolean unknown_enableExecuteCommand;
    public @Nullable Boolean enableExecuteCommand() {
        if (!unknown_enableExecuteCommand) return value_enableExecuteCommand;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.enableExecuteCommand' is not present");
    }

    /**
     * Specifies an ECS task group for the task. The maximum length is 255 characters.
     * 
     */
    @PolicyResourceProperty(name="group", flag="unknown_group")
    private @Nullable String value_group;
    private boolean unknown_group;
    public @Nullable String group() {
        if (!unknown_group) return value_group;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.group' is not present");
    }

    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: `EC2`, `EXTERNAL`, or `FARGATE`.
     * 
     */
    @PolicyResourceProperty(name="launchType", flag="unknown_launchType")
    private @Nullable String value_launchType;
    private boolean unknown_launchType;
    public @Nullable String launchType() {
        if (!unknown_launchType) return value_launchType;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.launchType' is not present");
    }

    /**
     * Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if `launch_type` is `FARGATE` because the awsvpc mode is required for Fargate tasks.
     * 
     */
    @PolicyResourceProperty(name="networkConfiguration", flag="unknown_networkConfiguration")
    private @Nullable EventTargetEcsTargetNetworkConfiguration value_networkConfiguration;
    private boolean unknown_networkConfiguration;
    public @Nullable EventTargetEcsTargetNetworkConfiguration networkConfiguration() {
        if (!unknown_networkConfiguration) return value_networkConfiguration;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.networkConfiguration' is not present");
    }

    /**
     * An array of placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
     * 
     */
    @PolicyResourceProperty(name="orderedPlacementStrategies", flag="unknown_orderedPlacementStrategies")
    private @Nullable List<EventTargetEcsTargetOrderedPlacementStrategy> value_orderedPlacementStrategies;
    private boolean unknown_orderedPlacementStrategies;
    public @Nullable List<EventTargetEcsTargetOrderedPlacementStrategy> orderedPlacementStrategies() {
        if (!unknown_orderedPlacementStrategies) return value_orderedPlacementStrategies;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.orderedPlacementStrategies' is not present");
    }

    /**
     * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
     * 
     */
    @PolicyResourceProperty(name="placementConstraints", flag="unknown_placementConstraints")
    private @Nullable List<EventTargetEcsTargetPlacementConstraint> value_placementConstraints;
    private boolean unknown_placementConstraints;
    public @Nullable List<EventTargetEcsTargetPlacementConstraint> placementConstraints() {
        if (!unknown_placementConstraints) return value_placementConstraints;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.placementConstraints' is not present");
    }

    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     * 
     */
    @PolicyResourceProperty(name="platformVersion", flag="unknown_platformVersion")
    private @Nullable String value_platformVersion;
    private boolean unknown_platformVersion;
    public @Nullable String platformVersion() {
        if (!unknown_platformVersion) return value_platformVersion;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.platformVersion' is not present");
    }

    /**
     * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. The only valid value is: `TASK_DEFINITION`.
     * 
     */
    @PolicyResourceProperty(name="propagateTags", flag="unknown_propagateTags")
    private @Nullable String value_propagateTags;
    private boolean unknown_propagateTags;
    public @Nullable String propagateTags() {
        if (!unknown_propagateTags) return value_propagateTags;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.propagateTags' is not present");
    }

    /**
     * A map of tags to assign to ecs resources.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.tags' is not present");
    }

    /**
     * The number of tasks to create based on the TaskDefinition. Defaults to `1`.
     * 
     */
    @PolicyResourceProperty(name="taskCount", flag="unknown_taskCount")
    private @Nullable Integer value_taskCount;
    private boolean unknown_taskCount;
    public @Nullable Integer taskCount() {
        if (!unknown_taskCount) return value_taskCount;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.taskCount' is not present");
    }

    /**
     * The ARN of the task definition to use if the event target is an Amazon ECS cluster.
     * 
     */
    @PolicyResourceProperty(name="taskDefinitionArn", flag="unknown_taskDefinitionArn")
    private String value_taskDefinitionArn;
    private boolean unknown_taskDefinitionArn;
    public String taskDefinitionArn() {
        if (!unknown_taskDefinitionArn) return value_taskDefinitionArn;
        throw new UndeferrableValueException("Value 'EventTargetEcsTarget.taskDefinitionArn' is not present");
    }

}
