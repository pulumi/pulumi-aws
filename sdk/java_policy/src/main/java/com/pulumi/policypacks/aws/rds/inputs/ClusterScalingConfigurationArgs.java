// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ClusterScalingConfigurationArgs {

    /**
     * Whether to enable automatic pause. A DB cluster can be paused only when it&#39;s idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> autoPause;

    public Boolean autoPause() {
        if (autoPause == null) return null;
        return autoPause.getValue("ClusterScalingConfigurationArgs.autoPause");
    }

    /**
     * Maximum capacity for an Aurora DB cluster in `serverless` DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `16`.
     * 
     */
    private UndeferrableValue<Integer> maxCapacity;

    public Integer maxCapacity() {
        if (maxCapacity == null) return null;
        return maxCapacity.getValue("ClusterScalingConfigurationArgs.maxCapacity");
    }

    /**
     * Minimum capacity for an Aurora DB cluster in `serverless` DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `1`.
     * 
     */
    private UndeferrableValue<Integer> minCapacity;

    public Integer minCapacity() {
        if (minCapacity == null) return null;
        return minCapacity.getValue("ClusterScalingConfigurationArgs.minCapacity");
    }

    /**
     * Amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action. Valid values are `60` through `600`. Defaults to `300`.
     * 
     */
    private UndeferrableValue<Integer> secondsBeforeTimeout;

    public Integer secondsBeforeTimeout() {
        if (secondsBeforeTimeout == null) return null;
        return secondsBeforeTimeout.getValue("ClusterScalingConfigurationArgs.secondsBeforeTimeout");
    }

    /**
     * Time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
     * 
     */
    private UndeferrableValue<Integer> secondsUntilAutoPause;

    public Integer secondsUntilAutoPause() {
        if (secondsUntilAutoPause == null) return null;
        return secondsUntilAutoPause.getValue("ClusterScalingConfigurationArgs.secondsUntilAutoPause");
    }

    /**
     * Action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v1.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
     * 
     */
    private UndeferrableValue<String> timeoutAction;

    public String timeoutAction() {
        if (timeoutAction == null) return null;
        return timeoutAction.getValue("ClusterScalingConfigurationArgs.timeoutAction");
    }

}
