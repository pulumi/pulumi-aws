// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerCatalogTargetArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerDeltaTargetArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerDynamodbTargetArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerHudiTargetArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerIcebergTargetArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerJdbcTargetArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerLakeFormationConfigurationArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerLineageConfigurationArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerMongodbTargetArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerRecrawlPolicyArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerS3TargetArgs;
import com.pulumi.policypacks.aws.glue.inputs.CrawlerSchemaChangePolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:glue/crawler:Crawler")
public final class CrawlerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * List of nested AWS Glue Data Catalog target arguments. See Catalog Target below.
     * 
     */
    private UndeferrableValue<List<CrawlerCatalogTargetArgs>> catalogTargets;

    public List<CrawlerCatalogTargetArgs> catalogTargets() {
        if (catalogTargets == null) return null;
        return catalogTargets.getValue("CrawlerArgs.catalogTargets");
    }

    /**
     * List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
     * 
     */
    private UndeferrableValue<List<String>> classifiers;

    public List<String> classifiers() {
        if (classifiers == null) return null;
        return classifiers.getValue("CrawlerArgs.classifiers");
    }

    /**
     * JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
     * 
     */
    private UndeferrableValue<String> configuration;

    public String configuration() {
        if (configuration == null) return null;
        return configuration.getValue("CrawlerArgs.configuration");
    }

    /**
     * Glue database where results are written.
     * 
     */
    private UndeferrableValue<String> databaseName;

    public String databaseName() {
        if (databaseName == null) return null;
        return databaseName.getValue("CrawlerArgs.databaseName");
    }

    /**
     * List of nested Delta Lake target arguments. See Delta Target below.
     * 
     */
    private UndeferrableValue<List<CrawlerDeltaTargetArgs>> deltaTargets;

    public List<CrawlerDeltaTargetArgs> deltaTargets() {
        if (deltaTargets == null) return null;
        return deltaTargets.getValue("CrawlerArgs.deltaTargets");
    }

    /**
     * Description of the crawler.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("CrawlerArgs.description");
    }

    /**
     * List of nested DynamoDB target arguments. See Dynamodb Target below.
     * 
     */
    private UndeferrableValue<List<CrawlerDynamodbTargetArgs>> dynamodbTargets;

    public List<CrawlerDynamodbTargetArgs> dynamodbTargets() {
        if (dynamodbTargets == null) return null;
        return dynamodbTargets.getValue("CrawlerArgs.dynamodbTargets");
    }

    /**
     * List of nested Hudi target arguments. See Iceberg Target below.
     * 
     */
    private UndeferrableValue<List<CrawlerHudiTargetArgs>> hudiTargets;

    public List<CrawlerHudiTargetArgs> hudiTargets() {
        if (hudiTargets == null) return null;
        return hudiTargets.getValue("CrawlerArgs.hudiTargets");
    }

    /**
     * List of nested Iceberg target arguments. See Iceberg Target below.
     * 
     */
    private UndeferrableValue<List<CrawlerIcebergTargetArgs>> icebergTargets;

    public List<CrawlerIcebergTargetArgs> icebergTargets() {
        if (icebergTargets == null) return null;
        return icebergTargets.getValue("CrawlerArgs.icebergTargets");
    }

    /**
     * List of nested JDBC target arguments. See JDBC Target below.
     * 
     */
    private UndeferrableValue<List<CrawlerJdbcTargetArgs>> jdbcTargets;

    public List<CrawlerJdbcTargetArgs> jdbcTargets() {
        if (jdbcTargets == null) return null;
        return jdbcTargets.getValue("CrawlerArgs.jdbcTargets");
    }

    /**
     * Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
     * 
     */
    private UndeferrableValue<CrawlerLakeFormationConfigurationArgs> lakeFormationConfiguration;

    public CrawlerLakeFormationConfigurationArgs lakeFormationConfiguration() {
        if (lakeFormationConfiguration == null) return null;
        return lakeFormationConfiguration.getValue("CrawlerArgs.lakeFormationConfiguration");
    }

    /**
     * Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
     * 
     */
    private UndeferrableValue<CrawlerLineageConfigurationArgs> lineageConfiguration;

    public CrawlerLineageConfigurationArgs lineageConfiguration() {
        if (lineageConfiguration == null) return null;
        return lineageConfiguration.getValue("CrawlerArgs.lineageConfiguration");
    }

    /**
     * List of nested MongoDB target arguments. See MongoDB Target below.
     * 
     */
    private UndeferrableValue<List<CrawlerMongodbTargetArgs>> mongodbTargets;

    public List<CrawlerMongodbTargetArgs> mongodbTargets() {
        if (mongodbTargets == null) return null;
        return mongodbTargets.getValue("CrawlerArgs.mongodbTargets");
    }

    /**
     * Name of the crawler.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("CrawlerArgs.name");
    }

    /**
     * A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
     * 
     */
    private UndeferrableValue<CrawlerRecrawlPolicyArgs> recrawlPolicy;

    public CrawlerRecrawlPolicyArgs recrawlPolicy() {
        if (recrawlPolicy == null) return null;
        return recrawlPolicy.getValue("CrawlerArgs.recrawlPolicy");
    }

    /**
     * The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
     * 
     */
    private UndeferrableValue<String> role;

    public String role() {
        if (role == null) return null;
        return role.getValue("CrawlerArgs.role");
    }

    /**
     * List of nested Amazon S3 target arguments. See S3 Target below.
     * 
     */
    private UndeferrableValue<List<CrawlerS3TargetArgs>> s3Targets;

    public List<CrawlerS3TargetArgs> s3Targets() {
        if (s3Targets == null) return null;
        return s3Targets.getValue("CrawlerArgs.s3Targets");
    }

    /**
     * A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
     * 
     */
    private UndeferrableValue<String> schedule;

    public String schedule() {
        if (schedule == null) return null;
        return schedule.getValue("CrawlerArgs.schedule");
    }

    /**
     * Policy for the crawler&#39;s update and deletion behavior. See Schema Change Policy below.
     * 
     */
    private UndeferrableValue<CrawlerSchemaChangePolicyArgs> schemaChangePolicy;

    public CrawlerSchemaChangePolicyArgs schemaChangePolicy() {
        if (schemaChangePolicy == null) return null;
        return schemaChangePolicy.getValue("CrawlerArgs.schemaChangePolicy");
    }

    /**
     * The name of Security Configuration to be used by the crawler
     * 
     */
    private UndeferrableValue<String> securityConfiguration;

    public String securityConfiguration() {
        if (securityConfiguration == null) return null;
        return securityConfiguration.getValue("CrawlerArgs.securityConfiguration");
    }

    /**
     * The table prefix used for catalog tables that are created.
     * 
     */
    private UndeferrableValue<String> tablePrefix;

    public String tablePrefix() {
        if (tablePrefix == null) return null;
        return tablePrefix.getValue("CrawlerArgs.tablePrefix");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("CrawlerArgs.tags");
    }

}
