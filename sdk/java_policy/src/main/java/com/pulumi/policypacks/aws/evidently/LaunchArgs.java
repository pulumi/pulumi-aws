// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.evidently;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.evidently.inputs.LaunchGroupArgs;
import com.pulumi.policypacks.aws.evidently.inputs.LaunchMetricMonitorArgs;
import com.pulumi.policypacks.aws.evidently.inputs.LaunchScheduledSplitsConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:evidently/launch:Launch")
public final class LaunchArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies the description of the launch.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("LaunchArgs.description");
    }

    /**
     * One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
     * 
     */
    private UndeferrableValue<List<LaunchGroupArgs>> groups;

    public List<LaunchGroupArgs> groups() {
        if (groups == null) return null;
        return groups.getValue("LaunchArgs.groups");
    }

    /**
     * One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
     * 
     */
    private UndeferrableValue<List<LaunchMetricMonitorArgs>> metricMonitors;

    public List<LaunchMetricMonitorArgs> metricMonitors() {
        if (metricMonitors == null) return null;
        return metricMonitors.getValue("LaunchArgs.metricMonitors");
    }

    /**
     * The name for the new launch. Minimum length of `1`. Maximum length of `127`.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("LaunchArgs.name");
    }

    /**
     * The name or ARN of the project that is to contain the new launch.
     * 
     */
    private UndeferrableValue<String> project;

    public String project() {
        if (project == null) return null;
        return project.getValue("LaunchArgs.project");
    }

    /**
     * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
     * 
     */
    private UndeferrableValue<String> randomizationSalt;

    public String randomizationSalt() {
        if (randomizationSalt == null) return null;
        return randomizationSalt.getValue("LaunchArgs.randomizationSalt");
    }

    /**
     * A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
     * 
     */
    private UndeferrableValue<LaunchScheduledSplitsConfigArgs> scheduledSplitsConfig;

    public LaunchScheduledSplitsConfigArgs scheduledSplitsConfig() {
        if (scheduledSplitsConfig == null) return null;
        return scheduledSplitsConfig.getValue("LaunchArgs.scheduledSplitsConfig");
    }

    /**
     * Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("LaunchArgs.tags");
    }

}
