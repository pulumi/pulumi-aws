// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dynamodb.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableGlobalSecondaryIndexOnDemandThroughput;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class TableGlobalSecondaryIndex {

    /**
     * Name of the hash key in the index; must be defined as an attribute in the resource.
     * 
     */
    private UndeferrableValue<String> hashKey;

    public String hashKey() {
        if (hashKey == null) return null;
        return hashKey.getValue("TableGlobalSecondaryIndex.hashKey");
    }

    /**
     * Name of the index.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("TableGlobalSecondaryIndex.name");
    }

    /**
     * Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> nonKeyAttributes;

    public @Nullable List<String> nonKeyAttributes() {
        if (nonKeyAttributes == null) return null;
        return nonKeyAttributes.getValue("TableGlobalSecondaryIndex.nonKeyAttributes");
    }

    /**
     * Sets the maximum number of read and write units for the specified on-demand table. See below.
     * 
     */
    private @Nullable UndeferrableValue<TableGlobalSecondaryIndexOnDemandThroughput> onDemandThroughput;

    public @Nullable TableGlobalSecondaryIndexOnDemandThroughput onDemandThroughput() {
        if (onDemandThroughput == null) return null;
        return onDemandThroughput.getValue("TableGlobalSecondaryIndex.onDemandThroughput");
    }

    /**
     * One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hash_key and sort_key attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `non_key_attributes` in addition to the attributes that that`KEYS_ONLY` project.
     * 
     */
    private UndeferrableValue<String> projectionType;

    public String projectionType() {
        if (projectionType == null) return null;
        return projectionType.getValue("TableGlobalSecondaryIndex.projectionType");
    }

    /**
     * Name of the range key; must be defined
     * 
     */
    private @Nullable UndeferrableValue<String> rangeKey;

    public @Nullable String rangeKey() {
        if (rangeKey == null) return null;
        return rangeKey.getValue("TableGlobalSecondaryIndex.rangeKey");
    }

    /**
     * Number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
     * 
     */
    private @Nullable UndeferrableValue<Integer> readCapacity;

    public @Nullable Integer readCapacity() {
        if (readCapacity == null) return null;
        return readCapacity.getValue("TableGlobalSecondaryIndex.readCapacity");
    }

    /**
     * Number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
     * 
     */
    private @Nullable UndeferrableValue<Integer> writeCapacity;

    public @Nullable Integer writeCapacity() {
        if (writeCapacity == null) return null;
        return writeCapacity.getValue("TableGlobalSecondaryIndex.writeCapacity");
    }

}
