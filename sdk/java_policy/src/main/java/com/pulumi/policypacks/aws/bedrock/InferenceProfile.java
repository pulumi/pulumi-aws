// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.bedrock;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.bedrock.outputs.InferenceProfileModel;
import com.pulumi.policypacks.aws.bedrock.outputs.InferenceProfileModelSource;
import com.pulumi.policypacks.aws.bedrock.outputs.InferenceProfileTimeouts;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:bedrock/inferenceProfile:InferenceProfile")
public final class InferenceProfile extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) of the inference profile.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'InferenceProfile.arn' is not present");
    }

    /**
     * The time at which the inference profile was created.
     * 
     */
    @PolicyResourceProperty(name="createdAt", flag="unknown_createdAt")
    private String value_createdAt;
    private boolean unknown_createdAt;
    public String createdAt() {
        if (!unknown_createdAt) return value_createdAt;
        throw new UndeferrableValueException("Value 'InferenceProfile.createdAt' is not present");
    }

    /**
     * The description of the inference profile.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'InferenceProfile.description' is not present");
    }

    /**
     * The source of the model this inference profile will track metrics and cost for. See `model_source`.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="modelSource", flag="unknown_modelSource")
    private @Nullable InferenceProfileModelSource value_modelSource;
    private boolean unknown_modelSource;
    public @Nullable InferenceProfileModelSource modelSource() {
        if (!unknown_modelSource) return value_modelSource;
        throw new UndeferrableValueException("Value 'InferenceProfile.modelSource' is not present");
    }

    /**
     * A list of information about each model in the inference profile. See `models`.
     * 
     */
    @PolicyResourceProperty(name="models", flag="unknown_models")
    private List<InferenceProfileModel> value_models;
    private boolean unknown_models;
    public List<InferenceProfileModel> models() {
        if (!unknown_models) return value_models;
        throw new UndeferrableValueException("Value 'InferenceProfile.models' is not present");
    }

    /**
     * The name of the inference profile.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'InferenceProfile.name' is not present");
    }

    /**
     * The status of the inference profile. `ACTIVE` means that the inference profile is available to use.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'InferenceProfile.status' is not present");
    }

    /**
     * Key-value mapping of resource tags for the inference profile.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'InferenceProfile.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'InferenceProfile.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable InferenceProfileTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable InferenceProfileTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'InferenceProfile.timeouts' is not present");
    }

    /**
     * The type of the inference profile. `SYSTEM_DEFINED` means that the inference profile is defined by Amazon Bedrock. `APPLICATION` means that the inference profile is defined by the user.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'InferenceProfile.type' is not present");
    }

    /**
     * The time at which the inference profile was last updated.
     * 
     */
    @PolicyResourceProperty(name="updatedAt", flag="unknown_updatedAt")
    private String value_updatedAt;
    private boolean unknown_updatedAt;
    public String updatedAt() {
        if (!unknown_updatedAt) return value_updatedAt;
        throw new UndeferrableValueException("Value 'InferenceProfile.updatedAt' is not present");
    }

}
