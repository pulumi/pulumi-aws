// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkmanager;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;


@PolicyResourceType(type="aws:networkmanager/attachmentAccepter:AttachmentAccepter")
public final class AttachmentAccepter extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ID of the attachment.
     * 
     */
    @PolicyResourceProperty(name="attachmentId", flag="unknown_attachmentId")
    private String value_attachmentId;
    private boolean unknown_attachmentId;
    public String attachmentId() {
        if (!unknown_attachmentId) return value_attachmentId;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.attachmentId' is not present");
    }

    /**
     * The policy rule number associated with the attachment.
     * 
     */
    @PolicyResourceProperty(name="attachmentPolicyRuleNumber", flag="unknown_attachmentPolicyRuleNumber")
    private Integer value_attachmentPolicyRuleNumber;
    private boolean unknown_attachmentPolicyRuleNumber;
    public Integer attachmentPolicyRuleNumber() {
        if (!unknown_attachmentPolicyRuleNumber) return value_attachmentPolicyRuleNumber;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.attachmentPolicyRuleNumber' is not present");
    }

    /**
     * The type of attachment. Valid values can be found in the [AWS Documentation](https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_ListAttachments.html#API_ListAttachments_RequestSyntax)
     * 
     */
    @PolicyResourceProperty(name="attachmentType", flag="unknown_attachmentType")
    private String value_attachmentType;
    private boolean unknown_attachmentType;
    public String attachmentType() {
        if (!unknown_attachmentType) return value_attachmentType;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.attachmentType' is not present");
    }

    /**
     * The ARN of a core network.
     * 
     */
    @PolicyResourceProperty(name="coreNetworkArn", flag="unknown_coreNetworkArn")
    private String value_coreNetworkArn;
    private boolean unknown_coreNetworkArn;
    public String coreNetworkArn() {
        if (!unknown_coreNetworkArn) return value_coreNetworkArn;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.coreNetworkArn' is not present");
    }

    /**
     * The id of a core network.
     * 
     */
    @PolicyResourceProperty(name="coreNetworkId", flag="unknown_coreNetworkId")
    private String value_coreNetworkId;
    private boolean unknown_coreNetworkId;
    public String coreNetworkId() {
        if (!unknown_coreNetworkId) return value_coreNetworkId;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.coreNetworkId' is not present");
    }

    /**
     * The Region where the edge is located. This is returned for all attachment types except a Direct Connect gateway attachment, which instead returns `edge_locations`.
     * 
     */
    @PolicyResourceProperty(name="edgeLocation", flag="unknown_edgeLocation")
    private String value_edgeLocation;
    private boolean unknown_edgeLocation;
    public String edgeLocation() {
        if (!unknown_edgeLocation) return value_edgeLocation;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.edgeLocation' is not present");
    }

    /**
     * The edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types return `edge_location`
     * 
     */
    @PolicyResourceProperty(name="edgeLocations", flag="unknown_edgeLocations")
    private List<String> value_edgeLocations;
    private boolean unknown_edgeLocations;
    public List<String> edgeLocations() {
        if (!unknown_edgeLocations) return value_edgeLocations;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.edgeLocations' is not present");
    }

    /**
     * The ID of the attachment account owner.
     * 
     */
    @PolicyResourceProperty(name="ownerAccountId", flag="unknown_ownerAccountId")
    private String value_ownerAccountId;
    private boolean unknown_ownerAccountId;
    public String ownerAccountId() {
        if (!unknown_ownerAccountId) return value_ownerAccountId;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.ownerAccountId' is not present");
    }

    /**
     * The attachment resource ARN.
     * 
     */
    @PolicyResourceProperty(name="resourceArn", flag="unknown_resourceArn")
    private String value_resourceArn;
    private boolean unknown_resourceArn;
    public String resourceArn() {
        if (!unknown_resourceArn) return value_resourceArn;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.resourceArn' is not present");
    }

    /**
     * The name of the segment attachment.
     * 
     */
    @PolicyResourceProperty(name="segmentName", flag="unknown_segmentName")
    private String value_segmentName;
    private boolean unknown_segmentName;
    public String segmentName() {
        if (!unknown_segmentName) return value_segmentName;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.segmentName' is not present");
    }

    /**
     * The state of the attachment.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'AttachmentAccepter.state' is not present");
    }

}
