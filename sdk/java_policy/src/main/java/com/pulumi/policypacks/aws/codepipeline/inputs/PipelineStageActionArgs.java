// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codepipeline.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class PipelineStageActionArgs {

    /**
     * A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
     * 
     */
    private UndeferrableValue<String> category;

    public String category() {
        if (category == null) return null;
        return category.getValue("PipelineStageActionArgs.category");
    }

    /**
     * A map of the action declaration&#39;s configuration. Configurations options for action types and providers can be found in the [Pipeline Structure Reference](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements) and [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation. Note: The `DetectChanges` parameter (optional, default value is true) in the `configuration` section causes CodePipeline to automatically start your pipeline upon new commits. Please refer to AWS Documentation for more details: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html#action-reference-CodestarConnectionSource-config.
     * 
     */
    private UndeferrableValue<Map<String,String>> configuration;

    public Map<String,String> configuration() {
        if (configuration == null) return null;
        return configuration.getValue("PipelineStageActionArgs.configuration");
    }

    /**
     * A list of artifact names to be worked on.
     * 
     */
    private UndeferrableValue<List<String>> inputArtifacts;

    public List<String> inputArtifacts() {
        if (inputArtifacts == null) return null;
        return inputArtifacts.getValue("PipelineStageActionArgs.inputArtifacts");
    }

    /**
     * The action declaration&#39;s name.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("PipelineStageActionArgs.name");
    }

    /**
     * The namespace all output variables will be accessed from.
     * 
     */
    private UndeferrableValue<String> namespace;

    public String namespace() {
        if (namespace == null) return null;
        return namespace.getValue("PipelineStageActionArgs.namespace");
    }

    /**
     * A list of artifact names to output. Output artifact names must be unique within a pipeline.
     * 
     */
    private UndeferrableValue<List<String>> outputArtifacts;

    public List<String> outputArtifacts() {
        if (outputArtifacts == null) return null;
        return outputArtifacts.getValue("PipelineStageActionArgs.outputArtifacts");
    }

    /**
     * The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
     * 
     */
    private UndeferrableValue<String> owner;

    public String owner() {
        if (owner == null) return null;
        return owner.getValue("PipelineStageActionArgs.owner");
    }

    /**
     * The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
     * 
     */
    private UndeferrableValue<String> provider;

    public String provider() {
        if (provider == null) return null;
        return provider.getValue("PipelineStageActionArgs.provider");
    }

    /**
     * The region in which to run the action.
     * 
     */
    private UndeferrableValue<String> region;

    public String region() {
        if (region == null) return null;
        return region.getValue("PipelineStageActionArgs.region");
    }

    /**
     * The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("PipelineStageActionArgs.roleArn");
    }

    /**
     * The order in which actions are run.
     * 
     */
    private UndeferrableValue<Integer> runOrder;

    public Integer runOrder() {
        if (runOrder == null) return null;
        return runOrder.getValue("PipelineStageActionArgs.runOrder");
    }

    /**
     * The action timeout for the rule.
     * 
     */
    private UndeferrableValue<Integer> timeoutInMinutes;

    public Integer timeoutInMinutes() {
        if (timeoutInMinutes == null) return null;
        return timeoutInMinutes.getValue("PipelineStageActionArgs.timeoutInMinutes");
    }

    /**
     * A string that identifies the action type.
     * 
     */
    private UndeferrableValue<String> version;

    public String version() {
        if (version == null) return null;
        return version.getValue("PipelineStageActionArgs.version");
    }

}
