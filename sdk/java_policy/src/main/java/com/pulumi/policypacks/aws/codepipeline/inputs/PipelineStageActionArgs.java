// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codepipeline.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class PipelineStageActionArgs {

    /**
     * A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
     * 
     */
    @PolicyResourceProperty(name="category", flag="unknown_category")
    private String value_category;
    private boolean unknown_category;
    public String category() {
        if (!unknown_category) return value_category;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.category' is not present");
    }

    /**
     * A map of the action declaration&#39;s configuration. Configurations options for action types and providers can be found in the [Pipeline Structure Reference](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements) and [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation. Note: The `DetectChanges` parameter (optional, default value is true) in the `configuration` section causes CodePipeline to automatically start your pipeline upon new commits. Please refer to AWS Documentation for more details: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html#action-reference-CodestarConnectionSource-config.
     * 
     */
    @PolicyResourceProperty(name="configuration", flag="unknown_configuration")
    private Map<String,String> value_configuration;
    private boolean unknown_configuration;
    public Map<String,String> configuration() {
        if (!unknown_configuration) return value_configuration;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.configuration' is not present");
    }

    /**
     * A list of artifact names to be worked on.
     * 
     */
    @PolicyResourceProperty(name="inputArtifacts", flag="unknown_inputArtifacts")
    private List<String> value_inputArtifacts;
    private boolean unknown_inputArtifacts;
    public List<String> inputArtifacts() {
        if (!unknown_inputArtifacts) return value_inputArtifacts;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.inputArtifacts' is not present");
    }

    /**
     * The action declaration&#39;s name.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.name' is not present");
    }

    /**
     * The namespace all output variables will be accessed from.
     * 
     */
    @PolicyResourceProperty(name="namespace", flag="unknown_namespace")
    private String value_namespace;
    private boolean unknown_namespace;
    public String namespace() {
        if (!unknown_namespace) return value_namespace;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.namespace' is not present");
    }

    /**
     * A list of artifact names to output. Output artifact names must be unique within a pipeline.
     * 
     */
    @PolicyResourceProperty(name="outputArtifacts", flag="unknown_outputArtifacts")
    private List<String> value_outputArtifacts;
    private boolean unknown_outputArtifacts;
    public List<String> outputArtifacts() {
        if (!unknown_outputArtifacts) return value_outputArtifacts;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.outputArtifacts' is not present");
    }

    /**
     * The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
     * 
     */
    @PolicyResourceProperty(name="owner", flag="unknown_owner")
    private String value_owner;
    private boolean unknown_owner;
    public String owner() {
        if (!unknown_owner) return value_owner;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.owner' is not present");
    }

    /**
     * The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
     * 
     */
    @PolicyResourceProperty(name="provider", flag="unknown_provider")
    private String value_provider;
    private boolean unknown_provider;
    public String provider() {
        if (!unknown_provider) return value_provider;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.provider' is not present");
    }

    /**
     * The region in which to run the action.
     * 
     */
    @PolicyResourceProperty(name="region", flag="unknown_region")
    private String value_region;
    private boolean unknown_region;
    public String region() {
        if (!unknown_region) return value_region;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.region' is not present");
    }

    /**
     * The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.roleArn' is not present");
    }

    /**
     * The order in which actions are run.
     * 
     */
    @PolicyResourceProperty(name="runOrder", flag="unknown_runOrder")
    private Integer value_runOrder;
    private boolean unknown_runOrder;
    public Integer runOrder() {
        if (!unknown_runOrder) return value_runOrder;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.runOrder' is not present");
    }

    /**
     * The action timeout for the rule.
     * 
     */
    @PolicyResourceProperty(name="timeoutInMinutes", flag="unknown_timeoutInMinutes")
    private Integer value_timeoutInMinutes;
    private boolean unknown_timeoutInMinutes;
    public Integer timeoutInMinutes() {
        if (!unknown_timeoutInMinutes) return value_timeoutInMinutes;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.timeoutInMinutes' is not present");
    }

    /**
     * A string that identifies the action type.
     * 
     */
    @PolicyResourceProperty(name="version", flag="unknown_version")
    private String value_version;
    private boolean unknown_version;
    public String version() {
        if (!unknown_version) return value_version;
        throw new UndeferrableValueException("Value 'PipelineStageActionArgs.version' is not present");
    }

}
