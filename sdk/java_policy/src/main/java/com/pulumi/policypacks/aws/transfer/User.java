// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.transfer;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.transfer.outputs.UserHomeDirectoryMapping;
import com.pulumi.policypacks.aws.transfer.outputs.UserPosixProfile;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:transfer/user:User")
public final class User extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of Transfer User
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'User.arn' is not present");
    }

    /**
     * The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
     * 
     */
    @PolicyResourceProperty(name="homeDirectory", flag="unknown_homeDirectory")
    private @Nullable String value_homeDirectory;
    private boolean unknown_homeDirectory;
    public @Nullable String homeDirectory() {
        if (!unknown_homeDirectory) return value_homeDirectory;
        throw new UndeferrableValueException("Value 'User.homeDirectory' is not present");
    }

    /**
     * Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
     * 
     */
    @PolicyResourceProperty(name="homeDirectoryMappings", flag="unknown_homeDirectoryMappings")
    private @Nullable List<UserHomeDirectoryMapping> value_homeDirectoryMappings;
    private boolean unknown_homeDirectoryMappings;
    public @Nullable List<UserHomeDirectoryMapping> homeDirectoryMappings() {
        if (!unknown_homeDirectoryMappings) return value_homeDirectoryMappings;
        throw new UndeferrableValueException("Value 'User.homeDirectoryMappings' is not present");
    }

    /**
     * The type of landing directory (folder) you mapped for your users&#39; home directory. Valid values are `PATH` and `LOGICAL`.
     * 
     */
    @PolicyResourceProperty(name="homeDirectoryType", flag="unknown_homeDirectoryType")
    private @Nullable String value_homeDirectoryType;
    private boolean unknown_homeDirectoryType;
    public @Nullable String homeDirectoryType() {
        if (!unknown_homeDirectoryType) return value_homeDirectoryType;
        throw new UndeferrableValueException("Value 'User.homeDirectoryType' is not present");
    }

    /**
     * An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`. These are evaluated on-the-fly when navigating the bucket.
     * 
     */
    @PolicyResourceProperty(name="policy", flag="unknown_policy")
    private @Nullable String value_policy;
    private boolean unknown_policy;
    public @Nullable String policy() {
        if (!unknown_policy) return value_policy;
        throw new UndeferrableValueException("Value 'User.policy' is not present");
    }

    /**
     * Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users&#39; access to your Amazon EFS file systems. See Posix Profile below.
     * 
     */
    @PolicyResourceProperty(name="posixProfile", flag="unknown_posixProfile")
    private @Nullable UserPosixProfile value_posixProfile;
    private boolean unknown_posixProfile;
    public @Nullable UserPosixProfile posixProfile() {
        if (!unknown_posixProfile) return value_posixProfile;
        throw new UndeferrableValueException("Value 'User.posixProfile' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of an IAM role that allows the service to control your userâ€™s access to your Amazon S3 bucket.
     * 
     */
    @PolicyResourceProperty(name="role", flag="unknown_role")
    private String value_role;
    private boolean unknown_role;
    public String role() {
        if (!unknown_role) return value_role;
        throw new UndeferrableValueException("Value 'User.role' is not present");
    }

    /**
     * The Server ID of the Transfer Server (e.g., `s-12345678`)
     * 
     */
    @PolicyResourceProperty(name="serverId", flag="unknown_serverId")
    private String value_serverId;
    private boolean unknown_serverId;
    public String serverId() {
        if (!unknown_serverId) return value_serverId;
        throw new UndeferrableValueException("Value 'User.serverId' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'User.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'User.tagsAll' is not present");
    }

    /**
     * The name used for log in to your SFTP server.
     * 
     */
    @PolicyResourceProperty(name="userName", flag="unknown_userName")
    private String value_userName;
    private boolean unknown_userName;
    public String userName() {
        if (!unknown_userName) return value_userName;
        throw new UndeferrableValueException("Value 'User.userName' is not present");
    }

}
