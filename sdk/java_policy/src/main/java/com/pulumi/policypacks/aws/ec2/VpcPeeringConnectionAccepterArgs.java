// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.inputs.VpcPeeringConnectionAccepterAccepterArgs;
import com.pulumi.policypacks.aws.ec2.inputs.VpcPeeringConnectionAccepterRequesterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter")
public final class VpcPeeringConnectionAccepterArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A configuration block that describes [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
     * 
     */
    @PolicyResourceProperty(name="accepter", flag="unknown_accepter")
    private VpcPeeringConnectionAccepterAccepterArgs value_accepter;
    private boolean unknown_accepter;
    public VpcPeeringConnectionAccepterAccepterArgs accepter() {
        if (!unknown_accepter) return value_accepter;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionAccepterArgs.accepter' is not present");
    }

    /**
     * Whether or not to accept the peering request. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="autoAccept", flag="unknown_autoAccept")
    private Boolean value_autoAccept;
    private boolean unknown_autoAccept;
    public Boolean autoAccept() {
        if (!unknown_autoAccept) return value_autoAccept;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionAccepterArgs.autoAccept' is not present");
    }

    /**
     * A configuration block that describes [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
     * 
     */
    @PolicyResourceProperty(name="requester", flag="unknown_requester")
    private VpcPeeringConnectionAccepterRequesterArgs value_requester;
    private boolean unknown_requester;
    public VpcPeeringConnectionAccepterRequesterArgs requester() {
        if (!unknown_requester) return value_requester;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionAccepterArgs.requester' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionAccepterArgs.tags' is not present");
    }

    /**
     * The VPC Peering Connection ID to manage.
     * 
     */
    @PolicyResourceProperty(name="vpcPeeringConnectionId", flag="unknown_vpcPeeringConnectionId")
    private String value_vpcPeeringConnectionId;
    private boolean unknown_vpcPeeringConnectionId;
    public String vpcPeeringConnectionId() {
        if (!unknown_vpcPeeringConnectionId) return value_vpcPeeringConnectionId;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionAccepterArgs.vpcPeeringConnectionId' is not present");
    }

}
