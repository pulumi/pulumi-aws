// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rds.outputs.ClusterSnapshotCopyTimeouts;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy")
public final class ClusterSnapshotCopy extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Specifies the allocated storage size in gigabytes (GB).
     * 
     */
    @PolicyResourceProperty(name="allocatedStorage", flag="unknown_allocatedStorage")
    private Integer value_allocatedStorage;
    private boolean unknown_allocatedStorage;
    public Integer allocatedStorage() {
        if (!unknown_allocatedStorage) return value_allocatedStorage;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.allocatedStorage' is not present");
    }

    /**
     * Whether to copy existing tags. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="copyTags", flag="unknown_copyTags")
    private @Nullable Boolean value_copyTags;
    private boolean unknown_copyTags;
    public @Nullable Boolean copyTags() {
        if (!unknown_copyTags) return value_copyTags;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.copyTags' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) for the DB cluster snapshot.
     * 
     */
    @PolicyResourceProperty(name="dbClusterSnapshotArn", flag="unknown_dbClusterSnapshotArn")
    private String value_dbClusterSnapshotArn;
    private boolean unknown_dbClusterSnapshotArn;
    public String dbClusterSnapshotArn() {
        if (!unknown_dbClusterSnapshotArn) return value_dbClusterSnapshotArn;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.dbClusterSnapshotArn' is not present");
    }

    /**
     * The Destination region to place snapshot copy.
     * 
     */
    @PolicyResourceProperty(name="destinationRegion", flag="unknown_destinationRegion")
    private @Nullable String value_destinationRegion;
    private boolean unknown_destinationRegion;
    public @Nullable String destinationRegion() {
        if (!unknown_destinationRegion) return value_destinationRegion;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.destinationRegion' is not present");
    }

    /**
     * Specifies the name of the database engine.
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private String value_engine;
    private boolean unknown_engine;
    public String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.engine' is not present");
    }

    /**
     * Specifies the version of the database engine.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.engineVersion' is not present");
    }

    /**
     * KMS key ID.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private @Nullable String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public @Nullable String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.kmsKeyId' is not present");
    }

    /**
     * License model information for the restored DB instance.
     * 
     */
    @PolicyResourceProperty(name="licenseModel", flag="unknown_licenseModel")
    private String value_licenseModel;
    private boolean unknown_licenseModel;
    public String licenseModel() {
        if (!unknown_licenseModel) return value_licenseModel;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.licenseModel' is not present");
    }

    /**
     * URL that contains a Signature Version 4 signed request.
     * 
     */
    @PolicyResourceProperty(name="presignedUrl", flag="unknown_presignedUrl")
    private @Nullable String value_presignedUrl;
    private boolean unknown_presignedUrl;
    public @Nullable String presignedUrl() {
        if (!unknown_presignedUrl) return value_presignedUrl;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.presignedUrl' is not present");
    }

    /**
     * List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
     * 
     */
    @PolicyResourceProperty(name="sharedAccounts", flag="unknown_sharedAccounts")
    private @Nullable List<String> value_sharedAccounts;
    private boolean unknown_sharedAccounts;
    public @Nullable List<String> sharedAccounts() {
        if (!unknown_sharedAccounts) return value_sharedAccounts;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.sharedAccounts' is not present");
    }

    @PolicyResourceProperty(name="snapshotType", flag="unknown_snapshotType")
    private String value_snapshotType;
    private boolean unknown_snapshotType;
    public String snapshotType() {
        if (!unknown_snapshotType) return value_snapshotType;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.snapshotType' is not present");
    }

    /**
     * Identifier of the source snapshot.
     * 
     */
    @PolicyResourceProperty(name="sourceDbClusterSnapshotIdentifier", flag="unknown_sourceDbClusterSnapshotIdentifier")
    private String value_sourceDbClusterSnapshotIdentifier;
    private boolean unknown_sourceDbClusterSnapshotIdentifier;
    public String sourceDbClusterSnapshotIdentifier() {
        if (!unknown_sourceDbClusterSnapshotIdentifier) return value_sourceDbClusterSnapshotIdentifier;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.sourceDbClusterSnapshotIdentifier' is not present");
    }

    /**
     * Specifies whether the DB cluster snapshot is encrypted.
     * 
     */
    @PolicyResourceProperty(name="storageEncrypted", flag="unknown_storageEncrypted")
    private Boolean value_storageEncrypted;
    private boolean unknown_storageEncrypted;
    public Boolean storageEncrypted() {
        if (!unknown_storageEncrypted) return value_storageEncrypted;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.storageEncrypted' is not present");
    }

    /**
     * Specifies the storage type associated with DB cluster snapshot.
     * 
     */
    @PolicyResourceProperty(name="storageType", flag="unknown_storageType")
    private String value_storageType;
    private boolean unknown_storageType;
    public String storageType() {
        if (!unknown_storageType) return value_storageType;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.storageType' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.tagsAll' is not present");
    }

    /**
     * Identifier for the snapshot.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="targetDbClusterSnapshotIdentifier", flag="unknown_targetDbClusterSnapshotIdentifier")
    private String value_targetDbClusterSnapshotIdentifier;
    private boolean unknown_targetDbClusterSnapshotIdentifier;
    public String targetDbClusterSnapshotIdentifier() {
        if (!unknown_targetDbClusterSnapshotIdentifier) return value_targetDbClusterSnapshotIdentifier;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.targetDbClusterSnapshotIdentifier' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable ClusterSnapshotCopyTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable ClusterSnapshotCopyTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.timeouts' is not present");
    }

    /**
     * Provides the VPC ID associated with the DB cluster snapshot.
     * 
     */
    @PolicyResourceProperty(name="vpcId", flag="unknown_vpcId")
    private String value_vpcId;
    private boolean unknown_vpcId;
    public String vpcId() {
        if (!unknown_vpcId) return value_vpcId;
        throw new UndeferrableValueException("Value 'ClusterSnapshotCopy.vpcId' is not present");
    }

}
