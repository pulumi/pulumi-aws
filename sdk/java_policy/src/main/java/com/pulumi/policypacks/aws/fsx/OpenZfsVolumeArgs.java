// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsVolumeNfsExportsArgs;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsVolumeOriginSnapshotArgs;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsVolumeUserAndGroupQuotaArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:fsx/openZfsVolume:OpenZfsVolume")
public final class OpenZfsVolumeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
     * 
     */
    private UndeferrableValue<Boolean> copyTagsToSnapshots;

    public Boolean copyTagsToSnapshots() {
        if (copyTagsToSnapshots == null) return null;
        return copyTagsToSnapshots.getValue("OpenZfsVolumeArgs.copyTagsToSnapshots");
    }

    /**
     * Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don&#39;t specify compression option will inherit from parent volume. This option on file system applies to the root volume.
     * 
     */
    private UndeferrableValue<String> dataCompressionType;

    public String dataCompressionType() {
        if (dataCompressionType == null) return null;
        return dataCompressionType.getValue("OpenZfsVolumeArgs.dataCompressionType");
    }

    /**
     * Whether to delete all child volumes and snapshots. Valid values: `DELETE_CHILD_VOLUMES_AND_SNAPSHOTS`. This configuration must be applied separately before attempting to delete the resource to have the desired behavior..
     * 
     */
    private UndeferrableValue<String> deleteVolumeOptions;

    public String deleteVolumeOptions() {
        if (deleteVolumeOptions == null) return null;
        return deleteVolumeOptions.getValue("OpenZfsVolumeArgs.deleteVolumeOptions");
    }

    /**
     * The name of the Volume. You can use a maximum of 203 alphanumeric characters, plus the underscore (_) special character.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("OpenZfsVolumeArgs.name");
    }

    /**
     * NFS export configuration for the root volume. Exactly 1 item. See `nfs_exports` Block Below for details.
     * 
     */
    private UndeferrableValue<OpenZfsVolumeNfsExportsArgs> nfsExports;

    public OpenZfsVolumeNfsExportsArgs nfsExports() {
        if (nfsExports == null) return null;
        return nfsExports.getValue("OpenZfsVolumeArgs.nfsExports");
    }

    /**
     * Specifies the configuration to use when creating the OpenZFS volume. See `origin_snapshot` Block below for details.
     * 
     */
    private UndeferrableValue<OpenZfsVolumeOriginSnapshotArgs> originSnapshot;

    public OpenZfsVolumeOriginSnapshotArgs originSnapshot() {
        if (originSnapshot == null) return null;
        return originSnapshot.getValue("OpenZfsVolumeArgs.originSnapshot");
    }

    /**
     * The volume id of volume that will be the parent volume for the volume being created, this could be the root volume created from the `aws.fsx.OpenZfsFileSystem` resource with the `root_volume_id` or the `id` property of another `aws.fsx.OpenZfsVolume`.
     * 
     */
    private UndeferrableValue<String> parentVolumeId;

    public String parentVolumeId() {
        if (parentVolumeId == null) return null;
        return parentVolumeId.getValue("OpenZfsVolumeArgs.parentVolumeId");
    }

    /**
     * specifies whether the volume is read-only. Default is false.
     * 
     */
    private UndeferrableValue<Boolean> readOnly;

    public Boolean readOnly() {
        if (readOnly == null) return null;
        return readOnly.getValue("OpenZfsVolumeArgs.readOnly");
    }

    /**
     * The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
     * 
     */
    private UndeferrableValue<Integer> recordSizeKib;

    public Integer recordSizeKib() {
        if (recordSizeKib == null) return null;
        return recordSizeKib.getValue("OpenZfsVolumeArgs.recordSizeKib");
    }

    /**
     * The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent.
     * 
     */
    private UndeferrableValue<Integer> storageCapacityQuotaGib;

    public Integer storageCapacityQuotaGib() {
        if (storageCapacityQuotaGib == null) return null;
        return storageCapacityQuotaGib.getValue("OpenZfsVolumeArgs.storageCapacityQuotaGib");
    }

    /**
     * The amount of storage in gibibytes (GiB) to reserve from the parent volume.
     * 
     */
    private UndeferrableValue<Integer> storageCapacityReservationGib;

    public Integer storageCapacityReservationGib() {
        if (storageCapacityReservationGib == null) return null;
        return storageCapacityReservationGib.getValue("OpenZfsVolumeArgs.storageCapacityReservationGib");
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("OpenZfsVolumeArgs.tags");
    }

    /**
     * Specify how much storage users or groups can use on the volume. Maximum of 100 items. See `user_and_group_quotas` Block Below.
     * 
     */
    private UndeferrableValue<List<OpenZfsVolumeUserAndGroupQuotaArgs>> userAndGroupQuotas;

    public List<OpenZfsVolumeUserAndGroupQuotaArgs> userAndGroupQuotas() {
        if (userAndGroupQuotas == null) return null;
        return userAndGroupQuotas.getValue("OpenZfsVolumeArgs.userAndGroupQuotas");
    }

    private UndeferrableValue<String> volumeType;

    public String volumeType() {
        if (volumeType == null) return null;
        return volumeType.getValue("OpenZfsVolumeArgs.volumeType");
    }

}
