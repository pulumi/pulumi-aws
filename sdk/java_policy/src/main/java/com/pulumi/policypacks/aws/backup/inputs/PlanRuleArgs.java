// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.backup.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.backup.inputs.PlanRuleCopyActionArgs;
import com.pulumi.policypacks.aws.backup.inputs.PlanRuleLifecycleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class PlanRuleArgs {

    /**
     * The amount of time in minutes AWS Backup attempts a backup before canceling the job and returning an error.
     * 
     */
    private UndeferrableValue<Integer> completionWindow;

    public Integer completionWindow() {
        if (completionWindow == null) return null;
        return completionWindow.getValue("PlanRuleArgs.completionWindow");
    }

    /**
     * Configuration block(s) with copy operation settings. Detailed below.
     * 
     */
    private UndeferrableValue<List<PlanRuleCopyActionArgs>> copyActions;

    public List<PlanRuleCopyActionArgs> copyActions() {
        if (copyActions == null) return null;
        return copyActions.getValue("PlanRuleArgs.copyActions");
    }

    /**
     * Enable continuous backups for supported resources.
     * 
     */
    private UndeferrableValue<Boolean> enableContinuousBackup;

    public Boolean enableContinuousBackup() {
        if (enableContinuousBackup == null) return null;
        return enableContinuousBackup.getValue("PlanRuleArgs.enableContinuousBackup");
    }

    /**
     * The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
     * 
     */
    private UndeferrableValue<PlanRuleLifecycleArgs> lifecycle;

    public PlanRuleLifecycleArgs lifecycle() {
        if (lifecycle == null) return null;
        return lifecycle.getValue("PlanRuleArgs.lifecycle");
    }

    /**
     * Metadata that you can assign to help organize the resources that you create.
     * 
     */
    private UndeferrableValue<Map<String,String>> recoveryPointTags;

    public Map<String,String> recoveryPointTags() {
        if (recoveryPointTags == null) return null;
        return recoveryPointTags.getValue("PlanRuleArgs.recoveryPointTags");
    }

    /**
     * An display name for a backup rule.
     * 
     */
    private UndeferrableValue<String> ruleName;

    public String ruleName() {
        if (ruleName == null) return null;
        return ruleName.getValue("PlanRuleArgs.ruleName");
    }

    /**
     * A CRON expression specifying when AWS Backup initiates a backup job.
     * 
     */
    private UndeferrableValue<String> schedule;

    public String schedule() {
        if (schedule == null) return null;
        return schedule.getValue("PlanRuleArgs.schedule");
    }

    /**
     * The timezone in which the schedule expression is set. Default value: `&#34;Etc/UTC&#34;`.
     * 
     */
    private UndeferrableValue<String> scheduleExpressionTimezone;

    public String scheduleExpressionTimezone() {
        if (scheduleExpressionTimezone == null) return null;
        return scheduleExpressionTimezone.getValue("PlanRuleArgs.scheduleExpressionTimezone");
    }

    /**
     * The amount of time in minutes before beginning a backup.
     * 
     */
    private UndeferrableValue<Integer> startWindow;

    public Integer startWindow() {
        if (startWindow == null) return null;
        return startWindow.getValue("PlanRuleArgs.startWindow");
    }

    /**
     * The name of a logical container where backups are stored.
     * 
     */
    private UndeferrableValue<String> targetVaultName;

    public String targetVaultName() {
        if (targetVaultName == null) return null;
        return targetVaultName.getValue("PlanRuleArgs.targetVaultName");
    }

}
