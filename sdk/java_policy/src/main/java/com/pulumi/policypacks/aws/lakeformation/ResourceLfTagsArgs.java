// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lakeformation;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagsDatabaseArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagsLfTagArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagsTableArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagsTableWithColumnsArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lakeformation/resourceLfTags:ResourceLfTags")
public final class ResourceLfTagsArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     * 
     */
    @PolicyResourceProperty(name="catalogId", flag="unknown_catalogId")
    private String value_catalogId;
    private boolean unknown_catalogId;
    public String catalogId() {
        if (!unknown_catalogId) return value_catalogId;
        throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.catalogId' is not present");
    }

    /**
     * Configuration block for a database resource. See below.
     * 
     */
    @PolicyResourceProperty(name="database", flag="unknown_database")
    private ResourceLfTagsDatabaseArgs value_database;
    private boolean unknown_database;
    public ResourceLfTagsDatabaseArgs database() {
        if (!unknown_database) return value_database;
        throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.database' is not present");
    }

    /**
     * Set of LF-tags to attach to the resource. See below.
     * 
     * Exactly one of the following is required:
     * 
     */
    @PolicyResourceProperty(name="lfTags", flag="unknown_lfTags")
    private List<ResourceLfTagsLfTagArgs> value_lfTags;
    private boolean unknown_lfTags;
    public List<ResourceLfTagsLfTagArgs> lfTags() {
        if (!unknown_lfTags) return value_lfTags;
        throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.lfTags' is not present");
    }

    /**
     * Configuration block for a table resource. See below.
     * 
     */
    @PolicyResourceProperty(name="table", flag="unknown_table")
    private ResourceLfTagsTableArgs value_table;
    private boolean unknown_table;
    public ResourceLfTagsTableArgs table() {
        if (!unknown_table) return value_table;
        throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.table' is not present");
    }

    /**
     * Configuration block for a table with columns resource. See below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="tableWithColumns", flag="unknown_tableWithColumns")
    private ResourceLfTagsTableWithColumnsArgs value_tableWithColumns;
    private boolean unknown_tableWithColumns;
    public ResourceLfTagsTableWithColumnsArgs tableWithColumns() {
        if (!unknown_tableWithColumns) return value_tableWithColumns;
        throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.tableWithColumns' is not present");
    }

}
