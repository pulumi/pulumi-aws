// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptions;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfiguration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationS3Configuration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfiguration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfiguration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfiguration;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamSnowflakeConfiguration {

    /**
     * The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
     * 
     */
    private UndeferrableValue<String> accountUrl;

    public String accountUrl() {
        if (accountUrl == null) return null;
        return accountUrl.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.accountUrl");
    }

    /**
     * Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
     * 
     */
    private @Nullable UndeferrableValue<Integer> bufferingInterval;

    public @Nullable Integer bufferingInterval() {
        if (bufferingInterval == null) return null;
        return bufferingInterval.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.bufferingInterval");
    }

    /**
     * Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
     * 
     */
    private @Nullable UndeferrableValue<Integer> bufferingSize;

    public @Nullable Integer bufferingSize() {
        if (bufferingSize == null) return null;
        return bufferingSize.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.bufferingSize");
    }

    /**
     * The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptions> cloudwatchLoggingOptions;

    public @Nullable FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions() {
        if (cloudwatchLoggingOptions == null) return null;
        return cloudwatchLoggingOptions.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.cloudwatchLoggingOptions");
    }

    /**
     * The name of the content column.
     * 
     */
    private @Nullable UndeferrableValue<String> contentColumnName;

    public @Nullable String contentColumnName() {
        if (contentColumnName == null) return null;
        return contentColumnName.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.contentColumnName");
    }

    /**
     * The data loading option.
     * 
     */
    private @Nullable UndeferrableValue<String> dataLoadingOption;

    public @Nullable String dataLoadingOption() {
        if (dataLoadingOption == null) return null;
        return dataLoadingOption.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.dataLoadingOption");
    }

    /**
     * The Snowflake database name.
     * 
     */
    private UndeferrableValue<String> database;

    public String database() {
        if (database == null) return null;
        return database.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.database");
    }

    /**
     * The passphrase for the private key.
     * 
     */
    private @Nullable UndeferrableValue<String> keyPassphrase;

    public @Nullable String keyPassphrase() {
        if (keyPassphrase == null) return null;
        return keyPassphrase.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.keyPassphrase");
    }

    /**
     * The name of the metadata column.
     * 
     */
    private @Nullable UndeferrableValue<String> metadataColumnName;

    public @Nullable String metadataColumnName() {
        if (metadataColumnName == null) return null;
        return metadataColumnName.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.metadataColumnName");
    }

    /**
     * The private key for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private @Nullable UndeferrableValue<String> privateKey;

    public @Nullable String privateKey() {
        if (privateKey == null) return null;
        return privateKey.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.privateKey");
    }

    /**
     * The processing configuration. See `processing_configuration` block below for details.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfiguration> processingConfiguration;

    public @Nullable FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfiguration processingConfiguration() {
        if (processingConfiguration == null) return null;
        return processingConfiguration.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.processingConfiguration");
    }

    /**
     * After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
     * 
     */
    private @Nullable UndeferrableValue<Integer> retryDuration;

    public @Nullable Integer retryDuration() {
        if (retryDuration == null) return null;
        return retryDuration.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.retryDuration");
    }

    /**
     * The ARN of the IAM role.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.roleArn");
    }

    /**
     * The S3 backup mode.
     * 
     */
    private @Nullable UndeferrableValue<String> s3BackupMode;

    public @Nullable String s3BackupMode() {
        if (s3BackupMode == null) return null;
        return s3BackupMode.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.s3BackupMode");
    }

    /**
     * The S3 configuration. See `s3_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationS3Configuration> s3Configuration;

    public FirehoseDeliveryStreamSnowflakeConfigurationS3Configuration s3Configuration() {
        if (s3Configuration == null) return null;
        return s3Configuration.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.s3Configuration");
    }

    /**
     * The Snowflake schema name.
     * 
     */
    private UndeferrableValue<String> schema;

    public String schema() {
        if (schema == null) return null;
        return schema.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.schema");
    }

    /**
     * The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `user` and `private_key` are not provided.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfiguration> secretsManagerConfiguration;

    public @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfiguration secretsManagerConfiguration() {
        if (secretsManagerConfiguration == null) return null;
        return secretsManagerConfiguration.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.secretsManagerConfiguration");
    }

    /**
     * The configuration for Snowflake role.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfiguration> snowflakeRoleConfiguration;

    public @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfiguration snowflakeRoleConfiguration() {
        if (snowflakeRoleConfiguration == null) return null;
        return snowflakeRoleConfiguration.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.snowflakeRoleConfiguration");
    }

    /**
     * The VPC configuration for Snowflake.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfiguration> snowflakeVpcConfiguration;

    public @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfiguration snowflakeVpcConfiguration() {
        if (snowflakeVpcConfiguration == null) return null;
        return snowflakeVpcConfiguration.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.snowflakeVpcConfiguration");
    }

    /**
     * The Snowflake table name.
     * 
     */
    private UndeferrableValue<String> table;

    public String table() {
        if (table == null) return null;
        return table.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.table");
    }

    /**
     * The user for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private @Nullable UndeferrableValue<String> user;

    public @Nullable String user() {
        if (user == null) return null;
        return user.getValue("FirehoseDeliveryStreamSnowflakeConfiguration.user");
    }

}
