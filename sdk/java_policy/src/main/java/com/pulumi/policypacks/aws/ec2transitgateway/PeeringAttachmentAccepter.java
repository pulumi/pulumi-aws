// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2transitgateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter")
public final class PeeringAttachmentAccepter extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Identifier of the AWS account that owns the EC2 TGW peering.
     * 
     */
    @PolicyResourceProperty(name="peerAccountId", flag="unknown_peerAccountId")
    private String value_peerAccountId;
    private boolean unknown_peerAccountId;
    public String peerAccountId() {
        if (!unknown_peerAccountId) return value_peerAccountId;
        throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.peerAccountId' is not present");
    }

    @PolicyResourceProperty(name="peerRegion", flag="unknown_peerRegion")
    private String value_peerRegion;
    private boolean unknown_peerRegion;
    public String peerRegion() {
        if (!unknown_peerRegion) return value_peerRegion;
        throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.peerRegion' is not present");
    }

    /**
     * Identifier of EC2 Transit Gateway to peer with.
     * 
     */
    @PolicyResourceProperty(name="peerTransitGatewayId", flag="unknown_peerTransitGatewayId")
    private String value_peerTransitGatewayId;
    private boolean unknown_peerTransitGatewayId;
    public String peerTransitGatewayId() {
        if (!unknown_peerTransitGatewayId) return value_peerTransitGatewayId;
        throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.peerTransitGatewayId' is not present");
    }

    /**
     * Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.tagsAll' is not present");
    }

    /**
     * The ID of the EC2 Transit Gateway Peering Attachment to manage.
     * 
     */
    @PolicyResourceProperty(name="transitGatewayAttachmentId", flag="unknown_transitGatewayAttachmentId")
    private String value_transitGatewayAttachmentId;
    private boolean unknown_transitGatewayAttachmentId;
    public String transitGatewayAttachmentId() {
        if (!unknown_transitGatewayAttachmentId) return value_transitGatewayAttachmentId;
        throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.transitGatewayAttachmentId' is not present");
    }

    /**
     * Identifier of EC2 Transit Gateway.
     * 
     */
    @PolicyResourceProperty(name="transitGatewayId", flag="unknown_transitGatewayId")
    private String value_transitGatewayId;
    private boolean unknown_transitGatewayId;
    public String transitGatewayId() {
        if (!unknown_transitGatewayId) return value_transitGatewayId;
        throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.transitGatewayId' is not present");
    }

}
