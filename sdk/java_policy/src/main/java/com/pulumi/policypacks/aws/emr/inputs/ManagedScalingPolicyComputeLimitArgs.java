// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.emr.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ManagedScalingPolicyComputeLimitArgs {

    /**
     * The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
     * 
     */
    private UndeferrableValue<Integer> maximumCapacityUnits;

    public Integer maximumCapacityUnits() {
        if (maximumCapacityUnits == null) return null;
        return maximumCapacityUnits.getValue("ManagedScalingPolicyComputeLimitArgs.maximumCapacityUnits");
    }

    /**
     * The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
     * 
     */
    private UndeferrableValue<Integer> maximumCoreCapacityUnits;

    public Integer maximumCoreCapacityUnits() {
        if (maximumCoreCapacityUnits == null) return null;
        return maximumCoreCapacityUnits.getValue("ManagedScalingPolicyComputeLimitArgs.maximumCoreCapacityUnits");
    }

    /**
     * The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances.
     * 
     */
    private UndeferrableValue<Integer> maximumOndemandCapacityUnits;

    public Integer maximumOndemandCapacityUnits() {
        if (maximumOndemandCapacityUnits == null) return null;
        return maximumOndemandCapacityUnits.getValue("ManagedScalingPolicyComputeLimitArgs.maximumOndemandCapacityUnits");
    }

    /**
     * The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
     * 
     */
    private UndeferrableValue<Integer> minimumCapacityUnits;

    public Integer minimumCapacityUnits() {
        if (minimumCapacityUnits == null) return null;
        return minimumCapacityUnits.getValue("ManagedScalingPolicyComputeLimitArgs.minimumCapacityUnits");
    }

    /**
     * The unit type used for specifying a managed scaling policy. Valid Values: `InstanceFleetUnits` | `Instances` | `VCPU`
     * 
     */
    private UndeferrableValue<String> unitType;

    public String unitType() {
        if (unitType == null) return null;
        return unitType.getValue("ManagedScalingPolicyComputeLimitArgs.unitType");
    }

}
