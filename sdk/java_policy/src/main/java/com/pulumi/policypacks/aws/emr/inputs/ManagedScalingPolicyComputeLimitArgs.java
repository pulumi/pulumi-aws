// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.emr.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ManagedScalingPolicyComputeLimitArgs {

    /**
     * The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
     * 
     */
    @PolicyResourceProperty(name="maximumCapacityUnits", flag="unknown_maximumCapacityUnits")
    private Integer value_maximumCapacityUnits;
    private boolean unknown_maximumCapacityUnits;
    public Integer maximumCapacityUnits() {
        if (!unknown_maximumCapacityUnits) return value_maximumCapacityUnits;
        throw new UndeferrableValueException("Value 'ManagedScalingPolicyComputeLimitArgs.maximumCapacityUnits' is not present");
    }

    /**
     * The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
     * 
     */
    @PolicyResourceProperty(name="maximumCoreCapacityUnits", flag="unknown_maximumCoreCapacityUnits")
    private Integer value_maximumCoreCapacityUnits;
    private boolean unknown_maximumCoreCapacityUnits;
    public Integer maximumCoreCapacityUnits() {
        if (!unknown_maximumCoreCapacityUnits) return value_maximumCoreCapacityUnits;
        throw new UndeferrableValueException("Value 'ManagedScalingPolicyComputeLimitArgs.maximumCoreCapacityUnits' is not present");
    }

    /**
     * The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances.
     * 
     */
    @PolicyResourceProperty(name="maximumOndemandCapacityUnits", flag="unknown_maximumOndemandCapacityUnits")
    private Integer value_maximumOndemandCapacityUnits;
    private boolean unknown_maximumOndemandCapacityUnits;
    public Integer maximumOndemandCapacityUnits() {
        if (!unknown_maximumOndemandCapacityUnits) return value_maximumOndemandCapacityUnits;
        throw new UndeferrableValueException("Value 'ManagedScalingPolicyComputeLimitArgs.maximumOndemandCapacityUnits' is not present");
    }

    /**
     * The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
     * 
     */
    @PolicyResourceProperty(name="minimumCapacityUnits", flag="unknown_minimumCapacityUnits")
    private Integer value_minimumCapacityUnits;
    private boolean unknown_minimumCapacityUnits;
    public Integer minimumCapacityUnits() {
        if (!unknown_minimumCapacityUnits) return value_minimumCapacityUnits;
        throw new UndeferrableValueException("Value 'ManagedScalingPolicyComputeLimitArgs.minimumCapacityUnits' is not present");
    }

    /**
     * The unit type used for specifying a managed scaling policy. Valid Values: `InstanceFleetUnits` | `Instances` | `VCPU`
     * 
     */
    @PolicyResourceProperty(name="unitType", flag="unknown_unitType")
    private String value_unitType;
    private boolean unknown_unitType;
    public String unitType() {
        if (!unknown_unitType) return value_unitType;
        throw new UndeferrableValueException("Value 'ManagedScalingPolicyComputeLimitArgs.unitType' is not present");
    }

}
