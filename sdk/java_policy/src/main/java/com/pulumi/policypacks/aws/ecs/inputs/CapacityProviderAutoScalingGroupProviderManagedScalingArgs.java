// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecs.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class CapacityProviderAutoScalingGroupProviderManagedScalingArgs {

    /**
     * Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
     * 
     * For more information on how the instance warmup period contributes to managed scale-out behavior, see [Control the instances Amazon ECS terminates](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-termination-protection.html) in the _Amazon Elastic Container Service Developer Guide_.
     * 
     */
    private UndeferrableValue<Integer> instanceWarmupPeriod;

    public Integer instanceWarmupPeriod() {
        if (instanceWarmupPeriod == null) return null;
        return instanceWarmupPeriod.getValue("CapacityProviderAutoScalingGroupProviderManagedScalingArgs.instanceWarmupPeriod");
    }

    /**
     * Maximum step adjustment size. A number between 1 and 10,000.
     * 
     */
    private UndeferrableValue<Integer> maximumScalingStepSize;

    public Integer maximumScalingStepSize() {
        if (maximumScalingStepSize == null) return null;
        return maximumScalingStepSize.getValue("CapacityProviderAutoScalingGroupProviderManagedScalingArgs.maximumScalingStepSize");
    }

    /**
     * Minimum step adjustment size. A number between 1 and 10,000.
     * 
     */
    private UndeferrableValue<Integer> minimumScalingStepSize;

    public Integer minimumScalingStepSize() {
        if (minimumScalingStepSize == null) return null;
        return minimumScalingStepSize.getValue("CapacityProviderAutoScalingGroupProviderManagedScalingArgs.minimumScalingStepSize");
    }

    /**
     * Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("CapacityProviderAutoScalingGroupProviderManagedScalingArgs.status");
    }

    /**
     * Target utilization for the capacity provider. A number between 1 and 100.
     * 
     */
    private UndeferrableValue<Integer> targetCapacity;

    public Integer targetCapacity() {
        if (targetCapacity == null) return null;
        return targetCapacity.getValue("CapacityProviderAutoScalingGroupProviderManagedScalingArgs.targetCapacity");
    }

}
