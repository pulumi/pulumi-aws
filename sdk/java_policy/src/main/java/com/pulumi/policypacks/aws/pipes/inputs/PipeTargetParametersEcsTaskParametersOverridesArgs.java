// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pipes.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.pipes.inputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs;
import com.pulumi.policypacks.aws.pipes.inputs.PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs;
import com.pulumi.policypacks.aws.pipes.inputs.PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PipeTargetParametersEcsTaskParametersOverridesArgs {

    /**
     * One or more container overrides that are sent to a task. Detailed below.
     * 
     */
    private UndeferrableValue<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs>> containerOverrides;

    public List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs> containerOverrides() {
        if (containerOverrides == null) return null;
        return containerOverrides.getValue("PipeTargetParametersEcsTaskParametersOverridesArgs.containerOverrides");
    }

    /**
     * The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
     * 
     */
    private UndeferrableValue<String> cpu;

    public String cpu() {
        if (cpu == null) return null;
        return cpu.getValue("PipeTargetParametersEcsTaskParametersOverridesArgs.cpu");
    }

    /**
     * The ephemeral storage setting override for the task.  Detailed below.
     * 
     */
    private UndeferrableValue<PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs> ephemeralStorage;

    public PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs ephemeralStorage() {
        if (ephemeralStorage == null) return null;
        return ephemeralStorage.getValue("PipeTargetParametersEcsTaskParametersOverridesArgs.ephemeralStorage");
    }

    /**
     * The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
     * 
     */
    private UndeferrableValue<String> executionRoleArn;

    public String executionRoleArn() {
        if (executionRoleArn == null) return null;
        return executionRoleArn.getValue("PipeTargetParametersEcsTaskParametersOverridesArgs.executionRoleArn");
    }

    /**
     * List of Elastic Inference accelerator overrides for the task. Detailed below.
     * 
     */
    private UndeferrableValue<List<PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs>> inferenceAcceleratorOverrides;

    public List<PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs> inferenceAcceleratorOverrides() {
        if (inferenceAcceleratorOverrides == null) return null;
        return inferenceAcceleratorOverrides.getValue("PipeTargetParametersEcsTaskParametersOverridesArgs.inferenceAcceleratorOverrides");
    }

    /**
     * The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
     * 
     */
    private UndeferrableValue<String> memory;

    public String memory() {
        if (memory == null) return null;
        return memory.getValue("PipeTargetParametersEcsTaskParametersOverridesArgs.memory");
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
     * 
     */
    private UndeferrableValue<String> taskRoleArn;

    public String taskRoleArn() {
        if (taskRoleArn == null) return null;
        return taskRoleArn.getValue("PipeTargetParametersEcsTaskParametersOverridesArgs.taskRoleArn");
    }

}
