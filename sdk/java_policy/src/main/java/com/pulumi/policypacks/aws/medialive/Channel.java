// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelCdiInputSpecification;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelDestination;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelEncoderSettings;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelInputAttachment;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelInputSpecification;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelMaintenance;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelVpc;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:medialive/channel:Channel")
public final class Channel extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Channel.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Channel.arn");
    }

    /**
     * Specification of CDI inputs for this channel. See CDI Input Specification for more details.
     * 
     */
    private @Nullable UndeferrableValue<ChannelCdiInputSpecification> cdiInputSpecification;

    public @Nullable ChannelCdiInputSpecification cdiInputSpecification() {
        if (cdiInputSpecification == null) return null;
        return cdiInputSpecification.getValue("Channel.cdiInputSpecification");
    }

    /**
     * Concise argument description.
     * 
     */
    private UndeferrableValue<String> channelClass;

    public String channelClass() {
        if (channelClass == null) return null;
        return channelClass.getValue("Channel.channelClass");
    }

    /**
     * ID of the Channel.
     * 
     */
    private UndeferrableValue<String> channelId;

    public String channelId() {
        if (channelId == null) return null;
        return channelId.getValue("Channel.channelId");
    }

    /**
     * Destinations for channel. See Destinations for more details.
     * 
     */
    private UndeferrableValue<List<ChannelDestination>> destinations;

    public List<ChannelDestination> destinations() {
        if (destinations == null) return null;
        return destinations.getValue("Channel.destinations");
    }

    /**
     * Encoder settings. See Encoder Settings for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettings> encoderSettings;

    public ChannelEncoderSettings encoderSettings() {
        if (encoderSettings == null) return null;
        return encoderSettings.getValue("Channel.encoderSettings");
    }

    /**
     * Input attachments for the channel. See Input Attachments for more details.
     * 
     */
    private UndeferrableValue<List<ChannelInputAttachment>> inputAttachments;

    public List<ChannelInputAttachment> inputAttachments() {
        if (inputAttachments == null) return null;
        return inputAttachments.getValue("Channel.inputAttachments");
    }

    /**
     * Specification of network and file inputs for the channel.
     * 
     */
    private UndeferrableValue<ChannelInputSpecification> inputSpecification;

    public ChannelInputSpecification inputSpecification() {
        if (inputSpecification == null) return null;
        return inputSpecification.getValue("Channel.inputSpecification");
    }

    /**
     * The log level to write to Cloudwatch logs.
     * 
     */
    private UndeferrableValue<String> logLevel;

    public String logLevel() {
        if (logLevel == null) return null;
        return logLevel.getValue("Channel.logLevel");
    }

    /**
     * Maintenance settings for this channel. See Maintenance for more details.
     * 
     */
    private UndeferrableValue<ChannelMaintenance> maintenance;

    public ChannelMaintenance maintenance() {
        if (maintenance == null) return null;
        return maintenance.getValue("Channel.maintenance");
    }

    /**
     * Name of the Channel.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("Channel.name");
    }

    /**
     * Concise argument description.
     * 
     */
    private @Nullable UndeferrableValue<String> roleArn;

    public @Nullable String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("Channel.roleArn");
    }

    /**
     * Whether to start/stop channel. Default: `false`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> startChannel;

    public @Nullable Boolean startChannel() {
        if (startChannel == null) return null;
        return startChannel.getValue("Channel.startChannel");
    }

    /**
     * A map of tags to assign to the channel. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Channel.tags");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Channel.tagsAll");
    }

    /**
     * Settings for the VPC outputs. See VPC for more details.
     * 
     */
    private @Nullable UndeferrableValue<ChannelVpc> vpc;

    public @Nullable ChannelVpc vpc() {
        if (vpc == null) return null;
        return vpc.getValue("Channel.vpc");
    }

}
