// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.guardduty;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:guardduty/member:Member")
public final class Member extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * AWS account ID for member account.
     * 
     */
    @PolicyResourceProperty(name="accountId", flag="unknown_accountId")
    private String value_accountId;
    private boolean unknown_accountId;
    public String accountId() {
        if (!unknown_accountId) return value_accountId;
        throw new UndeferrableValueException("Value 'Member.accountId' is not present");
    }

    /**
     * The detector ID of the GuardDuty account where you want to create member accounts.
     * 
     */
    @PolicyResourceProperty(name="detectorId", flag="unknown_detectorId")
    private String value_detectorId;
    private boolean unknown_detectorId;
    public String detectorId() {
        if (!unknown_detectorId) return value_detectorId;
        throw new UndeferrableValueException("Value 'Member.detectorId' is not present");
    }

    /**
     * Boolean whether an email notification is sent to the accounts. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="disableEmailNotification", flag="unknown_disableEmailNotification")
    private @Nullable Boolean value_disableEmailNotification;
    private boolean unknown_disableEmailNotification;
    public @Nullable Boolean disableEmailNotification() {
        if (!unknown_disableEmailNotification) return value_disableEmailNotification;
        throw new UndeferrableValueException("Value 'Member.disableEmailNotification' is not present");
    }

    /**
     * Email address for member account.
     * 
     */
    @PolicyResourceProperty(name="email", flag="unknown_email")
    private String value_email;
    private boolean unknown_email;
    public String email() {
        if (!unknown_email) return value_email;
        throw new UndeferrableValueException("Value 'Member.email' is not present");
    }

    /**
     * Message for invitation.
     * 
     */
    @PolicyResourceProperty(name="invitationMessage", flag="unknown_invitationMessage")
    private @Nullable String value_invitationMessage;
    private boolean unknown_invitationMessage;
    public @Nullable String invitationMessage() {
        if (!unknown_invitationMessage) return value_invitationMessage;
        throw new UndeferrableValueException("Value 'Member.invitationMessage' is not present");
    }

    /**
     * Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationship_status` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
     * 
     */
    @PolicyResourceProperty(name="invite", flag="unknown_invite")
    private @Nullable Boolean value_invite;
    private boolean unknown_invite;
    public @Nullable Boolean invite() {
        if (!unknown_invite) return value_invite;
        throw new UndeferrableValueException("Value 'Member.invite' is not present");
    }

    /**
     * The status of the relationship between the member account and its primary account. More information can be found in [Amazon GuardDuty API Reference](https://docs.aws.amazon.com/guardduty/latest/ug/get-members.html).
     * 
     */
    @PolicyResourceProperty(name="relationshipStatus", flag="unknown_relationshipStatus")
    private String value_relationshipStatus;
    private boolean unknown_relationshipStatus;
    public String relationshipStatus() {
        if (!unknown_relationshipStatus) return value_relationshipStatus;
        throw new UndeferrableValueException("Value 'Member.relationshipStatus' is not present");
    }

}
