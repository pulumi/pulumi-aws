// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.secretsmanager;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:secretsmanager/secretVersion:SecretVersion")
public final class SecretVersion extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the secret.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'SecretVersion.arn' is not present");
    }

    /**
     * Specifies binary data that you want to encrypt and store in this version of the secret. This is required if `secret_string` or `secret_string_wo` is not set. Needs to be encoded to base64.
     * 
     */
    @PolicyResourceProperty(name="secretBinary", flag="unknown_secretBinary")
    private @Nullable String value_secretBinary;
    private boolean unknown_secretBinary;
    public @Nullable String secretBinary() {
        if (!unknown_secretBinary) return value_secretBinary;
        throw new UndeferrableValueException("Value 'SecretVersion.secretBinary' is not present");
    }

    /**
     * Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
     * 
     */
    @PolicyResourceProperty(name="secretId", flag="unknown_secretId")
    private String value_secretId;
    private boolean unknown_secretId;
    public String secretId() {
        if (!unknown_secretId) return value_secretId;
        throw new UndeferrableValueException("Value 'SecretVersion.secretId' is not present");
    }

    /**
     * Specifies text data that you want to encrypt and store in this version of the secret. This is required if `secret_binary` or `secret_string_wo` is not set.
     * 
     */
    @PolicyResourceProperty(name="secretString", flag="unknown_secretString")
    private @Nullable String value_secretString;
    private boolean unknown_secretString;
    public @Nullable String secretString() {
        if (!unknown_secretString) return value_secretString;
        throw new UndeferrableValueException("Value 'SecretVersion.secretString' is not present");
    }

    /**
     * The unique identifier of the version of the secret.
     * 
     */
    @PolicyResourceProperty(name="versionId", flag="unknown_versionId")
    private String value_versionId;
    private boolean unknown_versionId;
    public String versionId() {
        if (!unknown_versionId) return value_versionId;
        throw new UndeferrableValueException("Value 'SecretVersion.versionId' is not present");
    }

    /**
     * Specifies a list of staging labels that are attached to this version of the secret. A staging label must be unique to a single version of the secret. If you specify a staging label that&#39;s already associated with a different version of the same secret then that staging label is automatically removed from the other version and attached to this version. If you do not specify a value, then AWS Secrets Manager automatically moves the staging label `AWSCURRENT` to this new version on creation.
     * 
     * &gt; **NOTE:** If `version_stages` is configured, you must include the `AWSCURRENT` staging label if this secret version is the only version or if the label is currently present on this secret version, otherwise this provider will show a perpetual difference.
     * 
     */
    @PolicyResourceProperty(name="versionStages", flag="unknown_versionStages")
    private List<String> value_versionStages;
    private boolean unknown_versionStages;
    public List<String> versionStages() {
        if (!unknown_versionStages) return value_versionStages;
        throw new UndeferrableValueException("Value 'SecretVersion.versionStages' is not present");
    }

}
