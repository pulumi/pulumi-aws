// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lambda;

import com.pulumi.asset.Archive;
import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lambda.enums.Runtime;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionDeadLetterConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionEnvironmentArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionEphemeralStorageArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionFileSystemConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionImageConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionLoggingConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionSnapStartArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionTracingConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionVpcConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lambda/function:Function")
public final class FunctionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Instruction set architecture for your Lambda function. Valid values are `[&#34;x86_64&#34;]` and `[&#34;arm64&#34;]`. Default is `[&#34;x86_64&#34;]`. Removing this attribute, function&#39;s architecture stay the same.
     * 
     */
    private UndeferrableValue<List<String>> architectures;

    public List<String> architectures() {
        if (architectures == null) return null;
        return architectures.getValue("FunctionArgs.architectures");
    }

    /**
     * Path to the function&#39;s deployment package within the local filesystem. Exactly one of `filename`, `image_uri`, or `s3_bucket` must be specified.
     * 
     */
    private UndeferrableValue<Archive> code;

    public Archive code() {
        if (code == null) return null;
        return code.getValue("FunctionArgs.code");
    }

    /**
     * To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
     * 
     */
    private UndeferrableValue<String> codeSigningConfigArn;

    public String codeSigningConfigArn() {
        if (codeSigningConfigArn == null) return null;
        return codeSigningConfigArn.getValue("FunctionArgs.codeSigningConfigArn");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionDeadLetterConfigArgs> deadLetterConfig;

    public FunctionDeadLetterConfigArgs deadLetterConfig() {
        if (deadLetterConfig == null) return null;
        return deadLetterConfig.getValue("FunctionArgs.deadLetterConfig");
    }

    /**
     * Description of what your Lambda Function does.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("FunctionArgs.description");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionEnvironmentArgs> environment;

    public FunctionEnvironmentArgs environment() {
        if (environment == null) return null;
        return environment.getValue("FunctionArgs.environment");
    }

    /**
     * The amount of Ephemeral storage(`/tmp`) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of `512`MB. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionEphemeralStorageArgs> ephemeralStorage;

    public FunctionEphemeralStorageArgs ephemeralStorage() {
        if (ephemeralStorage == null) return null;
        return ephemeralStorage.getValue("FunctionArgs.ephemeralStorage");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionFileSystemConfigArgs> fileSystemConfig;

    public FunctionFileSystemConfigArgs fileSystemConfig() {
        if (fileSystemConfig == null) return null;
        return fileSystemConfig.getValue("FunctionArgs.fileSystemConfig");
    }

    /**
     * Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
     * 
     */
    private UndeferrableValue<String> handler;

    public String handler() {
        if (handler == null) return null;
        return handler.getValue("FunctionArgs.handler");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionImageConfigArgs> imageConfig;

    public FunctionImageConfigArgs imageConfig() {
        if (imageConfig == null) return null;
        return imageConfig.getValue("FunctionArgs.imageConfig");
    }

    /**
     * ECR image URI containing the function&#39;s deployment package. Exactly one of `filename`, `image_uri`,  or `s3_bucket` must be specified.
     * 
     */
    private UndeferrableValue<String> imageUri;

    public String imageUri() {
        if (imageUri == null) return null;
        return imageUri.getValue("FunctionArgs.imageUri");
    }

    /**
     * Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
     * 
     */
    private UndeferrableValue<String> kmsKeyArn;

    public String kmsKeyArn() {
        if (kmsKeyArn == null) return null;
        return kmsKeyArn.getValue("FunctionArgs.kmsKeyArn");
    }

    /**
     * List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
     * 
     */
    private UndeferrableValue<List<String>> layers;

    public List<String> layers() {
        if (layers == null) return null;
        return layers.getValue("FunctionArgs.layers");
    }

    /**
     * Configuration block used to specify advanced logging settings. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionLoggingConfigArgs> loggingConfig;

    public FunctionLoggingConfigArgs loggingConfig() {
        if (loggingConfig == null) return null;
        return loggingConfig.getValue("FunctionArgs.loggingConfig");
    }

    /**
     * Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
     * 
     */
    private UndeferrableValue<Integer> memorySize;

    public Integer memorySize() {
        if (memorySize == null) return null;
        return memorySize.getValue("FunctionArgs.memorySize");
    }

    /**
     * Unique name for your Lambda Function.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("FunctionArgs.name");
    }

    /**
     * Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
     * 
     */
    private UndeferrableValue<String> packageType;

    public String packageType() {
        if (packageType == null) return null;
        return packageType.getValue("FunctionArgs.packageType");
    }

    /**
     * Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> publish;

    public Boolean publish() {
        if (publish == null) return null;
        return publish.getValue("FunctionArgs.publish");
    }

    /**
     * Whether to replace the security groups on the function&#39;s VPC configuration prior to destruction.
     * Removing these security group associations prior to function destruction can speed up security group deletion times of AWS&#39;s internal cleanup operations.
     * By default, the security groups will be replaced with the `default` security group in the function&#39;s configured VPC.
     * Set the `replacement_security_group_ids` attribute to use a custom list of security groups for replacement.
     * 
     */
    private UndeferrableValue<Boolean> replaceSecurityGroupsOnDestroy;

    public Boolean replaceSecurityGroupsOnDestroy() {
        if (replaceSecurityGroupsOnDestroy == null) return null;
        return replaceSecurityGroupsOnDestroy.getValue("FunctionArgs.replaceSecurityGroupsOnDestroy");
    }

    /**
     * List of security group IDs to assign to the function&#39;s VPC configuration prior to destruction.
     * `replace_security_groups_on_destroy` must be set to `true` to use this attribute.
     * 
     */
    private UndeferrableValue<List<String>> replacementSecurityGroupIds;

    public List<String> replacementSecurityGroupIds() {
        if (replacementSecurityGroupIds == null) return null;
        return replacementSecurityGroupIds.getValue("FunctionArgs.replacementSecurityGroupIds");
    }

    /**
     * Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
     * 
     */
    private UndeferrableValue<Integer> reservedConcurrentExecutions;

    public Integer reservedConcurrentExecutions() {
        if (reservedConcurrentExecutions == null) return null;
        return reservedConcurrentExecutions.getValue("FunctionArgs.reservedConcurrentExecutions");
    }

    /**
     * Amazon Resource Name (ARN) of the function&#39;s execution role. The role provides the function&#39;s identity and access to AWS services and resources.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> role;

    public String role() {
        if (role == null) return null;
        return role.getValue("FunctionArgs.role");
    }

    /**
     * Identifier of the function&#39;s runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
     * 
     */
    private UndeferrableValue<String> runtime;

    public String runtime() {
        if (runtime == null) return null;
        return runtime.getValue("FunctionArgs.runtime");
    }

    /**
     * S3 bucket location containing the function&#39;s deployment package. This bucket must reside in the same AWS region where you are creating the Lambda function. Exactly one of `filename`, `image_uri`, or `s3_bucket` must be specified. When `s3_bucket` is set, `s3_key` is required.
     * 
     */
    private UndeferrableValue<String> s3Bucket;

    public String s3Bucket() {
        if (s3Bucket == null) return null;
        return s3Bucket.getValue("FunctionArgs.s3Bucket");
    }

    /**
     * S3 key of an object containing the function&#39;s deployment package. When `s3_bucket` is set, `s3_key` is required.
     * 
     */
    private UndeferrableValue<String> s3Key;

    public String s3Key() {
        if (s3Key == null) return null;
        return s3Key.getValue("FunctionArgs.s3Key");
    }

    /**
     * Object version containing the function&#39;s deployment package. Conflicts with `filename` and `image_uri`.
     * 
     */
    private UndeferrableValue<String> s3ObjectVersion;

    public String s3ObjectVersion() {
        if (s3ObjectVersion == null) return null;
        return s3ObjectVersion.getValue("FunctionArgs.s3ObjectVersion");
    }

    /**
     * Set to true if you do not wish the function to be deleted at destroy time, and instead just remove the function from the Pulumi state.
     * 
     */
    private UndeferrableValue<Boolean> skipDestroy;

    public Boolean skipDestroy() {
        if (skipDestroy == null) return null;
        return skipDestroy.getValue("FunctionArgs.skipDestroy");
    }

    /**
     * Snap start settings block. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionSnapStartArgs> snapStart;

    public FunctionSnapStartArgs snapStart() {
        if (snapStart == null) return null;
        return snapStart.getValue("FunctionArgs.snapStart");
    }

    /**
     * Virtual attribute used to trigger replacement when source code changes. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`.
     * 
     */
    private UndeferrableValue<String> sourceCodeHash;

    public String sourceCodeHash() {
        if (sourceCodeHash == null) return null;
        return sourceCodeHash.getValue("FunctionArgs.sourceCodeHash");
    }

    /**
     * Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("FunctionArgs.tags");
    }

    /**
     * Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
     * 
     */
    private UndeferrableValue<Integer> timeout;

    public Integer timeout() {
        if (timeout == null) return null;
        return timeout.getValue("FunctionArgs.timeout");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionTracingConfigArgs> tracingConfig;

    public FunctionTracingConfigArgs tracingConfig() {
        if (tracingConfig == null) return null;
        return tracingConfig.getValue("FunctionArgs.tracingConfig");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<FunctionVpcConfigArgs> vpcConfig;

    public FunctionVpcConfigArgs vpcConfig() {
        if (vpcConfig == null) return null;
        return vpcConfig.getValue("FunctionArgs.vpcConfig");
    }

}
