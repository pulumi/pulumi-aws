// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lambda;

import com.pulumi.asset.Archive;
import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lambda.enums.Runtime;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionDeadLetterConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionEnvironmentArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionEphemeralStorageArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionFileSystemConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionImageConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionLoggingConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionSnapStartArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionTracingConfigArgs;
import com.pulumi.policypacks.aws.lambda.inputs.FunctionVpcConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lambda/function:Function")
public final class FunctionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Instruction set architecture for your Lambda function. Valid values are `[&#34;x86_64&#34;]` and `[&#34;arm64&#34;]`. Default is `[&#34;x86_64&#34;]`. Removing this attribute, function&#39;s architecture stay the same.
     * 
     */
    @PolicyResourceProperty(name="architectures", flag="unknown_architectures")
    private List<String> value_architectures;
    private boolean unknown_architectures;
    public List<String> architectures() {
        if (!unknown_architectures) return value_architectures;
        throw new UndeferrableValueException("Value 'FunctionArgs.architectures' is not present");
    }

    /**
     * Path to the function&#39;s deployment package within the local filesystem. Exactly one of `filename`, `image_uri`, or `s3_bucket` must be specified.
     * 
     */
    @PolicyResourceProperty(name="code", flag="unknown_code")
    private Archive value_code;
    private boolean unknown_code;
    public Archive code() {
        if (!unknown_code) return value_code;
        throw new UndeferrableValueException("Value 'FunctionArgs.code' is not present");
    }

    /**
     * To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
     * 
     */
    @PolicyResourceProperty(name="codeSigningConfigArn", flag="unknown_codeSigningConfigArn")
    private String value_codeSigningConfigArn;
    private boolean unknown_codeSigningConfigArn;
    public String codeSigningConfigArn() {
        if (!unknown_codeSigningConfigArn) return value_codeSigningConfigArn;
        throw new UndeferrableValueException("Value 'FunctionArgs.codeSigningConfigArn' is not present");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="deadLetterConfig", flag="unknown_deadLetterConfig")
    private FunctionDeadLetterConfigArgs value_deadLetterConfig;
    private boolean unknown_deadLetterConfig;
    public FunctionDeadLetterConfigArgs deadLetterConfig() {
        if (!unknown_deadLetterConfig) return value_deadLetterConfig;
        throw new UndeferrableValueException("Value 'FunctionArgs.deadLetterConfig' is not present");
    }

    /**
     * Description of what your Lambda Function does.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'FunctionArgs.description' is not present");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="environment", flag="unknown_environment")
    private FunctionEnvironmentArgs value_environment;
    private boolean unknown_environment;
    public FunctionEnvironmentArgs environment() {
        if (!unknown_environment) return value_environment;
        throw new UndeferrableValueException("Value 'FunctionArgs.environment' is not present");
    }

    /**
     * The amount of Ephemeral storage(`/tmp`) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of `512`MB. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="ephemeralStorage", flag="unknown_ephemeralStorage")
    private FunctionEphemeralStorageArgs value_ephemeralStorage;
    private boolean unknown_ephemeralStorage;
    public FunctionEphemeralStorageArgs ephemeralStorage() {
        if (!unknown_ephemeralStorage) return value_ephemeralStorage;
        throw new UndeferrableValueException("Value 'FunctionArgs.ephemeralStorage' is not present");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="fileSystemConfig", flag="unknown_fileSystemConfig")
    private FunctionFileSystemConfigArgs value_fileSystemConfig;
    private boolean unknown_fileSystemConfig;
    public FunctionFileSystemConfigArgs fileSystemConfig() {
        if (!unknown_fileSystemConfig) return value_fileSystemConfig;
        throw new UndeferrableValueException("Value 'FunctionArgs.fileSystemConfig' is not present");
    }

    /**
     * Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
     * 
     */
    @PolicyResourceProperty(name="handler", flag="unknown_handler")
    private String value_handler;
    private boolean unknown_handler;
    public String handler() {
        if (!unknown_handler) return value_handler;
        throw new UndeferrableValueException("Value 'FunctionArgs.handler' is not present");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="imageConfig", flag="unknown_imageConfig")
    private FunctionImageConfigArgs value_imageConfig;
    private boolean unknown_imageConfig;
    public FunctionImageConfigArgs imageConfig() {
        if (!unknown_imageConfig) return value_imageConfig;
        throw new UndeferrableValueException("Value 'FunctionArgs.imageConfig' is not present");
    }

    /**
     * ECR image URI containing the function&#39;s deployment package. Exactly one of `filename`, `image_uri`,  or `s3_bucket` must be specified.
     * 
     */
    @PolicyResourceProperty(name="imageUri", flag="unknown_imageUri")
    private String value_imageUri;
    private boolean unknown_imageUri;
    public String imageUri() {
        if (!unknown_imageUri) return value_imageUri;
        throw new UndeferrableValueException("Value 'FunctionArgs.imageUri' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'FunctionArgs.kmsKeyArn' is not present");
    }

    /**
     * List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
     * 
     */
    @PolicyResourceProperty(name="layers", flag="unknown_layers")
    private List<String> value_layers;
    private boolean unknown_layers;
    public List<String> layers() {
        if (!unknown_layers) return value_layers;
        throw new UndeferrableValueException("Value 'FunctionArgs.layers' is not present");
    }

    /**
     * Configuration block used to specify advanced logging settings. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="loggingConfig", flag="unknown_loggingConfig")
    private FunctionLoggingConfigArgs value_loggingConfig;
    private boolean unknown_loggingConfig;
    public FunctionLoggingConfigArgs loggingConfig() {
        if (!unknown_loggingConfig) return value_loggingConfig;
        throw new UndeferrableValueException("Value 'FunctionArgs.loggingConfig' is not present");
    }

    /**
     * Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
     * 
     */
    @PolicyResourceProperty(name="memorySize", flag="unknown_memorySize")
    private Integer value_memorySize;
    private boolean unknown_memorySize;
    public Integer memorySize() {
        if (!unknown_memorySize) return value_memorySize;
        throw new UndeferrableValueException("Value 'FunctionArgs.memorySize' is not present");
    }

    /**
     * Unique name for your Lambda Function.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'FunctionArgs.name' is not present");
    }

    /**
     * Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
     * 
     */
    @PolicyResourceProperty(name="packageType", flag="unknown_packageType")
    private String value_packageType;
    private boolean unknown_packageType;
    public String packageType() {
        if (!unknown_packageType) return value_packageType;
        throw new UndeferrableValueException("Value 'FunctionArgs.packageType' is not present");
    }

    /**
     * Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="publish", flag="unknown_publish")
    private Boolean value_publish;
    private boolean unknown_publish;
    public Boolean publish() {
        if (!unknown_publish) return value_publish;
        throw new UndeferrableValueException("Value 'FunctionArgs.publish' is not present");
    }

    /**
     * Whether to replace the security groups on the function&#39;s VPC configuration prior to destruction.
     * Removing these security group associations prior to function destruction can speed up security group deletion times of AWS&#39;s internal cleanup operations.
     * By default, the security groups will be replaced with the `default` security group in the function&#39;s configured VPC.
     * Set the `replacement_security_group_ids` attribute to use a custom list of security groups for replacement.
     * 
     */
    @PolicyResourceProperty(name="replaceSecurityGroupsOnDestroy", flag="unknown_replaceSecurityGroupsOnDestroy")
    private Boolean value_replaceSecurityGroupsOnDestroy;
    private boolean unknown_replaceSecurityGroupsOnDestroy;
    public Boolean replaceSecurityGroupsOnDestroy() {
        if (!unknown_replaceSecurityGroupsOnDestroy) return value_replaceSecurityGroupsOnDestroy;
        throw new UndeferrableValueException("Value 'FunctionArgs.replaceSecurityGroupsOnDestroy' is not present");
    }

    /**
     * List of security group IDs to assign to the function&#39;s VPC configuration prior to destruction.
     * `replace_security_groups_on_destroy` must be set to `true` to use this attribute.
     * 
     */
    @PolicyResourceProperty(name="replacementSecurityGroupIds", flag="unknown_replacementSecurityGroupIds")
    private List<String> value_replacementSecurityGroupIds;
    private boolean unknown_replacementSecurityGroupIds;
    public List<String> replacementSecurityGroupIds() {
        if (!unknown_replacementSecurityGroupIds) return value_replacementSecurityGroupIds;
        throw new UndeferrableValueException("Value 'FunctionArgs.replacementSecurityGroupIds' is not present");
    }

    /**
     * Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
     * 
     */
    @PolicyResourceProperty(name="reservedConcurrentExecutions", flag="unknown_reservedConcurrentExecutions")
    private Integer value_reservedConcurrentExecutions;
    private boolean unknown_reservedConcurrentExecutions;
    public Integer reservedConcurrentExecutions() {
        if (!unknown_reservedConcurrentExecutions) return value_reservedConcurrentExecutions;
        throw new UndeferrableValueException("Value 'FunctionArgs.reservedConcurrentExecutions' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the function&#39;s execution role. The role provides the function&#39;s identity and access to AWS services and resources.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="role", flag="unknown_role")
    private String value_role;
    private boolean unknown_role;
    public String role() {
        if (!unknown_role) return value_role;
        throw new UndeferrableValueException("Value 'FunctionArgs.role' is not present");
    }

    /**
     * Identifier of the function&#39;s runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
     * 
     */
    @PolicyResourceProperty(name="runtime", flag="unknown_runtime")
    private String value_runtime;
    private boolean unknown_runtime;
    public String runtime() {
        if (!unknown_runtime) return value_runtime;
        throw new UndeferrableValueException("Value 'FunctionArgs.runtime' is not present");
    }

    /**
     * S3 bucket location containing the function&#39;s deployment package. This bucket must reside in the same AWS region where you are creating the Lambda function. Exactly one of `filename`, `image_uri`, or `s3_bucket` must be specified. When `s3_bucket` is set, `s3_key` is required.
     * 
     */
    @PolicyResourceProperty(name="s3Bucket", flag="unknown_s3Bucket")
    private String value_s3Bucket;
    private boolean unknown_s3Bucket;
    public String s3Bucket() {
        if (!unknown_s3Bucket) return value_s3Bucket;
        throw new UndeferrableValueException("Value 'FunctionArgs.s3Bucket' is not present");
    }

    /**
     * S3 key of an object containing the function&#39;s deployment package. When `s3_bucket` is set, `s3_key` is required.
     * 
     */
    @PolicyResourceProperty(name="s3Key", flag="unknown_s3Key")
    private String value_s3Key;
    private boolean unknown_s3Key;
    public String s3Key() {
        if (!unknown_s3Key) return value_s3Key;
        throw new UndeferrableValueException("Value 'FunctionArgs.s3Key' is not present");
    }

    /**
     * Object version containing the function&#39;s deployment package. Conflicts with `filename` and `image_uri`.
     * 
     */
    @PolicyResourceProperty(name="s3ObjectVersion", flag="unknown_s3ObjectVersion")
    private String value_s3ObjectVersion;
    private boolean unknown_s3ObjectVersion;
    public String s3ObjectVersion() {
        if (!unknown_s3ObjectVersion) return value_s3ObjectVersion;
        throw new UndeferrableValueException("Value 'FunctionArgs.s3ObjectVersion' is not present");
    }

    /**
     * Set to true if you do not wish the function to be deleted at destroy time, and instead just remove the function from the Pulumi state.
     * 
     */
    @PolicyResourceProperty(name="skipDestroy", flag="unknown_skipDestroy")
    private Boolean value_skipDestroy;
    private boolean unknown_skipDestroy;
    public Boolean skipDestroy() {
        if (!unknown_skipDestroy) return value_skipDestroy;
        throw new UndeferrableValueException("Value 'FunctionArgs.skipDestroy' is not present");
    }

    /**
     * Snap start settings block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="snapStart", flag="unknown_snapStart")
    private FunctionSnapStartArgs value_snapStart;
    private boolean unknown_snapStart;
    public FunctionSnapStartArgs snapStart() {
        if (!unknown_snapStart) return value_snapStart;
        throw new UndeferrableValueException("Value 'FunctionArgs.snapStart' is not present");
    }

    /**
     * Virtual attribute used to trigger replacement when source code changes. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`.
     * 
     */
    @PolicyResourceProperty(name="sourceCodeHash", flag="unknown_sourceCodeHash")
    private String value_sourceCodeHash;
    private boolean unknown_sourceCodeHash;
    public String sourceCodeHash() {
        if (!unknown_sourceCodeHash) return value_sourceCodeHash;
        throw new UndeferrableValueException("Value 'FunctionArgs.sourceCodeHash' is not present");
    }

    /**
     * Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'FunctionArgs.tags' is not present");
    }

    /**
     * Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
     * 
     */
    @PolicyResourceProperty(name="timeout", flag="unknown_timeout")
    private Integer value_timeout;
    private boolean unknown_timeout;
    public Integer timeout() {
        if (!unknown_timeout) return value_timeout;
        throw new UndeferrableValueException("Value 'FunctionArgs.timeout' is not present");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="tracingConfig", flag="unknown_tracingConfig")
    private FunctionTracingConfigArgs value_tracingConfig;
    private boolean unknown_tracingConfig;
    public FunctionTracingConfigArgs tracingConfig() {
        if (!unknown_tracingConfig) return value_tracingConfig;
        throw new UndeferrableValueException("Value 'FunctionArgs.tracingConfig' is not present");
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="vpcConfig", flag="unknown_vpcConfig")
    private FunctionVpcConfigArgs value_vpcConfig;
    private boolean unknown_vpcConfig;
    public FunctionVpcConfigArgs vpcConfig() {
        if (!unknown_vpcConfig) return value_vpcConfig;
        throw new UndeferrableValueException("Value 'FunctionArgs.vpcConfig' is not present");
    }

}
