// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticbeanstalk;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticbeanstalk.outputs.EnvironmentAllSetting;
import com.pulumi.policypacks.aws.elasticbeanstalk.outputs.EnvironmentSetting;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticbeanstalk/environment:Environment")
public final class Environment extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * List of all option settings configured in this Environment. These
     * are a combination of default settings and their overrides from `setting` in
     * the configuration.
     * 
     */
    @PolicyResourceProperty(name="allSettings", flag="unknown_allSettings")
    private List<EnvironmentAllSetting> value_allSettings;
    private boolean unknown_allSettings;
    public List<EnvironmentAllSetting> allSettings() {
        if (!unknown_allSettings) return value_allSettings;
        throw new UndeferrableValueException("Value 'Environment.allSettings' is not present");
    }

    /**
     * Name of the application that contains the version
     * to be deployed
     * 
     */
    @PolicyResourceProperty(name="application", flag="unknown_application")
    private String value_application;
    private boolean unknown_application;
    public String application() {
        if (!unknown_application) return value_application;
        throw new UndeferrableValueException("Value 'Environment.application' is not present");
    }

    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Environment.arn' is not present");
    }

    /**
     * The autoscaling groups used by this Environment.
     * 
     */
    @PolicyResourceProperty(name="autoscalingGroups", flag="unknown_autoscalingGroups")
    private List<String> value_autoscalingGroups;
    private boolean unknown_autoscalingGroups;
    public List<String> autoscalingGroups() {
        if (!unknown_autoscalingGroups) return value_autoscalingGroups;
        throw new UndeferrableValueException("Value 'Environment.autoscalingGroups' is not present");
    }

    /**
     * Fully qualified DNS name for this Environment.
     * 
     */
    @PolicyResourceProperty(name="cname", flag="unknown_cname")
    private String value_cname;
    private boolean unknown_cname;
    public String cname() {
        if (!unknown_cname) return value_cname;
        throw new UndeferrableValueException("Value 'Environment.cname' is not present");
    }

    /**
     * Prefix to use for the fully qualified DNS name of
     * the Environment.
     * 
     */
    @PolicyResourceProperty(name="cnamePrefix", flag="unknown_cnamePrefix")
    private String value_cnamePrefix;
    private boolean unknown_cnamePrefix;
    public String cnamePrefix() {
        if (!unknown_cnamePrefix) return value_cnamePrefix;
        throw new UndeferrableValueException("Value 'Environment.cnamePrefix' is not present");
    }

    /**
     * Short description of the Environment
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Environment.description' is not present");
    }

    /**
     * The URL to the Load Balancer for this Environment
     * 
     */
    @PolicyResourceProperty(name="endpointUrl", flag="unknown_endpointUrl")
    private String value_endpointUrl;
    private boolean unknown_endpointUrl;
    public String endpointUrl() {
        if (!unknown_endpointUrl) return value_endpointUrl;
        throw new UndeferrableValueException("Value 'Environment.endpointUrl' is not present");
    }

    /**
     * Instances used by this Environment.
     * 
     */
    @PolicyResourceProperty(name="instances", flag="unknown_instances")
    private List<String> value_instances;
    private boolean unknown_instances;
    public List<String> instances() {
        if (!unknown_instances) return value_instances;
        throw new UndeferrableValueException("Value 'Environment.instances' is not present");
    }

    /**
     * Launch configurations in use by this Environment.
     * 
     */
    @PolicyResourceProperty(name="launchConfigurations", flag="unknown_launchConfigurations")
    private List<String> value_launchConfigurations;
    private boolean unknown_launchConfigurations;
    public List<String> launchConfigurations() {
        if (!unknown_launchConfigurations) return value_launchConfigurations;
        throw new UndeferrableValueException("Value 'Environment.launchConfigurations' is not present");
    }

    /**
     * Elastic load balancers in use by this Environment.
     * 
     */
    @PolicyResourceProperty(name="loadBalancers", flag="unknown_loadBalancers")
    private List<String> value_loadBalancers;
    private boolean unknown_loadBalancers;
    public List<String> loadBalancers() {
        if (!unknown_loadBalancers) return value_loadBalancers;
        throw new UndeferrableValueException("Value 'Environment.loadBalancers' is not present");
    }

    /**
     * A unique name for this Environment. This name is used
     * in the application URL
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Environment.name' is not present");
    }

    /**
     * The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the Elastic Beanstalk [Platform](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html#cfn-beanstalk-environment-platformarn)
     * to use in deployment
     * 
     */
    @PolicyResourceProperty(name="platformArn", flag="unknown_platformArn")
    private String value_platformArn;
    private boolean unknown_platformArn;
    public String platformArn() {
        if (!unknown_platformArn) return value_platformArn;
        throw new UndeferrableValueException("Value 'Environment.platformArn' is not present");
    }

    /**
     * The time between polling the AWS API to
     * check if changes have been applied. Use this to adjust the rate of API calls
     * for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
     * use the default behavior, which is an exponential backoff
     * 
     */
    @PolicyResourceProperty(name="pollInterval", flag="unknown_pollInterval")
    private @Nullable String value_pollInterval;
    private boolean unknown_pollInterval;
    public @Nullable String pollInterval() {
        if (!unknown_pollInterval) return value_pollInterval;
        throw new UndeferrableValueException("Value 'Environment.pollInterval' is not present");
    }

    /**
     * SQS queues in use by this Environment.
     * 
     */
    @PolicyResourceProperty(name="queues", flag="unknown_queues")
    private List<String> value_queues;
    private boolean unknown_queues;
    public List<String> queues() {
        if (!unknown_queues) return value_queues;
        throw new UndeferrableValueException("Value 'Environment.queues' is not present");
    }

    /**
     * Option settings to configure the new Environment. These
     * override specific values that are set as defaults. The format is detailed
     * below in Option Settings
     * 
     */
    @PolicyResourceProperty(name="settings", flag="unknown_settings")
    private @Nullable List<EnvironmentSetting> value_settings;
    private boolean unknown_settings;
    public @Nullable List<EnvironmentSetting> settings() {
        if (!unknown_settings) return value_settings;
        throw new UndeferrableValueException("Value 'Environment.settings' is not present");
    }

    /**
     * A solution stack to base your environment
     * off of. Example stacks can be found in the [Amazon API documentation](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)
     * 
     */
    @PolicyResourceProperty(name="solutionStackName", flag="unknown_solutionStackName")
    private String value_solutionStackName;
    private boolean unknown_solutionStackName;
    public String solutionStackName() {
        if (!unknown_solutionStackName) return value_solutionStackName;
        throw new UndeferrableValueException("Value 'Environment.solutionStackName' is not present");
    }

    /**
     * A set of tags to apply to the Environment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Environment.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Environment.tagsAll' is not present");
    }

    /**
     * The name of the Elastic Beanstalk Configuration
     * template to use in deployment
     * 
     */
    @PolicyResourceProperty(name="templateName", flag="unknown_templateName")
    private @Nullable String value_templateName;
    private boolean unknown_templateName;
    public @Nullable String templateName() {
        if (!unknown_templateName) return value_templateName;
        throw new UndeferrableValueException("Value 'Environment.templateName' is not present");
    }

    /**
     * Elastic Beanstalk Environment tier. Valid values are `Worker`
     * or `WebServer`. If tier is left blank `WebServer` will be used.
     * 
     */
    @PolicyResourceProperty(name="tier", flag="unknown_tier")
    private @Nullable String value_tier;
    private boolean unknown_tier;
    public @Nullable String tier() {
        if (!unknown_tier) return value_tier;
        throw new UndeferrableValueException("Value 'Environment.tier' is not present");
    }

    /**
     * Autoscaling triggers in use by this Environment.
     * 
     */
    @PolicyResourceProperty(name="triggers", flag="unknown_triggers")
    private List<String> value_triggers;
    private boolean unknown_triggers;
    public List<String> triggers() {
        if (!unknown_triggers) return value_triggers;
        throw new UndeferrableValueException("Value 'Environment.triggers' is not present");
    }

    /**
     * The name of the Elastic Beanstalk Application Version
     * to use in deployment.
     * 
     */
    @PolicyResourceProperty(name="version", flag="unknown_version")
    private String value_version;
    private boolean unknown_version;
    public String version() {
        if (!unknown_version) return value_version;
        throw new UndeferrableValueException("Value 'Environment.version' is not present");
    }

    /**
     * The maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for an Elastic Beanstalk Environment to be in a ready state before timing
     * out.
     * 
     */
    @PolicyResourceProperty(name="waitForReadyTimeout", flag="unknown_waitForReadyTimeout")
    private @Nullable String value_waitForReadyTimeout;
    private boolean unknown_waitForReadyTimeout;
    public @Nullable String waitForReadyTimeout() {
        if (!unknown_waitForReadyTimeout) return value_waitForReadyTimeout;
        throw new UndeferrableValueException("Value 'Environment.waitForReadyTimeout' is not present");
    }

}
