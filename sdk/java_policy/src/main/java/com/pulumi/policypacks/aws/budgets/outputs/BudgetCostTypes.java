// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.budgets.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import javax.annotation.Nullable;


public final class BudgetCostTypes {

    /**
     * A boolean value whether to include credits in the cost budget. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeCredit", flag="unknown_includeCredit")
    private @Nullable Boolean value_includeCredit;
    private boolean unknown_includeCredit;
    public @Nullable Boolean includeCredit() {
        if (!unknown_includeCredit) return value_includeCredit;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeCredit' is not present");
    }

    /**
     * Whether a budget includes discounts. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeDiscount", flag="unknown_includeDiscount")
    private @Nullable Boolean value_includeDiscount;
    private boolean unknown_includeDiscount;
    public @Nullable Boolean includeDiscount() {
        if (!unknown_includeDiscount) return value_includeDiscount;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeDiscount' is not present");
    }

    /**
     * A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeOtherSubscription", flag="unknown_includeOtherSubscription")
    private @Nullable Boolean value_includeOtherSubscription;
    private boolean unknown_includeOtherSubscription;
    public @Nullable Boolean includeOtherSubscription() {
        if (!unknown_includeOtherSubscription) return value_includeOtherSubscription;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeOtherSubscription' is not present");
    }

    /**
     * A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeRecurring", flag="unknown_includeRecurring")
    private @Nullable Boolean value_includeRecurring;
    private boolean unknown_includeRecurring;
    public @Nullable Boolean includeRecurring() {
        if (!unknown_includeRecurring) return value_includeRecurring;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeRecurring' is not present");
    }

    /**
     * A boolean value whether to include refunds in the cost budget. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeRefund", flag="unknown_includeRefund")
    private @Nullable Boolean value_includeRefund;
    private boolean unknown_includeRefund;
    public @Nullable Boolean includeRefund() {
        if (!unknown_includeRefund) return value_includeRefund;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeRefund' is not present");
    }

    /**
     * A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeSubscription", flag="unknown_includeSubscription")
    private @Nullable Boolean value_includeSubscription;
    private boolean unknown_includeSubscription;
    public @Nullable Boolean includeSubscription() {
        if (!unknown_includeSubscription) return value_includeSubscription;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeSubscription' is not present");
    }

    /**
     * A boolean value whether to include support costs in the cost budget. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeSupport", flag="unknown_includeSupport")
    private @Nullable Boolean value_includeSupport;
    private boolean unknown_includeSupport;
    public @Nullable Boolean includeSupport() {
        if (!unknown_includeSupport) return value_includeSupport;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeSupport' is not present");
    }

    /**
     * A boolean value whether to include tax in the cost budget. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeTax", flag="unknown_includeTax")
    private @Nullable Boolean value_includeTax;
    private boolean unknown_includeTax;
    public @Nullable Boolean includeTax() {
        if (!unknown_includeTax) return value_includeTax;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeTax' is not present");
    }

    /**
     * A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
     * 
     */
    @PolicyResourceProperty(name="includeUpfront", flag="unknown_includeUpfront")
    private @Nullable Boolean value_includeUpfront;
    private boolean unknown_includeUpfront;
    public @Nullable Boolean includeUpfront() {
        if (!unknown_includeUpfront) return value_includeUpfront;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.includeUpfront' is not present");
    }

    /**
     * Whether a budget uses the amortized rate. Defaults to `false`
     * 
     */
    @PolicyResourceProperty(name="useAmortized", flag="unknown_useAmortized")
    private @Nullable Boolean value_useAmortized;
    private boolean unknown_useAmortized;
    public @Nullable Boolean useAmortized() {
        if (!unknown_useAmortized) return value_useAmortized;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.useAmortized' is not present");
    }

    /**
     * A boolean value whether to use blended costs in the cost budget. Defaults to `false`
     * 
     */
    @PolicyResourceProperty(name="useBlended", flag="unknown_useBlended")
    private @Nullable Boolean value_useBlended;
    private boolean unknown_useBlended;
    public @Nullable Boolean useBlended() {
        if (!unknown_useBlended) return value_useBlended;
        throw new UndeferrableValueException("Value 'BudgetCostTypes.useBlended' is not present");
    }

}
