// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.budgets.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import javax.annotation.Nullable;


public final class BudgetCostTypes {

    /**
     * A boolean value whether to include credits in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeCredit;

    public @Nullable Boolean includeCredit() {
        if (includeCredit == null) return null;
        return includeCredit.getValue("BudgetCostTypes.includeCredit");
    }

    /**
     * Whether a budget includes discounts. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeDiscount;

    public @Nullable Boolean includeDiscount() {
        if (includeDiscount == null) return null;
        return includeDiscount.getValue("BudgetCostTypes.includeDiscount");
    }

    /**
     * A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeOtherSubscription;

    public @Nullable Boolean includeOtherSubscription() {
        if (includeOtherSubscription == null) return null;
        return includeOtherSubscription.getValue("BudgetCostTypes.includeOtherSubscription");
    }

    /**
     * A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeRecurring;

    public @Nullable Boolean includeRecurring() {
        if (includeRecurring == null) return null;
        return includeRecurring.getValue("BudgetCostTypes.includeRecurring");
    }

    /**
     * A boolean value whether to include refunds in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeRefund;

    public @Nullable Boolean includeRefund() {
        if (includeRefund == null) return null;
        return includeRefund.getValue("BudgetCostTypes.includeRefund");
    }

    /**
     * A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeSubscription;

    public @Nullable Boolean includeSubscription() {
        if (includeSubscription == null) return null;
        return includeSubscription.getValue("BudgetCostTypes.includeSubscription");
    }

    /**
     * A boolean value whether to include support costs in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeSupport;

    public @Nullable Boolean includeSupport() {
        if (includeSupport == null) return null;
        return includeSupport.getValue("BudgetCostTypes.includeSupport");
    }

    /**
     * A boolean value whether to include tax in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeTax;

    public @Nullable Boolean includeTax() {
        if (includeTax == null) return null;
        return includeTax.getValue("BudgetCostTypes.includeTax");
    }

    /**
     * A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeUpfront;

    public @Nullable Boolean includeUpfront() {
        if (includeUpfront == null) return null;
        return includeUpfront.getValue("BudgetCostTypes.includeUpfront");
    }

    /**
     * Whether a budget uses the amortized rate. Defaults to `false`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> useAmortized;

    public @Nullable Boolean useAmortized() {
        if (useAmortized == null) return null;
        return useAmortized.getValue("BudgetCostTypes.useAmortized");
    }

    /**
     * A boolean value whether to use blended costs in the cost budget. Defaults to `false`
     * 
     */
    private @Nullable UndeferrableValue<Boolean> useBlended;

    public @Nullable Boolean useBlended() {
        if (useBlended == null) return null;
        return useBlended.getValue("BudgetCostTypes.useBlended");
    }

}
