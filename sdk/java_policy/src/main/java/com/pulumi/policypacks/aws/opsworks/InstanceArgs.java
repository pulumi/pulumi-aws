// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opsworks;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.opsworks.inputs.InstanceEbsBlockDeviceArgs;
import com.pulumi.policypacks.aws.opsworks.inputs.InstanceEphemeralBlockDeviceArgs;
import com.pulumi.policypacks.aws.opsworks.inputs.InstanceRootBlockDeviceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:opsworks/instance:Instance")
public final class InstanceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * OpsWorks agent to install. Default is `INHERIT`.
     * 
     */
    private UndeferrableValue<String> agentVersion;

    public String agentVersion() {
        if (agentVersion == null) return null;
        return agentVersion.getValue("InstanceArgs.agentVersion");
    }

    /**
     * AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
     * 
     */
    private UndeferrableValue<String> amiId;

    public String amiId() {
        if (amiId == null) return null;
        return amiId.getValue("InstanceArgs.amiId");
    }

    /**
     * Machine architecture for created instances.  Valid values are `x86_64` or `i386`. The default is `x86_64`.
     * 
     */
    private UndeferrableValue<String> architecture;

    public String architecture() {
        if (architecture == null) return null;
        return architecture.getValue("InstanceArgs.architecture");
    }

    /**
     * Creates load-based or time-based instances.  Valid values are `load`, `timer`.
     * 
     */
    private UndeferrableValue<String> autoScalingType;

    public String autoScalingType() {
        if (autoScalingType == null) return null;
        return autoScalingType.getValue("InstanceArgs.autoScalingType");
    }

    /**
     * Name of the availability zone where instances will be created by default.
     * 
     */
    private UndeferrableValue<String> availabilityZone;

    public String availabilityZone() {
        if (availabilityZone == null) return null;
        return availabilityZone.getValue("InstanceArgs.availabilityZone");
    }

    /**
     * Time that the instance was created.
     * 
     */
    private UndeferrableValue<String> createdAt;

    public String createdAt() {
        if (createdAt == null) return null;
        return createdAt.getValue("InstanceArgs.createdAt");
    }

    /**
     * Whether to delete EBS volume on deletion. Default is `true`.
     * 
     */
    private UndeferrableValue<Boolean> deleteEbs;

    public Boolean deleteEbs() {
        if (deleteEbs == null) return null;
        return deleteEbs.getValue("InstanceArgs.deleteEbs");
    }

    /**
     * Whether to delete the Elastic IP on deletion.
     * 
     */
    private UndeferrableValue<Boolean> deleteEip;

    public Boolean deleteEip() {
        if (deleteEip == null) return null;
        return deleteEip.getValue("InstanceArgs.deleteEip");
    }

    /**
     * Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
     * 
     */
    private UndeferrableValue<List<InstanceEbsBlockDeviceArgs>> ebsBlockDevices;

    public List<InstanceEbsBlockDeviceArgs> ebsBlockDevices() {
        if (ebsBlockDevices == null) return null;
        return ebsBlockDevices.getValue("InstanceArgs.ebsBlockDevices");
    }

    /**
     * Whether the launched EC2 instance will be EBS-optimized.
     * 
     */
    private UndeferrableValue<Boolean> ebsOptimized;

    public Boolean ebsOptimized() {
        if (ebsOptimized == null) return null;
        return ebsOptimized.getValue("InstanceArgs.ebsOptimized");
    }

    /**
     * ECS cluster&#39;s ARN for container instances.
     * 
     */
    private UndeferrableValue<String> ecsClusterArn;

    public String ecsClusterArn() {
        if (ecsClusterArn == null) return null;
        return ecsClusterArn.getValue("InstanceArgs.ecsClusterArn");
    }

    /**
     * Instance Elastic IP address.
     * 
     */
    private UndeferrableValue<String> elasticIp;

    public String elasticIp() {
        if (elasticIp == null) return null;
        return elasticIp.getValue("InstanceArgs.elasticIp");
    }

    /**
     * Configuration block for ephemeral (also known as &#34;Instance Store&#34;) volumes on the instance. See Block Devices below.
     * 
     */
    private UndeferrableValue<List<InstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices;

    public List<InstanceEphemeralBlockDeviceArgs> ephemeralBlockDevices() {
        if (ephemeralBlockDevices == null) return null;
        return ephemeralBlockDevices.getValue("InstanceArgs.ephemeralBlockDevices");
    }

    /**
     * Instance&#39;s host name.
     * 
     */
    private UndeferrableValue<String> hostname;

    public String hostname() {
        if (hostname == null) return null;
        return hostname.getValue("InstanceArgs.hostname");
    }

    /**
     * For registered instances, infrastructure class: ec2 or on-premises.
     * 
     */
    private UndeferrableValue<String> infrastructureClass;

    public String infrastructureClass() {
        if (infrastructureClass == null) return null;
        return infrastructureClass.getValue("InstanceArgs.infrastructureClass");
    }

    /**
     * Controls where to install OS and package updates when the instance boots.  Default is `true`.
     * 
     */
    private UndeferrableValue<Boolean> installUpdatesOnBoot;

    public Boolean installUpdatesOnBoot() {
        if (installUpdatesOnBoot == null) return null;
        return installUpdatesOnBoot.getValue("InstanceArgs.installUpdatesOnBoot");
    }

    /**
     * ARN of the instance&#39;s IAM profile.
     * 
     */
    private UndeferrableValue<String> instanceProfileArn;

    public String instanceProfileArn() {
        if (instanceProfileArn == null) return null;
        return instanceProfileArn.getValue("InstanceArgs.instanceProfileArn");
    }

    /**
     * Type of instance to start.
     * 
     */
    private UndeferrableValue<String> instanceType;

    public String instanceType() {
        if (instanceType == null) return null;
        return instanceType.getValue("InstanceArgs.instanceType");
    }

    /**
     * List of the layers the instance will belong to.
     * 
     */
    private UndeferrableValue<List<String>> layerIds;

    public List<String> layerIds() {
        if (layerIds == null) return null;
        return layerIds.getValue("InstanceArgs.layerIds");
    }

    /**
     * Name of operating system that will be installed.
     * 
     */
    private UndeferrableValue<String> os;

    public String os() {
        if (os == null) return null;
        return os.getValue("InstanceArgs.os");
    }

    /**
     * Configuration block for the root block device of the instance. See Block Devices below.
     * 
     */
    private UndeferrableValue<List<InstanceRootBlockDeviceArgs>> rootBlockDevices;

    public List<InstanceRootBlockDeviceArgs> rootBlockDevices() {
        if (rootBlockDevices == null) return null;
        return rootBlockDevices.getValue("InstanceArgs.rootBlockDevices");
    }

    /**
     * Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
     * 
     */
    private UndeferrableValue<String> rootDeviceType;

    public String rootDeviceType() {
        if (rootDeviceType == null) return null;
        return rootDeviceType.getValue("InstanceArgs.rootDeviceType");
    }

    /**
     * Associated security groups.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("InstanceArgs.securityGroupIds");
    }

    /**
     * Name of the SSH keypair that instances will have by default.
     * 
     */
    private UndeferrableValue<String> sshKeyName;

    public String sshKeyName() {
        if (sshKeyName == null) return null;
        return sshKeyName.getValue("InstanceArgs.sshKeyName");
    }

    /**
     * Identifier of the stack the instance will belong to.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> stackId;

    public String stackId() {
        if (stackId == null) return null;
        return stackId.getValue("InstanceArgs.stackId");
    }

    /**
     * Desired state of the instance. Valid values are `running` or `stopped`.
     * 
     */
    private UndeferrableValue<String> state;

    public String state() {
        if (state == null) return null;
        return state.getValue("InstanceArgs.state");
    }

    /**
     * Instance status. Will be one of `booting`, `connection_lost`, `online`, `pending`, `rebooting`, `requested`, `running_setup`, `setup_failed`, `shutting_down`, `start_failed`, `stop_failed`, `stopped`, `stopping`, `terminated`, or `terminating`.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("InstanceArgs.status");
    }

    /**
     * Subnet ID to attach to.
     * 
     */
    private UndeferrableValue<String> subnetId;

    public String subnetId() {
        if (subnetId == null) return null;
        return subnetId.getValue("InstanceArgs.subnetId");
    }

    /**
     * Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
     * 
     */
    private UndeferrableValue<String> tenancy;

    public String tenancy() {
        if (tenancy == null) return null;
        return tenancy.getValue("InstanceArgs.tenancy");
    }

    /**
     * Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
     * 
     */
    private UndeferrableValue<String> virtualizationType;

    public String virtualizationType() {
        if (virtualizationType == null) return null;
        return virtualizationType.getValue("InstanceArgs.virtualizationType");
    }

}
