// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cleanrooms;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cleanrooms.outputs.MembershipDefaultResultConfiguration;
import com.pulumi.policypacks.aws.cleanrooms.outputs.MembershipPaymentConfiguration;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cleanrooms/membership:Membership")
public final class Membership extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the membership.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Membership.arn' is not present");
    }

    /**
     * The ARN of the joined collaboration.
     * 
     */
    @PolicyResourceProperty(name="collaborationArn", flag="unknown_collaborationArn")
    private String value_collaborationArn;
    private boolean unknown_collaborationArn;
    public String collaborationArn() {
        if (!unknown_collaborationArn) return value_collaborationArn;
        throw new UndeferrableValueException("Value 'Membership.collaborationArn' is not present");
    }

    /**
     * The account ID of the collaboration&#39;s creator.
     * 
     */
    @PolicyResourceProperty(name="collaborationCreatorAccountId", flag="unknown_collaborationCreatorAccountId")
    private String value_collaborationCreatorAccountId;
    private boolean unknown_collaborationCreatorAccountId;
    public String collaborationCreatorAccountId() {
        if (!unknown_collaborationCreatorAccountId) return value_collaborationCreatorAccountId;
        throw new UndeferrableValueException("Value 'Membership.collaborationCreatorAccountId' is not present");
    }

    /**
     * The display name of the collaboration&#39;s creator.
     * 
     */
    @PolicyResourceProperty(name="collaborationCreatorDisplayName", flag="unknown_collaborationCreatorDisplayName")
    private String value_collaborationCreatorDisplayName;
    private boolean unknown_collaborationCreatorDisplayName;
    public String collaborationCreatorDisplayName() {
        if (!unknown_collaborationCreatorDisplayName) return value_collaborationCreatorDisplayName;
        throw new UndeferrableValueException("Value 'Membership.collaborationCreatorDisplayName' is not present");
    }

    /**
     * The ID of the collaboration to which the member was invited.
     * 
     */
    @PolicyResourceProperty(name="collaborationId", flag="unknown_collaborationId")
    private String value_collaborationId;
    private boolean unknown_collaborationId;
    public String collaborationId() {
        if (!unknown_collaborationId) return value_collaborationId;
        throw new UndeferrableValueException("Value 'Membership.collaborationId' is not present");
    }

    /**
     * The name of the joined collaboration.
     * 
     */
    @PolicyResourceProperty(name="collaborationName", flag="unknown_collaborationName")
    private String value_collaborationName;
    private boolean unknown_collaborationName;
    public String collaborationName() {
        if (!unknown_collaborationName) return value_collaborationName;
        throw new UndeferrableValueException("Value 'Membership.collaborationName' is not present");
    }

    /**
     * The date and time the membership was created.
     * 
     */
    @PolicyResourceProperty(name="createTime", flag="unknown_createTime")
    private String value_createTime;
    private boolean unknown_createTime;
    public String createTime() {
        if (!unknown_createTime) return value_createTime;
        throw new UndeferrableValueException("Value 'Membership.createTime' is not present");
    }

    /**
     * The default configuration for a query result.
     * 
     */
    @PolicyResourceProperty(name="defaultResultConfiguration", flag="unknown_defaultResultConfiguration")
    private @Nullable MembershipDefaultResultConfiguration value_defaultResultConfiguration;
    private boolean unknown_defaultResultConfiguration;
    public @Nullable MembershipDefaultResultConfiguration defaultResultConfiguration() {
        if (!unknown_defaultResultConfiguration) return value_defaultResultConfiguration;
        throw new UndeferrableValueException("Value 'Membership.defaultResultConfiguration' is not present");
    }

    /**
     * The list of abilities for the invited member.
     * 
     */
    @PolicyResourceProperty(name="memberAbilities", flag="unknown_memberAbilities")
    private List<String> value_memberAbilities;
    private boolean unknown_memberAbilities;
    public List<String> memberAbilities() {
        if (!unknown_memberAbilities) return value_memberAbilities;
        throw new UndeferrableValueException("Value 'Membership.memberAbilities' is not present");
    }

    @PolicyResourceProperty(name="paymentConfiguration", flag="unknown_paymentConfiguration")
    private @Nullable MembershipPaymentConfiguration value_paymentConfiguration;
    private boolean unknown_paymentConfiguration;
    public @Nullable MembershipPaymentConfiguration paymentConfiguration() {
        if (!unknown_paymentConfiguration) return value_paymentConfiguration;
        throw new UndeferrableValueException("Value 'Membership.paymentConfiguration' is not present");
    }

    /**
     * An indicator as to whether query logging has been enabled or disabled for the membership.
     * 
     */
    @PolicyResourceProperty(name="queryLogStatus", flag="unknown_queryLogStatus")
    private String value_queryLogStatus;
    private boolean unknown_queryLogStatus;
    public String queryLogStatus() {
        if (!unknown_queryLogStatus) return value_queryLogStatus;
        throw new UndeferrableValueException("Value 'Membership.queryLogStatus' is not present");
    }

    /**
     * The status of the membership.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Membership.status' is not present");
    }

    /**
     * Key value pairs which tag the membership.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Membership.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Membership.tagsAll' is not present");
    }

    /**
     * The date and time the membership was last updated.
     * 
     */
    @PolicyResourceProperty(name="updateTime", flag="unknown_updateTime")
    private String value_updateTime;
    private boolean unknown_updateTime;
    public String updateTime() {
        if (!unknown_updateTime) return value_updateTime;
        throw new UndeferrableValueException("Value 'Membership.updateTime' is not present");
    }

}
