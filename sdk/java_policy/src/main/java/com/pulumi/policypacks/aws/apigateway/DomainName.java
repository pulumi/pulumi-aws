// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apigateway.outputs.DomainNameEndpointConfiguration;
import com.pulumi.policypacks.aws.apigateway.outputs.DomainNameMutualTlsAuthentication;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigateway/domainName:DomainName")
public final class DomainName extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of domain name.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'DomainName.arn' is not present");
    }

    /**
     * ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificate_name`, `certificate_body`, `certificate_chain`, `certificate_private_key`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    @PolicyResourceProperty(name="certificateArn", flag="unknown_certificateArn")
    private @Nullable String value_certificateArn;
    private boolean unknown_certificateArn;
    public @Nullable String certificateArn() {
        if (!unknown_certificateArn) return value_certificateArn;
        throw new UndeferrableValueException("Value 'DomainName.certificateArn' is not present");
    }

    /**
     * Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    @PolicyResourceProperty(name="certificateBody", flag="unknown_certificateBody")
    private @Nullable String value_certificateBody;
    private boolean unknown_certificateBody;
    public @Nullable String certificateBody() {
        if (!unknown_certificateBody) return value_certificateBody;
        throw new UndeferrableValueException("Value 'DomainName.certificateBody' is not present");
    }

    /**
     * Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    @PolicyResourceProperty(name="certificateChain", flag="unknown_certificateChain")
    private @Nullable String value_certificateChain;
    private boolean unknown_certificateChain;
    public @Nullable String certificateChain() {
        if (!unknown_certificateChain) return value_certificateChain;
        throw new UndeferrableValueException("Value 'DomainName.certificateChain' is not present");
    }

    /**
     * Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`. Required if `certificate_arn` is not set.
     * 
     */
    @PolicyResourceProperty(name="certificateName", flag="unknown_certificateName")
    private @Nullable String value_certificateName;
    private boolean unknown_certificateName;
    public @Nullable String certificateName() {
        if (!unknown_certificateName) return value_certificateName;
        throw new UndeferrableValueException("Value 'DomainName.certificateName' is not present");
    }

    /**
     * Private key associated with the domain certificate given in `certificate_body`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    @PolicyResourceProperty(name="certificatePrivateKey", flag="unknown_certificatePrivateKey")
    private @Nullable String value_certificatePrivateKey;
    private boolean unknown_certificatePrivateKey;
    public @Nullable String certificatePrivateKey() {
        if (!unknown_certificatePrivateKey) return value_certificatePrivateKey;
        throw new UndeferrableValueException("Value 'DomainName.certificatePrivateKey' is not present");
    }

    /**
     * Upload date associated with the domain certificate.
     * 
     */
    @PolicyResourceProperty(name="certificateUploadDate", flag="unknown_certificateUploadDate")
    private String value_certificateUploadDate;
    private boolean unknown_certificateUploadDate;
    public String certificateUploadDate() {
        if (!unknown_certificateUploadDate) return value_certificateUploadDate;
        throw new UndeferrableValueException("Value 'DomainName.certificateUploadDate' is not present");
    }

    /**
     * Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
     * 
     */
    @PolicyResourceProperty(name="cloudfrontDomainName", flag="unknown_cloudfrontDomainName")
    private String value_cloudfrontDomainName;
    private boolean unknown_cloudfrontDomainName;
    public String cloudfrontDomainName() {
        if (!unknown_cloudfrontDomainName) return value_cloudfrontDomainName;
        throw new UndeferrableValueException("Value 'DomainName.cloudfrontDomainName' is not present");
    }

    /**
     * For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
     * 
     */
    @PolicyResourceProperty(name="cloudfrontZoneId", flag="unknown_cloudfrontZoneId")
    private String value_cloudfrontZoneId;
    private boolean unknown_cloudfrontZoneId;
    public String cloudfrontZoneId() {
        if (!unknown_cloudfrontZoneId) return value_cloudfrontZoneId;
        throw new UndeferrableValueException("Value 'DomainName.cloudfrontZoneId' is not present");
    }

    /**
     * Fully-qualified domain name to register.
     * 
     */
    @PolicyResourceProperty(name="domainName", flag="unknown_domainName")
    private String value_domainName;
    private boolean unknown_domainName;
    public String domainName() {
        if (!unknown_domainName) return value_domainName;
        throw new UndeferrableValueException("Value 'DomainName.domainName' is not present");
    }

    /**
     * The identifier for the domain name resource. Supported only for private custom domain names.
     * 
     */
    @PolicyResourceProperty(name="domainNameId", flag="unknown_domainNameId")
    private String value_domainNameId;
    private boolean unknown_domainNameId;
    public String domainNameId() {
        if (!unknown_domainNameId) return value_domainNameId;
        throw new UndeferrableValueException("Value 'DomainName.domainNameId' is not present");
    }

    /**
     * Configuration block defining API endpoint information including type. See below.
     * 
     */
    @PolicyResourceProperty(name="endpointConfiguration", flag="unknown_endpointConfiguration")
    private DomainNameEndpointConfiguration value_endpointConfiguration;
    private boolean unknown_endpointConfiguration;
    public DomainNameEndpointConfiguration endpointConfiguration() {
        if (!unknown_endpointConfiguration) return value_endpointConfiguration;
        throw new UndeferrableValueException("Value 'DomainName.endpointConfiguration' is not present");
    }

    /**
     * Mutual TLS authentication configuration for the domain name. See below.
     * 
     */
    @PolicyResourceProperty(name="mutualTlsAuthentication", flag="unknown_mutualTlsAuthentication")
    private @Nullable DomainNameMutualTlsAuthentication value_mutualTlsAuthentication;
    private boolean unknown_mutualTlsAuthentication;
    public @Nullable DomainNameMutualTlsAuthentication mutualTlsAuthentication() {
        if (!unknown_mutualTlsAuthentication) return value_mutualTlsAuthentication;
        throw new UndeferrableValueException("Value 'DomainName.mutualTlsAuthentication' is not present");
    }

    /**
     * ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificate_arn` is issued via an ACM Private CA or `mutual_tls_authentication` is configured with an ACM-imported certificate.)
     * 
     */
    @PolicyResourceProperty(name="ownershipVerificationCertificateArn", flag="unknown_ownershipVerificationCertificateArn")
    private String value_ownershipVerificationCertificateArn;
    private boolean unknown_ownershipVerificationCertificateArn;
    public String ownershipVerificationCertificateArn() {
        if (!unknown_ownershipVerificationCertificateArn) return value_ownershipVerificationCertificateArn;
        throw new UndeferrableValueException("Value 'DomainName.ownershipVerificationCertificateArn' is not present");
    }

    /**
     * A stringified JSON policy document that applies to the execute-api service for this DomainName regardless of the caller and Method configuration. Supported only for private custom domain names.
     * 
     */
    @PolicyResourceProperty(name="policy", flag="unknown_policy")
    private @Nullable String value_policy;
    private boolean unknown_policy;
    public @Nullable String policy() {
        if (!unknown_policy) return value_policy;
        throw new UndeferrableValueException("Value 'DomainName.policy' is not present");
    }

    /**
     * ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
     * 
     * When uploading a certificate, the following arguments are supported:
     * 
     */
    @PolicyResourceProperty(name="regionalCertificateArn", flag="unknown_regionalCertificateArn")
    private @Nullable String value_regionalCertificateArn;
    private boolean unknown_regionalCertificateArn;
    public @Nullable String regionalCertificateArn() {
        if (!unknown_regionalCertificateArn) return value_regionalCertificateArn;
        throw new UndeferrableValueException("Value 'DomainName.regionalCertificateArn' is not present");
    }

    /**
     * User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
     * 
     */
    @PolicyResourceProperty(name="regionalCertificateName", flag="unknown_regionalCertificateName")
    private @Nullable String value_regionalCertificateName;
    private boolean unknown_regionalCertificateName;
    public @Nullable String regionalCertificateName() {
        if (!unknown_regionalCertificateName) return value_regionalCertificateName;
        throw new UndeferrableValueException("Value 'DomainName.regionalCertificateName' is not present");
    }

    /**
     * Hostname for the custom domain&#39;s regional endpoint.
     * 
     */
    @PolicyResourceProperty(name="regionalDomainName", flag="unknown_regionalDomainName")
    private String value_regionalDomainName;
    private boolean unknown_regionalDomainName;
    public String regionalDomainName() {
        if (!unknown_regionalDomainName) return value_regionalDomainName;
        throw new UndeferrableValueException("Value 'DomainName.regionalDomainName' is not present");
    }

    /**
     * Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     * 
     */
    @PolicyResourceProperty(name="regionalZoneId", flag="unknown_regionalZoneId")
    private String value_regionalZoneId;
    private boolean unknown_regionalZoneId;
    public String regionalZoneId() {
        if (!unknown_regionalZoneId) return value_regionalZoneId;
        throw new UndeferrableValueException("Value 'DomainName.regionalZoneId' is not present");
    }

    /**
     * Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
     * 
     */
    @PolicyResourceProperty(name="securityPolicy", flag="unknown_securityPolicy")
    private String value_securityPolicy;
    private boolean unknown_securityPolicy;
    public String securityPolicy() {
        if (!unknown_securityPolicy) return value_securityPolicy;
        throw new UndeferrableValueException("Value 'DomainName.securityPolicy' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * When referencing an AWS-managed certificate, the following arguments are supported:
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'DomainName.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'DomainName.tagsAll' is not present");
    }

}
