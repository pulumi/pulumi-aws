// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesisanalyticsv2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationArgs;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationCloudwatchLoggingOptionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:kinesisanalyticsv2/application:Application")
public final class ApplicationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The application&#39;s configuration
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationArgs> applicationConfiguration;

    public ApplicationApplicationConfigurationArgs applicationConfiguration() {
        if (applicationConfiguration == null) return null;
        return applicationConfiguration.getValue("ApplicationArgs.applicationConfiguration");
    }

    /**
     * The application&#39;s mode. Valid values are `STREAMING`, `INTERACTIVE`.
     * 
     */
    private UndeferrableValue<String> applicationMode;

    public String applicationMode() {
        if (applicationMode == null) return null;
        return applicationMode.getValue("ApplicationArgs.applicationMode");
    }

    /**
     * A CloudWatch log stream to monitor application configuration errors.
     * 
     */
    private UndeferrableValue<ApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public ApplicationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions() {
        if (cloudwatchLoggingOptions == null) return null;
        return cloudwatchLoggingOptions.getValue("ApplicationArgs.cloudwatchLoggingOptions");
    }

    /**
     * A summary description of the application.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ApplicationArgs.description");
    }

    /**
     * Whether to force stop an unresponsive Flink-based application.
     * 
     */
    private UndeferrableValue<Boolean> forceStop;

    public Boolean forceStop() {
        if (forceStop == null) return null;
        return forceStop.getValue("ApplicationArgs.forceStop");
    }

    /**
     * The name of the application.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ApplicationArgs.name");
    }

    /**
     * The runtime environment for the application. Valid values: `SQL-1_0`, `FLINK-1_6`, `FLINK-1_8`, `FLINK-1_11`, `FLINK-1_13`, `FLINK-1_15`, `FLINK-1_18`, `FLINK-1_19`.
     * 
     */
    private UndeferrableValue<String> runtimeEnvironment;

    public String runtimeEnvironment() {
        if (runtimeEnvironment == null) return null;
        return runtimeEnvironment.getValue("ApplicationArgs.runtimeEnvironment");
    }

    /**
     * The ARN of the IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.
     * 
     */
    private UndeferrableValue<String> serviceExecutionRole;

    public String serviceExecutionRole() {
        if (serviceExecutionRole == null) return null;
        return serviceExecutionRole.getValue("ApplicationArgs.serviceExecutionRole");
    }

    /**
     * Whether to start or stop the application.
     * 
     */
    private UndeferrableValue<Boolean> startApplication;

    public Boolean startApplication() {
        if (startApplication == null) return null;
        return startApplication.getValue("ApplicationArgs.startApplication");
    }

    /**
     * A map of tags to assign to the application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ApplicationArgs.tags");
    }

}
