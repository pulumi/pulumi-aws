// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.connect;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.connect.inputs.QuickConnectQuickConnectConfigArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:connect/quickConnect:QuickConnect")
public final class QuickConnectArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies the description of the Quick Connect.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("QuickConnectArgs.description");
    }

    /**
     * Specifies the identifier of the hosting Amazon Connect Instance.
     * 
     */
    private UndeferrableValue<String> instanceId;

    public String instanceId() {
        if (instanceId == null) return null;
        return instanceId.getValue("QuickConnectArgs.instanceId");
    }

    /**
     * Specifies the name of the Quick Connect.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("QuickConnectArgs.name");
    }

    /**
     * A block that defines the configuration information for the Quick Connect: `quick_connect_type` and one of `phone_config`, `queue_config`, `user_config` . The Quick Connect Config block is documented below.
     * 
     */
    private UndeferrableValue<QuickConnectQuickConnectConfigArgs> quickConnectConfig;

    public QuickConnectQuickConnectConfigArgs quickConnectConfig() {
        if (quickConnectConfig == null) return null;
        return quickConnectConfig.getValue("QuickConnectArgs.quickConnectConfig");
    }

    /**
     * Tags to apply to the Quick Connect. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("QuickConnectArgs.tags");
    }

}
