// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.alb.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.alb.outputs.ListenerDefaultActionAuthenticateCognito;
import com.pulumi.policypacks.aws.alb.outputs.ListenerDefaultActionAuthenticateOidc;
import com.pulumi.policypacks.aws.alb.outputs.ListenerDefaultActionFixedResponse;
import com.pulumi.policypacks.aws.alb.outputs.ListenerDefaultActionForward;
import com.pulumi.policypacks.aws.alb.outputs.ListenerDefaultActionRedirect;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ListenerDefaultAction {

    /**
     * Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. See below.
     * 
     */
    private @Nullable UndeferrableValue<ListenerDefaultActionAuthenticateCognito> authenticateCognito;

    public @Nullable ListenerDefaultActionAuthenticateCognito authenticateCognito() {
        if (authenticateCognito == null) return null;
        return authenticateCognito.getValue("ListenerDefaultAction.authenticateCognito");
    }

    /**
     * Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. See below.
     * 
     */
    private @Nullable UndeferrableValue<ListenerDefaultActionAuthenticateOidc> authenticateOidc;

    public @Nullable ListenerDefaultActionAuthenticateOidc authenticateOidc() {
        if (authenticateOidc == null) return null;
        return authenticateOidc.getValue("ListenerDefaultAction.authenticateOidc");
    }

    /**
     * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
     * 
     */
    private @Nullable UndeferrableValue<ListenerDefaultActionFixedResponse> fixedResponse;

    public @Nullable ListenerDefaultActionFixedResponse fixedResponse() {
        if (fixedResponse == null) return null;
        return fixedResponse.getValue("ListenerDefaultAction.fixedResponse");
    }

    /**
     * Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. See below.
     * 
     */
    private @Nullable UndeferrableValue<ListenerDefaultActionForward> forward;

    public @Nullable ListenerDefaultActionForward forward() {
        if (forward == null) return null;
        return forward.getValue("ListenerDefaultAction.forward");
    }

    /**
     * Order for the action. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`. Defaults to the position in the list of actions.
     * 
     */
    private @Nullable UndeferrableValue<Integer> order;

    public @Nullable Integer order() {
        if (order == null) return null;
        return order.getValue("ListenerDefaultAction.order");
    }

    /**
     * Configuration block for creating a redirect action. Required if `type` is `redirect`. See below.
     * 
     */
    private @Nullable UndeferrableValue<ListenerDefaultActionRedirect> redirect;

    public @Nullable ListenerDefaultActionRedirect redirect() {
        if (redirect == null) return null;
        return redirect.getValue("ListenerDefaultAction.redirect");
    }

    /**
     * ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead. Can be specified with `forward` but ARNs must match.
     * 
     */
    private @Nullable UndeferrableValue<String> targetGroupArn;

    public @Nullable String targetGroupArn() {
        if (targetGroupArn == null) return null;
        return targetGroupArn.getValue("ListenerDefaultAction.targetGroupArn");
    }

    /**
     * Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ListenerDefaultAction.type");
    }

}
