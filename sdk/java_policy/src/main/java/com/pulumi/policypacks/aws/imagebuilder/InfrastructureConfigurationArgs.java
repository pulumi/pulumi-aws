// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.imagebuilder;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.imagebuilder.inputs.InfrastructureConfigurationInstanceMetadataOptionsArgs;
import com.pulumi.policypacks.aws.imagebuilder.inputs.InfrastructureConfigurationLoggingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration")
public final class InfrastructureConfigurationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Description for the configuration.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("InfrastructureConfigurationArgs.description");
    }

    /**
     * Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
     * 
     */
    private UndeferrableValue<InfrastructureConfigurationInstanceMetadataOptionsArgs> instanceMetadataOptions;

    public InfrastructureConfigurationInstanceMetadataOptionsArgs instanceMetadataOptions() {
        if (instanceMetadataOptions == null) return null;
        return instanceMetadataOptions.getValue("InfrastructureConfigurationArgs.instanceMetadataOptions");
    }

    /**
     * Name of IAM Instance Profile.
     * 
     */
    private UndeferrableValue<String> instanceProfileName;

    public String instanceProfileName() {
        if (instanceProfileName == null) return null;
        return instanceProfileName.getValue("InfrastructureConfigurationArgs.instanceProfileName");
    }

    /**
     * Set of EC2 Instance Types.
     * 
     */
    private UndeferrableValue<List<String>> instanceTypes;

    public List<String> instanceTypes() {
        if (instanceTypes == null) return null;
        return instanceTypes.getValue("InfrastructureConfigurationArgs.instanceTypes");
    }

    /**
     * Name of EC2 Key Pair.
     * 
     */
    private UndeferrableValue<String> keyPair;

    public String keyPair() {
        if (keyPair == null) return null;
        return keyPair.getValue("InfrastructureConfigurationArgs.keyPair");
    }

    /**
     * Configuration block with logging settings. Detailed below.
     * 
     */
    private UndeferrableValue<InfrastructureConfigurationLoggingArgs> logging;

    public InfrastructureConfigurationLoggingArgs logging() {
        if (logging == null) return null;
        return logging.getValue("InfrastructureConfigurationArgs.logging");
    }

    /**
     * Name for the configuration.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("InfrastructureConfigurationArgs.name");
    }

    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     * 
     */
    private UndeferrableValue<Map<String,String>> resourceTags;

    public Map<String,String> resourceTags() {
        if (resourceTags == null) return null;
        return resourceTags.getValue("InfrastructureConfigurationArgs.resourceTags");
    }

    /**
     * Set of EC2 Security Group identifiers.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("InfrastructureConfigurationArgs.securityGroupIds");
    }

    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     * 
     */
    private UndeferrableValue<String> snsTopicArn;

    public String snsTopicArn() {
        if (snsTopicArn == null) return null;
        return snsTopicArn.getValue("InfrastructureConfigurationArgs.snsTopicArn");
    }

    /**
     * EC2 Subnet identifier. Also requires `security_group_ids` argument.
     * 
     */
    private UndeferrableValue<String> subnetId;

    public String subnetId() {
        if (subnetId == null) return null;
        return subnetId.getValue("InfrastructureConfigurationArgs.subnetId");
    }

    /**
     * Key-value map of resource tags to assign to the configuration. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("InfrastructureConfigurationArgs.tags");
    }

    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> terminateInstanceOnFailure;

    public Boolean terminateInstanceOnFailure() {
        if (terminateInstanceOnFailure == null) return null;
        return terminateInstanceOnFailure.getValue("InfrastructureConfigurationArgs.terminateInstanceOnFailure");
    }

}
