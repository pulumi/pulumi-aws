// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.imagebuilder;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.imagebuilder.inputs.InfrastructureConfigurationInstanceMetadataOptionsArgs;
import com.pulumi.policypacks.aws.imagebuilder.inputs.InfrastructureConfigurationLoggingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration")
public final class InfrastructureConfigurationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Description for the configuration.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.description' is not present");
    }

    /**
     * Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="instanceMetadataOptions", flag="unknown_instanceMetadataOptions")
    private InfrastructureConfigurationInstanceMetadataOptionsArgs value_instanceMetadataOptions;
    private boolean unknown_instanceMetadataOptions;
    public InfrastructureConfigurationInstanceMetadataOptionsArgs instanceMetadataOptions() {
        if (!unknown_instanceMetadataOptions) return value_instanceMetadataOptions;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.instanceMetadataOptions' is not present");
    }

    /**
     * Name of IAM Instance Profile.
     * 
     */
    @PolicyResourceProperty(name="instanceProfileName", flag="unknown_instanceProfileName")
    private String value_instanceProfileName;
    private boolean unknown_instanceProfileName;
    public String instanceProfileName() {
        if (!unknown_instanceProfileName) return value_instanceProfileName;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.instanceProfileName' is not present");
    }

    /**
     * Set of EC2 Instance Types.
     * 
     */
    @PolicyResourceProperty(name="instanceTypes", flag="unknown_instanceTypes")
    private List<String> value_instanceTypes;
    private boolean unknown_instanceTypes;
    public List<String> instanceTypes() {
        if (!unknown_instanceTypes) return value_instanceTypes;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.instanceTypes' is not present");
    }

    /**
     * Name of EC2 Key Pair.
     * 
     */
    @PolicyResourceProperty(name="keyPair", flag="unknown_keyPair")
    private String value_keyPair;
    private boolean unknown_keyPair;
    public String keyPair() {
        if (!unknown_keyPair) return value_keyPair;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.keyPair' is not present");
    }

    /**
     * Configuration block with logging settings. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="logging", flag="unknown_logging")
    private InfrastructureConfigurationLoggingArgs value_logging;
    private boolean unknown_logging;
    public InfrastructureConfigurationLoggingArgs logging() {
        if (!unknown_logging) return value_logging;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.logging' is not present");
    }

    /**
     * Name for the configuration.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.name' is not present");
    }

    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     * 
     */
    @PolicyResourceProperty(name="resourceTags", flag="unknown_resourceTags")
    private Map<String,String> value_resourceTags;
    private boolean unknown_resourceTags;
    public Map<String,String> resourceTags() {
        if (!unknown_resourceTags) return value_resourceTags;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.resourceTags' is not present");
    }

    /**
     * Set of EC2 Security Group identifiers.
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.securityGroupIds' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     * 
     */
    @PolicyResourceProperty(name="snsTopicArn", flag="unknown_snsTopicArn")
    private String value_snsTopicArn;
    private boolean unknown_snsTopicArn;
    public String snsTopicArn() {
        if (!unknown_snsTopicArn) return value_snsTopicArn;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.snsTopicArn' is not present");
    }

    /**
     * EC2 Subnet identifier. Also requires `security_group_ids` argument.
     * 
     */
    @PolicyResourceProperty(name="subnetId", flag="unknown_subnetId")
    private String value_subnetId;
    private boolean unknown_subnetId;
    public String subnetId() {
        if (!unknown_subnetId) return value_subnetId;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.subnetId' is not present");
    }

    /**
     * Key-value map of resource tags to assign to the configuration. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.tags' is not present");
    }

    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="terminateInstanceOnFailure", flag="unknown_terminateInstanceOnFailure")
    private Boolean value_terminateInstanceOnFailure;
    private boolean unknown_terminateInstanceOnFailure;
    public Boolean terminateInstanceOnFailure() {
        if (!unknown_terminateInstanceOnFailure) return value_terminateInstanceOnFailure;
        throw new UndeferrableValueException("Value 'InfrastructureConfigurationArgs.terminateInstanceOnFailure' is not present");
    }

}
