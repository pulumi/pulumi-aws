// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class CrawlerDeltaTarget {

    /**
     * The name of the connection to use to connect to the Delta table target.
     * 
     */
    @PolicyResourceProperty(name="connectionName", flag="unknown_connectionName")
    private @Nullable String value_connectionName;
    private boolean unknown_connectionName;
    public @Nullable String connectionName() {
        if (!unknown_connectionName) return value_connectionName;
        throw new UndeferrableValueException("Value 'CrawlerDeltaTarget.connectionName' is not present");
    }

    /**
     * Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
     * 
     */
    @PolicyResourceProperty(name="createNativeDeltaTable", flag="unknown_createNativeDeltaTable")
    private @Nullable Boolean value_createNativeDeltaTable;
    private boolean unknown_createNativeDeltaTable;
    public @Nullable Boolean createNativeDeltaTable() {
        if (!unknown_createNativeDeltaTable) return value_createNativeDeltaTable;
        throw new UndeferrableValueException("Value 'CrawlerDeltaTarget.createNativeDeltaTable' is not present");
    }

    /**
     * A list of the Amazon S3 paths to the Delta tables.
     * 
     */
    @PolicyResourceProperty(name="deltaTables", flag="unknown_deltaTables")
    private List<String> value_deltaTables;
    private boolean unknown_deltaTables;
    public List<String> deltaTables() {
        if (!unknown_deltaTables) return value_deltaTables;
        throw new UndeferrableValueException("Value 'CrawlerDeltaTarget.deltaTables' is not present");
    }

    /**
     * Specifies whether to write the manifest files to the Delta table path.
     * 
     */
    @PolicyResourceProperty(name="writeManifest", flag="unknown_writeManifest")
    private Boolean value_writeManifest;
    private boolean unknown_writeManifest;
    public Boolean writeManifest() {
        if (!unknown_writeManifest) return value_writeManifest;
        throw new UndeferrableValueException("Value 'CrawlerDeltaTarget.writeManifest' is not present");
    }

}
