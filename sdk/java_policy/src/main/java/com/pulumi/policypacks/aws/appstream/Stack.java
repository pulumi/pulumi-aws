// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appstream;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.appstream.outputs.StackAccessEndpoint;
import com.pulumi.policypacks.aws.appstream.outputs.StackApplicationSettings;
import com.pulumi.policypacks.aws.appstream.outputs.StackStorageConnector;
import com.pulumi.policypacks.aws.appstream.outputs.StackStreamingExperienceSettings;
import com.pulumi.policypacks.aws.appstream.outputs.StackUserSetting;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:appstream/stack:Stack")
public final class Stack extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
     * See `access_endpoints` below.
     * 
     */
    @PolicyResourceProperty(name="accessEndpoints", flag="unknown_accessEndpoints")
    private List<StackAccessEndpoint> value_accessEndpoints;
    private boolean unknown_accessEndpoints;
    public List<StackAccessEndpoint> accessEndpoints() {
        if (!unknown_accessEndpoints) return value_accessEndpoints;
        throw new UndeferrableValueException("Value 'Stack.accessEndpoints' is not present");
    }

    /**
     * Settings for application settings persistence.
     * See `application_settings` below.
     * 
     */
    @PolicyResourceProperty(name="applicationSettings", flag="unknown_applicationSettings")
    private StackApplicationSettings value_applicationSettings;
    private boolean unknown_applicationSettings;
    public StackApplicationSettings applicationSettings() {
        if (!unknown_applicationSettings) return value_applicationSettings;
        throw new UndeferrableValueException("Value 'Stack.applicationSettings' is not present");
    }

    /**
     * ARN of the appstream stack.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Stack.arn' is not present");
    }

    /**
     * Date and time, in UTC and extended RFC 3339 format, when the stack was created.
     * 
     */
    @PolicyResourceProperty(name="createdTime", flag="unknown_createdTime")
    private String value_createdTime;
    private boolean unknown_createdTime;
    public String createdTime() {
        if (!unknown_createdTime) return value_createdTime;
        throw new UndeferrableValueException("Value 'Stack.createdTime' is not present");
    }

    /**
     * Description for the AppStream stack.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Stack.description' is not present");
    }

    /**
     * Stack name to display.
     * 
     */
    @PolicyResourceProperty(name="displayName", flag="unknown_displayName")
    private @Nullable String value_displayName;
    private boolean unknown_displayName;
    public @Nullable String displayName() {
        if (!unknown_displayName) return value_displayName;
        throw new UndeferrableValueException("Value 'Stack.displayName' is not present");
    }

    /**
     * Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
     * 
     */
    @PolicyResourceProperty(name="embedHostDomains", flag="unknown_embedHostDomains")
    private List<String> value_embedHostDomains;
    private boolean unknown_embedHostDomains;
    public List<String> embedHostDomains() {
        if (!unknown_embedHostDomains) return value_embedHostDomains;
        throw new UndeferrableValueException("Value 'Stack.embedHostDomains' is not present");
    }

    /**
     * URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
     * 
     */
    @PolicyResourceProperty(name="feedbackUrl", flag="unknown_feedbackUrl")
    private String value_feedbackUrl;
    private boolean unknown_feedbackUrl;
    public String feedbackUrl() {
        if (!unknown_feedbackUrl) return value_feedbackUrl;
        throw new UndeferrableValueException("Value 'Stack.feedbackUrl' is not present");
    }

    /**
     * Unique name for the AppStream stack.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Stack.name' is not present");
    }

    /**
     * URL that users are redirected to after their streaming session ends.
     * 
     */
    @PolicyResourceProperty(name="redirectUrl", flag="unknown_redirectUrl")
    private String value_redirectUrl;
    private boolean unknown_redirectUrl;
    public String redirectUrl() {
        if (!unknown_redirectUrl) return value_redirectUrl;
        throw new UndeferrableValueException("Value 'Stack.redirectUrl' is not present");
    }

    /**
     * Configuration block for the storage connectors to enable.
     * See `storage_connectors` below.
     * 
     */
    @PolicyResourceProperty(name="storageConnectors", flag="unknown_storageConnectors")
    private List<StackStorageConnector> value_storageConnectors;
    private boolean unknown_storageConnectors;
    public List<StackStorageConnector> storageConnectors() {
        if (!unknown_storageConnectors) return value_storageConnectors;
        throw new UndeferrableValueException("Value 'Stack.storageConnectors' is not present");
    }

    /**
     * The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
     * See `streaming_experience_settings` below.
     * 
     */
    @PolicyResourceProperty(name="streamingExperienceSettings", flag="unknown_streamingExperienceSettings")
    private StackStreamingExperienceSettings value_streamingExperienceSettings;
    private boolean unknown_streamingExperienceSettings;
    public StackStreamingExperienceSettings streamingExperienceSettings() {
        if (!unknown_streamingExperienceSettings) return value_streamingExperienceSettings;
        throw new UndeferrableValueException("Value 'Stack.streamingExperienceSettings' is not present");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Stack.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Stack.tagsAll' is not present");
    }

    /**
     * Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
     * See `user_settings` below.
     * 
     */
    @PolicyResourceProperty(name="userSettings", flag="unknown_userSettings")
    private List<StackUserSetting> value_userSettings;
    private boolean unknown_userSettings;
    public List<StackUserSetting> userSettings() {
        if (!unknown_userSettings) return value_userSettings;
        throw new UndeferrableValueException("Value 'Stack.userSettings' is not present");
    }

}
