// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.alb.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class TargetGroupHealthCheckArgs {

    /**
     * Whether health checks are enabled. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.enabled' is not present");
    }

    /**
     * Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
     * 
     */
    @PolicyResourceProperty(name="healthyThreshold", flag="unknown_healthyThreshold")
    private Integer value_healthyThreshold;
    private boolean unknown_healthyThreshold;
    public Integer healthyThreshold() {
        if (!unknown_healthyThreshold) return value_healthyThreshold;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.healthyThreshold' is not present");
    }

    /**
     * Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
     * 
     */
    @PolicyResourceProperty(name="interval", flag="unknown_interval")
    private Integer value_interval;
    private boolean unknown_interval;
    public Integer interval() {
        if (!unknown_interval) return value_interval;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.interval' is not present");
    }

    /**
     * The HTTP or gRPC codes to use when checking for a successful response from a target.
     * The `health_check.protocol` must be one of `HTTP` or `HTTPS` or the `target_type` must be `lambda`.
     * Values can be comma-separated individual values (e.g., &#34;200,202&#34;) or a range of values (e.g., &#34;200-299&#34;).
     * * For gRPC-based target groups (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocol_version` is `GRPC`), values can be between `0` and `99`. The default is `12`.
     * * When used with an Application Load Balancer (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocol_version` is not `GRPC`), values can be between `200` and `499`. The default is `200`.
     * * When used with a Network Load Balancer (i.e., the `protocol` is one of `TCP`, `TCP_UDP`, `UDP`, or `TLS`), values can be between `200` and `599`. The default is `200-399`.
     * * When the `target_type` is `lambda`, values can be between `200` and `499`. The default is `200`.
     * 
     */
    @PolicyResourceProperty(name="matcher", flag="unknown_matcher")
    private String value_matcher;
    private boolean unknown_matcher;
    public String matcher() {
        if (!unknown_matcher) return value_matcher;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.matcher' is not present");
    }

    /**
     * Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
     * * For HTTP and HTTPS health checks, the default is `/`.
     * * For gRPC health checks, the default is `/AWS.ALB/healthcheck`.
     * 
     */
    @PolicyResourceProperty(name="path", flag="unknown_path")
    private String value_path;
    private boolean unknown_path;
    public String path() {
        if (!unknown_path) return value_path;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.path' is not present");
    }

    /**
     * The port the load balancer uses when performing health checks on targets.
     * Valid values are either `traffic-port`, to use the same port as the target group, or a valid port number between `1` and `65536`.
     * Default is `traffic-port`.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private String value_port;
    private boolean unknown_port;
    public String port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.port' is not present");
    }

    /**
     * Protocol the load balancer uses when performing health checks on targets.
     * Must be one of `TCP`, `HTTP`, or `HTTPS`.
     * The `TCP` protocol is not supported for health checks if the protocol of the target group is `HTTP` or `HTTPS`.
     * Default is `HTTP`.
     * Cannot be specified when the `target_type` is `lambda`.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.protocol' is not present");
    }

    /**
     * Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2â€“120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
     * 
     */
    @PolicyResourceProperty(name="timeout", flag="unknown_timeout")
    private Integer value_timeout;
    private boolean unknown_timeout;
    public Integer timeout() {
        if (!unknown_timeout) return value_timeout;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.timeout' is not present");
    }

    /**
     * Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
     * 
     */
    @PolicyResourceProperty(name="unhealthyThreshold", flag="unknown_unhealthyThreshold")
    private Integer value_unhealthyThreshold;
    private boolean unknown_unhealthyThreshold;
    public Integer unhealthyThreshold() {
        if (!unknown_unhealthyThreshold) return value_unhealthyThreshold;
        throw new UndeferrableValueException("Value 'TargetGroupHealthCheckArgs.unhealthyThreshold' is not present");
    }

}
