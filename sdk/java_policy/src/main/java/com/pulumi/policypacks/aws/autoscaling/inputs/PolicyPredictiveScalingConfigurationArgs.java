// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.autoscaling.inputs.PolicyPredictiveScalingConfigurationMetricSpecificationArgs;
import java.lang.String;
import javax.annotation.Nullable;


public final class PolicyPredictiveScalingConfigurationArgs {

    /**
     * Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are `HonorMaxCapacity` or `IncreaseMaxCapacity`. Default is `HonorMaxCapacity`.
     * 
     */
    @PolicyResourceProperty(name="maxCapacityBreachBehavior", flag="unknown_maxCapacityBreachBehavior")
    private String value_maxCapacityBreachBehavior;
    private boolean unknown_maxCapacityBreachBehavior;
    public String maxCapacityBreachBehavior() {
        if (!unknown_maxCapacityBreachBehavior) return value_maxCapacityBreachBehavior;
        throw new UndeferrableValueException("Value 'PolicyPredictiveScalingConfigurationArgs.maxCapacityBreachBehavior' is not present");
    }

    /**
     * Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is `0` to `100`. If set to `0`, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
     * 
     */
    @PolicyResourceProperty(name="maxCapacityBuffer", flag="unknown_maxCapacityBuffer")
    private String value_maxCapacityBuffer;
    private boolean unknown_maxCapacityBuffer;
    public String maxCapacityBuffer() {
        if (!unknown_maxCapacityBuffer) return value_maxCapacityBuffer;
        throw new UndeferrableValueException("Value 'PolicyPredictiveScalingConfigurationArgs.maxCapacityBuffer' is not present");
    }

    /**
     * This structure includes the metrics and target utilization to use for predictive scaling.
     * 
     */
    @PolicyResourceProperty(name="metricSpecification", flag="unknown_metricSpecification")
    private PolicyPredictiveScalingConfigurationMetricSpecificationArgs value_metricSpecification;
    private boolean unknown_metricSpecification;
    public PolicyPredictiveScalingConfigurationMetricSpecificationArgs metricSpecification() {
        if (!unknown_metricSpecification) return value_metricSpecification;
        throw new UndeferrableValueException("Value 'PolicyPredictiveScalingConfigurationArgs.metricSpecification' is not present");
    }

    /**
     * Predictive scaling mode. Valid values are `ForecastAndScale` and `ForecastOnly`. Default is `ForecastOnly`.
     * 
     */
    @PolicyResourceProperty(name="mode", flag="unknown_mode")
    private String value_mode;
    private boolean unknown_mode;
    public String mode() {
        if (!unknown_mode) return value_mode;
        throw new UndeferrableValueException("Value 'PolicyPredictiveScalingConfigurationArgs.mode' is not present");
    }

    /**
     * Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is `0`.
     * 
     */
    @PolicyResourceProperty(name="schedulingBufferTime", flag="unknown_schedulingBufferTime")
    private String value_schedulingBufferTime;
    private boolean unknown_schedulingBufferTime;
    public String schedulingBufferTime() {
        if (!unknown_schedulingBufferTime) return value_schedulingBufferTime;
        throw new UndeferrableValueException("Value 'PolicyPredictiveScalingConfigurationArgs.schedulingBufferTime' is not present");
    }

}
