// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.autoscaling.inputs.PolicyPredictiveScalingConfigurationMetricSpecificationArgs;
import java.lang.String;
import javax.annotation.Nullable;


public final class PolicyPredictiveScalingConfigurationArgs {

    /**
     * Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are `HonorMaxCapacity` or `IncreaseMaxCapacity`. Default is `HonorMaxCapacity`.
     * 
     */
    private UndeferrableValue<String> maxCapacityBreachBehavior;

    public String maxCapacityBreachBehavior() {
        if (maxCapacityBreachBehavior == null) return null;
        return maxCapacityBreachBehavior.getValue("PolicyPredictiveScalingConfigurationArgs.maxCapacityBreachBehavior");
    }

    /**
     * Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is `0` to `100`. If set to `0`, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
     * 
     */
    private UndeferrableValue<String> maxCapacityBuffer;

    public String maxCapacityBuffer() {
        if (maxCapacityBuffer == null) return null;
        return maxCapacityBuffer.getValue("PolicyPredictiveScalingConfigurationArgs.maxCapacityBuffer");
    }

    /**
     * This structure includes the metrics and target utilization to use for predictive scaling.
     * 
     */
    private UndeferrableValue<PolicyPredictiveScalingConfigurationMetricSpecificationArgs> metricSpecification;

    public PolicyPredictiveScalingConfigurationMetricSpecificationArgs metricSpecification() {
        if (metricSpecification == null) return null;
        return metricSpecification.getValue("PolicyPredictiveScalingConfigurationArgs.metricSpecification");
    }

    /**
     * Predictive scaling mode. Valid values are `ForecastAndScale` and `ForecastOnly`. Default is `ForecastOnly`.
     * 
     */
    private UndeferrableValue<String> mode;

    public String mode() {
        if (mode == null) return null;
        return mode.getValue("PolicyPredictiveScalingConfigurationArgs.mode");
    }

    /**
     * Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is `0`.
     * 
     */
    private UndeferrableValue<String> schedulingBufferTime;

    public String schedulingBufferTime() {
        if (schedulingBufferTime == null) return null;
        return schedulingBufferTime.getValue("PolicyPredictiveScalingConfigurationArgs.schedulingBufferTime");
    }

}
