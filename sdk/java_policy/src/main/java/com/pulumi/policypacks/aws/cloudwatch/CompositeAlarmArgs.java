// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.inputs.CompositeAlarmActionsSuppressorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/compositeAlarm:CompositeAlarm")
public final class CompositeAlarmArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> actionsEnabled;

    public Boolean actionsEnabled() {
        if (actionsEnabled == null) return null;
        return actionsEnabled.getValue("CompositeAlarmArgs.actionsEnabled");
    }

    /**
     * Actions will be suppressed if the suppressor alarm is in the ALARM state.
     * 
     */
    private UndeferrableValue<CompositeAlarmActionsSuppressorArgs> actionsSuppressor;

    public CompositeAlarmActionsSuppressorArgs actionsSuppressor() {
        if (actionsSuppressor == null) return null;
        return actionsSuppressor.getValue("CompositeAlarmArgs.actionsSuppressor");
    }

    /**
     * The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    private UndeferrableValue<List<String>> alarmActions;

    public List<String> alarmActions() {
        if (alarmActions == null) return null;
        return alarmActions.getValue("CompositeAlarmArgs.alarmActions");
    }

    /**
     * The description for the composite alarm.
     * 
     */
    private UndeferrableValue<String> alarmDescription;

    public String alarmDescription() {
        if (alarmDescription == null) return null;
        return alarmDescription.getValue("CompositeAlarmArgs.alarmDescription");
    }

    /**
     * The name for the composite alarm. This name must be unique within the region.
     * 
     */
    private UndeferrableValue<String> alarmName;

    public String alarmName() {
        if (alarmName == null) return null;
        return alarmName.getValue("CompositeAlarmArgs.alarmName");
    }

    /**
     * An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
     * 
     */
    private UndeferrableValue<String> alarmRule;

    public String alarmRule() {
        if (alarmRule == null) return null;
        return alarmRule.getValue("CompositeAlarmArgs.alarmRule");
    }

    /**
     * The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    private UndeferrableValue<List<String>> insufficientDataActions;

    public List<String> insufficientDataActions() {
        if (insufficientDataActions == null) return null;
        return insufficientDataActions.getValue("CompositeAlarmArgs.insufficientDataActions");
    }

    /**
     * The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    private UndeferrableValue<List<String>> okActions;

    public List<String> okActions() {
        if (okActions == null) return null;
        return okActions.getValue("CompositeAlarmArgs.okActions");
    }

    /**
     * A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("CompositeAlarmArgs.tags");
    }

}
