// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.customerprofiles.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.customerprofiles.inputs.DomainRuleBasedMatchingAttributeTypesSelectorArgs;
import com.pulumi.policypacks.aws.customerprofiles.inputs.DomainRuleBasedMatchingConflictResolutionArgs;
import com.pulumi.policypacks.aws.customerprofiles.inputs.DomainRuleBasedMatchingExportingConfigArgs;
import com.pulumi.policypacks.aws.customerprofiles.inputs.DomainRuleBasedMatchingMatchingRuleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class DomainRuleBasedMatchingArgs {

    /**
     * A block that configures information about the `AttributeTypesSelector` where the rule-based identity resolution uses to match profiles. Documented below.
     * 
     */
    private UndeferrableValue<DomainRuleBasedMatchingAttributeTypesSelectorArgs> attributeTypesSelector;

    public DomainRuleBasedMatchingAttributeTypesSelectorArgs attributeTypesSelector() {
        if (attributeTypesSelector == null) return null;
        return attributeTypesSelector.getValue("DomainRuleBasedMatchingArgs.attributeTypesSelector");
    }

    /**
     * A block that specifies how the auto-merging process should resolve conflicts between different profiles. Documented below.
     * 
     */
    private UndeferrableValue<DomainRuleBasedMatchingConflictResolutionArgs> conflictResolution;

    public DomainRuleBasedMatchingConflictResolutionArgs conflictResolution() {
        if (conflictResolution == null) return null;
        return conflictResolution.getValue("DomainRuleBasedMatchingArgs.conflictResolution");
    }

    /**
     * The flag that enables the rule-based matching process of duplicate profiles.
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("DomainRuleBasedMatchingArgs.enabled");
    }

    /**
     * A block that specifies the configuration for exporting Identity Resolution results. Documented below.
     * 
     */
    private UndeferrableValue<DomainRuleBasedMatchingExportingConfigArgs> exportingConfig;

    public DomainRuleBasedMatchingExportingConfigArgs exportingConfig() {
        if (exportingConfig == null) return null;
        return exportingConfig.getValue("DomainRuleBasedMatchingArgs.exportingConfig");
    }

    /**
     * A block that configures how the rule-based matching process should match profiles. You can have up to 15 `rule` in the `natching_rules`. Documented below.
     * 
     */
    private UndeferrableValue<List<DomainRuleBasedMatchingMatchingRuleArgs>> matchingRules;

    public List<DomainRuleBasedMatchingMatchingRuleArgs> matchingRules() {
        if (matchingRules == null) return null;
        return matchingRules.getValue("DomainRuleBasedMatchingArgs.matchingRules");
    }

    /**
     * Indicates the maximum allowed rule level for matching.
     * 
     */
    private UndeferrableValue<Integer> maxAllowedRuleLevelForMatching;

    public Integer maxAllowedRuleLevelForMatching() {
        if (maxAllowedRuleLevelForMatching == null) return null;
        return maxAllowedRuleLevelForMatching.getValue("DomainRuleBasedMatchingArgs.maxAllowedRuleLevelForMatching");
    }

    /**
     * Indicates the maximum allowed rule level for merging.
     * 
     */
    private UndeferrableValue<Integer> maxAllowedRuleLevelForMerging;

    public Integer maxAllowedRuleLevelForMerging() {
        if (maxAllowedRuleLevelForMerging == null) return null;
        return maxAllowedRuleLevelForMerging.getValue("DomainRuleBasedMatchingArgs.maxAllowedRuleLevelForMerging");
    }

    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("DomainRuleBasedMatchingArgs.status");
    }

}
