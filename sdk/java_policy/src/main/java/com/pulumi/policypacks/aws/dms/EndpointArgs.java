// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.dms.inputs.EndpointElasticsearchSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointKafkaSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointKinesisSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointMongodbSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointPostgresSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointRedisSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointRedshiftSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointS3SettingsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:dms/endpoint:Endpoint")
public final class EndpointArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * ARN for the certificate.
     * 
     */
    private UndeferrableValue<String> certificateArn;

    public String certificateArn() {
        if (certificateArn == null) return null;
        return certificateArn.getValue("EndpointArgs.certificateArn");
    }

    /**
     * Name of the endpoint database.
     * 
     */
    private UndeferrableValue<String> databaseName;

    public String databaseName() {
        if (databaseName == null) return null;
        return databaseName.getValue("EndpointArgs.databaseName");
    }

    /**
     * Configuration block for OpenSearch settings. See below.
     * 
     */
    private UndeferrableValue<EndpointElasticsearchSettingsArgs> elasticsearchSettings;

    public EndpointElasticsearchSettingsArgs elasticsearchSettings() {
        if (elasticsearchSettings == null) return null;
        return elasticsearchSettings.getValue("EndpointArgs.elasticsearchSettings");
    }

    /**
     * Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
     * 
     */
    private UndeferrableValue<String> endpointId;

    public String endpointId() {
        if (endpointId == null) return null;
        return endpointId.getValue("EndpointArgs.endpointId");
    }

    /**
     * Type of endpoint. Valid values are `source`, `target`.
     * 
     */
    private UndeferrableValue<String> endpointType;

    public String endpointType() {
        if (endpointType == null) return null;
        return endpointType.getValue("EndpointArgs.endpointType");
    }

    /**
     * Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `aurora-serverless`, `aurora-postgresql-serverless`,`azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`,`redshift-serverless`, `s3`, `sqlserver`, `neptune` ,`sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
     * 
     */
    private UndeferrableValue<String> engineName;

    public String engineName() {
        if (engineName == null) return null;
        return engineName.getValue("EndpointArgs.engineName");
    }

    /**
     * Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
     * 
     */
    private UndeferrableValue<String> extraConnectionAttributes;

    public String extraConnectionAttributes() {
        if (extraConnectionAttributes == null) return null;
        return extraConnectionAttributes.getValue("EndpointArgs.extraConnectionAttributes");
    }

    /**
     * Configuration block for Kafka settings. See below.
     * 
     */
    private UndeferrableValue<EndpointKafkaSettingsArgs> kafkaSettings;

    public EndpointKafkaSettingsArgs kafkaSettings() {
        if (kafkaSettings == null) return null;
        return kafkaSettings.getValue("EndpointArgs.kafkaSettings");
    }

    /**
     * Configuration block for Kinesis settings. See below.
     * 
     */
    private UndeferrableValue<EndpointKinesisSettingsArgs> kinesisSettings;

    public EndpointKinesisSettingsArgs kinesisSettings() {
        if (kinesisSettings == null) return null;
        return kinesisSettings.getValue("EndpointArgs.kinesisSettings");
    }

    /**
     * ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engine_name` is `redshift`, `kms_key_arn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> kmsKeyArn;

    public String kmsKeyArn() {
        if (kmsKeyArn == null) return null;
        return kmsKeyArn.getValue("EndpointArgs.kmsKeyArn");
    }

    /**
     * Configuration block for MongoDB settings. See below.
     * 
     */
    private UndeferrableValue<EndpointMongodbSettingsArgs> mongodbSettings;

    public EndpointMongodbSettingsArgs mongodbSettings() {
        if (mongodbSettings == null) return null;
        return mongodbSettings.getValue("EndpointArgs.mongodbSettings");
    }

    /**
     * Password to be used to login to the endpoint database.
     * 
     */
    private UndeferrableValue<String> password;

    public String password() {
        if (password == null) return null;
        return password.getValue("EndpointArgs.password");
    }

    private UndeferrableValue<Boolean> pauseReplicationTasks;

    public Boolean pauseReplicationTasks() {
        if (pauseReplicationTasks == null) return null;
        return pauseReplicationTasks.getValue("EndpointArgs.pauseReplicationTasks");
    }

    /**
     * Port used by the endpoint database.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("EndpointArgs.port");
    }

    /**
     * Configuration block for Postgres settings. See below.
     * 
     */
    private UndeferrableValue<EndpointPostgresSettingsArgs> postgresSettings;

    public EndpointPostgresSettingsArgs postgresSettings() {
        if (postgresSettings == null) return null;
        return postgresSettings.getValue("EndpointArgs.postgresSettings");
    }

    private UndeferrableValue<EndpointRedisSettingsArgs> redisSettings;

    public EndpointRedisSettingsArgs redisSettings() {
        if (redisSettings == null) return null;
        return redisSettings.getValue("EndpointArgs.redisSettings");
    }

    /**
     * Configuration block for Redshift settings. See below.
     * 
     */
    private UndeferrableValue<EndpointRedshiftSettingsArgs> redshiftSettings;

    public EndpointRedshiftSettingsArgs redshiftSettings() {
        if (redshiftSettings == null) return null;
        return redshiftSettings.getValue("EndpointArgs.redshiftSettings");
    }

    /**
     * (**Deprecated**, use the `aws.dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
     * 
     */
    private UndeferrableValue<EndpointS3SettingsArgs> s3Settings;

    public EndpointS3SettingsArgs s3Settings() {
        if (s3Settings == null) return null;
        return s3Settings.getValue("EndpointArgs.s3Settings");
    }

    /**
     * ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by `secrets_manager_arn`. The role must allow the `iam:PassRole` action.
     * 
     * &gt; **Note:** You can specify one of two sets of values for these permissions. You can specify the values for this setting and `secrets_manager_arn`. Or you can specify clear-text values for `username`, `password` , `server_name`, and `port`. You can&#39;t specify both.
     * 
     */
    private UndeferrableValue<String> secretsManagerAccessRoleArn;

    public String secretsManagerAccessRoleArn() {
        if (secretsManagerAccessRoleArn == null) return null;
        return secretsManagerAccessRoleArn.getValue("EndpointArgs.secretsManagerAccessRoleArn");
    }

    /**
     * Full ARN, partial ARN, or friendly name of the Secrets Manager secret that contains the endpoint connection details. Supported only when `engine_name` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
     * 
     */
    private UndeferrableValue<String> secretsManagerArn;

    public String secretsManagerArn() {
        if (secretsManagerArn == null) return null;
        return secretsManagerArn.getValue("EndpointArgs.secretsManagerArn");
    }

    /**
     * Host name of the server.
     * 
     */
    private UndeferrableValue<String> serverName;

    public String serverName() {
        if (serverName == null) return null;
        return serverName.getValue("EndpointArgs.serverName");
    }

    /**
     * ARN used by the service access IAM role for dynamodb endpoints.
     * 
     */
    private UndeferrableValue<String> serviceAccessRole;

    public String serviceAccessRole() {
        if (serviceAccessRole == null) return null;
        return serviceAccessRole.getValue("EndpointArgs.serviceAccessRole");
    }

    /**
     * SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
     * 
     */
    private UndeferrableValue<String> sslMode;

    public String sslMode() {
        if (sslMode == null) return null;
        return sslMode.getValue("EndpointArgs.sslMode");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EndpointArgs.tags");
    }

    /**
     * User name to be used to login to the endpoint database.
     * 
     */
    private UndeferrableValue<String> username;

    public String username() {
        if (username == null) return null;
        return username.getValue("EndpointArgs.username");
    }

}
