// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.dms.inputs.EndpointElasticsearchSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointKafkaSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointKinesisSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointMongodbSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointPostgresSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointRedisSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointRedshiftSettingsArgs;
import com.pulumi.policypacks.aws.dms.inputs.EndpointS3SettingsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:dms/endpoint:Endpoint")
public final class EndpointArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * ARN for the certificate.
     * 
     */
    @PolicyResourceProperty(name="certificateArn", flag="unknown_certificateArn")
    private String value_certificateArn;
    private boolean unknown_certificateArn;
    public String certificateArn() {
        if (!unknown_certificateArn) return value_certificateArn;
        throw new UndeferrableValueException("Value 'EndpointArgs.certificateArn' is not present");
    }

    /**
     * Name of the endpoint database.
     * 
     */
    @PolicyResourceProperty(name="databaseName", flag="unknown_databaseName")
    private String value_databaseName;
    private boolean unknown_databaseName;
    public String databaseName() {
        if (!unknown_databaseName) return value_databaseName;
        throw new UndeferrableValueException("Value 'EndpointArgs.databaseName' is not present");
    }

    /**
     * Configuration block for OpenSearch settings. See below.
     * 
     */
    @PolicyResourceProperty(name="elasticsearchSettings", flag="unknown_elasticsearchSettings")
    private EndpointElasticsearchSettingsArgs value_elasticsearchSettings;
    private boolean unknown_elasticsearchSettings;
    public EndpointElasticsearchSettingsArgs elasticsearchSettings() {
        if (!unknown_elasticsearchSettings) return value_elasticsearchSettings;
        throw new UndeferrableValueException("Value 'EndpointArgs.elasticsearchSettings' is not present");
    }

    /**
     * Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
     * 
     */
    @PolicyResourceProperty(name="endpointId", flag="unknown_endpointId")
    private String value_endpointId;
    private boolean unknown_endpointId;
    public String endpointId() {
        if (!unknown_endpointId) return value_endpointId;
        throw new UndeferrableValueException("Value 'EndpointArgs.endpointId' is not present");
    }

    /**
     * Type of endpoint. Valid values are `source`, `target`.
     * 
     */
    @PolicyResourceProperty(name="endpointType", flag="unknown_endpointType")
    private String value_endpointType;
    private boolean unknown_endpointType;
    public String endpointType() {
        if (!unknown_endpointType) return value_endpointType;
        throw new UndeferrableValueException("Value 'EndpointArgs.endpointType' is not present");
    }

    /**
     * Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `aurora-serverless`, `aurora-postgresql-serverless`,`azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`,`redshift-serverless`, `s3`, `sqlserver`, `neptune` ,`sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
     * 
     */
    @PolicyResourceProperty(name="engineName", flag="unknown_engineName")
    private String value_engineName;
    private boolean unknown_engineName;
    public String engineName() {
        if (!unknown_engineName) return value_engineName;
        throw new UndeferrableValueException("Value 'EndpointArgs.engineName' is not present");
    }

    /**
     * Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
     * 
     */
    @PolicyResourceProperty(name="extraConnectionAttributes", flag="unknown_extraConnectionAttributes")
    private String value_extraConnectionAttributes;
    private boolean unknown_extraConnectionAttributes;
    public String extraConnectionAttributes() {
        if (!unknown_extraConnectionAttributes) return value_extraConnectionAttributes;
        throw new UndeferrableValueException("Value 'EndpointArgs.extraConnectionAttributes' is not present");
    }

    /**
     * Configuration block for Kafka settings. See below.
     * 
     */
    @PolicyResourceProperty(name="kafkaSettings", flag="unknown_kafkaSettings")
    private EndpointKafkaSettingsArgs value_kafkaSettings;
    private boolean unknown_kafkaSettings;
    public EndpointKafkaSettingsArgs kafkaSettings() {
        if (!unknown_kafkaSettings) return value_kafkaSettings;
        throw new UndeferrableValueException("Value 'EndpointArgs.kafkaSettings' is not present");
    }

    /**
     * Configuration block for Kinesis settings. See below.
     * 
     */
    @PolicyResourceProperty(name="kinesisSettings", flag="unknown_kinesisSettings")
    private EndpointKinesisSettingsArgs value_kinesisSettings;
    private boolean unknown_kinesisSettings;
    public EndpointKinesisSettingsArgs kinesisSettings() {
        if (!unknown_kinesisSettings) return value_kinesisSettings;
        throw new UndeferrableValueException("Value 'EndpointArgs.kinesisSettings' is not present");
    }

    /**
     * ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engine_name` is `redshift`, `kms_key_arn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'EndpointArgs.kmsKeyArn' is not present");
    }

    /**
     * Configuration block for MongoDB settings. See below.
     * 
     */
    @PolicyResourceProperty(name="mongodbSettings", flag="unknown_mongodbSettings")
    private EndpointMongodbSettingsArgs value_mongodbSettings;
    private boolean unknown_mongodbSettings;
    public EndpointMongodbSettingsArgs mongodbSettings() {
        if (!unknown_mongodbSettings) return value_mongodbSettings;
        throw new UndeferrableValueException("Value 'EndpointArgs.mongodbSettings' is not present");
    }

    /**
     * Password to be used to login to the endpoint database.
     * 
     */
    @PolicyResourceProperty(name="password", flag="unknown_password")
    private String value_password;
    private boolean unknown_password;
    public String password() {
        if (!unknown_password) return value_password;
        throw new UndeferrableValueException("Value 'EndpointArgs.password' is not present");
    }

    @PolicyResourceProperty(name="pauseReplicationTasks", flag="unknown_pauseReplicationTasks")
    private Boolean value_pauseReplicationTasks;
    private boolean unknown_pauseReplicationTasks;
    public Boolean pauseReplicationTasks() {
        if (!unknown_pauseReplicationTasks) return value_pauseReplicationTasks;
        throw new UndeferrableValueException("Value 'EndpointArgs.pauseReplicationTasks' is not present");
    }

    /**
     * Port used by the endpoint database.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'EndpointArgs.port' is not present");
    }

    /**
     * Configuration block for Postgres settings. See below.
     * 
     */
    @PolicyResourceProperty(name="postgresSettings", flag="unknown_postgresSettings")
    private EndpointPostgresSettingsArgs value_postgresSettings;
    private boolean unknown_postgresSettings;
    public EndpointPostgresSettingsArgs postgresSettings() {
        if (!unknown_postgresSettings) return value_postgresSettings;
        throw new UndeferrableValueException("Value 'EndpointArgs.postgresSettings' is not present");
    }

    @PolicyResourceProperty(name="redisSettings", flag="unknown_redisSettings")
    private EndpointRedisSettingsArgs value_redisSettings;
    private boolean unknown_redisSettings;
    public EndpointRedisSettingsArgs redisSettings() {
        if (!unknown_redisSettings) return value_redisSettings;
        throw new UndeferrableValueException("Value 'EndpointArgs.redisSettings' is not present");
    }

    /**
     * Configuration block for Redshift settings. See below.
     * 
     */
    @PolicyResourceProperty(name="redshiftSettings", flag="unknown_redshiftSettings")
    private EndpointRedshiftSettingsArgs value_redshiftSettings;
    private boolean unknown_redshiftSettings;
    public EndpointRedshiftSettingsArgs redshiftSettings() {
        if (!unknown_redshiftSettings) return value_redshiftSettings;
        throw new UndeferrableValueException("Value 'EndpointArgs.redshiftSettings' is not present");
    }

    /**
     * (**Deprecated**, use the `aws.dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
     * 
     */
    @PolicyResourceProperty(name="s3Settings", flag="unknown_s3Settings")
    private EndpointS3SettingsArgs value_s3Settings;
    private boolean unknown_s3Settings;
    public EndpointS3SettingsArgs s3Settings() {
        if (!unknown_s3Settings) return value_s3Settings;
        throw new UndeferrableValueException("Value 'EndpointArgs.s3Settings' is not present");
    }

    /**
     * ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by `secrets_manager_arn`. The role must allow the `iam:PassRole` action.
     * 
     * &gt; **Note:** You can specify one of two sets of values for these permissions. You can specify the values for this setting and `secrets_manager_arn`. Or you can specify clear-text values for `username`, `password` , `server_name`, and `port`. You can&#39;t specify both.
     * 
     */
    @PolicyResourceProperty(name="secretsManagerAccessRoleArn", flag="unknown_secretsManagerAccessRoleArn")
    private String value_secretsManagerAccessRoleArn;
    private boolean unknown_secretsManagerAccessRoleArn;
    public String secretsManagerAccessRoleArn() {
        if (!unknown_secretsManagerAccessRoleArn) return value_secretsManagerAccessRoleArn;
        throw new UndeferrableValueException("Value 'EndpointArgs.secretsManagerAccessRoleArn' is not present");
    }

    /**
     * Full ARN, partial ARN, or friendly name of the Secrets Manager secret that contains the endpoint connection details. Supported only when `engine_name` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
     * 
     */
    @PolicyResourceProperty(name="secretsManagerArn", flag="unknown_secretsManagerArn")
    private String value_secretsManagerArn;
    private boolean unknown_secretsManagerArn;
    public String secretsManagerArn() {
        if (!unknown_secretsManagerArn) return value_secretsManagerArn;
        throw new UndeferrableValueException("Value 'EndpointArgs.secretsManagerArn' is not present");
    }

    /**
     * Host name of the server.
     * 
     */
    @PolicyResourceProperty(name="serverName", flag="unknown_serverName")
    private String value_serverName;
    private boolean unknown_serverName;
    public String serverName() {
        if (!unknown_serverName) return value_serverName;
        throw new UndeferrableValueException("Value 'EndpointArgs.serverName' is not present");
    }

    /**
     * ARN used by the service access IAM role for dynamodb endpoints.
     * 
     */
    @PolicyResourceProperty(name="serviceAccessRole", flag="unknown_serviceAccessRole")
    private String value_serviceAccessRole;
    private boolean unknown_serviceAccessRole;
    public String serviceAccessRole() {
        if (!unknown_serviceAccessRole) return value_serviceAccessRole;
        throw new UndeferrableValueException("Value 'EndpointArgs.serviceAccessRole' is not present");
    }

    /**
     * SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
     * 
     */
    @PolicyResourceProperty(name="sslMode", flag="unknown_sslMode")
    private String value_sslMode;
    private boolean unknown_sslMode;
    public String sslMode() {
        if (!unknown_sslMode) return value_sslMode;
        throw new UndeferrableValueException("Value 'EndpointArgs.sslMode' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'EndpointArgs.tags' is not present");
    }

    /**
     * User name to be used to login to the endpoint database.
     * 
     */
    @PolicyResourceProperty(name="username", flag="unknown_username")
    private String value_username;
    private boolean unknown_username;
    public String username() {
        if (!unknown_username) return value_username;
        throw new UndeferrableValueException("Value 'EndpointArgs.username' is not present");
    }

}
