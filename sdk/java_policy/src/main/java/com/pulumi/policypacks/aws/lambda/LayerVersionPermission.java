// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lambda;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lambda/layerVersionPermission:LayerVersionPermission")
public final class LayerVersionPermission extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
     * 
     */
    @PolicyResourceProperty(name="action", flag="unknown_action")
    private String value_action;
    private boolean unknown_action;
    public String action() {
        if (!unknown_action) return value_action;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.action' is not present");
    }

    /**
     * The name or ARN of the Lambda Layer, which you want to grant access to.
     * 
     */
    @PolicyResourceProperty(name="layerName", flag="unknown_layerName")
    private String value_layerName;
    private boolean unknown_layerName;
    public String layerName() {
        if (!unknown_layerName) return value_layerName;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.layerName' is not present");
    }

    /**
     * An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organization_id` provided.
     * 
     */
    @PolicyResourceProperty(name="organizationId", flag="unknown_organizationId")
    private @Nullable String value_organizationId;
    private boolean unknown_organizationId;
    public @Nullable String organizationId() {
        if (!unknown_organizationId) return value_organizationId;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.organizationId' is not present");
    }

    /**
     * Full Lambda Layer Permission policy.
     * 
     */
    @PolicyResourceProperty(name="policy", flag="unknown_policy")
    private String value_policy;
    private boolean unknown_policy;
    public String policy() {
        if (!unknown_policy) return value_policy;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.policy' is not present");
    }

    /**
     * AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
     * 
     */
    @PolicyResourceProperty(name="principal", flag="unknown_principal")
    private String value_principal;
    private boolean unknown_principal;
    public String principal() {
        if (!unknown_principal) return value_principal;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.principal' is not present");
    }

    /**
     * A unique identifier for the current revision of the policy.
     * 
     */
    @PolicyResourceProperty(name="revisionId", flag="unknown_revisionId")
    private String value_revisionId;
    private boolean unknown_revisionId;
    public String revisionId() {
        if (!unknown_revisionId) return value_revisionId;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.revisionId' is not present");
    }

    /**
     * Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatible_architectures`, `compatible_runtimes`, `description`, `filename`, `layer_name`, `license_info`, `s3_bucket`, `s3_key`, `s3_object_version`, or `source_code_hash` forces deletion of the existing layer version and creation of a new layer version.
     * 
     */
    @PolicyResourceProperty(name="skipDestroy", flag="unknown_skipDestroy")
    private @Nullable Boolean value_skipDestroy;
    private boolean unknown_skipDestroy;
    public @Nullable Boolean skipDestroy() {
        if (!unknown_skipDestroy) return value_skipDestroy;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.skipDestroy' is not present");
    }

    /**
     * The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
     * 
     */
    @PolicyResourceProperty(name="statementId", flag="unknown_statementId")
    private String value_statementId;
    private boolean unknown_statementId;
    public String statementId() {
        if (!unknown_statementId) return value_statementId;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.statementId' is not present");
    }

    /**
     * Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
     * 
     */
    @PolicyResourceProperty(name="versionNumber", flag="unknown_versionNumber")
    private Integer value_versionNumber;
    private boolean unknown_versionNumber;
    public Integer versionNumber() {
        if (!unknown_versionNumber) return value_versionNumber;
        throw new UndeferrableValueException("Value 'LayerVersionPermission.versionNumber' is not present");
    }

}
