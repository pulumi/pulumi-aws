// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.finspace;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.finspace.inputs.KxDataviewSegmentConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:finspace/kxDataview:KxDataview")
public final class KxDataviewArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
     * 
     */
    private UndeferrableValue<Boolean> autoUpdate;

    public Boolean autoUpdate() {
        if (autoUpdate == null) return null;
        return autoUpdate.getValue("KxDataviewArgs.autoUpdate");
    }

    /**
     * The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
     * 
     */
    private UndeferrableValue<String> availabilityZoneId;

    public String availabilityZoneId() {
        if (availabilityZoneId == null) return null;
        return availabilityZoneId.getValue("KxDataviewArgs.availabilityZoneId");
    }

    /**
     * The number of availability zones you want to assign per cluster. This can be one of the following:
     * * `SINGLE` - Assigns one availability zone per cluster.
     * * `MULTI` - Assigns all the availability zones per cluster.
     * 
     */
    private UndeferrableValue<String> azMode;

    public String azMode() {
        if (azMode == null) return null;
        return azMode.getValue("KxDataviewArgs.azMode");
    }

    /**
     * A unique identifier of the changeset of the database that you want to use to ingest data.
     * 
     */
    private UndeferrableValue<String> changesetId;

    public String changesetId() {
        if (changesetId == null) return null;
        return changesetId.getValue("KxDataviewArgs.changesetId");
    }

    /**
     * The name of the database where you want to create a dataview.
     * 
     */
    private UndeferrableValue<String> databaseName;

    public String databaseName() {
        if (databaseName == null) return null;
        return databaseName.getValue("KxDataviewArgs.databaseName");
    }

    /**
     * A description for the dataview.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("KxDataviewArgs.description");
    }

    /**
     * Unique identifier for the KX environment.
     * 
     */
    private UndeferrableValue<String> environmentId;

    public String environmentId() {
        if (environmentId == null) return null;
        return environmentId.getValue("KxDataviewArgs.environmentId");
    }

    /**
     * A unique identifier for the dataview.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("KxDataviewArgs.name");
    }

    /**
     * The option to specify whether you want to make the dataview writable to perform database maintenance. The following are some considerations related to writable dataviews.
     * * You cannot create partial writable dataviews. When you create writeable dataviews you must provide the entire database path. You cannot perform updates on a writeable dataview. Hence, `auto_update` must be set as `false` if `read_write` is `true` for a dataview.
     * * You must also use a unique volume for creating a writeable dataview. So, if you choose a volume that is already in use by another dataview, the dataview creation fails.
     * * Once you create a dataview as writeable, you cannot change it to read-only. So, you cannot update the `read_write` parameter later.
     * 
     */
    private UndeferrableValue<Boolean> readWrite;

    public Boolean readWrite() {
        if (readWrite == null) return null;
        return readWrite.getValue("KxDataviewArgs.readWrite");
    }

    /**
     * The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segment_configurations below.
     * 
     */
    private UndeferrableValue<List<KxDataviewSegmentConfigurationArgs>> segmentConfigurations;

    public List<KxDataviewSegmentConfigurationArgs> segmentConfigurations() {
        if (segmentConfigurations == null) return null;
        return segmentConfigurations.getValue("KxDataviewArgs.segmentConfigurations");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("KxDataviewArgs.tags");
    }

}
