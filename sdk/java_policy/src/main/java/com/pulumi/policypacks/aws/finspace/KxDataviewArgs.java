// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.finspace;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.finspace.inputs.KxDataviewSegmentConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:finspace/kxDataview:KxDataview")
public final class KxDataviewArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
     * 
     */
    @PolicyResourceProperty(name="autoUpdate", flag="unknown_autoUpdate")
    private Boolean value_autoUpdate;
    private boolean unknown_autoUpdate;
    public Boolean autoUpdate() {
        if (!unknown_autoUpdate) return value_autoUpdate;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.autoUpdate' is not present");
    }

    /**
     * The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
     * 
     */
    @PolicyResourceProperty(name="availabilityZoneId", flag="unknown_availabilityZoneId")
    private String value_availabilityZoneId;
    private boolean unknown_availabilityZoneId;
    public String availabilityZoneId() {
        if (!unknown_availabilityZoneId) return value_availabilityZoneId;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.availabilityZoneId' is not present");
    }

    /**
     * The number of availability zones you want to assign per cluster. This can be one of the following:
     * * `SINGLE` - Assigns one availability zone per cluster.
     * * `MULTI` - Assigns all the availability zones per cluster.
     * 
     */
    @PolicyResourceProperty(name="azMode", flag="unknown_azMode")
    private String value_azMode;
    private boolean unknown_azMode;
    public String azMode() {
        if (!unknown_azMode) return value_azMode;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.azMode' is not present");
    }

    /**
     * A unique identifier of the changeset of the database that you want to use to ingest data.
     * 
     */
    @PolicyResourceProperty(name="changesetId", flag="unknown_changesetId")
    private String value_changesetId;
    private boolean unknown_changesetId;
    public String changesetId() {
        if (!unknown_changesetId) return value_changesetId;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.changesetId' is not present");
    }

    /**
     * The name of the database where you want to create a dataview.
     * 
     */
    @PolicyResourceProperty(name="databaseName", flag="unknown_databaseName")
    private String value_databaseName;
    private boolean unknown_databaseName;
    public String databaseName() {
        if (!unknown_databaseName) return value_databaseName;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.databaseName' is not present");
    }

    /**
     * A description for the dataview.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.description' is not present");
    }

    /**
     * Unique identifier for the KX environment.
     * 
     */
    @PolicyResourceProperty(name="environmentId", flag="unknown_environmentId")
    private String value_environmentId;
    private boolean unknown_environmentId;
    public String environmentId() {
        if (!unknown_environmentId) return value_environmentId;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.environmentId' is not present");
    }

    /**
     * A unique identifier for the dataview.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.name' is not present");
    }

    /**
     * The option to specify whether you want to make the dataview writable to perform database maintenance. The following are some considerations related to writable dataviews.
     * * You cannot create partial writable dataviews. When you create writeable dataviews you must provide the entire database path. You cannot perform updates on a writeable dataview. Hence, `auto_update` must be set as `false` if `read_write` is `true` for a dataview.
     * * You must also use a unique volume for creating a writeable dataview. So, if you choose a volume that is already in use by another dataview, the dataview creation fails.
     * * Once you create a dataview as writeable, you cannot change it to read-only. So, you cannot update the `read_write` parameter later.
     * 
     */
    @PolicyResourceProperty(name="readWrite", flag="unknown_readWrite")
    private Boolean value_readWrite;
    private boolean unknown_readWrite;
    public Boolean readWrite() {
        if (!unknown_readWrite) return value_readWrite;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.readWrite' is not present");
    }

    /**
     * The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segment_configurations below.
     * 
     */
    @PolicyResourceProperty(name="segmentConfigurations", flag="unknown_segmentConfigurations")
    private List<KxDataviewSegmentConfigurationArgs> value_segmentConfigurations;
    private boolean unknown_segmentConfigurations;
    public List<KxDataviewSegmentConfigurationArgs> segmentConfigurations() {
        if (!unknown_segmentConfigurations) return value_segmentConfigurations;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.segmentConfigurations' is not present");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'KxDataviewArgs.tags' is not present");
    }

}
