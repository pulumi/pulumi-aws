// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appsync;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:appsync/apiCache:ApiCache")
public final class ApiCacheArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
     * 
     */
    private UndeferrableValue<String> apiCachingBehavior;

    public String apiCachingBehavior() {
        if (apiCachingBehavior == null) return null;
        return apiCachingBehavior.getValue("ApiCacheArgs.apiCachingBehavior");
    }

    /**
     * GraphQL API ID.
     * 
     */
    private UndeferrableValue<String> apiId;

    public String apiId() {
        if (apiId == null) return null;
        return apiId.getValue("ApiCacheArgs.apiId");
    }

    /**
     * At-rest encryption flag for cache. You cannot update this setting after creation.
     * 
     */
    private UndeferrableValue<Boolean> atRestEncryptionEnabled;

    public Boolean atRestEncryptionEnabled() {
        if (atRestEncryptionEnabled == null) return null;
        return atRestEncryptionEnabled.getValue("ApiCacheArgs.atRestEncryptionEnabled");
    }

    /**
     * Transit encryption flag when connecting to cache. You cannot update this setting after creation.
     * 
     */
    private UndeferrableValue<Boolean> transitEncryptionEnabled;

    public Boolean transitEncryptionEnabled() {
        if (transitEncryptionEnabled == null) return null;
        return transitEncryptionEnabled.getValue("ApiCacheArgs.transitEncryptionEnabled");
    }

    /**
     * TTL in seconds for cache entries.
     * 
     */
    private UndeferrableValue<Integer> ttl;

    public Integer ttl() {
        if (ttl == null) return null;
        return ttl.getValue("ApiCacheArgs.ttl");
    }

    /**
     * Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ApiCacheArgs.type");
    }

}
