// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apigateway.outputs.IntegrationTlsConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigateway/integration:Integration")
public final class Integration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * List of cache key parameters for the integration.
     * 
     */
    @PolicyResourceProperty(name="cacheKeyParameters", flag="unknown_cacheKeyParameters")
    private @Nullable List<String> value_cacheKeyParameters;
    private boolean unknown_cacheKeyParameters;
    public @Nullable List<String> cacheKeyParameters() {
        if (!unknown_cacheKeyParameters) return value_cacheKeyParameters;
        throw new UndeferrableValueException("Value 'Integration.cacheKeyParameters' is not present");
    }

    /**
     * Integration&#39;s cache namespace.
     * 
     */
    @PolicyResourceProperty(name="cacheNamespace", flag="unknown_cacheNamespace")
    private String value_cacheNamespace;
    private boolean unknown_cacheNamespace;
    public String cacheNamespace() {
        if (!unknown_cacheNamespace) return value_cacheNamespace;
        throw new UndeferrableValueException("Value 'Integration.cacheNamespace' is not present");
    }

    /**
     * ID of the VpcLink used for the integration. **Required** if `connection_type` is `VPC_LINK`
     * 
     */
    @PolicyResourceProperty(name="connectionId", flag="unknown_connectionId")
    private @Nullable String value_connectionId;
    private boolean unknown_connectionId;
    public @Nullable String connectionId() {
        if (!unknown_connectionId) return value_connectionId;
        throw new UndeferrableValueException("Value 'Integration.connectionId' is not present");
    }

    /**
     * Integration input&#39;s [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
     * 
     */
    @PolicyResourceProperty(name="connectionType", flag="unknown_connectionType")
    private @Nullable String value_connectionType;
    private boolean unknown_connectionType;
    public @Nullable String connectionType() {
        if (!unknown_connectionType) return value_connectionType;
        throw new UndeferrableValueException("Value 'Integration.connectionType' is not present");
    }

    /**
     * How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
     * 
     */
    @PolicyResourceProperty(name="contentHandling", flag="unknown_contentHandling")
    private @Nullable String value_contentHandling;
    private boolean unknown_contentHandling;
    public @Nullable String contentHandling() {
        if (!unknown_contentHandling) return value_contentHandling;
        throw new UndeferrableValueException("Value 'Integration.contentHandling' is not present");
    }

    /**
     * Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role&#39;s ARN. To require that the caller&#39;s identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
     * 
     */
    @PolicyResourceProperty(name="credentials", flag="unknown_credentials")
    private @Nullable String value_credentials;
    private boolean unknown_credentials;
    public @Nullable String credentials() {
        if (!unknown_credentials) return value_credentials;
        throw new UndeferrableValueException("Value 'Integration.credentials' is not present");
    }

    /**
     * HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
     * when calling the associated resource.
     * 
     */
    @PolicyResourceProperty(name="httpMethod", flag="unknown_httpMethod")
    private String value_httpMethod;
    private boolean unknown_httpMethod;
    public String httpMethod() {
        if (!unknown_httpMethod) return value_httpMethod;
        throw new UndeferrableValueException("Value 'Integration.httpMethod' is not present");
    }

    /**
     * Integration HTTP method
     * (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
     * **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
     * Not all methods are compatible with all `AWS` integrations.
     * e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
     * 
     */
    @PolicyResourceProperty(name="integrationHttpMethod", flag="unknown_integrationHttpMethod")
    private @Nullable String value_integrationHttpMethod;
    private boolean unknown_integrationHttpMethod;
    public @Nullable String integrationHttpMethod() {
        if (!unknown_integrationHttpMethod) return value_integrationHttpMethod;
        throw new UndeferrableValueException("Value 'Integration.integrationHttpMethod' is not present");
    }

    /**
     * Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `request_templates` is used.
     * 
     */
    @PolicyResourceProperty(name="passthroughBehavior", flag="unknown_passthroughBehavior")
    private String value_passthroughBehavior;
    private boolean unknown_passthroughBehavior;
    public String passthroughBehavior() {
        if (!unknown_passthroughBehavior) return value_passthroughBehavior;
        throw new UndeferrableValueException("Value 'Integration.passthroughBehavior' is not present");
    }

    /**
     * Map of request query string parameters and headers that should be passed to the backend responder.
     * For example: `request_parameters = { &#34;integration.request.header.X-Some-Other-Header&#34; = &#34;method.request.header.X-Some-Header&#34; }`
     * 
     */
    @PolicyResourceProperty(name="requestParameters", flag="unknown_requestParameters")
    private @Nullable Map<String,String> value_requestParameters;
    private boolean unknown_requestParameters;
    public @Nullable Map<String,String> requestParameters() {
        if (!unknown_requestParameters) return value_requestParameters;
        throw new UndeferrableValueException("Value 'Integration.requestParameters' is not present");
    }

    /**
     * Map of the integration&#39;s request templates.
     * 
     */
    @PolicyResourceProperty(name="requestTemplates", flag="unknown_requestTemplates")
    private @Nullable Map<String,String> value_requestTemplates;
    private boolean unknown_requestTemplates;
    public @Nullable Map<String,String> requestTemplates() {
        if (!unknown_requestTemplates) return value_requestTemplates;
        throw new UndeferrableValueException("Value 'Integration.requestTemplates' is not present");
    }

    /**
     * API resource ID.
     * 
     */
    @PolicyResourceProperty(name="resourceId", flag="unknown_resourceId")
    private String value_resourceId;
    private boolean unknown_resourceId;
    public String resourceId() {
        if (!unknown_resourceId) return value_resourceId;
        throw new UndeferrableValueException("Value 'Integration.resourceId' is not present");
    }

    /**
     * ID of the associated REST API.
     * 
     */
    @PolicyResourceProperty(name="restApi", flag="unknown_restApi")
    private String value_restApi;
    private boolean unknown_restApi;
    public String restApi() {
        if (!unknown_restApi) return value_restApi;
        throw new UndeferrableValueException("Value 'Integration.restApi' is not present");
    }

    /**
     * Custom timeout between 50 and 300,000 milliseconds. The default value is 29,000 milliseconds. You need to raise a [Service Quota Ticket](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) to increase time beyond 29,000 milliseconds.
     * 
     */
    @PolicyResourceProperty(name="timeoutMilliseconds", flag="unknown_timeoutMilliseconds")
    private @Nullable Integer value_timeoutMilliseconds;
    private boolean unknown_timeoutMilliseconds;
    public @Nullable Integer timeoutMilliseconds() {
        if (!unknown_timeoutMilliseconds) return value_timeoutMilliseconds;
        throw new UndeferrableValueException("Value 'Integration.timeoutMilliseconds' is not present");
    }

    /**
     * TLS configuration. See below.
     * 
     */
    @PolicyResourceProperty(name="tlsConfig", flag="unknown_tlsConfig")
    private @Nullable IntegrationTlsConfig value_tlsConfig;
    private boolean unknown_tlsConfig;
    public @Nullable IntegrationTlsConfig tlsConfig() {
        if (!unknown_tlsConfig) return value_tlsConfig;
        throw new UndeferrableValueException("Value 'Integration.tlsConfig' is not present");
    }

    /**
     * Integration input&#39;s [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connection_type` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Integration.type' is not present");
    }

    /**
     * Input&#39;s URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
     * For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
     * e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:123456789012:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
     * 
     */
    @PolicyResourceProperty(name="uri", flag="unknown_uri")
    private @Nullable String value_uri;
    private boolean unknown_uri;
    public @Nullable String uri() {
        if (!unknown_uri) return value_uri;
        throw new UndeferrableValueException("Value 'Integration.uri' is not present");
    }

}
