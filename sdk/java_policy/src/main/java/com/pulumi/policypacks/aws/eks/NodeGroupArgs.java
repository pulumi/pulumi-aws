// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.eks;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupLaunchTemplateArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupNodeRepairConfigArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupRemoteAccessArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupScalingConfigArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupTaintArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupUpdateConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:eks/nodeGroup:NodeGroup")
public final class NodeGroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Type of Amazon Machine Image (AMI) associated with the EKS Node Group. See the [AWS documentation](https://docs.aws.amazon.com/eks/latest/APIReference/API_Nodegroup.html#AmazonEKS-Type-Nodegroup-amiType) for valid values. This provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="amiType", flag="unknown_amiType")
    private String value_amiType;
    private boolean unknown_amiType;
    public String amiType() {
        if (!unknown_amiType) return value_amiType;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.amiType' is not present");
    }

    /**
     * Type of capacity associated with the EKS Node Group. Valid values: `ON_DEMAND`, `SPOT`. This provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="capacityType", flag="unknown_capacityType")
    private String value_capacityType;
    private boolean unknown_capacityType;
    public String capacityType() {
        if (!unknown_capacityType) return value_capacityType;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.capacityType' is not present");
    }

    /**
     * Name of the EKS Cluster.
     * 
     */
    @PolicyResourceProperty(name="clusterName", flag="unknown_clusterName")
    private String value_clusterName;
    private boolean unknown_clusterName;
    public String clusterName() {
        if (!unknown_clusterName) return value_clusterName;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.clusterName' is not present");
    }

    /**
     * Disk size in GiB for worker nodes. Defaults to `50` for Windows, `20` all other node groups. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="diskSize", flag="unknown_diskSize")
    private Integer value_diskSize;
    private boolean unknown_diskSize;
    public Integer diskSize() {
        if (!unknown_diskSize) return value_diskSize;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.diskSize' is not present");
    }

    /**
     * Force version update if existing pods are unable to be drained due to a pod disruption budget issue.
     * 
     */
    @PolicyResourceProperty(name="forceUpdateVersion", flag="unknown_forceUpdateVersion")
    private Boolean value_forceUpdateVersion;
    private boolean unknown_forceUpdateVersion;
    public Boolean forceUpdateVersion() {
        if (!unknown_forceUpdateVersion) return value_forceUpdateVersion;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.forceUpdateVersion' is not present");
    }

    /**
     * List of instance types associated with the EKS Node Group. Defaults to `[&#34;t3.medium&#34;]`. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="instanceTypes", flag="unknown_instanceTypes")
    private List<String> value_instanceTypes;
    private boolean unknown_instanceTypes;
    public List<String> instanceTypes() {
        if (!unknown_instanceTypes) return value_instanceTypes;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.instanceTypes' is not present");
    }

    /**
     * Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
     * 
     */
    @PolicyResourceProperty(name="labels", flag="unknown_labels")
    private Map<String,String> value_labels;
    private boolean unknown_labels;
    public Map<String,String> labels() {
        if (!unknown_labels) return value_labels;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.labels' is not present");
    }

    /**
     * Configuration block with Launch Template settings. See `launch_template` below for details. Conflicts with `remote_access`.
     * 
     */
    @PolicyResourceProperty(name="launchTemplate", flag="unknown_launchTemplate")
    private NodeGroupLaunchTemplateArgs value_launchTemplate;
    private boolean unknown_launchTemplate;
    public NodeGroupLaunchTemplateArgs launchTemplate() {
        if (!unknown_launchTemplate) return value_launchTemplate;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.launchTemplate' is not present");
    }

    /**
     * Name of the EKS Node Group. If omitted, the provider will assign a random, unique name. Conflicts with `node_group_name_prefix`. The node group name can&#39;t be longer than 63 characters. It must start with a letter or digit, but can also include hyphens and underscores for the remaining characters.
     * 
     */
    @PolicyResourceProperty(name="nodeGroupName", flag="unknown_nodeGroupName")
    private String value_nodeGroupName;
    private boolean unknown_nodeGroupName;
    public String nodeGroupName() {
        if (!unknown_nodeGroupName) return value_nodeGroupName;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.nodeGroupName' is not present");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `node_group_name`.
     * 
     */
    @PolicyResourceProperty(name="nodeGroupNamePrefix", flag="unknown_nodeGroupNamePrefix")
    private String value_nodeGroupNamePrefix;
    private boolean unknown_nodeGroupNamePrefix;
    public String nodeGroupNamePrefix() {
        if (!unknown_nodeGroupNamePrefix) return value_nodeGroupNamePrefix;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.nodeGroupNamePrefix' is not present");
    }

    /**
     * The node auto repair configuration for the node group. See `node_repair_config` below for details.
     * 
     */
    @PolicyResourceProperty(name="nodeRepairConfig", flag="unknown_nodeRepairConfig")
    private NodeGroupNodeRepairConfigArgs value_nodeRepairConfig;
    private boolean unknown_nodeRepairConfig;
    public NodeGroupNodeRepairConfigArgs nodeRepairConfig() {
        if (!unknown_nodeRepairConfig) return value_nodeRepairConfig;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.nodeRepairConfig' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the IAM Role that provides permissions for the EKS Node Group.
     * 
     */
    @PolicyResourceProperty(name="nodeRoleArn", flag="unknown_nodeRoleArn")
    private String value_nodeRoleArn;
    private boolean unknown_nodeRoleArn;
    public String nodeRoleArn() {
        if (!unknown_nodeRoleArn) return value_nodeRoleArn;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.nodeRoleArn' is not present");
    }

    /**
     * AMI version of the EKS Node Group. Defaults to latest version for Kubernetes version.
     * 
     */
    @PolicyResourceProperty(name="releaseVersion", flag="unknown_releaseVersion")
    private String value_releaseVersion;
    private boolean unknown_releaseVersion;
    public String releaseVersion() {
        if (!unknown_releaseVersion) return value_releaseVersion;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.releaseVersion' is not present");
    }

    /**
     * Configuration block with remote access settings. See `remote_access` below for details. Conflicts with `launch_template`.
     * 
     */
    @PolicyResourceProperty(name="remoteAccess", flag="unknown_remoteAccess")
    private NodeGroupRemoteAccessArgs value_remoteAccess;
    private boolean unknown_remoteAccess;
    public NodeGroupRemoteAccessArgs remoteAccess() {
        if (!unknown_remoteAccess) return value_remoteAccess;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.remoteAccess' is not present");
    }

    /**
     * Configuration block with scaling settings. See `scaling_config` below for details.
     * 
     */
    @PolicyResourceProperty(name="scalingConfig", flag="unknown_scalingConfig")
    private NodeGroupScalingConfigArgs value_scalingConfig;
    private boolean unknown_scalingConfig;
    public NodeGroupScalingConfigArgs scalingConfig() {
        if (!unknown_scalingConfig) return value_scalingConfig;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.scalingConfig' is not present");
    }

    /**
     * Identifiers of EC2 Subnets to associate with the EKS Node Group.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="subnetIds", flag="unknown_subnetIds")
    private List<String> value_subnetIds;
    private boolean unknown_subnetIds;
    public List<String> subnetIds() {
        if (!unknown_subnetIds) return value_subnetIds;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.subnetIds' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.tags' is not present");
    }

    /**
     * The Kubernetes taints to be applied to the nodes in the node group. Maximum of 50 taints per node group. See taint below for details.
     * 
     */
    @PolicyResourceProperty(name="taints", flag="unknown_taints")
    private List<NodeGroupTaintArgs> value_taints;
    private boolean unknown_taints;
    public List<NodeGroupTaintArgs> taints() {
        if (!unknown_taints) return value_taints;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.taints' is not present");
    }

    /**
     * Configuration block with update settings. See `update_config` below for details.
     * 
     */
    @PolicyResourceProperty(name="updateConfig", flag="unknown_updateConfig")
    private NodeGroupUpdateConfigArgs value_updateConfig;
    private boolean unknown_updateConfig;
    public NodeGroupUpdateConfigArgs updateConfig() {
        if (!unknown_updateConfig) return value_updateConfig;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.updateConfig' is not present");
    }

    /**
     * Kubernetes version. Defaults to EKS Cluster Kubernetes version. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="version", flag="unknown_version")
    private String value_version;
    private boolean unknown_version;
    public String version() {
        if (!unknown_version) return value_version;
        throw new UndeferrableValueException("Value 'NodeGroupArgs.version' is not present");
    }

}
