// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.eks;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupLaunchTemplateArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupNodeRepairConfigArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupRemoteAccessArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupScalingConfigArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupTaintArgs;
import com.pulumi.policypacks.aws.eks.inputs.NodeGroupUpdateConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:eks/nodeGroup:NodeGroup")
public final class NodeGroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Type of Amazon Machine Image (AMI) associated with the EKS Node Group. See the [AWS documentation](https://docs.aws.amazon.com/eks/latest/APIReference/API_Nodegroup.html#AmazonEKS-Type-Nodegroup-amiType) for valid values. This provider will only perform drift detection if a configuration value is provided.
     * 
     */
    private UndeferrableValue<String> amiType;

    public String amiType() {
        if (amiType == null) return null;
        return amiType.getValue("NodeGroupArgs.amiType");
    }

    /**
     * Type of capacity associated with the EKS Node Group. Valid values: `ON_DEMAND`, `SPOT`. This provider will only perform drift detection if a configuration value is provided.
     * 
     */
    private UndeferrableValue<String> capacityType;

    public String capacityType() {
        if (capacityType == null) return null;
        return capacityType.getValue("NodeGroupArgs.capacityType");
    }

    /**
     * Name of the EKS Cluster.
     * 
     */
    private UndeferrableValue<String> clusterName;

    public String clusterName() {
        if (clusterName == null) return null;
        return clusterName.getValue("NodeGroupArgs.clusterName");
    }

    /**
     * Disk size in GiB for worker nodes. Defaults to `50` for Windows, `20` all other node groups. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    private UndeferrableValue<Integer> diskSize;

    public Integer diskSize() {
        if (diskSize == null) return null;
        return diskSize.getValue("NodeGroupArgs.diskSize");
    }

    /**
     * Force version update if existing pods are unable to be drained due to a pod disruption budget issue.
     * 
     */
    private UndeferrableValue<Boolean> forceUpdateVersion;

    public Boolean forceUpdateVersion() {
        if (forceUpdateVersion == null) return null;
        return forceUpdateVersion.getValue("NodeGroupArgs.forceUpdateVersion");
    }

    /**
     * List of instance types associated with the EKS Node Group. Defaults to `[&#34;t3.medium&#34;]`. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    private UndeferrableValue<List<String>> instanceTypes;

    public List<String> instanceTypes() {
        if (instanceTypes == null) return null;
        return instanceTypes.getValue("NodeGroupArgs.instanceTypes");
    }

    /**
     * Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
     * 
     */
    private UndeferrableValue<Map<String,String>> labels;

    public Map<String,String> labels() {
        if (labels == null) return null;
        return labels.getValue("NodeGroupArgs.labels");
    }

    /**
     * Configuration block with Launch Template settings. See `launch_template` below for details. Conflicts with `remote_access`.
     * 
     */
    private UndeferrableValue<NodeGroupLaunchTemplateArgs> launchTemplate;

    public NodeGroupLaunchTemplateArgs launchTemplate() {
        if (launchTemplate == null) return null;
        return launchTemplate.getValue("NodeGroupArgs.launchTemplate");
    }

    /**
     * Name of the EKS Node Group. If omitted, the provider will assign a random, unique name. Conflicts with `node_group_name_prefix`. The node group name can&#39;t be longer than 63 characters. It must start with a letter or digit, but can also include hyphens and underscores for the remaining characters.
     * 
     */
    private UndeferrableValue<String> nodeGroupName;

    public String nodeGroupName() {
        if (nodeGroupName == null) return null;
        return nodeGroupName.getValue("NodeGroupArgs.nodeGroupName");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `node_group_name`.
     * 
     */
    private UndeferrableValue<String> nodeGroupNamePrefix;

    public String nodeGroupNamePrefix() {
        if (nodeGroupNamePrefix == null) return null;
        return nodeGroupNamePrefix.getValue("NodeGroupArgs.nodeGroupNamePrefix");
    }

    /**
     * The node auto repair configuration for the node group. See `node_repair_config` below for details.
     * 
     */
    private UndeferrableValue<NodeGroupNodeRepairConfigArgs> nodeRepairConfig;

    public NodeGroupNodeRepairConfigArgs nodeRepairConfig() {
        if (nodeRepairConfig == null) return null;
        return nodeRepairConfig.getValue("NodeGroupArgs.nodeRepairConfig");
    }

    /**
     * Amazon Resource Name (ARN) of the IAM Role that provides permissions for the EKS Node Group.
     * 
     */
    private UndeferrableValue<String> nodeRoleArn;

    public String nodeRoleArn() {
        if (nodeRoleArn == null) return null;
        return nodeRoleArn.getValue("NodeGroupArgs.nodeRoleArn");
    }

    /**
     * AMI version of the EKS Node Group. Defaults to latest version for Kubernetes version.
     * 
     */
    private UndeferrableValue<String> releaseVersion;

    public String releaseVersion() {
        if (releaseVersion == null) return null;
        return releaseVersion.getValue("NodeGroupArgs.releaseVersion");
    }

    /**
     * Configuration block with remote access settings. See `remote_access` below for details. Conflicts with `launch_template`.
     * 
     */
    private UndeferrableValue<NodeGroupRemoteAccessArgs> remoteAccess;

    public NodeGroupRemoteAccessArgs remoteAccess() {
        if (remoteAccess == null) return null;
        return remoteAccess.getValue("NodeGroupArgs.remoteAccess");
    }

    /**
     * Configuration block with scaling settings. See `scaling_config` below for details.
     * 
     */
    private UndeferrableValue<NodeGroupScalingConfigArgs> scalingConfig;

    public NodeGroupScalingConfigArgs scalingConfig() {
        if (scalingConfig == null) return null;
        return scalingConfig.getValue("NodeGroupArgs.scalingConfig");
    }

    /**
     * Identifiers of EC2 Subnets to associate with the EKS Node Group.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("NodeGroupArgs.subnetIds");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("NodeGroupArgs.tags");
    }

    /**
     * The Kubernetes taints to be applied to the nodes in the node group. Maximum of 50 taints per node group. See taint below for details.
     * 
     */
    private UndeferrableValue<List<NodeGroupTaintArgs>> taints;

    public List<NodeGroupTaintArgs> taints() {
        if (taints == null) return null;
        return taints.getValue("NodeGroupArgs.taints");
    }

    /**
     * Configuration block with update settings. See `update_config` below for details.
     * 
     */
    private UndeferrableValue<NodeGroupUpdateConfigArgs> updateConfig;

    public NodeGroupUpdateConfigArgs updateConfig() {
        if (updateConfig == null) return null;
        return updateConfig.getValue("NodeGroupArgs.updateConfig");
    }

    /**
     * Kubernetes version. Defaults to EKS Cluster Kubernetes version. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    private UndeferrableValue<String> version;

    public String version() {
        if (version == null) return null;
        return version.getValue("NodeGroupArgs.version");
    }

}
