// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.verifiedaccess;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.verifiedaccess.outputs.GroupSseConfiguration;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:verifiedaccess/group:Group")
public final class Group extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Timestamp when the access group was created.
     * 
     */
    private UndeferrableValue<String> creationTime;

    public String creationTime() {
        if (creationTime == null) return null;
        return creationTime.getValue("Group.creationTime");
    }

    /**
     * Timestamp when the access group was deleted.
     * 
     */
    private UndeferrableValue<String> deletionTime;

    public String deletionTime() {
        if (deletionTime == null) return null;
        return deletionTime.getValue("Group.deletionTime");
    }

    /**
     * Description of the verified access group.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("Group.description");
    }

    /**
     * Timestamp when the access group was last updated.
     * 
     */
    private UndeferrableValue<String> lastUpdatedTime;

    public String lastUpdatedTime() {
        if (lastUpdatedTime == null) return null;
        return lastUpdatedTime.getValue("Group.lastUpdatedTime");
    }

    /**
     * AWS account number owning this resource.
     * 
     */
    private UndeferrableValue<String> owner;

    public String owner() {
        if (owner == null) return null;
        return owner.getValue("Group.owner");
    }

    /**
     * The policy document that is associated with this resource.
     * 
     */
    private @Nullable UndeferrableValue<String> policyDocument;

    public @Nullable String policyDocument() {
        if (policyDocument == null) return null;
        return policyDocument.getValue("Group.policyDocument");
    }

    /**
     * Configuration block to use KMS keys for server-side encryption.
     * 
     */
    private UndeferrableValue<GroupSseConfiguration> sseConfiguration;

    public GroupSseConfiguration sseConfiguration() {
        if (sseConfiguration == null) return null;
        return sseConfiguration.getValue("Group.sseConfiguration");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Group.tags");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Group.tagsAll");
    }

    /**
     * ARN of this verified acess group.
     * 
     */
    private UndeferrableValue<String> verifiedaccessGroupArn;

    public String verifiedaccessGroupArn() {
        if (verifiedaccessGroupArn == null) return null;
        return verifiedaccessGroupArn.getValue("Group.verifiedaccessGroupArn");
    }

    /**
     * ID of this verified access group.
     * 
     */
    private UndeferrableValue<String> verifiedaccessGroupId;

    public String verifiedaccessGroupId() {
        if (verifiedaccessGroupId == null) return null;
        return verifiedaccessGroupId.getValue("Group.verifiedaccessGroupId");
    }

    /**
     * The id of the verified access instance this group is associated with.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> verifiedaccessInstanceId;

    public String verifiedaccessInstanceId() {
        if (verifiedaccessInstanceId == null) return null;
        return verifiedaccessInstanceId.getValue("Group.verifiedaccessInstanceId");
    }

}
