// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.verifiedaccess;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.verifiedaccess.outputs.GroupSseConfiguration;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:verifiedaccess/group:Group")
public final class Group extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Timestamp when the access group was created.
     * 
     */
    @PolicyResourceProperty(name="creationTime", flag="unknown_creationTime")
    private String value_creationTime;
    private boolean unknown_creationTime;
    public String creationTime() {
        if (!unknown_creationTime) return value_creationTime;
        throw new UndeferrableValueException("Value 'Group.creationTime' is not present");
    }

    /**
     * Timestamp when the access group was deleted.
     * 
     */
    @PolicyResourceProperty(name="deletionTime", flag="unknown_deletionTime")
    private String value_deletionTime;
    private boolean unknown_deletionTime;
    public String deletionTime() {
        if (!unknown_deletionTime) return value_deletionTime;
        throw new UndeferrableValueException("Value 'Group.deletionTime' is not present");
    }

    /**
     * Description of the verified access group.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Group.description' is not present");
    }

    /**
     * Timestamp when the access group was last updated.
     * 
     */
    @PolicyResourceProperty(name="lastUpdatedTime", flag="unknown_lastUpdatedTime")
    private String value_lastUpdatedTime;
    private boolean unknown_lastUpdatedTime;
    public String lastUpdatedTime() {
        if (!unknown_lastUpdatedTime) return value_lastUpdatedTime;
        throw new UndeferrableValueException("Value 'Group.lastUpdatedTime' is not present");
    }

    /**
     * AWS account number owning this resource.
     * 
     */
    @PolicyResourceProperty(name="owner", flag="unknown_owner")
    private String value_owner;
    private boolean unknown_owner;
    public String owner() {
        if (!unknown_owner) return value_owner;
        throw new UndeferrableValueException("Value 'Group.owner' is not present");
    }

    /**
     * The policy document that is associated with this resource.
     * 
     */
    @PolicyResourceProperty(name="policyDocument", flag="unknown_policyDocument")
    private @Nullable String value_policyDocument;
    private boolean unknown_policyDocument;
    public @Nullable String policyDocument() {
        if (!unknown_policyDocument) return value_policyDocument;
        throw new UndeferrableValueException("Value 'Group.policyDocument' is not present");
    }

    /**
     * Configuration block to use KMS keys for server-side encryption.
     * 
     */
    @PolicyResourceProperty(name="sseConfiguration", flag="unknown_sseConfiguration")
    private GroupSseConfiguration value_sseConfiguration;
    private boolean unknown_sseConfiguration;
    public GroupSseConfiguration sseConfiguration() {
        if (!unknown_sseConfiguration) return value_sseConfiguration;
        throw new UndeferrableValueException("Value 'Group.sseConfiguration' is not present");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Group.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Group.tagsAll' is not present");
    }

    /**
     * ARN of this verified acess group.
     * 
     */
    @PolicyResourceProperty(name="verifiedaccessGroupArn", flag="unknown_verifiedaccessGroupArn")
    private String value_verifiedaccessGroupArn;
    private boolean unknown_verifiedaccessGroupArn;
    public String verifiedaccessGroupArn() {
        if (!unknown_verifiedaccessGroupArn) return value_verifiedaccessGroupArn;
        throw new UndeferrableValueException("Value 'Group.verifiedaccessGroupArn' is not present");
    }

    /**
     * ID of this verified access group.
     * 
     */
    @PolicyResourceProperty(name="verifiedaccessGroupId", flag="unknown_verifiedaccessGroupId")
    private String value_verifiedaccessGroupId;
    private boolean unknown_verifiedaccessGroupId;
    public String verifiedaccessGroupId() {
        if (!unknown_verifiedaccessGroupId) return value_verifiedaccessGroupId;
        throw new UndeferrableValueException("Value 'Group.verifiedaccessGroupId' is not present");
    }

    /**
     * The id of the verified access instance this group is associated with.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="verifiedaccessInstanceId", flag="unknown_verifiedaccessInstanceId")
    private String value_verifiedaccessInstanceId;
    private boolean unknown_verifiedaccessInstanceId;
    public String verifiedaccessInstanceId() {
        if (!unknown_verifiedaccessInstanceId) return value_verifiedaccessInstanceId;
        throw new UndeferrableValueException("Value 'Group.verifiedaccessInstanceId' is not present");
    }

}
