// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.guardduty;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.guardduty.inputs.FilterFindingCriteriaArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:guardduty/filter:Filter")
public final class FilterArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
     * 
     */
    private UndeferrableValue<String> action;

    public String action() {
        if (action == null) return null;
        return action.getValue("FilterArgs.action");
    }

    /**
     * Description of the filter.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("FilterArgs.description");
    }

    /**
     * ID of a GuardDuty detector, attached to your account.
     * 
     */
    private UndeferrableValue<String> detectorId;

    public String detectorId() {
        if (detectorId == null) return null;
        return detectorId.getValue("FilterArgs.detectorId");
    }

    /**
     * Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
     * 
     */
    private UndeferrableValue<FilterFindingCriteriaArgs> findingCriteria;

    public FilterFindingCriteriaArgs findingCriteria() {
        if (findingCriteria == null) return null;
        return findingCriteria.getValue("FilterArgs.findingCriteria");
    }

    /**
     * The name of your filter.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("FilterArgs.name");
    }

    /**
     * Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
     * 
     */
    private UndeferrableValue<Integer> rank;

    public Integer rank() {
        if (rank == null) return null;
        return rank.getValue("FilterArgs.rank");
    }

    /**
     * The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("FilterArgs.tags");
    }

}
