// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.guardduty;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.guardduty.inputs.FilterFindingCriteriaArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:guardduty/filter:Filter")
public final class FilterArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
     * 
     */
    @PolicyResourceProperty(name="action", flag="unknown_action")
    private String value_action;
    private boolean unknown_action;
    public String action() {
        if (!unknown_action) return value_action;
        throw new UndeferrableValueException("Value 'FilterArgs.action' is not present");
    }

    /**
     * Description of the filter.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'FilterArgs.description' is not present");
    }

    /**
     * ID of a GuardDuty detector, attached to your account.
     * 
     */
    @PolicyResourceProperty(name="detectorId", flag="unknown_detectorId")
    private String value_detectorId;
    private boolean unknown_detectorId;
    public String detectorId() {
        if (!unknown_detectorId) return value_detectorId;
        throw new UndeferrableValueException("Value 'FilterArgs.detectorId' is not present");
    }

    /**
     * Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
     * 
     */
    @PolicyResourceProperty(name="findingCriteria", flag="unknown_findingCriteria")
    private FilterFindingCriteriaArgs value_findingCriteria;
    private boolean unknown_findingCriteria;
    public FilterFindingCriteriaArgs findingCriteria() {
        if (!unknown_findingCriteria) return value_findingCriteria;
        throw new UndeferrableValueException("Value 'FilterArgs.findingCriteria' is not present");
    }

    /**
     * The name of your filter.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'FilterArgs.name' is not present");
    }

    /**
     * Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
     * 
     */
    @PolicyResourceProperty(name="rank", flag="unknown_rank")
    private Integer value_rank;
    private boolean unknown_rank;
    public Integer rank() {
        if (!unknown_rank) return value_rank;
        throw new UndeferrableValueException("Value 'FilterArgs.rank' is not present");
    }

    /**
     * The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'FilterArgs.tags' is not present");
    }

}
