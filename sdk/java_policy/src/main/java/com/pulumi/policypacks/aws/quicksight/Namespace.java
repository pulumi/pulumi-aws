// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.outputs.NamespaceTimeouts;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/namespace:Namespace")
public final class Namespace extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Namespace.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Namespace.arn");
    }

    /**
     * AWS account ID.
     * 
     */
    private UndeferrableValue<String> awsAccountId;

    public String awsAccountId() {
        if (awsAccountId == null) return null;
        return awsAccountId.getValue("Namespace.awsAccountId");
    }

    /**
     * Namespace AWS Region.
     * 
     */
    private UndeferrableValue<String> capacityRegion;

    public String capacityRegion() {
        if (capacityRegion == null) return null;
        return capacityRegion.getValue("Namespace.capacityRegion");
    }

    /**
     * Creation status of the namespace.
     * 
     */
    private UndeferrableValue<String> creationStatus;

    public String creationStatus() {
        if (creationStatus == null) return null;
        return creationStatus.getValue("Namespace.creationStatus");
    }

    /**
     * User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
     * 
     */
    private UndeferrableValue<String> identityStore;

    public String identityStore() {
        if (identityStore == null) return null;
        return identityStore.getValue("Namespace.identityStore");
    }

    /**
     * Name of the namespace.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> namespace;

    public String namespace() {
        if (namespace == null) return null;
        return namespace.getValue("Namespace.namespace");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Namespace.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Namespace.tagsAll");
    }

    private @Nullable UndeferrableValue<NamespaceTimeouts> timeouts;

    public @Nullable NamespaceTimeouts timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("Namespace.timeouts");
    }

}
