// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.outputs.NamespaceTimeouts;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/namespace:Namespace")
public final class Namespace extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Namespace.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Namespace.arn' is not present");
    }

    /**
     * AWS account ID.
     * 
     */
    @PolicyResourceProperty(name="awsAccountId", flag="unknown_awsAccountId")
    private String value_awsAccountId;
    private boolean unknown_awsAccountId;
    public String awsAccountId() {
        if (!unknown_awsAccountId) return value_awsAccountId;
        throw new UndeferrableValueException("Value 'Namespace.awsAccountId' is not present");
    }

    /**
     * Namespace AWS Region.
     * 
     */
    @PolicyResourceProperty(name="capacityRegion", flag="unknown_capacityRegion")
    private String value_capacityRegion;
    private boolean unknown_capacityRegion;
    public String capacityRegion() {
        if (!unknown_capacityRegion) return value_capacityRegion;
        throw new UndeferrableValueException("Value 'Namespace.capacityRegion' is not present");
    }

    /**
     * Creation status of the namespace.
     * 
     */
    @PolicyResourceProperty(name="creationStatus", flag="unknown_creationStatus")
    private String value_creationStatus;
    private boolean unknown_creationStatus;
    public String creationStatus() {
        if (!unknown_creationStatus) return value_creationStatus;
        throw new UndeferrableValueException("Value 'Namespace.creationStatus' is not present");
    }

    /**
     * User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
     * 
     */
    @PolicyResourceProperty(name="identityStore", flag="unknown_identityStore")
    private String value_identityStore;
    private boolean unknown_identityStore;
    public String identityStore() {
        if (!unknown_identityStore) return value_identityStore;
        throw new UndeferrableValueException("Value 'Namespace.identityStore' is not present");
    }

    /**
     * Name of the namespace.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="namespace", flag="unknown_namespace")
    private String value_namespace;
    private boolean unknown_namespace;
    public String namespace() {
        if (!unknown_namespace) return value_namespace;
        throw new UndeferrableValueException("Value 'Namespace.namespace' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Namespace.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Namespace.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable NamespaceTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable NamespaceTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'Namespace.timeouts' is not present");
    }

}
