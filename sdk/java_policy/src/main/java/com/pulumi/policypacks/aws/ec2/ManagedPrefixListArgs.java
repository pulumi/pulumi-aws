// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.inputs.ManagedPrefixListEntryArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/managedPrefixList:ManagedPrefixList")
public final class ManagedPrefixListArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Address family (`IPv4` or `IPv6`) of this prefix list.
     * 
     */
    private UndeferrableValue<String> addressFamily;

    public String addressFamily() {
        if (addressFamily == null) return null;
        return addressFamily.getValue("ManagedPrefixListArgs.addressFamily");
    }

    /**
     * Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
     * 
     */
    private UndeferrableValue<List<ManagedPrefixListEntryArgs>> entries;

    public List<ManagedPrefixListEntryArgs> entries() {
        if (entries == null) return null;
        return entries.getValue("ManagedPrefixListArgs.entries");
    }

    /**
     * Maximum number of entries that this prefix list can contain.
     * 
     */
    private UndeferrableValue<Integer> maxEntries;

    public Integer maxEntries() {
        if (maxEntries == null) return null;
        return maxEntries.getValue("ManagedPrefixListArgs.maxEntries");
    }

    /**
     * Name of this resource. The name must not start with `com.amazonaws`.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ManagedPrefixListArgs.name");
    }

    /**
     * Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ManagedPrefixListArgs.tags");
    }

}
