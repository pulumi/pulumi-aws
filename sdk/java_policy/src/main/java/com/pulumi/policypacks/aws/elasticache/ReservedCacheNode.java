// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.outputs.ReservedCacheNodeRecurringCharge;
import com.pulumi.policypacks.aws.elasticache.outputs.ReservedCacheNodeTimeouts;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticache/reservedCacheNode:ReservedCacheNode")
public final class ReservedCacheNode extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN for the reserved cache node.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("ReservedCacheNode.arn");
    }

    /**
     * Number of cache node instances to reserve.
     * Default value is `1`.
     * 
     */
    private UndeferrableValue<Integer> cacheNodeCount;

    public Integer cacheNodeCount() {
        if (cacheNodeCount == null) return null;
        return cacheNodeCount.getValue("ReservedCacheNode.cacheNodeCount");
    }

    /**
     * Node type for the reserved cache nodes.
     * 
     */
    private UndeferrableValue<String> cacheNodeType;

    public String cacheNodeType() {
        if (cacheNodeType == null) return null;
        return cacheNodeType.getValue("ReservedCacheNode.cacheNodeType");
    }

    /**
     * Duration of the reservation as an RFC3339 duration.
     * 
     */
    private UndeferrableValue<String> duration;

    public String duration() {
        if (duration == null) return null;
        return duration.getValue("ReservedCacheNode.duration");
    }

    /**
     * Fixed price charged for this reserved cache node.
     * 
     */
    private UndeferrableValue<Double> fixedPrice;

    public Double fixedPrice() {
        if (fixedPrice == null) return null;
        return fixedPrice.getValue("ReservedCacheNode.fixedPrice");
    }

    /**
     * Offering type of this reserved cache node.
     * 
     */
    private UndeferrableValue<String> offeringType;

    public String offeringType() {
        if (offeringType == null) return null;
        return offeringType.getValue("ReservedCacheNode.offeringType");
    }

    /**
     * Engine type for the reserved cache node.
     * 
     */
    private UndeferrableValue<String> productDescription;

    public String productDescription() {
        if (productDescription == null) return null;
        return productDescription.getValue("ReservedCacheNode.productDescription");
    }

    /**
     * Recurring price charged to run this reserved cache node.
     * 
     */
    private UndeferrableValue<List<ReservedCacheNodeRecurringCharge>> recurringCharges;

    public List<ReservedCacheNodeRecurringCharge> recurringCharges() {
        if (recurringCharges == null) return null;
        return recurringCharges.getValue("ReservedCacheNode.recurringCharges");
    }

    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> reservedCacheNodesOfferingId;

    public String reservedCacheNodesOfferingId() {
        if (reservedCacheNodesOfferingId == null) return null;
        return reservedCacheNodesOfferingId.getValue("ReservedCacheNode.reservedCacheNodesOfferingId");
    }

    /**
     * Time the reservation started.
     * 
     */
    private UndeferrableValue<String> startTime;

    public String startTime() {
        if (startTime == null) return null;
        return startTime.getValue("ReservedCacheNode.startTime");
    }

    /**
     * State of the reserved cache node.
     * 
     */
    private UndeferrableValue<String> state;

    public String state() {
        if (state == null) return null;
        return state.getValue("ReservedCacheNode.state");
    }

    /**
     * Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ReservedCacheNode.tags");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("ReservedCacheNode.tagsAll");
    }

    private @Nullable UndeferrableValue<ReservedCacheNodeTimeouts> timeouts;

    public @Nullable ReservedCacheNodeTimeouts timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("ReservedCacheNode.timeouts");
    }

    /**
     * Hourly price charged for this reserved cache node.
     * 
     */
    private UndeferrableValue<Double> usagePrice;

    public Double usagePrice() {
        if (usagePrice == null) return null;
        return usagePrice.getValue("ReservedCacheNode.usagePrice");
    }

}
