// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.ReservedCacheNodeRecurringCharge;
import com.pulumi.policypacks.aws.elasticache.ReservedCacheNodeTimeouts;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;


@PolicyResourceType(type="aws:elasticache/reservedCacheNode:ReservedCacheNode")
public final class ReservedCacheNode extends com.pulumi.resources.PolicyResource {

    /**
     * ARN for the reserved cache node.
     * 
     */
    public String arn;



    /**
     * Number of cache node instances to reserve.
     * Default value is `1`.
     * 
     */
    public Integer cacheNodeCount;



    /**
     * Node type for the reserved cache nodes.
     * 
     */
    public String cacheNodeType;



    /**
     * Duration of the reservation as an RFC3339 duration.
     * 
     */
    public String duration;



    /**
     * Fixed price charged for this reserved cache node.
     * 
     */
    public Double fixedPrice;



    /**
     * Offering type of this reserved cache node.
     * 
     */
    public String offeringType;



    /**
     * Engine type for the reserved cache node.
     * 
     */
    public String productDescription;



    /**
     * Recurring price charged to run this reserved cache node.
     * 
     */
    public List<ReservedCacheNodeRecurringCharge> recurringCharges;



    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     * 
     * The following arguments are optional:
     * 
     */
    public String reservedCacheNodesOfferingId;



    /**
     * Time the reservation started.
     * 
     */
    public String startTime;



    /**
     * State of the reserved cache node.
     * 
     */
    public String state;



    /**
     * Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags;



    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



    public ReservedCacheNodeTimeouts timeouts;



    /**
     * Hourly price charged for this reserved cache node.
     * 
     */
    public Double usagePrice;



}
