// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.outputs.ReservedCacheNodeRecurringCharge;
import com.pulumi.policypacks.aws.elasticache.outputs.ReservedCacheNodeTimeouts;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticache/reservedCacheNode:ReservedCacheNode")
public final class ReservedCacheNode extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN for the reserved cache node.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.arn' is not present");
    }

    /**
     * Number of cache node instances to reserve.
     * Default value is `1`.
     * 
     */
    @PolicyResourceProperty(name="cacheNodeCount", flag="unknown_cacheNodeCount")
    private Integer value_cacheNodeCount;
    private boolean unknown_cacheNodeCount;
    public Integer cacheNodeCount() {
        if (!unknown_cacheNodeCount) return value_cacheNodeCount;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.cacheNodeCount' is not present");
    }

    /**
     * Node type for the reserved cache nodes.
     * 
     */
    @PolicyResourceProperty(name="cacheNodeType", flag="unknown_cacheNodeType")
    private String value_cacheNodeType;
    private boolean unknown_cacheNodeType;
    public String cacheNodeType() {
        if (!unknown_cacheNodeType) return value_cacheNodeType;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.cacheNodeType' is not present");
    }

    /**
     * Duration of the reservation as an RFC3339 duration.
     * 
     */
    @PolicyResourceProperty(name="duration", flag="unknown_duration")
    private String value_duration;
    private boolean unknown_duration;
    public String duration() {
        if (!unknown_duration) return value_duration;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.duration' is not present");
    }

    /**
     * Fixed price charged for this reserved cache node.
     * 
     */
    @PolicyResourceProperty(name="fixedPrice", flag="unknown_fixedPrice")
    private Double value_fixedPrice;
    private boolean unknown_fixedPrice;
    public Double fixedPrice() {
        if (!unknown_fixedPrice) return value_fixedPrice;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.fixedPrice' is not present");
    }

    /**
     * Offering type of this reserved cache node.
     * 
     */
    @PolicyResourceProperty(name="offeringType", flag="unknown_offeringType")
    private String value_offeringType;
    private boolean unknown_offeringType;
    public String offeringType() {
        if (!unknown_offeringType) return value_offeringType;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.offeringType' is not present");
    }

    /**
     * Engine type for the reserved cache node.
     * 
     */
    @PolicyResourceProperty(name="productDescription", flag="unknown_productDescription")
    private String value_productDescription;
    private boolean unknown_productDescription;
    public String productDescription() {
        if (!unknown_productDescription) return value_productDescription;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.productDescription' is not present");
    }

    /**
     * Recurring price charged to run this reserved cache node.
     * 
     */
    @PolicyResourceProperty(name="recurringCharges", flag="unknown_recurringCharges")
    private List<ReservedCacheNodeRecurringCharge> value_recurringCharges;
    private boolean unknown_recurringCharges;
    public List<ReservedCacheNodeRecurringCharge> recurringCharges() {
        if (!unknown_recurringCharges) return value_recurringCharges;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.recurringCharges' is not present");
    }

    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="reservedCacheNodesOfferingId", flag="unknown_reservedCacheNodesOfferingId")
    private String value_reservedCacheNodesOfferingId;
    private boolean unknown_reservedCacheNodesOfferingId;
    public String reservedCacheNodesOfferingId() {
        if (!unknown_reservedCacheNodesOfferingId) return value_reservedCacheNodesOfferingId;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.reservedCacheNodesOfferingId' is not present");
    }

    /**
     * Time the reservation started.
     * 
     */
    @PolicyResourceProperty(name="startTime", flag="unknown_startTime")
    private String value_startTime;
    private boolean unknown_startTime;
    public String startTime() {
        if (!unknown_startTime) return value_startTime;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.startTime' is not present");
    }

    /**
     * State of the reserved cache node.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.state' is not present");
    }

    /**
     * Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable ReservedCacheNodeTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable ReservedCacheNodeTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.timeouts' is not present");
    }

    /**
     * Hourly price charged for this reserved cache node.
     * 
     */
    @PolicyResourceProperty(name="usagePrice", flag="unknown_usagePrice")
    private Double value_usagePrice;
    private boolean unknown_usagePrice;
    public Double usagePrice() {
        if (!unknown_usagePrice) return value_usagePrice;
        throw new UndeferrableValueException("Value 'ReservedCacheNode.usagePrice' is not present");
    }

}
