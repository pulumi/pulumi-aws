// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.transfer;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.transfer.inputs.ServerEndpointDetailsArgs;
import com.pulumi.policypacks.aws.transfer.inputs.ServerProtocolDetailsArgs;
import com.pulumi.policypacks.aws.transfer.inputs.ServerS3StorageOptionsArgs;
import com.pulumi.policypacks.aws.transfer.inputs.ServerWorkflowDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:transfer/server:Server")
public final class ServerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. This is required when `protocols` is set to `FTPS`
     * 
     */
    @PolicyResourceProperty(name="certificate", flag="unknown_certificate")
    private String value_certificate;
    private boolean unknown_certificate;
    public String certificate() {
        if (!unknown_certificate) return value_certificate;
        throw new UndeferrableValueException("Value 'ServerArgs.certificate' is not present");
    }

    /**
     * The directory service ID of the directory service you want to connect to with an `identity_provider_type` of `AWS_DIRECTORY_SERVICE`.
     * 
     */
    @PolicyResourceProperty(name="directoryId", flag="unknown_directoryId")
    private String value_directoryId;
    private boolean unknown_directoryId;
    public String directoryId() {
        if (!unknown_directoryId) return value_directoryId;
        throw new UndeferrableValueException("Value 'ServerArgs.directoryId' is not present");
    }

    /**
     * The domain of the storage system that is used for file transfers. Valid values are: `S3` and `EFS`. The default value is `S3`.
     * 
     */
    @PolicyResourceProperty(name="domain", flag="unknown_domain")
    private String value_domain;
    private boolean unknown_domain;
    public String domain() {
        if (!unknown_domain) return value_domain;
        throw new UndeferrableValueException("Value 'ServerArgs.domain' is not present");
    }

    /**
     * The virtual private cloud (VPC) endpoint settings that you want to configure for your SFTP server. See `endpoint_details` Block below for details.
     * 
     */
    @PolicyResourceProperty(name="endpointDetails", flag="unknown_endpointDetails")
    private ServerEndpointDetailsArgs value_endpointDetails;
    private boolean unknown_endpointDetails;
    public ServerEndpointDetailsArgs endpointDetails() {
        if (!unknown_endpointDetails) return value_endpointDetails;
        throw new UndeferrableValueException("Value 'ServerArgs.endpointDetails' is not present");
    }

    /**
     * The type of endpoint that you want your SFTP server connect to. If you connect to a `VPC` (or `VPC_ENDPOINT`), your SFTP server isn&#39;t accessible over the public internet. If you want to connect your SFTP server via public internet, set `PUBLIC`.  Defaults to `PUBLIC`.
     * 
     */
    @PolicyResourceProperty(name="endpointType", flag="unknown_endpointType")
    private String value_endpointType;
    private boolean unknown_endpointType;
    public String endpointType() {
        if (!unknown_endpointType) return value_endpointType;
        throw new UndeferrableValueException("Value 'ServerArgs.endpointType' is not present");
    }

    /**
     * A boolean that indicates all users associated with the server should be deleted so that the Server can be destroyed without error. The default value is `false`. This option only applies to servers configured with a `SERVICE_MANAGED` `identity_provider_type`.
     * 
     */
    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'ServerArgs.forceDestroy' is not present");
    }

    /**
     * The ARN for a lambda function to use for the Identity provider.
     * 
     */
    @PolicyResourceProperty(name="function", flag="unknown_function")
    private String value_function;
    private boolean unknown_function;
    public String function() {
        if (!unknown_function) return value_function;
        throw new UndeferrableValueException("Value 'ServerArgs.function' is not present");
    }

    /**
     * RSA, ECDSA, or ED25519 private key (e.g., as generated by the `ssh-keygen -t rsa -b 2048 -N &#34;&#34; -m PEM -f my-new-server-key`, `ssh-keygen -t ecdsa -b 256 -N &#34;&#34; -m PEM -f my-new-server-key` or `ssh-keygen -t ed25519 -N &#34;&#34; -f my-new-server-key` commands).
     * 
     */
    @PolicyResourceProperty(name="hostKey", flag="unknown_hostKey")
    private String value_hostKey;
    private boolean unknown_hostKey;
    public String hostKey() {
        if (!unknown_hostKey) return value_hostKey;
        throw new UndeferrableValueException("Value 'ServerArgs.hostKey' is not present");
    }

    /**
     * The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice. Using `AWS_DIRECTORY_SERVICE` will allow for authentication against AWS Managed Active Directory or Microsoft Active Directory in your on-premises environment, or in AWS using AD Connectors. Use the `AWS_LAMBDA` value to directly use a Lambda function as your identity provider. If you choose this value, you must specify the ARN for the lambda function in the `function` argument.
     * 
     */
    @PolicyResourceProperty(name="identityProviderType", flag="unknown_identityProviderType")
    private String value_identityProviderType;
    private boolean unknown_identityProviderType;
    public String identityProviderType() {
        if (!unknown_identityProviderType) return value_identityProviderType;
        throw new UndeferrableValueException("Value 'ServerArgs.identityProviderType' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the IAM role used to authenticate the user account with an `identity_provider_type` of `API_GATEWAY`.
     * 
     */
    @PolicyResourceProperty(name="invocationRole", flag="unknown_invocationRole")
    private String value_invocationRole;
    private boolean unknown_invocationRole;
    public String invocationRole() {
        if (!unknown_invocationRole) return value_invocationRole;
        throw new UndeferrableValueException("Value 'ServerArgs.invocationRole' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of an IAM role that allows the service to write your SFTP usersâ€™ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
     * 
     */
    @PolicyResourceProperty(name="loggingRole", flag="unknown_loggingRole")
    private String value_loggingRole;
    private boolean unknown_loggingRole;
    public String loggingRole() {
        if (!unknown_loggingRole) return value_loggingRole;
        throw new UndeferrableValueException("Value 'ServerArgs.loggingRole' is not present");
    }

    /**
     * Specify a string to display when users connect to a server. This string is displayed after the user authenticates. The SFTP protocol does not support post-authentication display banners.
     * 
     */
    @PolicyResourceProperty(name="postAuthenticationLoginBanner", flag="unknown_postAuthenticationLoginBanner")
    private String value_postAuthenticationLoginBanner;
    private boolean unknown_postAuthenticationLoginBanner;
    public String postAuthenticationLoginBanner() {
        if (!unknown_postAuthenticationLoginBanner) return value_postAuthenticationLoginBanner;
        throw new UndeferrableValueException("Value 'ServerArgs.postAuthenticationLoginBanner' is not present");
    }

    /**
     * Specify a string to display when users connect to a server. This string is displayed before the user authenticates.
     * 
     */
    @PolicyResourceProperty(name="preAuthenticationLoginBanner", flag="unknown_preAuthenticationLoginBanner")
    private String value_preAuthenticationLoginBanner;
    private boolean unknown_preAuthenticationLoginBanner;
    public String preAuthenticationLoginBanner() {
        if (!unknown_preAuthenticationLoginBanner) return value_preAuthenticationLoginBanner;
        throw new UndeferrableValueException("Value 'ServerArgs.preAuthenticationLoginBanner' is not present");
    }

    /**
     * The protocol settings that are configured for your server. See `protocol_details` Block below for details.
     * 
     */
    @PolicyResourceProperty(name="protocolDetails", flag="unknown_protocolDetails")
    private ServerProtocolDetailsArgs value_protocolDetails;
    private boolean unknown_protocolDetails;
    public ServerProtocolDetailsArgs protocolDetails() {
        if (!unknown_protocolDetails) return value_protocolDetails;
        throw new UndeferrableValueException("Value 'ServerArgs.protocolDetails' is not present");
    }

    /**
     * Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server&#39;s endpoint. This defaults to `SFTP` . The available protocols are:
     * * `AS2`: File transfer over Applicability Statement 2
     * * `SFTP`: File transfer over SSH
     * * `FTPS`: File transfer with TLS encryption
     * * `FTP`: Unencrypted file transfer
     * 
     */
    @PolicyResourceProperty(name="protocols", flag="unknown_protocols")
    private List<String> value_protocols;
    private boolean unknown_protocols;
    public List<String> protocols() {
        if (!unknown_protocols) return value_protocols;
        throw new UndeferrableValueException("Value 'ServerArgs.protocols' is not present");
    }

    /**
     * Specifies whether or not performance for your Amazon S3 directories is optimized. This is disabled by default. See `s3_storage_options` Block below for details.
     * 
     */
    @PolicyResourceProperty(name="s3StorageOptions", flag="unknown_s3StorageOptions")
    private ServerS3StorageOptionsArgs value_s3StorageOptions;
    private boolean unknown_s3StorageOptions;
    public ServerS3StorageOptionsArgs s3StorageOptions() {
        if (!unknown_s3StorageOptions) return value_s3StorageOptions;
        throw new UndeferrableValueException("Value 'ServerArgs.s3StorageOptions' is not present");
    }

    /**
     * Specifies the name of the security policy that is attached to the server. Default value is: `TransferSecurityPolicy-2018-11`. The available values are:
     * * `TransferSecurityPolicy-2018-11`
     * * `TransferSecurityPolicy-2020-06`
     * * `TransferSecurityPolicy-2022-03`
     * * `TransferSecurityPolicy-2023-05`
     * * `TransferSecurityPolicy-2024-01`
     * * `TransferSecurityPolicy-FIPS-2020-06`
     * * `TransferSecurityPolicy-FIPS-2023-05`
     * * `TransferSecurityPolicy-FIPS-2024-01`
     * * `TransferSecurityPolicy-FIPS-2024-05`
     * * `TransferSecurityPolicy-PQ-SSH-Experimental-2023-04`
     * * `TransferSecurityPolicy-PQ-SSH-FIPS-Experimental-2023-04`
     * * `TransferSecurityPolicy-Restricted-2018-11`
     * * `TransferSecurityPolicy-Restricted-2020-06`
     * * `TransferSecurityPolicy-Restricted-2024-06`
     * 
     * See [Security policies for AWS Transfer Family servers](https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html) for details.
     * 
     */
    @PolicyResourceProperty(name="securityPolicyName", flag="unknown_securityPolicyName")
    private String value_securityPolicyName;
    private boolean unknown_securityPolicyName;
    public String securityPolicyName() {
        if (!unknown_securityPolicyName) return value_securityPolicyName;
        throw new UndeferrableValueException("Value 'ServerArgs.securityPolicyName' is not present");
    }

    /**
     * For SFTP-enabled servers, and for custom identity providers only. Valid values are `PASSWORD`, `PUBLIC_KEY`, `PUBLIC_KEY_OR_PASSWORD` and `PUBLIC_KEY_AND_PASSWORD`. Default value is: `PUBLIC_KEY_OR_PASSWORD`.
     * 
     */
    @PolicyResourceProperty(name="sftpAuthenticationMethods", flag="unknown_sftpAuthenticationMethods")
    private String value_sftpAuthenticationMethods;
    private boolean unknown_sftpAuthenticationMethods;
    public String sftpAuthenticationMethods() {
        if (!unknown_sftpAuthenticationMethods) return value_sftpAuthenticationMethods;
        throw new UndeferrableValueException("Value 'ServerArgs.sftpAuthenticationMethods' is not present");
    }

    /**
     * A set of ARNs of destinations that will receive structured logs from the transfer server such as CloudWatch Log Group ARNs. If provided this enables the transfer server to emit structured logs to the specified locations.
     * 
     */
    @PolicyResourceProperty(name="structuredLogDestinations", flag="unknown_structuredLogDestinations")
    private List<String> value_structuredLogDestinations;
    private boolean unknown_structuredLogDestinations;
    public List<String> structuredLogDestinations() {
        if (!unknown_structuredLogDestinations) return value_structuredLogDestinations;
        throw new UndeferrableValueException("Value 'ServerArgs.structuredLogDestinations' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ServerArgs.tags' is not present");
    }

    /**
     * URL of the service endpoint used to authenticate users with an `identity_provider_type` of `API_GATEWAY`.
     * 
     */
    @PolicyResourceProperty(name="url", flag="unknown_url")
    private String value_url;
    private boolean unknown_url;
    public String url() {
        if (!unknown_url) return value_url;
        throw new UndeferrableValueException("Value 'ServerArgs.url' is not present");
    }

    /**
     * Specifies the workflow details. See `workflow_details` Block below for details.
     * 
     */
    @PolicyResourceProperty(name="workflowDetails", flag="unknown_workflowDetails")
    private ServerWorkflowDetailsArgs value_workflowDetails;
    private boolean unknown_workflowDetails;
    public ServerWorkflowDetailsArgs workflowDetails() {
        if (!unknown_workflowDetails) return value_workflowDetails;
        throw new UndeferrableValueException("Value 'ServerArgs.workflowDetails' is not present");
    }

}
