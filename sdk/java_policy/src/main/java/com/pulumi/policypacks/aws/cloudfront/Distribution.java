// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudfront;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionCustomErrorResponse;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionDefaultCacheBehavior;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionLoggingConfig;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionOrderedCacheBehavior;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionOrigin;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionOriginGroup;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionRestrictions;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionTrustedKeyGroup;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionTrustedSigner;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionViewerCertificate;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudfront/distribution:Distribution")
public final class Distribution extends com.pulumi.resources.PolicyResourceOutput {

    private @Nullable UndeferrableValue<List<String>> aliases;

    public @Nullable List<String> aliases() {
        if (aliases == null) return null;
        return aliases.getValue("Distribution.aliases");
    }

    /**
     * ARN for the distribution. For example: `arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5`, where `123456789012` is your AWS account ID.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Distribution.arn");
    }

    /**
     * Internal value used by CloudFront to allow future updates to the distribution configuration.
     * 
     */
    private UndeferrableValue<String> callerReference;

    public String callerReference() {
        if (callerReference == null) return null;
        return callerReference.getValue("Distribution.callerReference");
    }

    private @Nullable UndeferrableValue<String> comment;

    public @Nullable String comment() {
        if (comment == null) return null;
        return comment.getValue("Distribution.comment");
    }

    private UndeferrableValue<String> continuousDeploymentPolicyId;

    public String continuousDeploymentPolicyId() {
        if (continuousDeploymentPolicyId == null) return null;
        return continuousDeploymentPolicyId.getValue("Distribution.continuousDeploymentPolicyId");
    }

    private @Nullable UndeferrableValue<List<DistributionCustomErrorResponse>> customErrorResponses;

    public @Nullable List<DistributionCustomErrorResponse> customErrorResponses() {
        if (customErrorResponses == null) return null;
        return customErrorResponses.getValue("Distribution.customErrorResponses");
    }

    private UndeferrableValue<DistributionDefaultCacheBehavior> defaultCacheBehavior;

    public DistributionDefaultCacheBehavior defaultCacheBehavior() {
        if (defaultCacheBehavior == null) return null;
        return defaultCacheBehavior.getValue("Distribution.defaultCacheBehavior");
    }

    private @Nullable UndeferrableValue<String> defaultRootObject;

    public @Nullable String defaultRootObject() {
        if (defaultRootObject == null) return null;
        return defaultRootObject.getValue("Distribution.defaultRootObject");
    }

    /**
     * Domain name corresponding to the distribution. For example: `d604721fxaaqy9.cloudfront.net`.
     * 
     */
    private UndeferrableValue<String> domainName;

    public String domainName() {
        if (domainName == null) return null;
        return domainName.getValue("Distribution.domainName");
    }

    /**
     * `true` if any of the AWS accounts listed as trusted signers have active CloudFront key pairs
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("Distribution.enabled");
    }

    /**
     * Current version of the distribution&#39;s information. For example: `E2QWRUHAPOMQZL`.
     * 
     */
    private UndeferrableValue<String> etag;

    public String etag() {
        if (etag == null) return null;
        return etag.getValue("Distribution.etag");
    }

    /**
     * CloudFront Route 53 zone ID that can be used to route an [Alias Resource Record Set](http://docs.aws.amazon.com/Route53/latest/APIReference/CreateAliasRRSAPI.html) to. This attribute is simply an alias for the zone ID `Z2FDTNDATAQYW2`.
     * 
     */
    private UndeferrableValue<String> hostedZoneId;

    public String hostedZoneId() {
        if (hostedZoneId == null) return null;
        return hostedZoneId.getValue("Distribution.hostedZoneId");
    }

    private @Nullable UndeferrableValue<String> httpVersion;

    public @Nullable String httpVersion() {
        if (httpVersion == null) return null;
        return httpVersion.getValue("Distribution.httpVersion");
    }

    /**
     * Number of invalidation batches currently in progress.
     * 
     */
    private UndeferrableValue<Integer> inProgressValidationBatches;

    public Integer inProgressValidationBatches() {
        if (inProgressValidationBatches == null) return null;
        return inProgressValidationBatches.getValue("Distribution.inProgressValidationBatches");
    }

    private @Nullable UndeferrableValue<Boolean> isIpv6Enabled;

    public @Nullable Boolean isIpv6Enabled() {
        if (isIpv6Enabled == null) return null;
        return isIpv6Enabled.getValue("Distribution.isIpv6Enabled");
    }

    /**
     * Date and time the distribution was last modified.
     * 
     */
    private UndeferrableValue<String> lastModifiedTime;

    public String lastModifiedTime() {
        if (lastModifiedTime == null) return null;
        return lastModifiedTime.getValue("Distribution.lastModifiedTime");
    }

    private @Nullable UndeferrableValue<DistributionLoggingConfig> loggingConfig;

    public @Nullable DistributionLoggingConfig loggingConfig() {
        if (loggingConfig == null) return null;
        return loggingConfig.getValue("Distribution.loggingConfig");
    }

    private @Nullable UndeferrableValue<List<DistributionOrderedCacheBehavior>> orderedCacheBehaviors;

    public @Nullable List<DistributionOrderedCacheBehavior> orderedCacheBehaviors() {
        if (orderedCacheBehaviors == null) return null;
        return orderedCacheBehaviors.getValue("Distribution.orderedCacheBehaviors");
    }

    private @Nullable UndeferrableValue<List<DistributionOriginGroup>> originGroups;

    public @Nullable List<DistributionOriginGroup> originGroups() {
        if (originGroups == null) return null;
        return originGroups.getValue("Distribution.originGroups");
    }

    private UndeferrableValue<List<DistributionOrigin>> origins;

    public List<DistributionOrigin> origins() {
        if (origins == null) return null;
        return origins.getValue("Distribution.origins");
    }

    private @Nullable UndeferrableValue<String> priceClass;

    public @Nullable String priceClass() {
        if (priceClass == null) return null;
        return priceClass.getValue("Distribution.priceClass");
    }

    private UndeferrableValue<DistributionRestrictions> restrictions;

    public DistributionRestrictions restrictions() {
        if (restrictions == null) return null;
        return restrictions.getValue("Distribution.restrictions");
    }

    private @Nullable UndeferrableValue<Boolean> retainOnDelete;

    public @Nullable Boolean retainOnDelete() {
        if (retainOnDelete == null) return null;
        return retainOnDelete.getValue("Distribution.retainOnDelete");
    }

    private @Nullable UndeferrableValue<Boolean> staging;

    public @Nullable Boolean staging() {
        if (staging == null) return null;
        return staging.getValue("Distribution.staging");
    }

    /**
     * Current status of the distribution. `Deployed` if the distribution&#39;s information is fully propagated throughout the Amazon CloudFront system.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("Distribution.status");
    }

    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Distribution.tags");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Distribution.tagsAll");
    }

    /**
     * List of nested attributes for active trusted key groups, if the distribution is set up to serve private content with signed URLs.
     * 
     */
    private UndeferrableValue<List<DistributionTrustedKeyGroup>> trustedKeyGroups;

    public List<DistributionTrustedKeyGroup> trustedKeyGroups() {
        if (trustedKeyGroups == null) return null;
        return trustedKeyGroups.getValue("Distribution.trustedKeyGroups");
    }

    /**
     * List of nested attributes for active trusted signers, if the distribution is set up to serve private content with signed URLs.
     * 
     */
    private UndeferrableValue<List<DistributionTrustedSigner>> trustedSigners;

    public List<DistributionTrustedSigner> trustedSigners() {
        if (trustedSigners == null) return null;
        return trustedSigners.getValue("Distribution.trustedSigners");
    }

    private UndeferrableValue<DistributionViewerCertificate> viewerCertificate;

    public DistributionViewerCertificate viewerCertificate() {
        if (viewerCertificate == null) return null;
        return viewerCertificate.getValue("Distribution.viewerCertificate");
    }

    private @Nullable UndeferrableValue<Boolean> waitForDeployment;

    public @Nullable Boolean waitForDeployment() {
        if (waitForDeployment == null) return null;
        return waitForDeployment.getValue("Distribution.waitForDeployment");
    }

    private @Nullable UndeferrableValue<String> webAclId;

    public @Nullable String webAclId() {
        if (webAclId == null) return null;
        return webAclId.getValue("Distribution.webAclId");
    }

}
