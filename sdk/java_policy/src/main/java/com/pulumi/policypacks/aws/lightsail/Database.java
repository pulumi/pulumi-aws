// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;


@PolicyResourceType(type="aws:lightsail/database:Database")
public final class Database extends com.pulumi.resources.PolicyResource {

    /**
     * When true , applies changes immediately. When false , applies changes during the preferred maintenance window. Some changes may cause an outage.
     * 
     */
    public Boolean applyImmediately;



    /**
     * The ARN of the Lightsail instance (matches `id`).
     * 
     */
    public String arn;



    /**
     * The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format.
     * 
     */
    public String availabilityZone;



    /**
     * When true, enables automated backup retention for your database. When false, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database.
     * 
     */
    public Boolean backupRetentionEnabled;



    /**
     * The blueprint ID for your new database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the AWS CLI command: `aws lightsail get-relational-database-blueprints`
     * 
     */
    public String blueprintId;



    /**
     * The bundle ID for your new database. A bundle describes the performance specifications for your database (see list below). You can get a list of database bundle IDs by using the AWS CLI command: `aws lightsail get-relational-database-bundles`.
     * 
     */
    public String bundleId;



    /**
     * The certificate associated with the database.
     * 
     */
    public String caCertificateIdentifier;



    /**
     * The number of vCPUs for the database.
     * 
     */
    public Integer cpuCount;



    /**
     * The timestamp when the instance was created.
     * 
     */
    public String createdAt;



    /**
     * The size of the disk for the database.
     * 
     */
    public Double diskSize;



    /**
     * The database software (for example, MySQL).
     * 
     */
    public String engine;



    /**
     * The database engine version (for example, 5.7.23).
     * 
     */
    public String engineVersion;



    /**
     * The name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter.
     * 
     */
    public String finalSnapshotName;



    /**
     * The name of the master database created when the Lightsail database resource is created.
     * 
     */
    public String masterDatabaseName;



    /**
     * The master endpoint fqdn for the database.
     * 
     */
    public String masterEndpointAddress;



    /**
     * The master endpoint network port for the database.
     * 
     */
    public Integer masterEndpointPort;



    /**
     * The password for the master user of your new database. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;{@literal @}&#34;.
     * 
     */
    public String masterPassword;



    /**
     * The master user name for your new database.
     * 
     */
    public String masterUsername;



    /**
     * The daily time range during which automated backups are created for your new database if automated backups are enabled. Must be in the hh24:mi-hh24:mi format. Example: `16:00-16:30`. Specified in Coordinated Universal Time (UTC).
     * 
     */
    public String preferredBackupWindow;



    /**
     * The weekly time range during which system maintenance can occur on your new database. Must be in the ddd:hh24:mi-ddd:hh24:mi format. Specified in Coordinated Universal Time (UTC). Example: `Tue:17:00-Tue:17:30`
     * 
     */
    public String preferredMaintenanceWindow;



    /**
     * Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    public Boolean publiclyAccessible;



    /**
     * The amount of RAM in GB for the database.
     * 
     */
    public Double ramSize;



    /**
     * The name to use for your new Lightsail database resource. Names be unique within each AWS Region in your Lightsail account.
     * 
     */
    public String relationalDatabaseName;



    /**
     * Describes the secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
     * 
     */
    public String secondaryAvailabilityZone;



    /**
     * Determines whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false.
     * 
     */
    public Boolean skipFinalSnapshot;



    /**
     * The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
     * 
     */
    public String supportCode;



    /**
     * A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value.
     * 
     */
    public Map<String,String> tags;



    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



}
