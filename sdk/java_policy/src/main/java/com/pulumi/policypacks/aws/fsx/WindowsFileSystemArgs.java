// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.fsx.inputs.WindowsFileSystemAuditLogConfigurationArgs;
import com.pulumi.policypacks.aws.fsx.inputs.WindowsFileSystemDiskIopsConfigurationArgs;
import com.pulumi.policypacks.aws.fsx.inputs.WindowsFileSystemSelfManagedActiveDirectoryArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:fsx/windowsFileSystem:WindowsFileSystem")
public final class WindowsFileSystemArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The ID for an existing Microsoft Active Directory instance that the file system should join when it&#39;s created. Cannot be specified with `self_managed_active_directory`.
     * 
     */
    private UndeferrableValue<String> activeDirectoryId;

    public String activeDirectoryId() {
        if (activeDirectoryId == null) return null;
        return activeDirectoryId.getValue("WindowsFileSystemArgs.activeDirectoryId");
    }

    /**
     * An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
     * 
     */
    private UndeferrableValue<List<String>> aliases;

    public List<String> aliases() {
        if (aliases == null) return null;
        return aliases.getValue("WindowsFileSystemArgs.aliases");
    }

    /**
     * The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See `audit_log_configuration` Block for details.
     * 
     */
    private UndeferrableValue<WindowsFileSystemAuditLogConfigurationArgs> auditLogConfiguration;

    public WindowsFileSystemAuditLogConfigurationArgs auditLogConfiguration() {
        if (auditLogConfiguration == null) return null;
        return auditLogConfiguration.getValue("WindowsFileSystemArgs.auditLogConfiguration");
    }

    /**
     * The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
     * 
     */
    private UndeferrableValue<Integer> automaticBackupRetentionDays;

    public Integer automaticBackupRetentionDays() {
        if (automaticBackupRetentionDays == null) return null;
        return automaticBackupRetentionDays.getValue("WindowsFileSystemArgs.automaticBackupRetentionDays");
    }

    /**
     * The ID of the source backup to create the filesystem from.
     * 
     */
    private UndeferrableValue<String> backupId;

    public String backupId() {
        if (backupId == null) return null;
        return backupId.getValue("WindowsFileSystemArgs.backupId");
    }

    /**
     * A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> copyTagsToBackups;

    public Boolean copyTagsToBackups() {
        if (copyTagsToBackups == null) return null;
        return copyTagsToBackups.getValue("WindowsFileSystemArgs.copyTagsToBackups");
    }

    /**
     * The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
     * 
     */
    private UndeferrableValue<String> dailyAutomaticBackupStartTime;

    public String dailyAutomaticBackupStartTime() {
        if (dailyAutomaticBackupStartTime == null) return null;
        return dailyAutomaticBackupStartTime.getValue("WindowsFileSystemArgs.dailyAutomaticBackupStartTime");
    }

    /**
     * Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
     * 
     */
    private UndeferrableValue<String> deploymentType;

    public String deploymentType() {
        if (deploymentType == null) return null;
        return deploymentType.getValue("WindowsFileSystemArgs.deploymentType");
    }

    /**
     * The SSD IOPS configuration for the Amazon FSx for Windows File Server file system. See `disk_iops_configuration` Block for details.
     * 
     */
    private UndeferrableValue<WindowsFileSystemDiskIopsConfigurationArgs> diskIopsConfiguration;

    public WindowsFileSystemDiskIopsConfigurationArgs diskIopsConfiguration() {
        if (diskIopsConfiguration == null) return null;
        return diskIopsConfiguration.getValue("WindowsFileSystemArgs.diskIopsConfiguration");
    }

    /**
     * A map of tags to apply to the file system&#39;s final backup.
     * 
     */
    private UndeferrableValue<Map<String,String>> finalBackupTags;

    public Map<String,String> finalBackupTags() {
        if (finalBackupTags == null) return null;
        return finalBackupTags.getValue("WindowsFileSystemArgs.finalBackupTags");
    }

    /**
     * ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("WindowsFileSystemArgs.kmsKeyId");
    }

    /**
     * Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
     * 
     */
    private UndeferrableValue<String> preferredSubnetId;

    public String preferredSubnetId() {
        if (preferredSubnetId == null) return null;
        return preferredSubnetId.getValue("WindowsFileSystemArgs.preferredSubnetId");
    }

    /**
     * A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("WindowsFileSystemArgs.securityGroupIds");
    }

    /**
     * Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `active_directory_id`. See `self_managed_active_directory` Block for details.
     * 
     */
    private UndeferrableValue<WindowsFileSystemSelfManagedActiveDirectoryArgs> selfManagedActiveDirectory;

    public WindowsFileSystemSelfManagedActiveDirectoryArgs selfManagedActiveDirectory() {
        if (selfManagedActiveDirectory == null) return null;
        return selfManagedActiveDirectory.getValue("WindowsFileSystemArgs.selfManagedActiveDirectory");
    }

    /**
     * When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> skipFinalBackup;

    public Boolean skipFinalBackup() {
        if (skipFinalBackup == null) return null;
        return skipFinalBackup.getValue("WindowsFileSystemArgs.skipFinalBackup");
    }

    /**
     * Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
     * 
     */
    private UndeferrableValue<Integer> storageCapacity;

    public Integer storageCapacity() {
        if (storageCapacity == null) return null;
        return storageCapacity.getValue("WindowsFileSystemArgs.storageCapacity");
    }

    /**
     * Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
     * 
     */
    private UndeferrableValue<String> storageType;

    public String storageType() {
        if (storageType == null) return null;
        return storageType.getValue("WindowsFileSystemArgs.storageType");
    }

    /**
     * A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deployment_type` to `MULTI_AZ_1`.
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("WindowsFileSystemArgs.subnetIds");
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("WindowsFileSystemArgs.tags");
    }

    /**
     * Throughput (megabytes per second) of the file system. For valid values, refer to the [AWS documentation](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/performance.html).
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<Integer> throughputCapacity;

    public Integer throughputCapacity() {
        if (throughputCapacity == null) return null;
        return throughputCapacity.getValue("WindowsFileSystemArgs.throughputCapacity");
    }

    /**
     * The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    private UndeferrableValue<String> weeklyMaintenanceStartTime;

    public String weeklyMaintenanceStartTime() {
        if (weeklyMaintenanceStartTime == null) return null;
        return weeklyMaintenanceStartTime.getValue("WindowsFileSystemArgs.weeklyMaintenanceStartTime");
    }

}
