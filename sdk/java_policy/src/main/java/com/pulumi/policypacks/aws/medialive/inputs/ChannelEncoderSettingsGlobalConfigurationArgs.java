// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsGlobalConfigurationArgs {

    /**
     * Value to set the initial audio gain for the Live Event.
     * 
     */
    private UndeferrableValue<Integer> initialAudioGain;

    public Integer initialAudioGain() {
        if (initialAudioGain == null) return null;
        return initialAudioGain.getValue("ChannelEncoderSettingsGlobalConfigurationArgs.initialAudioGain");
    }

    /**
     * Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
     * 
     */
    private UndeferrableValue<String> inputEndAction;

    public String inputEndAction() {
        if (inputEndAction == null) return null;
        return inputEndAction.getValue("ChannelEncoderSettingsGlobalConfigurationArgs.inputEndAction");
    }

    /**
     * Settings for system actions when input is lost. See Input Loss Behavior for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs> inputLossBehavior;

    public ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs inputLossBehavior() {
        if (inputLossBehavior == null) return null;
        return inputLossBehavior.getValue("ChannelEncoderSettingsGlobalConfigurationArgs.inputLossBehavior");
    }

    /**
     * Indicates how MediaLive pipelines are synchronized. PIPELINE\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
     * 
     */
    private UndeferrableValue<String> outputLockingMode;

    public String outputLockingMode() {
        if (outputLockingMode == null) return null;
        return outputLockingMode.getValue("ChannelEncoderSettingsGlobalConfigurationArgs.outputLockingMode");
    }

    /**
     * Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
     * 
     */
    private UndeferrableValue<String> outputTimingSource;

    public String outputTimingSource() {
        if (outputTimingSource == null) return null;
        return outputTimingSource.getValue("ChannelEncoderSettingsGlobalConfigurationArgs.outputTimingSource");
    }

    /**
     * Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
     * 
     */
    private UndeferrableValue<String> supportLowFramerateInputs;

    public String supportLowFramerateInputs() {
        if (supportLowFramerateInputs == null) return null;
        return supportLowFramerateInputs.getValue("ChannelEncoderSettingsGlobalConfigurationArgs.supportLowFramerateInputs");
    }

}
