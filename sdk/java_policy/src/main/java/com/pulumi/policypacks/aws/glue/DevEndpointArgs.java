// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:glue/devEndpoint:DevEndpoint")
public final class DevEndpointArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A map of arguments used to configure the endpoint.
     * 
     */
    private UndeferrableValue<Map<String,String>> arguments;

    public Map<String,String> arguments() {
        if (arguments == null) return null;
        return arguments.getValue("DevEndpointArgs.arguments");
    }

    /**
     * Path to one or more Java Jars in an S3 bucket that should be loaded in this endpoint.
     * 
     */
    private UndeferrableValue<String> extraJarsS3Path;

    public String extraJarsS3Path() {
        if (extraJarsS3Path == null) return null;
        return extraJarsS3Path.getValue("DevEndpointArgs.extraJarsS3Path");
    }

    /**
     * Path(s) to one or more Python libraries in an S3 bucket that should be loaded in this endpoint. Multiple values must be complete paths separated by a comma.
     * 
     */
    private UndeferrableValue<String> extraPythonLibsS3Path;

    public String extraPythonLibsS3Path() {
        if (extraPythonLibsS3Path == null) return null;
        return extraPythonLibsS3Path.getValue("DevEndpointArgs.extraPythonLibsS3Path");
    }

    /**
     * Specifies the versions of Python and Apache Spark to use. Defaults to AWS Glue version 0.9.
     * 
     */
    private UndeferrableValue<String> glueVersion;

    public String glueVersion() {
        if (glueVersion == null) return null;
        return glueVersion.getValue("DevEndpointArgs.glueVersion");
    }

    /**
     * The name of this endpoint. It must be unique in your account.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("DevEndpointArgs.name");
    }

    /**
     * The number of AWS Glue Data Processing Units (DPUs) to allocate to this endpoint. Conflicts with `worker_type`.
     * 
     */
    private UndeferrableValue<Integer> numberOfNodes;

    public Integer numberOfNodes() {
        if (numberOfNodes == null) return null;
        return numberOfNodes.getValue("DevEndpointArgs.numberOfNodes");
    }

    /**
     * The number of workers of a defined worker type that are allocated to this endpoint. This field is available only when you choose worker type G.1X or G.2X.
     * 
     */
    private UndeferrableValue<Integer> numberOfWorkers;

    public Integer numberOfWorkers() {
        if (numberOfWorkers == null) return null;
        return numberOfWorkers.getValue("DevEndpointArgs.numberOfWorkers");
    }

    /**
     * The public key to be used by this endpoint for authentication.
     * 
     */
    private UndeferrableValue<String> publicKey;

    public String publicKey() {
        if (publicKey == null) return null;
        return publicKey.getValue("DevEndpointArgs.publicKey");
    }

    /**
     * A list of public keys to be used by this endpoint for authentication.
     * 
     */
    private UndeferrableValue<List<String>> publicKeys;

    public List<String> publicKeys() {
        if (publicKeys == null) return null;
        return publicKeys.getValue("DevEndpointArgs.publicKeys");
    }

    /**
     * The IAM role for this endpoint.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("DevEndpointArgs.roleArn");
    }

    /**
     * The name of the Security Configuration structure to be used with this endpoint.
     * 
     */
    private UndeferrableValue<String> securityConfiguration;

    public String securityConfiguration() {
        if (securityConfiguration == null) return null;
        return securityConfiguration.getValue("DevEndpointArgs.securityConfiguration");
    }

    /**
     * Security group IDs for the security groups to be used by this endpoint.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("DevEndpointArgs.securityGroupIds");
    }

    /**
     * The subnet ID for the new endpoint to use.
     * 
     */
    private UndeferrableValue<String> subnetId;

    public String subnetId() {
        if (subnetId == null) return null;
        return subnetId.getValue("DevEndpointArgs.subnetId");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DevEndpointArgs.tags");
    }

    /**
     * The type of predefined worker that is allocated to this endpoint. Accepts a value of Standard, G.1X, or G.2X.
     * 
     */
    private UndeferrableValue<String> workerType;

    public String workerType() {
        if (workerType == null) return null;
        return workerType.getValue("DevEndpointArgs.workerType");
    }

}
