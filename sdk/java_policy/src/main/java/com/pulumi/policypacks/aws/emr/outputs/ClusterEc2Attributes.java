// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.emr.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class ClusterEc2Attributes {

    /**
     * String containing a comma separated list of additional Amazon EC2 security group IDs for the master node.
     * 
     */
    private @Nullable UndeferrableValue<String> additionalMasterSecurityGroups;

    public @Nullable String additionalMasterSecurityGroups() {
        if (additionalMasterSecurityGroups == null) return null;
        return additionalMasterSecurityGroups.getValue("ClusterEc2Attributes.additionalMasterSecurityGroups");
    }

    /**
     * String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string.
     * 
     */
    private @Nullable UndeferrableValue<String> additionalSlaveSecurityGroups;

    public @Nullable String additionalSlaveSecurityGroups() {
        if (additionalSlaveSecurityGroups == null) return null;
        return additionalSlaveSecurityGroups.getValue("ClusterEc2Attributes.additionalSlaveSecurityGroups");
    }

    /**
     * Identifier of the Amazon EC2 EMR-Managed security group for the master node.
     * 
     */
    private @Nullable UndeferrableValue<String> emrManagedMasterSecurityGroup;

    public @Nullable String emrManagedMasterSecurityGroup() {
        if (emrManagedMasterSecurityGroup == null) return null;
        return emrManagedMasterSecurityGroup.getValue("ClusterEc2Attributes.emrManagedMasterSecurityGroup");
    }

    /**
     * Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes.
     * 
     */
    private @Nullable UndeferrableValue<String> emrManagedSlaveSecurityGroup;

    public @Nullable String emrManagedSlaveSecurityGroup() {
        if (emrManagedSlaveSecurityGroup == null) return null;
        return emrManagedSlaveSecurityGroup.getValue("ClusterEc2Attributes.emrManagedSlaveSecurityGroup");
    }

    /**
     * Instance Profile for EC2 instances of the cluster assume this role.
     * 
     */
    private UndeferrableValue<String> instanceProfile;

    public String instanceProfile() {
        if (instanceProfile == null) return null;
        return instanceProfile.getValue("ClusterEc2Attributes.instanceProfile");
    }

    /**
     * Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`.
     * 
     */
    private @Nullable UndeferrableValue<String> keyName;

    public @Nullable String keyName() {
        if (keyName == null) return null;
        return keyName.getValue("ClusterEc2Attributes.keyName");
    }

    /**
     * Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet.
     * 
     */
    private @Nullable UndeferrableValue<String> serviceAccessSecurityGroup;

    public @Nullable String serviceAccessSecurityGroup() {
        if (serviceAccessSecurityGroup == null) return null;
        return serviceAccessSecurityGroup.getValue("ClusterEc2Attributes.serviceAccessSecurityGroup");
    }

    /**
     * VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in an Amazon VPC.
     * 
     */
    private @Nullable UndeferrableValue<String> subnetId;

    public @Nullable String subnetId() {
        if (subnetId == null) return null;
        return subnetId.getValue("ClusterEc2Attributes.subnetId");
    }

    /**
     * List of VPC subnet id-s where you want the job flow to launch.  Amazon EMR identifies the best Availability Zone to launch instances according to your fleet specifications.
     * 
     * &gt; **NOTE on EMR-Managed security groups:** These security groups will have any missing inbound or outbound access rules added and maintained by AWS, to ensure proper communication between instances in a cluster. The EMR service will maintain these rules for groups provided in `emr_managed_master_security_group` and `emr_managed_slave_security_group`; attempts to remove the required rules may succeed, only for the EMR service to re-add them in a matter of minutes. This may cause this provider to fail to destroy an environment that contains an EMR cluster, because the EMR service does not revoke rules added on deletion, leaving a cyclic dependency between the security groups that prevents their deletion. To avoid this, use the `revoke_rules_on_delete` optional attribute for any Security Group used in `emr_managed_master_security_group` and `emr_managed_slave_security_group`. See [Amazon EMR-Managed Security Groups](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-man-sec-groups.html) for more information about the EMR-managed security group rules.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> subnetIds;

    public @Nullable List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("ClusterEc2Attributes.subnetIds");
    }

}
