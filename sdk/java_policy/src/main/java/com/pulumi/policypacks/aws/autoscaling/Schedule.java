// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;


@PolicyResourceType(type="aws:autoscaling/schedule:Schedule")
public final class Schedule extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN assigned by AWS to the autoscaling schedule.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Schedule.arn");
    }

    /**
     * The name of the Auto Scaling group.
     * 
     */
    private UndeferrableValue<String> autoscalingGroupName;

    public String autoscalingGroupName() {
        if (autoscalingGroupName == null) return null;
        return autoscalingGroupName.getValue("Schedule.autoscalingGroupName");
    }

    /**
     * The initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. Set to `-1` if you don&#39;t want to change the desired capacity at the scheduled time. Defaults to `0`.
     * 
     */
    private UndeferrableValue<Integer> desiredCapacity;

    public Integer desiredCapacity() {
        if (desiredCapacity == null) return null;
        return desiredCapacity.getValue("Schedule.desiredCapacity");
    }

    /**
     * The date and time for the recurring schedule to end, in UTC with the format `&#34;YYYY-MM-DDThh:mm:ssZ&#34;` (e.g. `&#34;2021-06-01T00:00:00Z&#34;`).
     * 
     */
    private UndeferrableValue<String> endTime;

    public String endTime() {
        if (endTime == null) return null;
        return endTime.getValue("Schedule.endTime");
    }

    /**
     * The maximum size of the Auto Scaling group. Set to `-1` if you don&#39;t want to change the maximum size at the scheduled time. Defaults to `0`.
     * 
     */
    private UndeferrableValue<Integer> maxSize;

    public Integer maxSize() {
        if (maxSize == null) return null;
        return maxSize.getValue("Schedule.maxSize");
    }

    /**
     * The minimum size of the Auto Scaling group. Set to `-1` if you don&#39;t want to change the minimum size at the scheduled time. Defaults to `0`.
     * 
     */
    private UndeferrableValue<Integer> minSize;

    public Integer minSize() {
        if (minSize == null) return null;
        return minSize.getValue("Schedule.minSize");
    }

    /**
     * The recurring schedule for this action specified using the Unix cron syntax format.
     * 
     */
    private UndeferrableValue<String> recurrence;

    public String recurrence() {
        if (recurrence == null) return null;
        return recurrence.getValue("Schedule.recurrence");
    }

    /**
     * The name of this scaling action.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> scheduledActionName;

    public String scheduledActionName() {
        if (scheduledActionName == null) return null;
        return scheduledActionName.getValue("Schedule.scheduledActionName");
    }

    /**
     * The date and time for the recurring schedule to start, in UTC with the format `&#34;YYYY-MM-DDThh:mm:ssZ&#34;` (e.g. `&#34;2021-06-01T00:00:00Z&#34;`).
     * 
     */
    private UndeferrableValue<String> startTime;

    public String startTime() {
        if (startTime == null) return null;
        return startTime.getValue("Schedule.startTime");
    }

    /**
     * Specifies the time zone for a cron expression. Valid values are the canonical names of the IANA time zones (such as `Etc/GMT+9` or `Pacific/Tahiti`).
     * 
     * &gt; **NOTE:** When `start_time` and `end_time` are specified with `recurrence` , they form the boundaries of when the recurring action will start and stop.
     * 
     */
    private UndeferrableValue<String> timeZone;

    public String timeZone() {
        if (timeZone == null) return null;
        return timeZone.getValue("Schedule.timeZone");
    }

}
