// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;


@PolicyResourceType(type="aws:autoscaling/schedule:Schedule")
public final class Schedule extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN assigned by AWS to the autoscaling schedule.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Schedule.arn' is not present");
    }

    /**
     * The name of the Auto Scaling group.
     * 
     */
    @PolicyResourceProperty(name="autoscalingGroupName", flag="unknown_autoscalingGroupName")
    private String value_autoscalingGroupName;
    private boolean unknown_autoscalingGroupName;
    public String autoscalingGroupName() {
        if (!unknown_autoscalingGroupName) return value_autoscalingGroupName;
        throw new UndeferrableValueException("Value 'Schedule.autoscalingGroupName' is not present");
    }

    /**
     * The initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. Set to `-1` if you don&#39;t want to change the desired capacity at the scheduled time. Defaults to `0`.
     * 
     */
    @PolicyResourceProperty(name="desiredCapacity", flag="unknown_desiredCapacity")
    private Integer value_desiredCapacity;
    private boolean unknown_desiredCapacity;
    public Integer desiredCapacity() {
        if (!unknown_desiredCapacity) return value_desiredCapacity;
        throw new UndeferrableValueException("Value 'Schedule.desiredCapacity' is not present");
    }

    /**
     * The date and time for the recurring schedule to end, in UTC with the format `&#34;YYYY-MM-DDThh:mm:ssZ&#34;` (e.g. `&#34;2021-06-01T00:00:00Z&#34;`).
     * 
     */
    @PolicyResourceProperty(name="endTime", flag="unknown_endTime")
    private String value_endTime;
    private boolean unknown_endTime;
    public String endTime() {
        if (!unknown_endTime) return value_endTime;
        throw new UndeferrableValueException("Value 'Schedule.endTime' is not present");
    }

    /**
     * The maximum size of the Auto Scaling group. Set to `-1` if you don&#39;t want to change the maximum size at the scheduled time. Defaults to `0`.
     * 
     */
    @PolicyResourceProperty(name="maxSize", flag="unknown_maxSize")
    private Integer value_maxSize;
    private boolean unknown_maxSize;
    public Integer maxSize() {
        if (!unknown_maxSize) return value_maxSize;
        throw new UndeferrableValueException("Value 'Schedule.maxSize' is not present");
    }

    /**
     * The minimum size of the Auto Scaling group. Set to `-1` if you don&#39;t want to change the minimum size at the scheduled time. Defaults to `0`.
     * 
     */
    @PolicyResourceProperty(name="minSize", flag="unknown_minSize")
    private Integer value_minSize;
    private boolean unknown_minSize;
    public Integer minSize() {
        if (!unknown_minSize) return value_minSize;
        throw new UndeferrableValueException("Value 'Schedule.minSize' is not present");
    }

    /**
     * The recurring schedule for this action specified using the Unix cron syntax format.
     * 
     */
    @PolicyResourceProperty(name="recurrence", flag="unknown_recurrence")
    private String value_recurrence;
    private boolean unknown_recurrence;
    public String recurrence() {
        if (!unknown_recurrence) return value_recurrence;
        throw new UndeferrableValueException("Value 'Schedule.recurrence' is not present");
    }

    /**
     * The name of this scaling action.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="scheduledActionName", flag="unknown_scheduledActionName")
    private String value_scheduledActionName;
    private boolean unknown_scheduledActionName;
    public String scheduledActionName() {
        if (!unknown_scheduledActionName) return value_scheduledActionName;
        throw new UndeferrableValueException("Value 'Schedule.scheduledActionName' is not present");
    }

    /**
     * The date and time for the recurring schedule to start, in UTC with the format `&#34;YYYY-MM-DDThh:mm:ssZ&#34;` (e.g. `&#34;2021-06-01T00:00:00Z&#34;`).
     * 
     */
    @PolicyResourceProperty(name="startTime", flag="unknown_startTime")
    private String value_startTime;
    private boolean unknown_startTime;
    public String startTime() {
        if (!unknown_startTime) return value_startTime;
        throw new UndeferrableValueException("Value 'Schedule.startTime' is not present");
    }

    /**
     * Specifies the time zone for a cron expression. Valid values are the canonical names of the IANA time zones (such as `Etc/GMT+9` or `Pacific/Tahiti`).
     * 
     * &gt; **NOTE:** When `start_time` and `end_time` are specified with `recurrence` , they form the boundaries of when the recurring action will start and stop.
     * 
     */
    @PolicyResourceProperty(name="timeZone", flag="unknown_timeZone")
    private String value_timeZone;
    private boolean unknown_timeZone;
    public String timeZone() {
        if (!unknown_timeZone) return value_timeZone;
        throw new UndeferrableValueException("Value 'Schedule.timeZone' is not present");
    }

}
