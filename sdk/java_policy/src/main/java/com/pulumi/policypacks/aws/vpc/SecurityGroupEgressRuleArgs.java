// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.vpc;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule")
public final class SecurityGroupEgressRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The destination IPv4 CIDR range.
     * 
     */
    @PolicyResourceProperty(name="cidrIpv4", flag="unknown_cidrIpv4")
    private String value_cidrIpv4;
    private boolean unknown_cidrIpv4;
    public String cidrIpv4() {
        if (!unknown_cidrIpv4) return value_cidrIpv4;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.cidrIpv4' is not present");
    }

    /**
     * The destination IPv6 CIDR range.
     * 
     */
    @PolicyResourceProperty(name="cidrIpv6", flag="unknown_cidrIpv6")
    private String value_cidrIpv6;
    private boolean unknown_cidrIpv6;
    public String cidrIpv6() {
        if (!unknown_cidrIpv6) return value_cidrIpv6;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.cidrIpv6' is not present");
    }

    /**
     * The security group rule description.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.description' is not present");
    }

    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
     * 
     */
    @PolicyResourceProperty(name="fromPort", flag="unknown_fromPort")
    private Integer value_fromPort;
    private boolean unknown_fromPort;
    public Integer fromPort() {
        if (!unknown_fromPort) return value_fromPort;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.fromPort' is not present");
    }

    /**
     * The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ip_protocol` is set to `-1`, it translates to all protocols, all port ranges, and `from_port` and `to_port` values should not be defined.
     * 
     */
    @PolicyResourceProperty(name="ipProtocol", flag="unknown_ipProtocol")
    private String value_ipProtocol;
    private boolean unknown_ipProtocol;
    public String ipProtocol() {
        if (!unknown_ipProtocol) return value_ipProtocol;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.ipProtocol' is not present");
    }

    /**
     * The ID of the destination prefix list.
     * 
     */
    @PolicyResourceProperty(name="prefixListId", flag="unknown_prefixListId")
    private String value_prefixListId;
    private boolean unknown_prefixListId;
    public String prefixListId() {
        if (!unknown_prefixListId) return value_prefixListId;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.prefixListId' is not present");
    }

    /**
     * The destination security group that is referenced in the rule.
     * 
     */
    @PolicyResourceProperty(name="referencedSecurityGroupId", flag="unknown_referencedSecurityGroupId")
    private String value_referencedSecurityGroupId;
    private boolean unknown_referencedSecurityGroupId;
    public String referencedSecurityGroupId() {
        if (!unknown_referencedSecurityGroupId) return value_referencedSecurityGroupId;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.referencedSecurityGroupId' is not present");
    }

    /**
     * The ID of the security group.
     * 
     */
    @PolicyResourceProperty(name="securityGroupId", flag="unknown_securityGroupId")
    private String value_securityGroupId;
    private boolean unknown_securityGroupId;
    public String securityGroupId() {
        if (!unknown_securityGroupId) return value_securityGroupId;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.securityGroupId' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.tags' is not present");
    }

    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
     * 
     */
    @PolicyResourceProperty(name="toPort", flag="unknown_toPort")
    private Integer value_toPort;
    private boolean unknown_toPort;
    public Integer toPort() {
        if (!unknown_toPort) return value_toPort;
        throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.toPort' is not present");
    }

}
