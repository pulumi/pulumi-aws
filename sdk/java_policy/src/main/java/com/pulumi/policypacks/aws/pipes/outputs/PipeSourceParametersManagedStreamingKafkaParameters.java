// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pipes.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.pipes.outputs.PipeSourceParametersManagedStreamingKafkaParametersCredentials;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class PipeSourceParametersManagedStreamingKafkaParameters {

    /**
     * The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    private @Nullable UndeferrableValue<Integer> batchSize;

    public @Nullable Integer batchSize() {
        if (batchSize == null) return null;
        return batchSize.getValue("PipeSourceParametersManagedStreamingKafkaParameters.batchSize");
    }

    /**
     * The name of the destination queue to consume. Maximum value of 200.
     * 
     */
    private @Nullable UndeferrableValue<String> consumerGroupId;

    public @Nullable String consumerGroupId() {
        if (consumerGroupId == null) return null;
        return consumerGroupId.getValue("PipeSourceParametersManagedStreamingKafkaParameters.consumerGroupId");
    }

    /**
     * The credentials needed to access the resource. Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<PipeSourceParametersManagedStreamingKafkaParametersCredentials> credentials;

    public @Nullable PipeSourceParametersManagedStreamingKafkaParametersCredentials credentials() {
        if (credentials == null) return null;
        return credentials.getValue("PipeSourceParametersManagedStreamingKafkaParameters.credentials");
    }

    /**
     * The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    private @Nullable UndeferrableValue<Integer> maximumBatchingWindowInSeconds;

    public @Nullable Integer maximumBatchingWindowInSeconds() {
        if (maximumBatchingWindowInSeconds == null) return null;
        return maximumBatchingWindowInSeconds.getValue("PipeSourceParametersManagedStreamingKafkaParameters.maximumBatchingWindowInSeconds");
    }

    /**
     * The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
     * 
     */
    private @Nullable UndeferrableValue<String> startingPosition;

    public @Nullable String startingPosition() {
        if (startingPosition == null) return null;
        return startingPosition.getValue("PipeSourceParametersManagedStreamingKafkaParameters.startingPosition");
    }

    /**
     * The name of the topic that the pipe will read from. Maximum length of 249.
     * 
     */
    private UndeferrableValue<String> topicName;

    public String topicName() {
        if (topicName == null) return null;
        return topicName.getValue("PipeSourceParametersManagedStreamingKafkaParameters.topicName");
    }

}
