// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.imagebuilder;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.imagebuilder.inputs.LifecyclePolicyPolicyDetailArgs;
import com.pulumi.policypacks.aws.imagebuilder.inputs.LifecyclePolicyResourceSelectionArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:imagebuilder/lifecyclePolicy:LifecyclePolicy")
public final class LifecyclePolicyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * description for the lifecycle policy.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("LifecyclePolicyArgs.description");
    }

    /**
     * The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
     * 
     */
    private UndeferrableValue<String> executionRole;

    public String executionRole() {
        if (executionRole == null) return null;
        return executionRole.getValue("LifecyclePolicyArgs.executionRole");
    }

    /**
     * The name of the lifecycle policy to create.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("LifecyclePolicyArgs.name");
    }

    /**
     * Configuration block with policy details. Detailed below.
     * 
     */
    private UndeferrableValue<List<LifecyclePolicyPolicyDetailArgs>> policyDetails;

    public List<LifecyclePolicyPolicyDetailArgs> policyDetails() {
        if (policyDetails == null) return null;
        return policyDetails.getValue("LifecyclePolicyArgs.policyDetails");
    }

    /**
     * Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<LifecyclePolicyResourceSelectionArgs> resourceSelection;

    public LifecyclePolicyResourceSelectionArgs resourceSelection() {
        if (resourceSelection == null) return null;
        return resourceSelection.getValue("LifecyclePolicyArgs.resourceSelection");
    }

    /**
     * The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
     * 
     */
    private UndeferrableValue<String> resourceType;

    public String resourceType() {
        if (resourceType == null) return null;
        return resourceType.getValue("LifecyclePolicyArgs.resourceType");
    }

    /**
     * The status of the lifecycle policy.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("LifecyclePolicyArgs.status");
    }

    /**
     * Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("LifecyclePolicyArgs.tags");
    }

}
