// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.outputs.NetworkInsightsAnalysisAlternatePathHint;
import com.pulumi.policypacks.aws.ec2.outputs.NetworkInsightsAnalysisExplanation;
import com.pulumi.policypacks.aws.ec2.outputs.NetworkInsightsAnalysisForwardPathComponent;
import com.pulumi.policypacks.aws.ec2.outputs.NetworkInsightsAnalysisReturnPathComponent;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis")
public final class NetworkInsightsAnalysis extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Potential intermediate components of a feasible path. Described below.
     * 
     */
    @PolicyResourceProperty(name="alternatePathHints", flag="unknown_alternatePathHints")
    private List<NetworkInsightsAnalysisAlternatePathHint> value_alternatePathHints;
    private boolean unknown_alternatePathHints;
    public List<NetworkInsightsAnalysisAlternatePathHint> alternatePathHints() {
        if (!unknown_alternatePathHints) return value_alternatePathHints;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.alternatePathHints' is not present");
    }

    /**
     * ARN of the Network Insights Analysis.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.arn' is not present");
    }

    /**
     * Explanation codes for an unreachable path. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Explanation.html) for details.
     * 
     */
    @PolicyResourceProperty(name="explanations", flag="unknown_explanations")
    private List<NetworkInsightsAnalysisExplanation> value_explanations;
    private boolean unknown_explanations;
    public List<NetworkInsightsAnalysisExplanation> explanations() {
        if (!unknown_explanations) return value_explanations;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.explanations' is not present");
    }

    /**
     * A list of ARNs for resources the path must traverse.
     * 
     */
    @PolicyResourceProperty(name="filterInArns", flag="unknown_filterInArns")
    private @Nullable List<String> value_filterInArns;
    private boolean unknown_filterInArns;
    public @Nullable List<String> filterInArns() {
        if (!unknown_filterInArns) return value_filterInArns;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.filterInArns' is not present");
    }

    /**
     * The components in the path from source to destination. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
     * 
     */
    @PolicyResourceProperty(name="forwardPathComponents", flag="unknown_forwardPathComponents")
    private List<NetworkInsightsAnalysisForwardPathComponent> value_forwardPathComponents;
    private boolean unknown_forwardPathComponents;
    public List<NetworkInsightsAnalysisForwardPathComponent> forwardPathComponents() {
        if (!unknown_forwardPathComponents) return value_forwardPathComponents;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.forwardPathComponents' is not present");
    }

    /**
     * ID of the Network Insights Path to run an analysis on.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="networkInsightsPathId", flag="unknown_networkInsightsPathId")
    private String value_networkInsightsPathId;
    private boolean unknown_networkInsightsPathId;
    public String networkInsightsPathId() {
        if (!unknown_networkInsightsPathId) return value_networkInsightsPathId;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.networkInsightsPathId' is not present");
    }

    /**
     * Set to `true` if the destination was reachable.
     * 
     */
    @PolicyResourceProperty(name="pathFound", flag="unknown_pathFound")
    private Boolean value_pathFound;
    private boolean unknown_pathFound;
    public Boolean pathFound() {
        if (!unknown_pathFound) return value_pathFound;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.pathFound' is not present");
    }

    /**
     * The components in the path from destination to source. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
     * 
     */
    @PolicyResourceProperty(name="returnPathComponents", flag="unknown_returnPathComponents")
    private List<NetworkInsightsAnalysisReturnPathComponent> value_returnPathComponents;
    private boolean unknown_returnPathComponents;
    public List<NetworkInsightsAnalysisReturnPathComponent> returnPathComponents() {
        if (!unknown_returnPathComponents) return value_returnPathComponents;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.returnPathComponents' is not present");
    }

    /**
     * The date/time the analysis was started.
     * 
     */
    @PolicyResourceProperty(name="startDate", flag="unknown_startDate")
    private String value_startDate;
    private boolean unknown_startDate;
    public String startDate() {
        if (!unknown_startDate) return value_startDate;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.startDate' is not present");
    }

    /**
     * The status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `path_found`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.status' is not present");
    }

    /**
     * A message to provide more context when the `status` is `failed`.
     * 
     */
    @PolicyResourceProperty(name="statusMessage", flag="unknown_statusMessage")
    private String value_statusMessage;
    private boolean unknown_statusMessage;
    public String statusMessage() {
        if (!unknown_statusMessage) return value_statusMessage;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.statusMessage' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.tagsAll' is not present");
    }

    /**
     * If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
     * 
     */
    @PolicyResourceProperty(name="waitForCompletion", flag="unknown_waitForCompletion")
    private @Nullable Boolean value_waitForCompletion;
    private boolean unknown_waitForCompletion;
    public @Nullable Boolean waitForCompletion() {
        if (!unknown_waitForCompletion) return value_waitForCompletion;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.waitForCompletion' is not present");
    }

    /**
     * The warning message.
     * 
     */
    @PolicyResourceProperty(name="warningMessage", flag="unknown_warningMessage")
    private String value_warningMessage;
    private boolean unknown_warningMessage;
    public String warningMessage() {
        if (!unknown_warningMessage) return value_warningMessage;
        throw new UndeferrableValueException("Value 'NetworkInsightsAnalysis.warningMessage' is not present");
    }

}
