// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshift;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshift/endpointAuthorization:EndpointAuthorization")
public final class EndpointAuthorization extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Web Services account ID to grant access to.
     * 
     */
    @PolicyResourceProperty(name="account", flag="unknown_account")
    private String value_account;
    private boolean unknown_account;
    public String account() {
        if (!unknown_account) return value_account;
        throw new UndeferrableValueException("Value 'EndpointAuthorization.account' is not present");
    }

    /**
     * Indicates whether all VPCs in the grantee account are allowed access to the cluster.
     * 
     */
    @PolicyResourceProperty(name="allowedAllVpcs", flag="unknown_allowedAllVpcs")
    private Boolean value_allowedAllVpcs;
    private boolean unknown_allowedAllVpcs;
    public Boolean allowedAllVpcs() {
        if (!unknown_allowedAllVpcs) return value_allowedAllVpcs;
        throw new UndeferrableValueException("Value 'EndpointAuthorization.allowedAllVpcs' is not present");
    }

    /**
     * The cluster identifier of the cluster to grant access to.
     * 
     */
    @PolicyResourceProperty(name="clusterIdentifier", flag="unknown_clusterIdentifier")
    private String value_clusterIdentifier;
    private boolean unknown_clusterIdentifier;
    public String clusterIdentifier() {
        if (!unknown_clusterIdentifier) return value_clusterIdentifier;
        throw new UndeferrableValueException("Value 'EndpointAuthorization.clusterIdentifier' is not present");
    }

    /**
     * The number of Redshift-managed VPC endpoints created for the authorization.
     * 
     */
    @PolicyResourceProperty(name="endpointCount", flag="unknown_endpointCount")
    private Integer value_endpointCount;
    private boolean unknown_endpointCount;
    public Integer endpointCount() {
        if (!unknown_endpointCount) return value_endpointCount;
        throw new UndeferrableValueException("Value 'EndpointAuthorization.endpointCount' is not present");
    }

    /**
     * Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
     * 
     */
    @PolicyResourceProperty(name="forceDelete", flag="unknown_forceDelete")
    private @Nullable Boolean value_forceDelete;
    private boolean unknown_forceDelete;
    public @Nullable Boolean forceDelete() {
        if (!unknown_forceDelete) return value_forceDelete;
        throw new UndeferrableValueException("Value 'EndpointAuthorization.forceDelete' is not present");
    }

    /**
     * The Amazon Web Services account ID of the grantee of the cluster.
     * 
     */
    @PolicyResourceProperty(name="grantee", flag="unknown_grantee")
    private String value_grantee;
    private boolean unknown_grantee;
    public String grantee() {
        if (!unknown_grantee) return value_grantee;
        throw new UndeferrableValueException("Value 'EndpointAuthorization.grantee' is not present");
    }

    /**
     * The Amazon Web Services account ID of the cluster owner.
     * 
     */
    @PolicyResourceProperty(name="grantor", flag="unknown_grantor")
    private String value_grantor;
    private boolean unknown_grantor;
    public String grantor() {
        if (!unknown_grantor) return value_grantor;
        throw new UndeferrableValueException("Value 'EndpointAuthorization.grantor' is not present");
    }

    /**
     * The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
     * 
     */
    @PolicyResourceProperty(name="vpcIds", flag="unknown_vpcIds")
    private @Nullable List<String> value_vpcIds;
    private boolean unknown_vpcIds;
    public @Nullable List<String> vpcIds() {
        if (!unknown_vpcIds) return value_vpcIds;
        throw new UndeferrableValueException("Value 'EndpointAuthorization.vpcIds' is not present");
    }

}
