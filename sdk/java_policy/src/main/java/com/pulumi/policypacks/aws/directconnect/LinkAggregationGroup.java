// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directconnect;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directconnect/linkAggregationGroup:LinkAggregationGroup")
public final class LinkAggregationGroup extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the LAG.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.arn' is not present");
    }

    /**
     * The ID of an existing dedicated connection to migrate to the LAG.
     * 
     */
    @PolicyResourceProperty(name="connectionId", flag="unknown_connectionId")
    private @Nullable String value_connectionId;
    private boolean unknown_connectionId;
    public @Nullable String connectionId() {
        if (!unknown_connectionId) return value_connectionId;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.connectionId' is not present");
    }

    /**
     * The bandwidth of the individual dedicated connections bundled by the LAG. Valid values: 1Gbps, 10Gbps, 100Gbps, and 400Gbps. Case sensitive. Refer to the AWS Direct Connection supported bandwidths for [Dedicated Connections](https://docs.aws.amazon.com/directconnect/latest/UserGuide/dedicated_connection.html).
     * 
     */
    @PolicyResourceProperty(name="connectionsBandwidth", flag="unknown_connectionsBandwidth")
    private String value_connectionsBandwidth;
    private boolean unknown_connectionsBandwidth;
    public String connectionsBandwidth() {
        if (!unknown_connectionsBandwidth) return value_connectionsBandwidth;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.connectionsBandwidth' is not present");
    }

    /**
     * A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
     * 
     */
    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private @Nullable Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public @Nullable Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.forceDestroy' is not present");
    }

    /**
     * Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
     * 
     */
    @PolicyResourceProperty(name="hasLogicalRedundancy", flag="unknown_hasLogicalRedundancy")
    private String value_hasLogicalRedundancy;
    private boolean unknown_hasLogicalRedundancy;
    public String hasLogicalRedundancy() {
        if (!unknown_hasLogicalRedundancy) return value_hasLogicalRedundancy;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.hasLogicalRedundancy' is not present");
    }

    /**
     * Indicates whether jumbo frames (9001 MTU) are supported.
     * 
     */
    @PolicyResourceProperty(name="jumboFrameCapable", flag="unknown_jumboFrameCapable")
    private Boolean value_jumboFrameCapable;
    private boolean unknown_jumboFrameCapable;
    public Boolean jumboFrameCapable() {
        if (!unknown_jumboFrameCapable) return value_jumboFrameCapable;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.jumboFrameCapable' is not present");
    }

    /**
     * The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
     * 
     */
    @PolicyResourceProperty(name="location", flag="unknown_location")
    private String value_location;
    private boolean unknown_location;
    public String location() {
        if (!unknown_location) return value_location;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.location' is not present");
    }

    /**
     * The name of the LAG.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.name' is not present");
    }

    /**
     * The ID of the AWS account that owns the LAG.
     * 
     */
    @PolicyResourceProperty(name="ownerAccountId", flag="unknown_ownerAccountId")
    private String value_ownerAccountId;
    private boolean unknown_ownerAccountId;
    public String ownerAccountId() {
        if (!unknown_ownerAccountId) return value_ownerAccountId;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.ownerAccountId' is not present");
    }

    /**
     * The name of the service provider associated with the LAG.
     * 
     */
    @PolicyResourceProperty(name="providerName", flag="unknown_providerName")
    private String value_providerName;
    private boolean unknown_providerName;
    public String providerName() {
        if (!unknown_providerName) return value_providerName;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.providerName' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'LinkAggregationGroup.tagsAll' is not present");
    }

}
