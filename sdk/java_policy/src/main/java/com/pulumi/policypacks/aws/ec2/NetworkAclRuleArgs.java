// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/networkAclRule:NetworkAclRule")
public final class NetworkAclRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
     * 
     */
    private UndeferrableValue<String> cidrBlock;

    public String cidrBlock() {
        if (cidrBlock == null) return null;
        return cidrBlock.getValue("NetworkAclRuleArgs.cidrBlock");
    }

    /**
     * Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
     * 
     */
    private UndeferrableValue<Boolean> egress;

    public Boolean egress() {
        if (egress == null) return null;
        return egress.getValue("NetworkAclRuleArgs.egress");
    }

    /**
     * The from port to match.
     * 
     */
    private UndeferrableValue<Integer> fromPort;

    public Integer fromPort() {
        if (fromPort == null) return null;
        return fromPort.getValue("NetworkAclRuleArgs.fromPort");
    }

    /**
     * ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
     * 
     * &gt; **NOTE:** If the value of `protocol` is `-1` or `all`, the `from_port` and `to_port` values will be ignored and the rule will apply to all ports.
     * 
     * &gt; **NOTE:** If the value of `icmp_type` is `-1` (which results in a wildcard ICMP type), the `icmp_code` must also be set to `-1` (wildcard ICMP code).
     * 
     * &gt; Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
     * 
     */
    private UndeferrableValue<Integer> icmpCode;

    public Integer icmpCode() {
        if (icmpCode == null) return null;
        return icmpCode.getValue("NetworkAclRuleArgs.icmpCode");
    }

    /**
     * ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
     * 
     */
    private UndeferrableValue<Integer> icmpType;

    public Integer icmpType() {
        if (icmpType == null) return null;
        return icmpType.getValue("NetworkAclRuleArgs.icmpType");
    }

    /**
     * The IPv6 CIDR block to allow or deny.
     * 
     */
    private UndeferrableValue<String> ipv6CidrBlock;

    public String ipv6CidrBlock() {
        if (ipv6CidrBlock == null) return null;
        return ipv6CidrBlock.getValue("NetworkAclRuleArgs.ipv6CidrBlock");
    }

    /**
     * The ID of the network ACL.
     * 
     */
    private UndeferrableValue<String> networkAclId;

    public String networkAclId() {
        if (networkAclId == null) return null;
        return networkAclId.getValue("NetworkAclRuleArgs.networkAclId");
    }

    /**
     * The protocol. A value of -1 means all protocols.
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("NetworkAclRuleArgs.protocol");
    }

    /**
     * Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
     * 
     */
    private UndeferrableValue<String> ruleAction;

    public String ruleAction() {
        if (ruleAction == null) return null;
        return ruleAction.getValue("NetworkAclRuleArgs.ruleAction");
    }

    /**
     * The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
     * 
     */
    private UndeferrableValue<Integer> ruleNumber;

    public Integer ruleNumber() {
        if (ruleNumber == null) return null;
        return ruleNumber.getValue("NetworkAclRuleArgs.ruleNumber");
    }

    /**
     * The to port to match.
     * 
     */
    private UndeferrableValue<Integer> toPort;

    public Integer toPort() {
        if (toPort == null) return null;
        return toPort.getValue("NetworkAclRuleArgs.toPort");
    }

}
