// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/networkAclRule:NetworkAclRule")
public final class NetworkAclRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
     * 
     */
    @PolicyResourceProperty(name="cidrBlock", flag="unknown_cidrBlock")
    private String value_cidrBlock;
    private boolean unknown_cidrBlock;
    public String cidrBlock() {
        if (!unknown_cidrBlock) return value_cidrBlock;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.cidrBlock' is not present");
    }

    /**
     * Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
     * 
     */
    @PolicyResourceProperty(name="egress", flag="unknown_egress")
    private Boolean value_egress;
    private boolean unknown_egress;
    public Boolean egress() {
        if (!unknown_egress) return value_egress;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.egress' is not present");
    }

    /**
     * The from port to match.
     * 
     */
    @PolicyResourceProperty(name="fromPort", flag="unknown_fromPort")
    private Integer value_fromPort;
    private boolean unknown_fromPort;
    public Integer fromPort() {
        if (!unknown_fromPort) return value_fromPort;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.fromPort' is not present");
    }

    /**
     * ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
     * 
     * &gt; **NOTE:** If the value of `protocol` is `-1` or `all`, the `from_port` and `to_port` values will be ignored and the rule will apply to all ports.
     * 
     * &gt; **NOTE:** If the value of `icmp_type` is `-1` (which results in a wildcard ICMP type), the `icmp_code` must also be set to `-1` (wildcard ICMP code).
     * 
     * &gt; Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
     * 
     */
    @PolicyResourceProperty(name="icmpCode", flag="unknown_icmpCode")
    private Integer value_icmpCode;
    private boolean unknown_icmpCode;
    public Integer icmpCode() {
        if (!unknown_icmpCode) return value_icmpCode;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.icmpCode' is not present");
    }

    /**
     * ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
     * 
     */
    @PolicyResourceProperty(name="icmpType", flag="unknown_icmpType")
    private Integer value_icmpType;
    private boolean unknown_icmpType;
    public Integer icmpType() {
        if (!unknown_icmpType) return value_icmpType;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.icmpType' is not present");
    }

    /**
     * The IPv6 CIDR block to allow or deny.
     * 
     */
    @PolicyResourceProperty(name="ipv6CidrBlock", flag="unknown_ipv6CidrBlock")
    private String value_ipv6CidrBlock;
    private boolean unknown_ipv6CidrBlock;
    public String ipv6CidrBlock() {
        if (!unknown_ipv6CidrBlock) return value_ipv6CidrBlock;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.ipv6CidrBlock' is not present");
    }

    /**
     * The ID of the network ACL.
     * 
     */
    @PolicyResourceProperty(name="networkAclId", flag="unknown_networkAclId")
    private String value_networkAclId;
    private boolean unknown_networkAclId;
    public String networkAclId() {
        if (!unknown_networkAclId) return value_networkAclId;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.networkAclId' is not present");
    }

    /**
     * The protocol. A value of -1 means all protocols.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.protocol' is not present");
    }

    /**
     * Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
     * 
     */
    @PolicyResourceProperty(name="ruleAction", flag="unknown_ruleAction")
    private String value_ruleAction;
    private boolean unknown_ruleAction;
    public String ruleAction() {
        if (!unknown_ruleAction) return value_ruleAction;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.ruleAction' is not present");
    }

    /**
     * The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
     * 
     */
    @PolicyResourceProperty(name="ruleNumber", flag="unknown_ruleNumber")
    private Integer value_ruleNumber;
    private boolean unknown_ruleNumber;
    public Integer ruleNumber() {
        if (!unknown_ruleNumber) return value_ruleNumber;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.ruleNumber' is not present");
    }

    /**
     * The to port to match.
     * 
     */
    @PolicyResourceProperty(name="toPort", flag="unknown_toPort")
    private Integer value_toPort;
    private boolean unknown_toPort;
    public Integer toPort() {
        if (!unknown_toPort) return value_toPort;
        throw new UndeferrableValueException("Value 'NetworkAclRuleArgs.toPort' is not present");
    }

}
