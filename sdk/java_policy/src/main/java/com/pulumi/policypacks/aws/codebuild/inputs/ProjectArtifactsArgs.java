// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codebuild.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


public final class ProjectArtifactsArgs {

    /**
     * Artifact identifier. Must be the same specified inside the AWS CodeBuild build
     * specification.
     * 
     */
    @PolicyResourceProperty(name="artifactIdentifier", flag="unknown_artifactIdentifier")
    private String value_artifactIdentifier;
    private boolean unknown_artifactIdentifier;
    public String artifactIdentifier() {
        if (!unknown_artifactIdentifier) return value_artifactIdentifier;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.artifactIdentifier' is not present");
    }

    /**
     * Specifies the bucket owner&#39;s access for objects that another account uploads to
     * their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these
     * objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`,
     * `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission
     * allows CodeBuild to modify the access control list for the bucket.
     * 
     */
    @PolicyResourceProperty(name="bucketOwnerAccess", flag="unknown_bucketOwnerAccess")
    private String value_bucketOwnerAccess;
    private boolean unknown_bucketOwnerAccess;
    public String bucketOwnerAccess() {
        if (!unknown_bucketOwnerAccess) return value_bucketOwnerAccess;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.bucketOwnerAccess' is not present");
    }

    /**
     * Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`,
     * this value is ignored. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="encryptionDisabled", flag="unknown_encryptionDisabled")
    private Boolean value_encryptionDisabled;
    private boolean unknown_encryptionDisabled;
    public Boolean encryptionDisabled() {
        if (!unknown_encryptionDisabled) return value_encryptionDisabled;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.encryptionDisabled' is not present");
    }

    /**
     * Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or
     * `NO_ARTIFACTS`, this value is ignored. If `type` is set to `S3`, this is the name of the output bucket.
     * 
     */
    @PolicyResourceProperty(name="location", flag="unknown_location")
    private String value_location;
    private boolean unknown_location;
    public String location() {
        if (!unknown_location) return value_location;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.location' is not present");
    }

    /**
     * Name of the project. If `type` is set to `S3`, this is the name of the output artifact object
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.name' is not present");
    }

    /**
     * Namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values
     * are `BUILD_ID`, `NONE`.
     * 
     */
    @PolicyResourceProperty(name="namespaceType", flag="unknown_namespaceType")
    private String value_namespaceType;
    private boolean unknown_namespaceType;
    public String namespaceType() {
        if (!unknown_namespaceType) return value_namespaceType;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.namespaceType' is not present");
    }

    /**
     * Whether a name specified in the build specification overrides the artifact name.
     * 
     */
    @PolicyResourceProperty(name="overrideArtifactName", flag="unknown_overrideArtifactName")
    private Boolean value_overrideArtifactName;
    private boolean unknown_overrideArtifactName;
    public Boolean overrideArtifactName() {
        if (!unknown_overrideArtifactName) return value_overrideArtifactName;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.overrideArtifactName' is not present");
    }

    /**
     * Type of build output artifact to create. If `type` is set to `S3`, valid values are `NONE`,
     * `ZIP`
     * 
     */
    @PolicyResourceProperty(name="packaging", flag="unknown_packaging")
    private String value_packaging;
    private boolean unknown_packaging;
    public String packaging() {
        if (!unknown_packaging) return value_packaging;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.packaging' is not present");
    }

    /**
     * If `type` is set to `S3`, this is the path to the output artifact.
     * 
     */
    @PolicyResourceProperty(name="path", flag="unknown_path")
    private String value_path;
    private boolean unknown_path;
    public String path() {
        if (!unknown_path) return value_path;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.path' is not present");
    }

    /**
     * Build output artifact&#39;s type. Valid values: `CODEPIPELINE`, `NO_ARTIFACTS`, `S3`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'ProjectArtifactsArgs.type' is not present");
    }

}
