// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cognito;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cognito.inputs.UserPoolClientAnalyticsConfigurationArgs;
import com.pulumi.policypacks.aws.cognito.inputs.UserPoolClientTokenValidityUnitsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cognito/userPoolClient:UserPoolClient")
public final class UserPoolClientArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. By default, the unit is hours. The unit can be overridden by a value in `token_validity_units.access_token`.
     * 
     */
    private UndeferrableValue<Integer> accessTokenValidity;

    public Integer accessTokenValidity() {
        if (accessTokenValidity == null) return null;
        return accessTokenValidity.getValue("UserPoolClientArgs.accessTokenValidity");
    }

    /**
     * List of allowed OAuth flows, including `code`, `implicit`, and `client_credentials`. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure this option.
     * 
     */
    private UndeferrableValue<List<String>> allowedOauthFlows;

    public List<String> allowedOauthFlows() {
        if (allowedOauthFlows == null) return null;
        return allowedOauthFlows.getValue("UserPoolClientArgs.allowedOauthFlows");
    }

    /**
     * Whether the client is allowed to use OAuth 2.0 features. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure the following arguments: `callback_urls`, `logout_urls`, `allowed_oauth_scopes` and `allowed_oauth_flows`.
     * 
     */
    private UndeferrableValue<Boolean> allowedOauthFlowsUserPoolClient;

    public Boolean allowedOauthFlowsUserPoolClient() {
        if (allowedOauthFlowsUserPoolClient == null) return null;
        return allowedOauthFlowsUserPoolClient.getValue("UserPoolClientArgs.allowedOauthFlowsUserPoolClient");
    }

    /**
     * List of allowed OAuth scopes, including `phone`, `email`, `openid`, `profile`, and `aws.cognito.signin.user.admin`. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure this option.
     * 
     */
    private UndeferrableValue<List<String>> allowedOauthScopes;

    public List<String> allowedOauthScopes() {
        if (allowedOauthScopes == null) return null;
        return allowedOauthScopes.getValue("UserPoolClientArgs.allowedOauthScopes");
    }

    /**
     * Configuration block for Amazon Pinpoint analytics that collects metrics for this user pool. See details below.
     * 
     */
    private UndeferrableValue<UserPoolClientAnalyticsConfigurationArgs> analyticsConfiguration;

    public UserPoolClientAnalyticsConfigurationArgs analyticsConfiguration() {
        if (analyticsConfiguration == null) return null;
        return analyticsConfiguration.getValue("UserPoolClientArgs.analyticsConfiguration");
    }

    /**
     * Duration, in minutes, of the session token created by Amazon Cognito for each API request in an authentication flow. The session token must be responded to by the native user of the user pool before it expires. Valid values for `auth_session_validity` are between `3` and `15`, with a default value of `3`.
     * 
     */
    private UndeferrableValue<Integer> authSessionValidity;

    public Integer authSessionValidity() {
        if (authSessionValidity == null) return null;
        return authSessionValidity.getValue("UserPoolClientArgs.authSessionValidity");
    }

    /**
     * List of allowed callback URLs for the identity providers. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure this option.
     * 
     */
    private UndeferrableValue<List<String>> callbackUrls;

    public List<String> callbackUrls() {
        if (callbackUrls == null) return null;
        return callbackUrls.getValue("UserPoolClientArgs.callbackUrls");
    }

    /**
     * Default redirect URI and must be included in the list of callback URLs.
     * 
     */
    private UndeferrableValue<String> defaultRedirectUri;

    public String defaultRedirectUri() {
        if (defaultRedirectUri == null) return null;
        return defaultRedirectUri.getValue("UserPoolClientArgs.defaultRedirectUri");
    }

    /**
     * Enables the propagation of additional user context data.
     * 
     */
    private UndeferrableValue<Boolean> enablePropagateAdditionalUserContextData;

    public Boolean enablePropagateAdditionalUserContextData() {
        if (enablePropagateAdditionalUserContextData == null) return null;
        return enablePropagateAdditionalUserContextData.getValue("UserPoolClientArgs.enablePropagateAdditionalUserContextData");
    }

    /**
     * Enables or disables token revocation.
     * 
     */
    private UndeferrableValue<Boolean> enableTokenRevocation;

    public Boolean enableTokenRevocation() {
        if (enableTokenRevocation == null) return null;
        return enableTokenRevocation.getValue("UserPoolClientArgs.enableTokenRevocation");
    }

    /**
     * List of authentication flows. The available options include `ADMIN_NO_SRP_AUTH`, `CUSTOM_AUTH_FLOW_ONLY`, `USER_PASSWORD_AUTH`, `ALLOW_ADMIN_USER_PASSWORD_AUTH`, `ALLOW_CUSTOM_AUTH`, `ALLOW_USER_PASSWORD_AUTH`, `ALLOW_USER_SRP_AUTH`, `ALLOW_REFRESH_TOKEN_AUTH`, and `ALLOW_USER_AUTH`.
     * 
     */
    private UndeferrableValue<List<String>> explicitAuthFlows;

    public List<String> explicitAuthFlows() {
        if (explicitAuthFlows == null) return null;
        return explicitAuthFlows.getValue("UserPoolClientArgs.explicitAuthFlows");
    }

    /**
     * Boolean flag indicating whether an application secret should be generated.
     * 
     */
    private UndeferrableValue<Boolean> generateSecret;

    public Boolean generateSecret() {
        if (generateSecret == null) return null;
        return generateSecret.getValue("UserPoolClientArgs.generateSecret");
    }

    /**
     * Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. By default, the unit is hours. The unit can be overridden by a value in `token_validity_units.id_token`.
     * 
     */
    private UndeferrableValue<Integer> idTokenValidity;

    public Integer idTokenValidity() {
        if (idTokenValidity == null) return null;
        return idTokenValidity.getValue("UserPoolClientArgs.idTokenValidity");
    }

    /**
     * List of allowed logout URLs for the identity providers. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure this option.
     * 
     */
    private UndeferrableValue<List<String>> logoutUrls;

    public List<String> logoutUrls() {
        if (logoutUrls == null) return null;
        return logoutUrls.getValue("UserPoolClientArgs.logoutUrls");
    }

    /**
     * Name of the application client.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("UserPoolClientArgs.name");
    }

    /**
     * Setting determines the errors and responses returned by Cognito APIs when a user does not exist in the user pool during authentication, account confirmation, and password recovery.
     * 
     */
    private UndeferrableValue<String> preventUserExistenceErrors;

    public String preventUserExistenceErrors() {
        if (preventUserExistenceErrors == null) return null;
        return preventUserExistenceErrors.getValue("UserPoolClientArgs.preventUserExistenceErrors");
    }

    /**
     * List of user pool attributes that the application client can read from.
     * 
     */
    private UndeferrableValue<List<String>> readAttributes;

    public List<String> readAttributes() {
        if (readAttributes == null) return null;
        return readAttributes.getValue("UserPoolClientArgs.readAttributes");
    }

    /**
     * Time limit, between 60 minutes and 10 years, after which the refresh token is no longer valid and cannot be used. By default, the unit is days. The unit can be overridden by a value in `token_validity_units.refresh_token`.
     * 
     */
    private UndeferrableValue<Integer> refreshTokenValidity;

    public Integer refreshTokenValidity() {
        if (refreshTokenValidity == null) return null;
        return refreshTokenValidity.getValue("UserPoolClientArgs.refreshTokenValidity");
    }

    /**
     * List of provider names for the identity providers that are supported on this client. It uses the `provider_name` attribute of the `aws.cognito.IdentityProvider` resource(s), or the equivalent string(s).
     * 
     */
    private UndeferrableValue<List<String>> supportedIdentityProviders;

    public List<String> supportedIdentityProviders() {
        if (supportedIdentityProviders == null) return null;
        return supportedIdentityProviders.getValue("UserPoolClientArgs.supportedIdentityProviders");
    }

    /**
     * Configuration block for representing the validity times in units. See details below. Detailed below.
     * 
     */
    private UndeferrableValue<UserPoolClientTokenValidityUnitsArgs> tokenValidityUnits;

    public UserPoolClientTokenValidityUnitsArgs tokenValidityUnits() {
        if (tokenValidityUnits == null) return null;
        return tokenValidityUnits.getValue("UserPoolClientArgs.tokenValidityUnits");
    }

    /**
     * User pool the client belongs to.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> userPoolId;

    public String userPoolId() {
        if (userPoolId == null) return null;
        return userPoolId.getValue("UserPoolClientArgs.userPoolId");
    }

    /**
     * List of user pool attributes that the application client can write to.
     * 
     */
    private UndeferrableValue<List<String>> writeAttributes;

    public List<String> writeAttributes() {
        if (writeAttributes == null) return null;
        return writeAttributes.getValue("UserPoolClientArgs.writeAttributes");
    }

}
