// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.s3.inputs.BucketReplicationConfigRuleDeleteMarkerReplicationArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketReplicationConfigRuleDestinationArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketReplicationConfigRuleExistingObjectReplicationArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketReplicationConfigRuleFilterArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketReplicationConfigRuleSourceSelectionCriteriaArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class BucketReplicationConfigRuleArgs {

    /**
     * Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when `filter` is used)documented below.
     * 
     */
    private UndeferrableValue<BucketReplicationConfigRuleDeleteMarkerReplicationArgs> deleteMarkerReplication;

    public BucketReplicationConfigRuleDeleteMarkerReplicationArgs deleteMarkerReplication() {
        if (deleteMarkerReplication == null) return null;
        return deleteMarkerReplication.getValue("BucketReplicationConfigRuleArgs.deleteMarkerReplication");
    }

    /**
     * Specifies the destination for the rule. See below.
     * 
     */
    private UndeferrableValue<BucketReplicationConfigRuleDestinationArgs> destination;

    public BucketReplicationConfigRuleDestinationArgs destination() {
        if (destination == null) return null;
        return destination.getValue("BucketReplicationConfigRuleArgs.destination");
    }

    /**
     * Replicate existing objects in the source bucket according to the rule configurations. See below.
     * 
     */
    private UndeferrableValue<BucketReplicationConfigRuleExistingObjectReplicationArgs> existingObjectReplication;

    public BucketReplicationConfigRuleExistingObjectReplicationArgs existingObjectReplication() {
        if (existingObjectReplication == null) return null;
        return existingObjectReplication.getValue("BucketReplicationConfigRuleArgs.existingObjectReplication");
    }

    /**
     * Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the `rule` will default to using `prefix`.
     * 
     */
    private UndeferrableValue<BucketReplicationConfigRuleFilterArgs> filter;

    public BucketReplicationConfigRuleFilterArgs filter() {
        if (filter == null) return null;
        return filter.getValue("BucketReplicationConfigRuleArgs.filter");
    }

    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    private UndeferrableValue<String> id;

    public String id() {
        if (id == null) return null;
        return id.getValue("BucketReplicationConfigRuleArgs.id");
    }

    /**
     * Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string (`&#34;&#34;`) if `filter` is not specified.
     * 
     * @deprecated
     * prefix is deprecated. Use filter instead.
     * 
     */
    @Deprecated /* prefix is deprecated. Use filter instead. */
    private UndeferrableValue<String> prefix;

    public String prefix() {
        if (prefix == null) return null;
        return prefix.getValue("BucketReplicationConfigRuleArgs.prefix");
    }

    /**
     * Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     * 
     */
    private UndeferrableValue<Integer> priority;

    public Integer priority() {
        if (priority == null) return null;
        return priority.getValue("BucketReplicationConfigRuleArgs.priority");
    }

    /**
     * Specifies special object selection criteria. See below.
     * 
     */
    private UndeferrableValue<BucketReplicationConfigRuleSourceSelectionCriteriaArgs> sourceSelectionCriteria;

    public BucketReplicationConfigRuleSourceSelectionCriteriaArgs sourceSelectionCriteria() {
        if (sourceSelectionCriteria == null) return null;
        return sourceSelectionCriteria.getValue("BucketReplicationConfigRuleArgs.sourceSelectionCriteria");
    }

    /**
     * Status of the rule. Either `&#34;Enabled&#34;` or `&#34;Disabled&#34;`. The rule is ignored if status is not &#34;Enabled&#34;.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("BucketReplicationConfigRuleArgs.status");
    }

}
