// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.batch;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.batch.inputs.JobQueueComputeEnvironmentOrderArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobQueueJobStateTimeLimitActionArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobQueueTimeoutsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:batch/jobQueue:JobQueue")
public final class JobQueueArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
     * 
     */
    private UndeferrableValue<List<JobQueueComputeEnvironmentOrderArgs>> computeEnvironmentOrders;

    public List<JobQueueComputeEnvironmentOrderArgs> computeEnvironmentOrders() {
        if (computeEnvironmentOrders == null) return null;
        return computeEnvironmentOrders.getValue("JobQueueArgs.computeEnvironmentOrders");
    }

    /**
     * (Optional) This parameter is deprecated, please use `compute_environment_order` instead. List of compute environment ARNs mapped to a job queue. The position of the compute environments in the list will dictate the order. When importing a AWS Batch Job Queue, the parameter `compute_environments` will always be used over `compute_environment_order`. Please adjust your HCL accordingly.
     * 
     * @deprecated
     * This parameter will be replaced by `compute_environment_order`.
     * 
     */
    @Deprecated /* This parameter will be replaced by `compute_environment_order`. */
    private UndeferrableValue<List<String>> computeEnvironments;

    public List<String> computeEnvironments() {
        if (computeEnvironments == null) return null;
        return computeEnvironments.getValue("JobQueueArgs.computeEnvironments");
    }

    /**
     * The set of job state time limit actions mapped to a job queue. Specifies an action that AWS Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
     * 
     */
    private UndeferrableValue<List<JobQueueJobStateTimeLimitActionArgs>> jobStateTimeLimitActions;

    public List<JobQueueJobStateTimeLimitActionArgs> jobStateTimeLimitActions() {
        if (jobStateTimeLimitActions == null) return null;
        return jobStateTimeLimitActions.getValue("JobQueueArgs.jobStateTimeLimitActions");
    }

    /**
     * Specifies the name of the job queue.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("JobQueueArgs.name");
    }

    /**
     * The priority of the job queue. Job queues with a higher priority
     * are evaluated first when associated with the same compute environment.
     * 
     */
    private UndeferrableValue<Integer> priority;

    public Integer priority() {
        if (priority == null) return null;
        return priority.getValue("JobQueueArgs.priority");
    }

    /**
     * The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn&#39;t specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can&#39;t remove the fair share scheduling policy.
     * 
     */
    private UndeferrableValue<String> schedulingPolicyArn;

    public String schedulingPolicyArn() {
        if (schedulingPolicyArn == null) return null;
        return schedulingPolicyArn.getValue("JobQueueArgs.schedulingPolicyArn");
    }

    /**
     * The state of the job queue. Must be one of: `ENABLED` or `DISABLED`
     * 
     */
    private UndeferrableValue<String> state;

    public String state() {
        if (state == null) return null;
        return state.getValue("JobQueueArgs.state");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("JobQueueArgs.tags");
    }

    private UndeferrableValue<JobQueueTimeoutsArgs> timeouts;

    public JobQueueTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("JobQueueArgs.timeouts");
    }

}
