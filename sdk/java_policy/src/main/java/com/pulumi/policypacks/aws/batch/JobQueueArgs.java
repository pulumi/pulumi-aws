// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.batch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.batch.inputs.JobQueueComputeEnvironmentOrderArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobQueueJobStateTimeLimitActionArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobQueueTimeoutsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:batch/jobQueue:JobQueue")
public final class JobQueueArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
     * 
     */
    @PolicyResourceProperty(name="computeEnvironmentOrders", flag="unknown_computeEnvironmentOrders")
    private List<JobQueueComputeEnvironmentOrderArgs> value_computeEnvironmentOrders;
    private boolean unknown_computeEnvironmentOrders;
    public List<JobQueueComputeEnvironmentOrderArgs> computeEnvironmentOrders() {
        if (!unknown_computeEnvironmentOrders) return value_computeEnvironmentOrders;
        throw new UndeferrableValueException("Value 'JobQueueArgs.computeEnvironmentOrders' is not present");
    }

    /**
     * (Optional) This parameter is deprecated, please use `compute_environment_order` instead. List of compute environment ARNs mapped to a job queue. The position of the compute environments in the list will dictate the order. When importing a AWS Batch Job Queue, the parameter `compute_environments` will always be used over `compute_environment_order`. Please adjust your HCL accordingly.
     * 
     * @deprecated
     * This parameter will be replaced by `compute_environment_order`.
     * 
     */
    @Deprecated /* This parameter will be replaced by `compute_environment_order`. */
    @PolicyResourceProperty(name="computeEnvironments", flag="unknown_computeEnvironments")
    private List<String> value_computeEnvironments;
    private boolean unknown_computeEnvironments;
    public List<String> computeEnvironments() {
        if (!unknown_computeEnvironments) return value_computeEnvironments;
        throw new UndeferrableValueException("Value 'JobQueueArgs.computeEnvironments' is not present");
    }

    /**
     * The set of job state time limit actions mapped to a job queue. Specifies an action that AWS Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
     * 
     */
    @PolicyResourceProperty(name="jobStateTimeLimitActions", flag="unknown_jobStateTimeLimitActions")
    private List<JobQueueJobStateTimeLimitActionArgs> value_jobStateTimeLimitActions;
    private boolean unknown_jobStateTimeLimitActions;
    public List<JobQueueJobStateTimeLimitActionArgs> jobStateTimeLimitActions() {
        if (!unknown_jobStateTimeLimitActions) return value_jobStateTimeLimitActions;
        throw new UndeferrableValueException("Value 'JobQueueArgs.jobStateTimeLimitActions' is not present");
    }

    /**
     * Specifies the name of the job queue.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'JobQueueArgs.name' is not present");
    }

    /**
     * The priority of the job queue. Job queues with a higher priority
     * are evaluated first when associated with the same compute environment.
     * 
     */
    @PolicyResourceProperty(name="priority", flag="unknown_priority")
    private Integer value_priority;
    private boolean unknown_priority;
    public Integer priority() {
        if (!unknown_priority) return value_priority;
        throw new UndeferrableValueException("Value 'JobQueueArgs.priority' is not present");
    }

    /**
     * The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn&#39;t specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can&#39;t remove the fair share scheduling policy.
     * 
     */
    @PolicyResourceProperty(name="schedulingPolicyArn", flag="unknown_schedulingPolicyArn")
    private String value_schedulingPolicyArn;
    private boolean unknown_schedulingPolicyArn;
    public String schedulingPolicyArn() {
        if (!unknown_schedulingPolicyArn) return value_schedulingPolicyArn;
        throw new UndeferrableValueException("Value 'JobQueueArgs.schedulingPolicyArn' is not present");
    }

    /**
     * The state of the job queue. Must be one of: `ENABLED` or `DISABLED`
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'JobQueueArgs.state' is not present");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'JobQueueArgs.tags' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private JobQueueTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public JobQueueTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'JobQueueArgs.timeouts' is not present");
    }

}
