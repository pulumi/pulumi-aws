// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.outputs.LogDeliveryS3DeliveryConfiguration;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/logDelivery:LogDelivery")
public final class LogDelivery extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) of the delivery.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'LogDelivery.arn' is not present");
    }

    /**
     * The ARN of the delivery destination to use for this delivery.
     * 
     */
    @PolicyResourceProperty(name="deliveryDestinationArn", flag="unknown_deliveryDestinationArn")
    private String value_deliveryDestinationArn;
    private boolean unknown_deliveryDestinationArn;
    public String deliveryDestinationArn() {
        if (!unknown_deliveryDestinationArn) return value_deliveryDestinationArn;
        throw new UndeferrableValueException("Value 'LogDelivery.deliveryDestinationArn' is not present");
    }

    /**
     * The name of the delivery source to use for this delivery.
     * 
     */
    @PolicyResourceProperty(name="deliverySourceName", flag="unknown_deliverySourceName")
    private String value_deliverySourceName;
    private boolean unknown_deliverySourceName;
    public String deliverySourceName() {
        if (!unknown_deliverySourceName) return value_deliverySourceName;
        throw new UndeferrableValueException("Value 'LogDelivery.deliverySourceName' is not present");
    }

    /**
     * The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
     * 
     */
    @PolicyResourceProperty(name="fieldDelimiter", flag="unknown_fieldDelimiter")
    private String value_fieldDelimiter;
    private boolean unknown_fieldDelimiter;
    public String fieldDelimiter() {
        if (!unknown_fieldDelimiter) return value_fieldDelimiter;
        throw new UndeferrableValueException("Value 'LogDelivery.fieldDelimiter' is not present");
    }

    /**
     * The list of record fields to be delivered to the destination, in order.
     * 
     */
    @PolicyResourceProperty(name="recordFields", flag="unknown_recordFields")
    private List<String> value_recordFields;
    private boolean unknown_recordFields;
    public List<String> recordFields() {
        if (!unknown_recordFields) return value_recordFields;
        throw new UndeferrableValueException("Value 'LogDelivery.recordFields' is not present");
    }

    /**
     * Parameters that are valid only when the delivery&#39;s delivery destination is an S3 bucket.
     * 
     */
    @PolicyResourceProperty(name="s3DeliveryConfigurations", flag="unknown_s3DeliveryConfigurations")
    private List<LogDeliveryS3DeliveryConfiguration> value_s3DeliveryConfigurations;
    private boolean unknown_s3DeliveryConfigurations;
    public List<LogDeliveryS3DeliveryConfiguration> s3DeliveryConfigurations() {
        if (!unknown_s3DeliveryConfigurations) return value_s3DeliveryConfigurations;
        throw new UndeferrableValueException("Value 'LogDelivery.s3DeliveryConfigurations' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'LogDelivery.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'LogDelivery.tagsAll' is not present");
    }

}
