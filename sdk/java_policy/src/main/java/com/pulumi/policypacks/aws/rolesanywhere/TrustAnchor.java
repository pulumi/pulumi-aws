// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rolesanywhere;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rolesanywhere.outputs.TrustAnchorNotificationSetting;
import com.pulumi.policypacks.aws.rolesanywhere.outputs.TrustAnchorSource;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rolesanywhere/trustAnchor:TrustAnchor")
public final class TrustAnchor extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of the Trust Anchor
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'TrustAnchor.arn' is not present");
    }

    /**
     * Whether or not the Trust Anchor should be enabled.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'TrustAnchor.enabled' is not present");
    }

    /**
     * The name of the Trust Anchor.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'TrustAnchor.name' is not present");
    }

    @PolicyResourceProperty(name="notificationSettings", flag="unknown_notificationSettings")
    private List<TrustAnchorNotificationSetting> value_notificationSettings;
    private boolean unknown_notificationSettings;
    public List<TrustAnchorNotificationSetting> notificationSettings() {
        if (!unknown_notificationSettings) return value_notificationSettings;
        throw new UndeferrableValueException("Value 'TrustAnchor.notificationSettings' is not present");
    }

    /**
     * The source of trust, documented below
     * 
     */
    @PolicyResourceProperty(name="source", flag="unknown_source")
    private TrustAnchorSource value_source;
    private boolean unknown_source;
    public TrustAnchorSource source() {
        if (!unknown_source) return value_source;
        throw new UndeferrableValueException("Value 'TrustAnchor.source' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TrustAnchor.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'TrustAnchor.tagsAll' is not present");
    }

}
