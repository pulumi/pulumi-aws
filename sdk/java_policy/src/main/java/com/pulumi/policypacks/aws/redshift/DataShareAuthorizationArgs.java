// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshift;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshift/dataShareAuthorization:DataShareAuthorization")
public final class DataShareAuthorizationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether to allow write operations for a datashare.
     * 
     */
    @PolicyResourceProperty(name="allowWrites", flag="unknown_allowWrites")
    private Boolean value_allowWrites;
    private boolean unknown_allowWrites;
    public Boolean allowWrites() {
        if (!unknown_allowWrites) return value_allowWrites;
        throw new UndeferrableValueException("Value 'DataShareAuthorizationArgs.allowWrites' is not present");
    }

    /**
     * Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
     * 
     */
    @PolicyResourceProperty(name="consumerIdentifier", flag="unknown_consumerIdentifier")
    private String value_consumerIdentifier;
    private boolean unknown_consumerIdentifier;
    public String consumerIdentifier() {
        if (!unknown_consumerIdentifier) return value_consumerIdentifier;
        throw new UndeferrableValueException("Value 'DataShareAuthorizationArgs.consumerIdentifier' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="dataShareArn", flag="unknown_dataShareArn")
    private String value_dataShareArn;
    private boolean unknown_dataShareArn;
    public String dataShareArn() {
        if (!unknown_dataShareArn) return value_dataShareArn;
        throw new UndeferrableValueException("Value 'DataShareAuthorizationArgs.dataShareArn' is not present");
    }

}
