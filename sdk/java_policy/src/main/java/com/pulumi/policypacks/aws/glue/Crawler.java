// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerCatalogTarget;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerDeltaTarget;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerDynamodbTarget;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerHudiTarget;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerIcebergTarget;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerJdbcTarget;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerLakeFormationConfiguration;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerLineageConfiguration;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerMongodbTarget;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerRecrawlPolicy;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerS3Target;
import com.pulumi.policypacks.aws.glue.outputs.CrawlerSchemaChangePolicy;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:glue/crawler:Crawler")
public final class Crawler extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the crawler
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Crawler.arn");
    }

    /**
     * List of nested AWS Glue Data Catalog target arguments. See Catalog Target below.
     * 
     */
    private @Nullable UndeferrableValue<List<CrawlerCatalogTarget>> catalogTargets;

    public @Nullable List<CrawlerCatalogTarget> catalogTargets() {
        if (catalogTargets == null) return null;
        return catalogTargets.getValue("Crawler.catalogTargets");
    }

    /**
     * List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> classifiers;

    public @Nullable List<String> classifiers() {
        if (classifiers == null) return null;
        return classifiers.getValue("Crawler.classifiers");
    }

    /**
     * JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
     * 
     */
    private @Nullable UndeferrableValue<String> configuration;

    public @Nullable String configuration() {
        if (configuration == null) return null;
        return configuration.getValue("Crawler.configuration");
    }

    /**
     * Glue database where results are written.
     * 
     */
    private UndeferrableValue<String> databaseName;

    public String databaseName() {
        if (databaseName == null) return null;
        return databaseName.getValue("Crawler.databaseName");
    }

    /**
     * List of nested Delta Lake target arguments. See Delta Target below.
     * 
     */
    private @Nullable UndeferrableValue<List<CrawlerDeltaTarget>> deltaTargets;

    public @Nullable List<CrawlerDeltaTarget> deltaTargets() {
        if (deltaTargets == null) return null;
        return deltaTargets.getValue("Crawler.deltaTargets");
    }

    /**
     * Description of the crawler.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("Crawler.description");
    }

    /**
     * List of nested DynamoDB target arguments. See Dynamodb Target below.
     * 
     */
    private @Nullable UndeferrableValue<List<CrawlerDynamodbTarget>> dynamodbTargets;

    public @Nullable List<CrawlerDynamodbTarget> dynamodbTargets() {
        if (dynamodbTargets == null) return null;
        return dynamodbTargets.getValue("Crawler.dynamodbTargets");
    }

    /**
     * List of nested Hudi target arguments. See Iceberg Target below.
     * 
     */
    private @Nullable UndeferrableValue<List<CrawlerHudiTarget>> hudiTargets;

    public @Nullable List<CrawlerHudiTarget> hudiTargets() {
        if (hudiTargets == null) return null;
        return hudiTargets.getValue("Crawler.hudiTargets");
    }

    /**
     * List of nested Iceberg target arguments. See Iceberg Target below.
     * 
     */
    private @Nullable UndeferrableValue<List<CrawlerIcebergTarget>> icebergTargets;

    public @Nullable List<CrawlerIcebergTarget> icebergTargets() {
        if (icebergTargets == null) return null;
        return icebergTargets.getValue("Crawler.icebergTargets");
    }

    /**
     * List of nested JDBC target arguments. See JDBC Target below.
     * 
     */
    private @Nullable UndeferrableValue<List<CrawlerJdbcTarget>> jdbcTargets;

    public @Nullable List<CrawlerJdbcTarget> jdbcTargets() {
        if (jdbcTargets == null) return null;
        return jdbcTargets.getValue("Crawler.jdbcTargets");
    }

    /**
     * Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
     * 
     */
    private @Nullable UndeferrableValue<CrawlerLakeFormationConfiguration> lakeFormationConfiguration;

    public @Nullable CrawlerLakeFormationConfiguration lakeFormationConfiguration() {
        if (lakeFormationConfiguration == null) return null;
        return lakeFormationConfiguration.getValue("Crawler.lakeFormationConfiguration");
    }

    /**
     * Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
     * 
     */
    private @Nullable UndeferrableValue<CrawlerLineageConfiguration> lineageConfiguration;

    public @Nullable CrawlerLineageConfiguration lineageConfiguration() {
        if (lineageConfiguration == null) return null;
        return lineageConfiguration.getValue("Crawler.lineageConfiguration");
    }

    /**
     * List of nested MongoDB target arguments. See MongoDB Target below.
     * 
     */
    private @Nullable UndeferrableValue<List<CrawlerMongodbTarget>> mongodbTargets;

    public @Nullable List<CrawlerMongodbTarget> mongodbTargets() {
        if (mongodbTargets == null) return null;
        return mongodbTargets.getValue("Crawler.mongodbTargets");
    }

    /**
     * Name of the crawler.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("Crawler.name");
    }

    /**
     * A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
     * 
     */
    private @Nullable UndeferrableValue<CrawlerRecrawlPolicy> recrawlPolicy;

    public @Nullable CrawlerRecrawlPolicy recrawlPolicy() {
        if (recrawlPolicy == null) return null;
        return recrawlPolicy.getValue("Crawler.recrawlPolicy");
    }

    /**
     * The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
     * 
     */
    private UndeferrableValue<String> role;

    public String role() {
        if (role == null) return null;
        return role.getValue("Crawler.role");
    }

    /**
     * List of nested Amazon S3 target arguments. See S3 Target below.
     * 
     */
    private @Nullable UndeferrableValue<List<CrawlerS3Target>> s3Targets;

    public @Nullable List<CrawlerS3Target> s3Targets() {
        if (s3Targets == null) return null;
        return s3Targets.getValue("Crawler.s3Targets");
    }

    /**
     * A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
     * 
     */
    private @Nullable UndeferrableValue<String> schedule;

    public @Nullable String schedule() {
        if (schedule == null) return null;
        return schedule.getValue("Crawler.schedule");
    }

    /**
     * Policy for the crawler&#39;s update and deletion behavior. See Schema Change Policy below.
     * 
     */
    private @Nullable UndeferrableValue<CrawlerSchemaChangePolicy> schemaChangePolicy;

    public @Nullable CrawlerSchemaChangePolicy schemaChangePolicy() {
        if (schemaChangePolicy == null) return null;
        return schemaChangePolicy.getValue("Crawler.schemaChangePolicy");
    }

    /**
     * The name of Security Configuration to be used by the crawler
     * 
     */
    private @Nullable UndeferrableValue<String> securityConfiguration;

    public @Nullable String securityConfiguration() {
        if (securityConfiguration == null) return null;
        return securityConfiguration.getValue("Crawler.securityConfiguration");
    }

    /**
     * The table prefix used for catalog tables that are created.
     * 
     */
    private @Nullable UndeferrableValue<String> tablePrefix;

    public @Nullable String tablePrefix() {
        if (tablePrefix == null) return null;
        return tablePrefix.getValue("Crawler.tablePrefix");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Crawler.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Crawler.tagsAll");
    }

}
