// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.alb.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class ListenerRuleActionAuthenticateOidc {

    /**
     * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> authenticationRequestExtraParams;

    public @Nullable Map<String,String> authenticationRequestExtraParams() {
        if (authenticationRequestExtraParams == null) return null;
        return authenticationRequestExtraParams.getValue("ListenerRuleActionAuthenticateOidc.authenticationRequestExtraParams");
    }

    /**
     * The authorization endpoint of the IdP.
     * 
     */
    private UndeferrableValue<String> authorizationEndpoint;

    public String authorizationEndpoint() {
        if (authorizationEndpoint == null) return null;
        return authorizationEndpoint.getValue("ListenerRuleActionAuthenticateOidc.authorizationEndpoint");
    }

    /**
     * The OAuth 2.0 client identifier.
     * 
     */
    private UndeferrableValue<String> clientId;

    public String clientId() {
        if (clientId == null) return null;
        return clientId.getValue("ListenerRuleActionAuthenticateOidc.clientId");
    }

    /**
     * The OAuth 2.0 client secret.
     * 
     */
    private UndeferrableValue<String> clientSecret;

    public String clientSecret() {
        if (clientSecret == null) return null;
        return clientSecret.getValue("ListenerRuleActionAuthenticateOidc.clientSecret");
    }

    /**
     * The OIDC issuer identifier of the IdP.
     * 
     */
    private UndeferrableValue<String> issuer;

    public String issuer() {
        if (issuer == null) return null;
        return issuer.getValue("ListenerRuleActionAuthenticateOidc.issuer");
    }

    /**
     * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
     * 
     */
    private @Nullable UndeferrableValue<String> onUnauthenticatedRequest;

    public @Nullable String onUnauthenticatedRequest() {
        if (onUnauthenticatedRequest == null) return null;
        return onUnauthenticatedRequest.getValue("ListenerRuleActionAuthenticateOidc.onUnauthenticatedRequest");
    }

    /**
     * The set of user claims to be requested from the IdP.
     * 
     */
    private @Nullable UndeferrableValue<String> scope;

    public @Nullable String scope() {
        if (scope == null) return null;
        return scope.getValue("ListenerRuleActionAuthenticateOidc.scope");
    }

    /**
     * The name of the cookie used to maintain session information.
     * 
     */
    private @Nullable UndeferrableValue<String> sessionCookieName;

    public @Nullable String sessionCookieName() {
        if (sessionCookieName == null) return null;
        return sessionCookieName.getValue("ListenerRuleActionAuthenticateOidc.sessionCookieName");
    }

    /**
     * The maximum duration of the authentication session, in seconds.
     * 
     */
    private @Nullable UndeferrableValue<Integer> sessionTimeout;

    public @Nullable Integer sessionTimeout() {
        if (sessionTimeout == null) return null;
        return sessionTimeout.getValue("ListenerRuleActionAuthenticateOidc.sessionTimeout");
    }

    /**
     * The token endpoint of the IdP.
     * 
     */
    private UndeferrableValue<String> tokenEndpoint;

    public String tokenEndpoint() {
        if (tokenEndpoint == null) return null;
        return tokenEndpoint.getValue("ListenerRuleActionAuthenticateOidc.tokenEndpoint");
    }

    /**
     * The user info endpoint of the IdP.
     * 
     */
    private UndeferrableValue<String> userInfoEndpoint;

    public String userInfoEndpoint() {
        if (userInfoEndpoint == null) return null;
        return userInfoEndpoint.getValue("ListenerRuleActionAuthenticateOidc.userInfoEndpoint");
    }

}
