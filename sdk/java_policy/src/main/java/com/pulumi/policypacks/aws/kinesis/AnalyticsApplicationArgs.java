// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationCloudwatchLoggingOptionsArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationInputsArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationOutputArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationReferenceDataSourcesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:kinesis/analyticsApplication:AnalyticsApplication")
public final class AnalyticsApplicationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The CloudWatch log stream options to monitor application errors.
     * See CloudWatch Logging Options below for more details.
     * 
     */
    private UndeferrableValue<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public AnalyticsApplicationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions() {
        if (cloudwatchLoggingOptions == null) return null;
        return cloudwatchLoggingOptions.getValue("AnalyticsApplicationArgs.cloudwatchLoggingOptions");
    }

    /**
     * SQL Code to transform input data, and generate output.
     * 
     */
    private UndeferrableValue<String> code;

    public String code() {
        if (code == null) return null;
        return code.getValue("AnalyticsApplicationArgs.code");
    }

    /**
     * Description of the application.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("AnalyticsApplicationArgs.description");
    }

    /**
     * Input configuration of the application. See Inputs below for more details.
     * 
     */
    private UndeferrableValue<AnalyticsApplicationInputsArgs> inputs;

    public AnalyticsApplicationInputsArgs inputs() {
        if (inputs == null) return null;
        return inputs.getValue("AnalyticsApplicationArgs.inputs");
    }

    /**
     * Name of the Kinesis Analytics Application.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("AnalyticsApplicationArgs.name");
    }

    /**
     * Output destination configuration of the application. See Outputs below for more details.
     * 
     */
    private UndeferrableValue<List<AnalyticsApplicationOutputArgs>> outputs;

    public List<AnalyticsApplicationOutputArgs> outputs() {
        if (outputs == null) return null;
        return outputs.getValue("AnalyticsApplicationArgs.outputs");
    }

    /**
     * An S3 Reference Data Source for the application.
     * See Reference Data Sources below for more details.
     * 
     */
    private UndeferrableValue<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources;

    public AnalyticsApplicationReferenceDataSourcesArgs referenceDataSources() {
        if (referenceDataSources == null) return null;
        return referenceDataSources.getValue("AnalyticsApplicationArgs.referenceDataSources");
    }

    /**
     * Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `starting_position` must be configured.
     * To modify an application&#39;s starting position, first stop the application by setting `start_application = false`, then update `starting_position` and set `start_application = true`.
     * 
     */
    private UndeferrableValue<Boolean> startApplication;

    public Boolean startApplication() {
        if (startApplication == null) return null;
        return startApplication.getValue("AnalyticsApplicationArgs.startApplication");
    }

    /**
     * Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("AnalyticsApplicationArgs.tags");
    }

}
