// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.imagebuilder;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.imagebuilder.inputs.ImagePipelineImageScanningConfigurationArgs;
import com.pulumi.policypacks.aws.imagebuilder.inputs.ImagePipelineImageTestsConfigurationArgs;
import com.pulumi.policypacks.aws.imagebuilder.inputs.ImagePipelineScheduleArgs;
import com.pulumi.policypacks.aws.imagebuilder.inputs.ImagePipelineWorkflowArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:imagebuilder/imagePipeline:ImagePipeline")
public final class ImagePipelineArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Amazon Resource Name (ARN) of the container recipe.
     * 
     */
    private UndeferrableValue<String> containerRecipeArn;

    public String containerRecipeArn() {
        if (containerRecipeArn == null) return null;
        return containerRecipeArn.getValue("ImagePipelineArgs.containerRecipeArn");
    }

    /**
     * Description of the image pipeline.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ImagePipelineArgs.description");
    }

    /**
     * Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
     * 
     */
    private UndeferrableValue<String> distributionConfigurationArn;

    public String distributionConfigurationArn() {
        if (distributionConfigurationArn == null) return null;
        return distributionConfigurationArn.getValue("ImagePipelineArgs.distributionConfigurationArn");
    }

    /**
     * Whether additional information about the image being created is collected. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> enhancedImageMetadataEnabled;

    public Boolean enhancedImageMetadataEnabled() {
        if (enhancedImageMetadataEnabled == null) return null;
        return enhancedImageMetadataEnabled.getValue("ImagePipelineArgs.enhancedImageMetadataEnabled");
    }

    /**
     * Amazon Resource Name (ARN) of the service-linked role to be used by Image Builder to [execute workflows](https://docs.aws.amazon.com/imagebuilder/latest/userguide/manage-image-workflows.html).
     * 
     */
    private UndeferrableValue<String> executionRole;

    public String executionRole() {
        if (executionRole == null) return null;
        return executionRole.getValue("ImagePipelineArgs.executionRole");
    }

    /**
     * Amazon Resource Name (ARN) of the image recipe.
     * 
     */
    private UndeferrableValue<String> imageRecipeArn;

    public String imageRecipeArn() {
        if (imageRecipeArn == null) return null;
        return imageRecipeArn.getValue("ImagePipelineArgs.imageRecipeArn");
    }

    /**
     * Configuration block with image scanning configuration. Detailed below.
     * 
     */
    private UndeferrableValue<ImagePipelineImageScanningConfigurationArgs> imageScanningConfiguration;

    public ImagePipelineImageScanningConfigurationArgs imageScanningConfiguration() {
        if (imageScanningConfiguration == null) return null;
        return imageScanningConfiguration.getValue("ImagePipelineArgs.imageScanningConfiguration");
    }

    /**
     * Configuration block with image tests configuration. Detailed below.
     * 
     */
    private UndeferrableValue<ImagePipelineImageTestsConfigurationArgs> imageTestsConfiguration;

    public ImagePipelineImageTestsConfigurationArgs imageTestsConfiguration() {
        if (imageTestsConfiguration == null) return null;
        return imageTestsConfiguration.getValue("ImagePipelineArgs.imageTestsConfiguration");
    }

    /**
     * Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
     * 
     */
    private UndeferrableValue<String> infrastructureConfigurationArn;

    public String infrastructureConfigurationArn() {
        if (infrastructureConfigurationArn == null) return null;
        return infrastructureConfigurationArn.getValue("ImagePipelineArgs.infrastructureConfigurationArn");
    }

    /**
     * Name of the image pipeline.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ImagePipelineArgs.name");
    }

    /**
     * Configuration block with schedule settings. Detailed below.
     * 
     */
    private UndeferrableValue<ImagePipelineScheduleArgs> schedule;

    public ImagePipelineScheduleArgs schedule() {
        if (schedule == null) return null;
        return schedule.getValue("ImagePipelineArgs.schedule");
    }

    /**
     * Status of the image pipeline. Valid values are `DISABLED` and `ENABLED`. Defaults to `ENABLED`.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("ImagePipelineArgs.status");
    }

    /**
     * Key-value map of resource tags for the image pipeline. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ImagePipelineArgs.tags");
    }

    /**
     * Configuration block with the workflow configuration. Detailed below.
     * 
     */
    private UndeferrableValue<List<ImagePipelineWorkflowArgs>> workflows;

    public List<ImagePipelineWorkflowArgs> workflows() {
        if (workflows == null) return null;
        return workflows.getValue("ImagePipelineArgs.workflows");
    }

}
