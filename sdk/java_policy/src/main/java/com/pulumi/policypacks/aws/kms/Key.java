// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kms;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:kms/key:Key")
public final class Key extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) of the key.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Key.arn' is not present");
    }

    /**
     * A flag to indicate whether to bypass the key policy lockout safety check.
     * Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.
     * For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section in the _AWS Key Management Service Developer Guide_.
     * The default value is `false`.
     * 
     */
    @PolicyResourceProperty(name="bypassPolicyLockoutSafetyCheck", flag="unknown_bypassPolicyLockoutSafetyCheck")
    private @Nullable Boolean value_bypassPolicyLockoutSafetyCheck;
    private boolean unknown_bypassPolicyLockoutSafetyCheck;
    public @Nullable Boolean bypassPolicyLockoutSafetyCheck() {
        if (!unknown_bypassPolicyLockoutSafetyCheck) return value_bypassPolicyLockoutSafetyCheck;
        throw new UndeferrableValueException("Value 'Key.bypassPolicyLockoutSafetyCheck' is not present");
    }

    /**
     * ID of the KMS [Custom Key Store](https://docs.aws.amazon.com/kms/latest/developerguide/create-cmk-keystore.html) where the key will be stored instead of KMS (eg CloudHSM).
     * 
     */
    @PolicyResourceProperty(name="customKeyStoreId", flag="unknown_customKeyStoreId")
    private @Nullable String value_customKeyStoreId;
    private boolean unknown_customKeyStoreId;
    public @Nullable String customKeyStoreId() {
        if (!unknown_customKeyStoreId) return value_customKeyStoreId;
        throw new UndeferrableValueException("Value 'Key.customKeyStoreId' is not present");
    }

    /**
     * Specifies whether the key contains a symmetric key or an asymmetric key pair and the encryption algorithms or signing algorithms that the key supports.
     * Valid values: `SYMMETRIC_DEFAULT`,  `RSA_2048`, `RSA_3072`, `RSA_4096`, `HMAC_256`, `ECC_NIST_P256`, `ECC_NIST_P384`, `ECC_NIST_P521`, or `ECC_SECG_P256K1`. Defaults to `SYMMETRIC_DEFAULT`. For help with choosing a key spec, see the [AWS KMS Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html).
     * 
     */
    @PolicyResourceProperty(name="customerMasterKeySpec", flag="unknown_customerMasterKeySpec")
    private @Nullable String value_customerMasterKeySpec;
    private boolean unknown_customerMasterKeySpec;
    public @Nullable String customerMasterKeySpec() {
        if (!unknown_customerMasterKeySpec) return value_customerMasterKeySpec;
        throw new UndeferrableValueException("Value 'Key.customerMasterKeySpec' is not present");
    }

    /**
     * The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the KMS key.
     * If you specify a value, it must be between `7` and `30`, inclusive. If you do not specify a value, it defaults to `30`.
     * If the KMS key is a multi-Region primary key with replicas, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately.
     * 
     */
    @PolicyResourceProperty(name="deletionWindowInDays", flag="unknown_deletionWindowInDays")
    private @Nullable Integer value_deletionWindowInDays;
    private boolean unknown_deletionWindowInDays;
    public @Nullable Integer deletionWindowInDays() {
        if (!unknown_deletionWindowInDays) return value_deletionWindowInDays;
        throw new UndeferrableValueException("Value 'Key.deletionWindowInDays' is not present");
    }

    /**
     * The description of the key as viewed in AWS console.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Key.description' is not present");
    }

    /**
     * Specifies whether [key rotation](http://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html) is enabled. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="enableKeyRotation", flag="unknown_enableKeyRotation")
    private @Nullable Boolean value_enableKeyRotation;
    private boolean unknown_enableKeyRotation;
    public @Nullable Boolean enableKeyRotation() {
        if (!unknown_enableKeyRotation) return value_enableKeyRotation;
        throw new UndeferrableValueException("Value 'Key.enableKeyRotation' is not present");
    }

    /**
     * Specifies whether the key is enabled. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="isEnabled", flag="unknown_isEnabled")
    private @Nullable Boolean value_isEnabled;
    private boolean unknown_isEnabled;
    public @Nullable Boolean isEnabled() {
        if (!unknown_isEnabled) return value_isEnabled;
        throw new UndeferrableValueException("Value 'Key.isEnabled' is not present");
    }

    /**
     * The globally unique identifier for the key.
     * 
     */
    @PolicyResourceProperty(name="keyId", flag="unknown_keyId")
    private String value_keyId;
    private boolean unknown_keyId;
    public String keyId() {
        if (!unknown_keyId) return value_keyId;
        throw new UndeferrableValueException("Value 'Key.keyId' is not present");
    }

    /**
     * Specifies the intended use of the key. Valid values: `ENCRYPT_DECRYPT`, `SIGN_VERIFY`, or `GENERATE_VERIFY_MAC`.
     * Defaults to `ENCRYPT_DECRYPT`.
     * 
     */
    @PolicyResourceProperty(name="keyUsage", flag="unknown_keyUsage")
    private @Nullable String value_keyUsage;
    private boolean unknown_keyUsage;
    public @Nullable String keyUsage() {
        if (!unknown_keyUsage) return value_keyUsage;
        throw new UndeferrableValueException("Value 'Key.keyUsage' is not present");
    }

    /**
     * Indicates whether the KMS key is a multi-Region (`true`) or regional (`false`) key. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="multiRegion", flag="unknown_multiRegion")
    private Boolean value_multiRegion;
    private boolean unknown_multiRegion;
    public Boolean multiRegion() {
        if (!unknown_multiRegion) return value_multiRegion;
        throw new UndeferrableValueException("Value 'Key.multiRegion' is not present");
    }

    /**
     * A valid policy JSON document. Although this is a key policy, not an IAM policy, an `aws.iam.getPolicyDocument`, in the form that designates a principal, can be used.
     * 
     * &gt; **NOTE:** Note: All KMS keys must have a key policy. If a key policy is not specified, AWS gives the KMS key a [default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default) that gives all principals in the owning account unlimited access to all KMS operations for the key. This default key policy effectively delegates all access control to IAM policies and KMS grants.
     * 
     */
    @PolicyResourceProperty(name="policy", flag="unknown_policy")
    private String value_policy;
    private boolean unknown_policy;
    public String policy() {
        if (!unknown_policy) return value_policy;
        throw new UndeferrableValueException("Value 'Key.policy' is not present");
    }

    /**
     * Custom period of time between each rotation date. Must be a number between 90 and 2560 (inclusive).
     * 
     */
    @PolicyResourceProperty(name="rotationPeriodInDays", flag="unknown_rotationPeriodInDays")
    private Integer value_rotationPeriodInDays;
    private boolean unknown_rotationPeriodInDays;
    public Integer rotationPeriodInDays() {
        if (!unknown_rotationPeriodInDays) return value_rotationPeriodInDays;
        throw new UndeferrableValueException("Value 'Key.rotationPeriodInDays' is not present");
    }

    /**
     * A map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Key.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Key.tagsAll' is not present");
    }

    /**
     * Identifies the external key that serves as key material for the KMS key in an external key store.
     * 
     */
    @PolicyResourceProperty(name="xksKeyId", flag="unknown_xksKeyId")
    private @Nullable String value_xksKeyId;
    private boolean unknown_xksKeyId;
    public @Nullable String xksKeyId() {
        if (!unknown_xksKeyId) return value_xksKeyId;
        throw new UndeferrableValueException("Value 'Key.xksKeyId' is not present");
    }

}
