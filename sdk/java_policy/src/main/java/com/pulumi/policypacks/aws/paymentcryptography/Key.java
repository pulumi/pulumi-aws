// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.paymentcryptography;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.paymentcryptography.outputs.KeyKeyAttributes;
import com.pulumi.policypacks.aws.paymentcryptography.outputs.KeyTimeouts;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:paymentcryptography/key:Key")
public final class Key extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the key.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Key.arn' is not present");
    }

    @PolicyResourceProperty(name="deletionWindowInDays", flag="unknown_deletionWindowInDays")
    private Integer value_deletionWindowInDays;
    private boolean unknown_deletionWindowInDays;
    public Integer deletionWindowInDays() {
        if (!unknown_deletionWindowInDays) return value_deletionWindowInDays;
        throw new UndeferrableValueException("Value 'Key.deletionWindowInDays' is not present");
    }

    /**
     * Whether to enable the key.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'Key.enabled' is not present");
    }

    /**
     * Whether the key is exportable from the service.
     * 
     */
    @PolicyResourceProperty(name="exportable", flag="unknown_exportable")
    private Boolean value_exportable;
    private boolean unknown_exportable;
    public Boolean exportable() {
        if (!unknown_exportable) return value_exportable;
        throw new UndeferrableValueException("Value 'Key.exportable' is not present");
    }

    /**
     * Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="keyAttributes", flag="unknown_keyAttributes")
    private @Nullable KeyKeyAttributes value_keyAttributes;
    private boolean unknown_keyAttributes;
    public @Nullable KeyKeyAttributes keyAttributes() {
        if (!unknown_keyAttributes) return value_keyAttributes;
        throw new UndeferrableValueException("Value 'Key.keyAttributes' is not present");
    }

    /**
     * Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
     * 
     */
    @PolicyResourceProperty(name="keyCheckValue", flag="unknown_keyCheckValue")
    private String value_keyCheckValue;
    private boolean unknown_keyCheckValue;
    public String keyCheckValue() {
        if (!unknown_keyCheckValue) return value_keyCheckValue;
        throw new UndeferrableValueException("Value 'Key.keyCheckValue' is not present");
    }

    /**
     * Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
     * 
     */
    @PolicyResourceProperty(name="keyCheckValueAlgorithm", flag="unknown_keyCheckValueAlgorithm")
    private String value_keyCheckValueAlgorithm;
    private boolean unknown_keyCheckValueAlgorithm;
    public String keyCheckValueAlgorithm() {
        if (!unknown_keyCheckValueAlgorithm) return value_keyCheckValueAlgorithm;
        throw new UndeferrableValueException("Value 'Key.keyCheckValueAlgorithm' is not present");
    }

    /**
     * Source of the key material.
     * 
     */
    @PolicyResourceProperty(name="keyOrigin", flag="unknown_keyOrigin")
    private String value_keyOrigin;
    private boolean unknown_keyOrigin;
    public String keyOrigin() {
        if (!unknown_keyOrigin) return value_keyOrigin;
        throw new UndeferrableValueException("Value 'Key.keyOrigin' is not present");
    }

    /**
     * State of key that is being created or deleted.
     * 
     */
    @PolicyResourceProperty(name="keyState", flag="unknown_keyState")
    private String value_keyState;
    private boolean unknown_keyState;
    public String keyState() {
        if (!unknown_keyState) return value_keyState;
        throw new UndeferrableValueException("Value 'Key.keyState' is not present");
    }

    /**
     * Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Key.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Key.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable KeyTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable KeyTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'Key.timeouts' is not present");
    }

}
