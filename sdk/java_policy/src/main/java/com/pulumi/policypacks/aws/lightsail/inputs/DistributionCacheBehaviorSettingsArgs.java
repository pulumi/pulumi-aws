// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.lightsail.inputs.DistributionCacheBehaviorSettingsForwardedCookiesArgs;
import com.pulumi.policypacks.aws.lightsail.inputs.DistributionCacheBehaviorSettingsForwardedHeadersArgs;
import com.pulumi.policypacks.aws.lightsail.inputs.DistributionCacheBehaviorSettingsForwardedQueryStringsArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class DistributionCacheBehaviorSettingsArgs {

    /**
     * The HTTP methods that are processed and forwarded to the distribution&#39;s origin.
     * 
     */
    private UndeferrableValue<String> allowedHttpMethods;

    public String allowedHttpMethods() {
        if (allowedHttpMethods == null) return null;
        return allowedHttpMethods.getValue("DistributionCacheBehaviorSettingsArgs.allowedHttpMethods");
    }

    /**
     * The HTTP method responses that are cached by your distribution.
     * 
     */
    private UndeferrableValue<String> cachedHttpMethods;

    public String cachedHttpMethods() {
        if (cachedHttpMethods == null) return null;
        return cachedHttpMethods.getValue("DistributionCacheBehaviorSettingsArgs.cachedHttpMethods");
    }

    /**
     * The default amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the content has been updated.
     * 
     */
    private UndeferrableValue<Integer> defaultTtl;

    public Integer defaultTtl() {
        if (defaultTtl == null) return null;
        return defaultTtl.getValue("DistributionCacheBehaviorSettingsArgs.defaultTtl");
    }

    /**
     * An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. Detailed below
     * 
     */
    private UndeferrableValue<DistributionCacheBehaviorSettingsForwardedCookiesArgs> forwardedCookies;

    public DistributionCacheBehaviorSettingsForwardedCookiesArgs forwardedCookies() {
        if (forwardedCookies == null) return null;
        return forwardedCookies.getValue("DistributionCacheBehaviorSettingsArgs.forwardedCookies");
    }

    /**
     * An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. Detailed below
     * 
     */
    private UndeferrableValue<DistributionCacheBehaviorSettingsForwardedHeadersArgs> forwardedHeaders;

    public DistributionCacheBehaviorSettingsForwardedHeadersArgs forwardedHeaders() {
        if (forwardedHeaders == null) return null;
        return forwardedHeaders.getValue("DistributionCacheBehaviorSettingsArgs.forwardedHeaders");
    }

    /**
     * An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. Detailed below
     * 
     */
    private UndeferrableValue<DistributionCacheBehaviorSettingsForwardedQueryStringsArgs> forwardedQueryStrings;

    public DistributionCacheBehaviorSettingsForwardedQueryStringsArgs forwardedQueryStrings() {
        if (forwardedQueryStrings == null) return null;
        return forwardedQueryStrings.getValue("DistributionCacheBehaviorSettingsArgs.forwardedQueryStrings");
    }

    /**
     * The maximum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    private UndeferrableValue<Integer> maximumTtl;

    public Integer maximumTtl() {
        if (maximumTtl == null) return null;
        return maximumTtl.getValue("DistributionCacheBehaviorSettingsArgs.maximumTtl");
    }

    /**
     * The minimum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    private UndeferrableValue<Integer> minimumTtl;

    public Integer minimumTtl() {
        if (minimumTtl == null) return null;
        return minimumTtl.getValue("DistributionCacheBehaviorSettingsArgs.minimumTtl");
    }

}
