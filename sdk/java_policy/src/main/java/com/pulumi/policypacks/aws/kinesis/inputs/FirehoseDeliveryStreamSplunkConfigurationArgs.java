// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationSecretsManagerConfigurationArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamSplunkConfigurationArgs {

    /**
     * Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
     * 
     */
    private UndeferrableValue<Integer> bufferingInterval;

    public Integer bufferingInterval() {
        if (bufferingInterval == null) return null;
        return bufferingInterval.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.bufferingInterval");
    }

    /**
     * Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
     * 
     */
    private UndeferrableValue<Integer> bufferingSize;

    public Integer bufferingSize() {
        if (bufferingSize == null) return null;
        return bufferingSize.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.bufferingSize");
    }

    /**
     * The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions() {
        if (cloudwatchLoggingOptions == null) return null;
        return cloudwatchLoggingOptions.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.cloudwatchLoggingOptions");
    }

    /**
     * The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
     * 
     */
    private UndeferrableValue<Integer> hecAcknowledgmentTimeout;

    public Integer hecAcknowledgmentTimeout() {
        if (hecAcknowledgmentTimeout == null) return null;
        return hecAcknowledgmentTimeout.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.hecAcknowledgmentTimeout");
    }

    /**
     * The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
     * 
     */
    private UndeferrableValue<String> hecEndpoint;

    public String hecEndpoint() {
        if (hecEndpoint == null) return null;
        return hecEndpoint.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.hecEndpoint");
    }

    /**
     * The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
     * 
     */
    private UndeferrableValue<String> hecEndpointType;

    public String hecEndpointType() {
        if (hecEndpointType == null) return null;
        return hecEndpointType.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.hecEndpointType");
    }

    /**
     * The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private UndeferrableValue<String> hecToken;

    public String hecToken() {
        if (hecToken == null) return null;
        return hecToken.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.hecToken");
    }

    /**
     * The data processing configuration.  See `processing_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs> processingConfiguration;

    public FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs processingConfiguration() {
        if (processingConfiguration == null) return null;
        return processingConfiguration.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.processingConfiguration");
    }

    /**
     * After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
     * 
     */
    private UndeferrableValue<Integer> retryDuration;

    public Integer retryDuration() {
        if (retryDuration == null) return null;
        return retryDuration.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.retryDuration");
    }

    /**
     * Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
     * `secrets_manager_configuration` - (Optional) The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `hec_token` is not provided.
     * 
     */
    private UndeferrableValue<String> s3BackupMode;

    public String s3BackupMode() {
        if (s3BackupMode == null) return null;
        return s3BackupMode.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.s3BackupMode");
    }

    /**
     * The S3 Configuration. See `s3_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs> s3Configuration;

    public FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs s3Configuration() {
        if (s3Configuration == null) return null;
        return s3Configuration.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.s3Configuration");
    }

    private UndeferrableValue<FirehoseDeliveryStreamSplunkConfigurationSecretsManagerConfigurationArgs> secretsManagerConfiguration;

    public FirehoseDeliveryStreamSplunkConfigurationSecretsManagerConfigurationArgs secretsManagerConfiguration() {
        if (secretsManagerConfiguration == null) return null;
        return secretsManagerConfiguration.getValue("FirehoseDeliveryStreamSplunkConfigurationArgs.secretsManagerConfiguration");
    }

}
