// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.mq;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.mq.inputs.BrokerConfigurationArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerEncryptionOptionsArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerLdapServerMetadataArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerLogsArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerMaintenanceWindowStartTimeArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerUserArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:mq/broker:Broker")
public final class BrokerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="applyImmediately", flag="unknown_applyImmediately")
    private Boolean value_applyImmediately;
    private boolean unknown_applyImmediately;
    public Boolean applyImmediately() {
        if (!unknown_applyImmediately) return value_applyImmediately;
        throw new UndeferrableValueException("Value 'BrokerArgs.applyImmediately' is not present");
    }

    /**
     * Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engine_type` `RabbitMQ`.
     * 
     */
    @PolicyResourceProperty(name="authenticationStrategy", flag="unknown_authenticationStrategy")
    private String value_authenticationStrategy;
    private boolean unknown_authenticationStrategy;
    public String authenticationStrategy() {
        if (!unknown_authenticationStrategy) return value_authenticationStrategy;
        throw new UndeferrableValueException("Value 'BrokerArgs.authenticationStrategy' is not present");
    }

    /**
     * Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
     * 
     */
    @PolicyResourceProperty(name="autoMinorVersionUpgrade", flag="unknown_autoMinorVersionUpgrade")
    private Boolean value_autoMinorVersionUpgrade;
    private boolean unknown_autoMinorVersionUpgrade;
    public Boolean autoMinorVersionUpgrade() {
        if (!unknown_autoMinorVersionUpgrade) return value_autoMinorVersionUpgrade;
        throw new UndeferrableValueException("Value 'BrokerArgs.autoMinorVersionUpgrade' is not present");
    }

    /**
     * Name of the broker.
     * 
     */
    @PolicyResourceProperty(name="brokerName", flag="unknown_brokerName")
    private String value_brokerName;
    private boolean unknown_brokerName;
    public String brokerName() {
        if (!unknown_brokerName) return value_brokerName;
        throw new UndeferrableValueException("Value 'BrokerArgs.brokerName' is not present");
    }

    /**
     * Configuration block for broker configuration. Applies to `engine_type` of `ActiveMQ` and `RabbitMQ` only. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="configuration", flag="unknown_configuration")
    private BrokerConfigurationArgs value_configuration;
    private boolean unknown_configuration;
    public BrokerConfigurationArgs configuration() {
        if (!unknown_configuration) return value_configuration;
        throw new UndeferrableValueException("Value 'BrokerArgs.configuration' is not present");
    }

    /**
     * Defines whether this broker is a part of a data replication pair. Valid values are `CRDR` and `NONE`.
     * 
     */
    @PolicyResourceProperty(name="dataReplicationMode", flag="unknown_dataReplicationMode")
    private String value_dataReplicationMode;
    private boolean unknown_dataReplicationMode;
    public String dataReplicationMode() {
        if (!unknown_dataReplicationMode) return value_dataReplicationMode;
        throw new UndeferrableValueException("Value 'BrokerArgs.dataReplicationMode' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when `data_replication_mode` is `CRDR`.
     * 
     */
    @PolicyResourceProperty(name="dataReplicationPrimaryBrokerArn", flag="unknown_dataReplicationPrimaryBrokerArn")
    private String value_dataReplicationPrimaryBrokerArn;
    private boolean unknown_dataReplicationPrimaryBrokerArn;
    public String dataReplicationPrimaryBrokerArn() {
        if (!unknown_dataReplicationPrimaryBrokerArn) return value_dataReplicationPrimaryBrokerArn;
        throw new UndeferrableValueException("Value 'BrokerArgs.dataReplicationPrimaryBrokerArn' is not present");
    }

    /**
     * Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
     * 
     */
    @PolicyResourceProperty(name="deploymentMode", flag="unknown_deploymentMode")
    private String value_deploymentMode;
    private boolean unknown_deploymentMode;
    public String deploymentMode() {
        if (!unknown_deploymentMode) return value_deploymentMode;
        throw new UndeferrableValueException("Value 'BrokerArgs.deploymentMode' is not present");
    }

    /**
     * Configuration block containing encryption options. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="encryptionOptions", flag="unknown_encryptionOptions")
    private BrokerEncryptionOptionsArgs value_encryptionOptions;
    private boolean unknown_encryptionOptions;
    public BrokerEncryptionOptionsArgs encryptionOptions() {
        if (!unknown_encryptionOptions) return value_encryptionOptions;
        throw new UndeferrableValueException("Value 'BrokerArgs.encryptionOptions' is not present");
    }

    /**
     * Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
     * 
     */
    @PolicyResourceProperty(name="engineType", flag="unknown_engineType")
    private String value_engineType;
    private boolean unknown_engineType;
    public String engineType() {
        if (!unknown_engineType) return value_engineType;
        throw new UndeferrableValueException("Value 'BrokerArgs.engineType' is not present");
    }

    /**
     * Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.17.6`.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'BrokerArgs.engineVersion' is not present");
    }

    /**
     * Broker&#39;s instance type. For example, `mq.t3.micro`, `mq.m5.large`.
     * 
     */
    @PolicyResourceProperty(name="hostInstanceType", flag="unknown_hostInstanceType")
    private String value_hostInstanceType;
    private boolean unknown_hostInstanceType;
    public String hostInstanceType() {
        if (!unknown_hostInstanceType) return value_hostInstanceType;
        throw new UndeferrableValueException("Value 'BrokerArgs.hostInstanceType' is not present");
    }

    /**
     * Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engine_type` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
     * 
     */
    @PolicyResourceProperty(name="ldapServerMetadata", flag="unknown_ldapServerMetadata")
    private BrokerLdapServerMetadataArgs value_ldapServerMetadata;
    private boolean unknown_ldapServerMetadata;
    public BrokerLdapServerMetadataArgs ldapServerMetadata() {
        if (!unknown_ldapServerMetadata) return value_ldapServerMetadata;
        throw new UndeferrableValueException("Value 'BrokerArgs.ldapServerMetadata' is not present");
    }

    /**
     * Configuration block for the logging configuration of the broker. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="logs", flag="unknown_logs")
    private BrokerLogsArgs value_logs;
    private boolean unknown_logs;
    public BrokerLogsArgs logs() {
        if (!unknown_logs) return value_logs;
        throw new UndeferrableValueException("Value 'BrokerArgs.logs' is not present");
    }

    /**
     * Configuration block for the maintenance window start time. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="maintenanceWindowStartTime", flag="unknown_maintenanceWindowStartTime")
    private BrokerMaintenanceWindowStartTimeArgs value_maintenanceWindowStartTime;
    private boolean unknown_maintenanceWindowStartTime;
    public BrokerMaintenanceWindowStartTimeArgs maintenanceWindowStartTime() {
        if (!unknown_maintenanceWindowStartTime) return value_maintenanceWindowStartTime;
        throw new UndeferrableValueException("Value 'BrokerArgs.maintenanceWindowStartTime' is not present");
    }

    /**
     * Whether to enable connections from applications outside of the VPC that hosts the broker&#39;s subnets.
     * 
     */
    @PolicyResourceProperty(name="publiclyAccessible", flag="unknown_publiclyAccessible")
    private Boolean value_publiclyAccessible;
    private boolean unknown_publiclyAccessible;
    public Boolean publiclyAccessible() {
        if (!unknown_publiclyAccessible) return value_publiclyAccessible;
        throw new UndeferrableValueException("Value 'BrokerArgs.publiclyAccessible' is not present");
    }

    /**
     * List of security group IDs assigned to the broker.
     * 
     */
    @PolicyResourceProperty(name="securityGroups", flag="unknown_securityGroups")
    private List<String> value_securityGroups;
    private boolean unknown_securityGroups;
    public List<String> securityGroups() {
        if (!unknown_securityGroups) return value_securityGroups;
        throw new UndeferrableValueException("Value 'BrokerArgs.securityGroups' is not present");
    }

    /**
     * Storage type of the broker. For `engine_type` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engine_type` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
     * 
     */
    @PolicyResourceProperty(name="storageType", flag="unknown_storageType")
    private String value_storageType;
    private boolean unknown_storageType;
    public String storageType() {
        if (!unknown_storageType) return value_storageType;
        throw new UndeferrableValueException("Value 'BrokerArgs.storageType' is not present");
    }

    /**
     * List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
     * 
     */
    @PolicyResourceProperty(name="subnetIds", flag="unknown_subnetIds")
    private List<String> value_subnetIds;
    private boolean unknown_subnetIds;
    public List<String> subnetIds() {
        if (!unknown_subnetIds) return value_subnetIds;
        throw new UndeferrableValueException("Value 'BrokerArgs.subnetIds' is not present");
    }

    /**
     * Map of tags to assign to the broker. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'BrokerArgs.tags' is not present");
    }

    /**
     * Configuration block for broker users. For `engine_type` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="users", flag="unknown_users")
    private List<BrokerUserArgs> value_users;
    private boolean unknown_users;
    public List<BrokerUserArgs> users() {
        if (!unknown_users) return value_users;
        throw new UndeferrableValueException("Value 'BrokerArgs.users' is not present");
    }

}
