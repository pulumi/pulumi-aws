// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.mq;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.mq.inputs.BrokerConfigurationArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerEncryptionOptionsArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerLdapServerMetadataArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerLogsArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerMaintenanceWindowStartTimeArgs;
import com.pulumi.policypacks.aws.mq.inputs.BrokerUserArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:mq/broker:Broker")
public final class BrokerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> applyImmediately;

    public Boolean applyImmediately() {
        if (applyImmediately == null) return null;
        return applyImmediately.getValue("BrokerArgs.applyImmediately");
    }

    /**
     * Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engine_type` `RabbitMQ`.
     * 
     */
    private UndeferrableValue<String> authenticationStrategy;

    public String authenticationStrategy() {
        if (authenticationStrategy == null) return null;
        return authenticationStrategy.getValue("BrokerArgs.authenticationStrategy");
    }

    /**
     * Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
     * 
     */
    private UndeferrableValue<Boolean> autoMinorVersionUpgrade;

    public Boolean autoMinorVersionUpgrade() {
        if (autoMinorVersionUpgrade == null) return null;
        return autoMinorVersionUpgrade.getValue("BrokerArgs.autoMinorVersionUpgrade");
    }

    /**
     * Name of the broker.
     * 
     */
    private UndeferrableValue<String> brokerName;

    public String brokerName() {
        if (brokerName == null) return null;
        return brokerName.getValue("BrokerArgs.brokerName");
    }

    /**
     * Configuration block for broker configuration. Applies to `engine_type` of `ActiveMQ` and `RabbitMQ` only. Detailed below.
     * 
     */
    private UndeferrableValue<BrokerConfigurationArgs> configuration;

    public BrokerConfigurationArgs configuration() {
        if (configuration == null) return null;
        return configuration.getValue("BrokerArgs.configuration");
    }

    /**
     * Defines whether this broker is a part of a data replication pair. Valid values are `CRDR` and `NONE`.
     * 
     */
    private UndeferrableValue<String> dataReplicationMode;

    public String dataReplicationMode() {
        if (dataReplicationMode == null) return null;
        return dataReplicationMode.getValue("BrokerArgs.dataReplicationMode");
    }

    /**
     * The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when `data_replication_mode` is `CRDR`.
     * 
     */
    private UndeferrableValue<String> dataReplicationPrimaryBrokerArn;

    public String dataReplicationPrimaryBrokerArn() {
        if (dataReplicationPrimaryBrokerArn == null) return null;
        return dataReplicationPrimaryBrokerArn.getValue("BrokerArgs.dataReplicationPrimaryBrokerArn");
    }

    /**
     * Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
     * 
     */
    private UndeferrableValue<String> deploymentMode;

    public String deploymentMode() {
        if (deploymentMode == null) return null;
        return deploymentMode.getValue("BrokerArgs.deploymentMode");
    }

    /**
     * Configuration block containing encryption options. Detailed below.
     * 
     */
    private UndeferrableValue<BrokerEncryptionOptionsArgs> encryptionOptions;

    public BrokerEncryptionOptionsArgs encryptionOptions() {
        if (encryptionOptions == null) return null;
        return encryptionOptions.getValue("BrokerArgs.encryptionOptions");
    }

    /**
     * Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
     * 
     */
    private UndeferrableValue<String> engineType;

    public String engineType() {
        if (engineType == null) return null;
        return engineType.getValue("BrokerArgs.engineType");
    }

    /**
     * Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.17.6`.
     * 
     */
    private UndeferrableValue<String> engineVersion;

    public String engineVersion() {
        if (engineVersion == null) return null;
        return engineVersion.getValue("BrokerArgs.engineVersion");
    }

    /**
     * Broker&#39;s instance type. For example, `mq.t3.micro`, `mq.m5.large`.
     * 
     */
    private UndeferrableValue<String> hostInstanceType;

    public String hostInstanceType() {
        if (hostInstanceType == null) return null;
        return hostInstanceType.getValue("BrokerArgs.hostInstanceType");
    }

    /**
     * Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engine_type` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
     * 
     */
    private UndeferrableValue<BrokerLdapServerMetadataArgs> ldapServerMetadata;

    public BrokerLdapServerMetadataArgs ldapServerMetadata() {
        if (ldapServerMetadata == null) return null;
        return ldapServerMetadata.getValue("BrokerArgs.ldapServerMetadata");
    }

    /**
     * Configuration block for the logging configuration of the broker. Detailed below.
     * 
     */
    private UndeferrableValue<BrokerLogsArgs> logs;

    public BrokerLogsArgs logs() {
        if (logs == null) return null;
        return logs.getValue("BrokerArgs.logs");
    }

    /**
     * Configuration block for the maintenance window start time. Detailed below.
     * 
     */
    private UndeferrableValue<BrokerMaintenanceWindowStartTimeArgs> maintenanceWindowStartTime;

    public BrokerMaintenanceWindowStartTimeArgs maintenanceWindowStartTime() {
        if (maintenanceWindowStartTime == null) return null;
        return maintenanceWindowStartTime.getValue("BrokerArgs.maintenanceWindowStartTime");
    }

    /**
     * Whether to enable connections from applications outside of the VPC that hosts the broker&#39;s subnets.
     * 
     */
    private UndeferrableValue<Boolean> publiclyAccessible;

    public Boolean publiclyAccessible() {
        if (publiclyAccessible == null) return null;
        return publiclyAccessible.getValue("BrokerArgs.publiclyAccessible");
    }

    /**
     * List of security group IDs assigned to the broker.
     * 
     */
    private UndeferrableValue<List<String>> securityGroups;

    public List<String> securityGroups() {
        if (securityGroups == null) return null;
        return securityGroups.getValue("BrokerArgs.securityGroups");
    }

    /**
     * Storage type of the broker. For `engine_type` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engine_type` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
     * 
     */
    private UndeferrableValue<String> storageType;

    public String storageType() {
        if (storageType == null) return null;
        return storageType.getValue("BrokerArgs.storageType");
    }

    /**
     * List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("BrokerArgs.subnetIds");
    }

    /**
     * Map of tags to assign to the broker. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("BrokerArgs.tags");
    }

    /**
     * Configuration block for broker users. For `engine_type` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<List<BrokerUserArgs>> users;

    public List<BrokerUserArgs> users() {
        if (users == null) return null;
        return users.getValue("BrokerArgs.users");
    }

}
