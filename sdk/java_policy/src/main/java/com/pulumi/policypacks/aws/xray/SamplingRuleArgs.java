// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.xray;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:xray/samplingRule:SamplingRule")
public final class SamplingRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Matches attributes derived from the request.
     * 
     */
    private UndeferrableValue<Map<String,String>> attributes;

    public Map<String,String> attributes() {
        if (attributes == null) return null;
        return attributes.getValue("SamplingRuleArgs.attributes");
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    private UndeferrableValue<Double> fixedRate;

    public Double fixedRate() {
        if (fixedRate == null) return null;
        return fixedRate.getValue("SamplingRuleArgs.fixedRate");
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    private UndeferrableValue<String> host;

    public String host() {
        if (host == null) return null;
        return host.getValue("SamplingRuleArgs.host");
    }

    /**
     * Matches the HTTP method of a request.
     * 
     */
    private UndeferrableValue<String> httpMethod;

    public String httpMethod() {
        if (httpMethod == null) return null;
        return httpMethod.getValue("SamplingRuleArgs.httpMethod");
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    private UndeferrableValue<Integer> priority;

    public Integer priority() {
        if (priority == null) return null;
        return priority.getValue("SamplingRuleArgs.priority");
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    private UndeferrableValue<Integer> reservoirSize;

    public Integer reservoirSize() {
        if (reservoirSize == null) return null;
        return reservoirSize.getValue("SamplingRuleArgs.reservoirSize");
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    private UndeferrableValue<String> resourceArn;

    public String resourceArn() {
        if (resourceArn == null) return null;
        return resourceArn.getValue("SamplingRuleArgs.resourceArn");
    }

    /**
     * The name of the sampling rule.
     * 
     */
    private UndeferrableValue<String> ruleName;

    public String ruleName() {
        if (ruleName == null) return null;
        return ruleName.getValue("SamplingRuleArgs.ruleName");
    }

    /**
     * Matches the `name` that the service uses to identify itself in segments.
     * 
     */
    private UndeferrableValue<String> serviceName;

    public String serviceName() {
        if (serviceName == null) return null;
        return serviceName.getValue("SamplingRuleArgs.serviceName");
    }

    /**
     * Matches the `origin` that the service uses to identify its type in segments.
     * 
     */
    private UndeferrableValue<String> serviceType;

    public String serviceType() {
        if (serviceType == null) return null;
        return serviceType.getValue("SamplingRuleArgs.serviceType");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("SamplingRuleArgs.tags");
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    private UndeferrableValue<String> urlPath;

    public String urlPath() {
        if (urlPath == null) return null;
        return urlPath.getValue("SamplingRuleArgs.urlPath");
    }

    /**
     * The version of the sampling rule format (`1` )
     * 
     */
    private UndeferrableValue<Integer> version;

    public Integer version() {
        if (version == null) return null;
        return version.getValue("SamplingRuleArgs.version");
    }

}
