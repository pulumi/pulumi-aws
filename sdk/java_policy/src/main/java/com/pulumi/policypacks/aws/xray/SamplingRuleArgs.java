// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.xray;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:xray/samplingRule:SamplingRule")
public final class SamplingRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Matches attributes derived from the request.
     * 
     */
    @PolicyResourceProperty(name="attributes", flag="unknown_attributes")
    private Map<String,String> value_attributes;
    private boolean unknown_attributes;
    public Map<String,String> attributes() {
        if (!unknown_attributes) return value_attributes;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.attributes' is not present");
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    @PolicyResourceProperty(name="fixedRate", flag="unknown_fixedRate")
    private Double value_fixedRate;
    private boolean unknown_fixedRate;
    public Double fixedRate() {
        if (!unknown_fixedRate) return value_fixedRate;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.fixedRate' is not present");
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    @PolicyResourceProperty(name="host", flag="unknown_host")
    private String value_host;
    private boolean unknown_host;
    public String host() {
        if (!unknown_host) return value_host;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.host' is not present");
    }

    /**
     * Matches the HTTP method of a request.
     * 
     */
    @PolicyResourceProperty(name="httpMethod", flag="unknown_httpMethod")
    private String value_httpMethod;
    private boolean unknown_httpMethod;
    public String httpMethod() {
        if (!unknown_httpMethod) return value_httpMethod;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.httpMethod' is not present");
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    @PolicyResourceProperty(name="priority", flag="unknown_priority")
    private Integer value_priority;
    private boolean unknown_priority;
    public Integer priority() {
        if (!unknown_priority) return value_priority;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.priority' is not present");
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    @PolicyResourceProperty(name="reservoirSize", flag="unknown_reservoirSize")
    private Integer value_reservoirSize;
    private boolean unknown_reservoirSize;
    public Integer reservoirSize() {
        if (!unknown_reservoirSize) return value_reservoirSize;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.reservoirSize' is not present");
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    @PolicyResourceProperty(name="resourceArn", flag="unknown_resourceArn")
    private String value_resourceArn;
    private boolean unknown_resourceArn;
    public String resourceArn() {
        if (!unknown_resourceArn) return value_resourceArn;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.resourceArn' is not present");
    }

    /**
     * The name of the sampling rule.
     * 
     */
    @PolicyResourceProperty(name="ruleName", flag="unknown_ruleName")
    private String value_ruleName;
    private boolean unknown_ruleName;
    public String ruleName() {
        if (!unknown_ruleName) return value_ruleName;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.ruleName' is not present");
    }

    /**
     * Matches the `name` that the service uses to identify itself in segments.
     * 
     */
    @PolicyResourceProperty(name="serviceName", flag="unknown_serviceName")
    private String value_serviceName;
    private boolean unknown_serviceName;
    public String serviceName() {
        if (!unknown_serviceName) return value_serviceName;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.serviceName' is not present");
    }

    /**
     * Matches the `origin` that the service uses to identify its type in segments.
     * 
     */
    @PolicyResourceProperty(name="serviceType", flag="unknown_serviceType")
    private String value_serviceType;
    private boolean unknown_serviceType;
    public String serviceType() {
        if (!unknown_serviceType) return value_serviceType;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.serviceType' is not present");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.tags' is not present");
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    @PolicyResourceProperty(name="urlPath", flag="unknown_urlPath")
    private String value_urlPath;
    private boolean unknown_urlPath;
    public String urlPath() {
        if (!unknown_urlPath) return value_urlPath;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.urlPath' is not present");
    }

    /**
     * The version of the sampling rule format (`1` )
     * 
     */
    @PolicyResourceProperty(name="version", flag="unknown_version")
    private Integer value_version;
    private boolean unknown_version;
    public Integer version() {
        if (!unknown_version) return value_version;
        throw new UndeferrableValueException("Value 'SamplingRuleArgs.version' is not present");
    }

}
