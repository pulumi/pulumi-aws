// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cognito;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cognito.outputs.IdentityPoolCognitoIdentityProvider;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cognito/identityPool:IdentityPool")
public final class IdentityPool extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Enables or disables the classic / basic authentication flow. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="allowClassicFlow", flag="unknown_allowClassicFlow")
    private @Nullable Boolean value_allowClassicFlow;
    private boolean unknown_allowClassicFlow;
    public @Nullable Boolean allowClassicFlow() {
        if (!unknown_allowClassicFlow) return value_allowClassicFlow;
        throw new UndeferrableValueException("Value 'IdentityPool.allowClassicFlow' is not present");
    }

    /**
     * Whether the identity pool supports unauthenticated logins or not.
     * 
     */
    @PolicyResourceProperty(name="allowUnauthenticatedIdentities", flag="unknown_allowUnauthenticatedIdentities")
    private @Nullable Boolean value_allowUnauthenticatedIdentities;
    private boolean unknown_allowUnauthenticatedIdentities;
    public @Nullable Boolean allowUnauthenticatedIdentities() {
        if (!unknown_allowUnauthenticatedIdentities) return value_allowUnauthenticatedIdentities;
        throw new UndeferrableValueException("Value 'IdentityPool.allowUnauthenticatedIdentities' is not present");
    }

    /**
     * The ARN of the identity pool.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'IdentityPool.arn' is not present");
    }

    /**
     * An array of Amazon Cognito Identity user pools and their client IDs.
     * 
     */
    @PolicyResourceProperty(name="cognitoIdentityProviders", flag="unknown_cognitoIdentityProviders")
    private @Nullable List<IdentityPoolCognitoIdentityProvider> value_cognitoIdentityProviders;
    private boolean unknown_cognitoIdentityProviders;
    public @Nullable List<IdentityPoolCognitoIdentityProvider> cognitoIdentityProviders() {
        if (!unknown_cognitoIdentityProviders) return value_cognitoIdentityProviders;
        throw new UndeferrableValueException("Value 'IdentityPool.cognitoIdentityProviders' is not present");
    }

    /**
     * The &#34;domain&#34; by which Cognito will refer to your users. This name acts as a placeholder that allows your
     * backend and the Cognito service to communicate about the developer provider.
     * 
     */
    @PolicyResourceProperty(name="developerProviderName", flag="unknown_developerProviderName")
    private @Nullable String value_developerProviderName;
    private boolean unknown_developerProviderName;
    public @Nullable String developerProviderName() {
        if (!unknown_developerProviderName) return value_developerProviderName;
        throw new UndeferrableValueException("Value 'IdentityPool.developerProviderName' is not present");
    }

    /**
     * The Cognito Identity Pool name.
     * 
     */
    @PolicyResourceProperty(name="identityPoolName", flag="unknown_identityPoolName")
    private String value_identityPoolName;
    private boolean unknown_identityPoolName;
    public String identityPoolName() {
        if (!unknown_identityPoolName) return value_identityPoolName;
        throw new UndeferrableValueException("Value 'IdentityPool.identityPoolName' is not present");
    }

    /**
     * Set of OpendID Connect provider ARNs.
     * 
     */
    @PolicyResourceProperty(name="openidConnectProviderArns", flag="unknown_openidConnectProviderArns")
    private @Nullable List<String> value_openidConnectProviderArns;
    private boolean unknown_openidConnectProviderArns;
    public @Nullable List<String> openidConnectProviderArns() {
        if (!unknown_openidConnectProviderArns) return value_openidConnectProviderArns;
        throw new UndeferrableValueException("Value 'IdentityPool.openidConnectProviderArns' is not present");
    }

    /**
     * An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
     * 
     */
    @PolicyResourceProperty(name="samlProviderArns", flag="unknown_samlProviderArns")
    private @Nullable List<String> value_samlProviderArns;
    private boolean unknown_samlProviderArns;
    public @Nullable List<String> samlProviderArns() {
        if (!unknown_samlProviderArns) return value_samlProviderArns;
        throw new UndeferrableValueException("Value 'IdentityPool.samlProviderArns' is not present");
    }

    /**
     * Key-Value pairs mapping provider names to provider app IDs.
     * 
     */
    @PolicyResourceProperty(name="supportedLoginProviders", flag="unknown_supportedLoginProviders")
    private @Nullable Map<String,String> value_supportedLoginProviders;
    private boolean unknown_supportedLoginProviders;
    public @Nullable Map<String,String> supportedLoginProviders() {
        if (!unknown_supportedLoginProviders) return value_supportedLoginProviders;
        throw new UndeferrableValueException("Value 'IdentityPool.supportedLoginProviders' is not present");
    }

    /**
     * A map of tags to assign to the Identity Pool. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'IdentityPool.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'IdentityPool.tagsAll' is not present");
    }

}
