From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: guineveresaenger <guinevere@pulumi.com>
Date: Fri, 21 Feb 2025 12:12:31 -0800
Subject: [PATCH] Remove ephemeral resources


diff --git a/internal/service/docdb/cluster.go b/internal/service/docdb/cluster.go
index 18a68dc755..af18ff5d6f 100644
--- a/internal/service/docdb/cluster.go
+++ b/internal/service/docdb/cluster.go
@@ -15,7 +15,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/service/docdb"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/docdb/types"
 	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -187,22 +186,9 @@ func resourceCluster() *schema.Resource {
 				ValidateFunc: verify.ValidARN,
 			},
 			"master_password": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				ConflictsWith: []string{"master_password_wo"},
-			},
-			"master_password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				ConflictsWith: []string{"master_password"},
-				RequiredWith:  []string{"master_password_wo_version"},
-			},
-			"master_password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"master_password_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
 			},
 			"master_username": {
 				Type:     schema.TypeString,
@@ -344,13 +330,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 		ApplyImmediately: aws.Bool(true),
 	}
 
-	// get write-only value from configuration
-	masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	if _, ok := d.GetOk("snapshot_identifier"); ok {
 		input := &docdb.RestoreDBClusterFromSnapshotInput{
 			DBClusterIdentifier: aws.String(identifier),
@@ -395,11 +374,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			requiresModifyDbCluster = true
 		}
 
-		if masterPasswordWO != "" {
-			inputM.MasterUserPassword = aws.String(masterPasswordWO)
-			requiresModifyDbCluster = true
-		}
-
 		if v, ok := d.GetOk(names.AttrPort); ok {
 			input.Port = aws.Int32(int32(v.(int)))
 		}
@@ -488,8 +462,8 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 	} else {
 		// Secondary DocDB clusters part of a global cluster will not supply the master_password
 		if _, ok := d.GetOk("global_cluster_identifier"); !ok {
-			if _, ok := d.GetOk("master_password"); !ok && masterPasswordWO == "" {
-				return sdkdiag.AppendErrorf(diags, `provider.aws: aws_docdb_cluster: %s: "master_password", "master_password_wo": required field is not set`, identifier)
+			if _, ok := d.GetOk("master_password"); !ok {
+				return sdkdiag.AppendErrorf(diags, `provider.aws: aws_docdb_cluster: %s: "master_password": required field is not set`, identifier)
 			}
 		}
 
@@ -544,10 +518,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if masterPasswordWO != "" {
-			input.MasterUserPassword = aws.String(masterPasswordWO)
-		}
-
 		if v, ok := d.GetOk(names.AttrPort); ok {
 			input.Port = aws.Int32(int32(v.(int)))
 		}
@@ -704,18 +674,6 @@ func resourceClusterUpdate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(d.Get("master_password").(string))
 		}
 
-		if d.HasChange("master_password_wo_version") {
-			masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if masterPasswordWO != "" {
-				input.MasterUserPassword = aws.String(masterPasswordWO)
-			}
-		}
-
 		if d.HasChange("preferred_backup_window") {
 			input.PreferredBackupWindow = aws.String(d.Get("preferred_backup_window").(string))
 		}
diff --git a/internal/service/docdb/cluster_test.go b/internal/service/docdb/cluster_test.go
index ffb51ec6f2..a0838200f5 100644
--- a/internal/service/docdb/cluster_test.go
+++ b/internal/service/docdb/cluster_test.go
@@ -13,12 +13,10 @@ import (
 	"github.com/aws/aws-sdk-go-v2/aws"
 	"github.com/aws/aws-sdk-go-v2/service/docdb"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/docdb/types"
-	"github.com/hashicorp/go-version"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
 	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
 	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
 	"github.com/hashicorp/terraform-plugin-testing/terraform"
-	"github.com/hashicorp/terraform-plugin-testing/tfversion"
 	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
 	tfdocdb "github.com/hashicorp/terraform-provider-aws/internal/service/docdb"
@@ -927,37 +925,6 @@ func TestAccDocDBCluster_storageType(t *testing.T) {
 	})
 }
 
-func TestAccDocDBCluster_passwordWriteOnly(t *testing.T) {
-	ctx := acctest.Context(t)
-	var dbCluster awstypes.DBCluster
-	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
-	resourceName := "aws_docdb_cluster.test"
-
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:   func() { acctest.PreCheck(ctx, t) },
-		ErrorCheck: acctest.ErrorCheck(t, names.DocDBServiceID),
-		TerraformVersionChecks: []tfversion.TerraformVersionCheck{
-			tfversion.SkipBelow(version.Must(version.NewVersion("1.11.0"))),
-		},
-		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
-		CheckDestroy:             testAccCheckClusterDestroy(ctx),
-		Steps: []resource.TestStep{
-			{
-				Config: testAccClusterConfig_passwordWriteOnly(rName, "avoid-plaintext-passwords", 1),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckClusterExists(ctx, resourceName, &dbCluster),
-				),
-			},
-			{
-				Config: testAccClusterConfig_passwordWriteOnly(rName, "avoid-plaintext-updated", 2),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckClusterExists(ctx, resourceName, &dbCluster),
-				),
-			},
-		},
-	})
-}
-
 func testAccCheckClusterDestroy(ctx context.Context) resource.TestCheckFunc {
 	return func(s *terraform.State) error {
 		conn := acctest.Provider.Meta().(*conns.AWSClient).DocDBClient(ctx)
diff --git a/internal/service/rds/blue_green.go b/internal/service/rds/blue_green.go
index 5b77bc91bc..8d37d35b94 100644
--- a/internal/service/rds/blue_green.go
+++ b/internal/service/rds/blue_green.go
@@ -14,7 +14,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/service/rds/types"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs"
-	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
 	"github.com/hashicorp/terraform-provider-aws/names"
 )
@@ -150,10 +149,7 @@ func (h *instanceHandler) modifyTarget(ctx context.Context, identifier string, d
 		DBInstanceIdentifier: aws.String(identifier),
 	}
 
-	needsModify, diags := dbInstancePopulateModify(modifyInput, d)
-	if diags.HasError() {
-		return fmt.Errorf("populating modify input: %s", sdkdiag.DiagnosticsString(diags))
-	}
+	needsModify := dbInstancePopulateModify(modifyInput, d)
 
 	if needsModify {
 		log.Printf("[DEBUG] %s: Updating Green environment", operation)
diff --git a/internal/service/rds/cluster.go b/internal/service/rds/cluster.go
index ffe9276633..dc0104fa25 100644
--- a/internal/service/rds/cluster.go
+++ b/internal/service/rds/cluster.go
@@ -16,7 +16,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/service/rds"
 	"github.com/aws/aws-sdk-go-v2/service/rds/types"
 	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
@@ -324,7 +323,7 @@ func resourceCluster() *schema.Resource {
 			"manage_master_user_password": {
 				Type:          schema.TypeBool,
 				Optional:      true,
-				ConflictsWith: []string{"master_password", "master_password_wo"},
+				ConflictsWith: []string{"master_password"},
 			},
 			"master_user_secret": {
 				Type:     schema.TypeList,
@@ -353,23 +352,9 @@ func resourceCluster() *schema.Resource {
 				ValidateFunc: verify.ValidKMSKeyID,
 			},
 			"master_password": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				ConflictsWith: []string{"manage_master_user_password", "master_password_wo"},
-			},
-			"master_password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				WriteOnly:     true,
-				ConflictsWith: []string{"manage_master_user_password", "master_password"},
-				RequiredWith:  []string{"master_password_wo_version"},
-			},
-			"master_password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"master_password_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
 			},
 			"master_username": {
 				Type:     schema.TypeString,
@@ -704,13 +689,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 		create.WithDefaultPrefix("tf-"),
 	).Generate()
 
-	// get write-only value from configuration
-	masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	// Some API calls (e.g. RestoreDBClusterFromSnapshot do not support all
 	// parameters to correctly apply all settings in one pass. For missing
 	// parameters or unsupported configurations, we may need to call
@@ -794,11 +772,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			requiresModifyDbCluster = true
 		}
 
-		if masterPasswordWO != "" {
-			modifyDbClusterInput.MasterUserPassword = aws.String(masterPasswordWO)
-			requiresModifyDbCluster = true
-		}
-
 		if v, ok := d.GetOk("master_user_secret_kms_key_id"); ok {
 			modifyDbClusterInput.MasterUserSecretKmsKeyId = aws.String(v.(string))
 			requiresModifyDbCluster = true
@@ -947,10 +920,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if masterPasswordWO != "" {
-			input.MasterUserPassword = aws.String(masterPasswordWO)
-		}
-
 		if v, ok := d.GetOk("network_type"); ok {
 			input.NetworkType = aws.String(v.(string))
 		}
@@ -1061,11 +1030,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			requiresModifyDbCluster = true
 		}
 
-		if masterPasswordWO != "" {
-			modifyDbClusterInput.MasterUserPassword = aws.String(masterPasswordWO)
-			requiresModifyDbCluster = true
-		}
-
 		if v, ok := d.GetOk("master_user_secret_kms_key_id"); ok {
 			modifyDbClusterInput.MasterUserSecretKmsKeyId = aws.String(v.(string))
 			requiresModifyDbCluster = true
@@ -1267,10 +1231,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if masterPasswordWO != "" {
-			input.MasterUserPassword = aws.String(masterPasswordWO)
-		}
-
 		if v, ok := d.GetOk("master_user_secret_kms_key_id"); ok {
 			input.MasterUserSecretKmsKeyId = aws.String(v.(string))
 		}
@@ -1677,18 +1637,6 @@ func resourceClusterUpdate(ctx context.Context, d *schema.ResourceData, meta int
 			}
 		}
 
-		if d.HasChange("master_password_wo_version") {
-			masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if masterPasswordWO != "" {
-				input.MasterUserPassword = aws.String(masterPasswordWO)
-			}
-		}
-
 		if d.HasChange("master_user_secret_kms_key_id") {
 			if v, ok := d.GetOk("master_user_secret_kms_key_id"); ok {
 				input.MasterUserSecretKmsKeyId = aws.String(v.(string))
diff --git a/internal/service/rds/instance.go b/internal/service/rds/instance.go
index e78746f6f1..c4c165820e 100644
--- a/internal/service/rds/instance.go
+++ b/internal/service/rds/instance.go
@@ -416,7 +416,7 @@ func resourceInstance() *schema.Resource {
 			"manage_master_user_password": {
 				Type:          schema.TypeBool,
 				Optional:      true,
-				ConflictsWith: []string{names.AttrPassword, "password_wo"},
+				ConflictsWith: []string{names.AttrPassword},
 			},
 			"master_user_secret": {
 				Type:     schema.TypeList,
@@ -494,23 +494,9 @@ func resourceInstance() *schema.Resource {
 				Computed: true,
 			},
 			names.AttrPassword: {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				ConflictsWith: []string{"manage_master_user_password", "password_wo"},
-			},
-			"password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				Sensitive:     true,
-				ConflictsWith: []string{"manage_master_user_password", names.AttrPassword},
-				RequiredWith:  []string{"password_wo_version"},
-			},
-			"password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"password_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
 			},
 			"performance_insights_enabled": {
 				Type:     schema.TypeBool,
@@ -782,13 +768,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 		}
 	}
 
-	// get write-only value from configuration
-	passwordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	if v, ok := d.GetOk("replicate_source_db"); ok {
 		sourceDBInstanceID := v.(string)
 		input := &rds.CreateDBInstanceReadReplicaInput{
@@ -1021,10 +1000,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			requiresModifyDbInstance = true
 		}
 
-		if passwordWO != "" {
-			modifyDbInstanceInput.MasterUserPassword = aws.String(passwordWO)
-			requiresModifyDbInstance = true
-		}
 	} else if v, ok := d.GetOk("s3_import"); ok {
 		if _, ok := d.GetOk(names.AttrAllocatedStorage); !ok {
 			diags = sdkdiag.AppendErrorf(diags, `"allocated_storage": required field is not set`)
@@ -1138,10 +1113,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if passwordWO != "" {
-			input.MasterUserPassword = aws.String(passwordWO)
-		}
-
 		if v, ok := d.GetOk("performance_insights_enabled"); ok {
 			input.EnablePerformanceInsights = aws.Bool(v.(bool))
 		}
@@ -1385,11 +1356,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			requiresModifyDbInstance = true
 		}
 
-		if passwordWO != "" {
-			modifyDbInstanceInput.MasterUserPassword = aws.String(passwordWO)
-			requiresModifyDbInstance = true
-		}
-
 		if v, ok := d.GetOk("performance_insights_enabled"); ok {
 			modifyDbInstanceInput.EnablePerformanceInsights = aws.Bool(v.(bool))
 			requiresModifyDbInstance = true
@@ -1616,11 +1582,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			requiresModifyDbInstance = true
 		}
 
-		if passwordWO != "" {
-			modifyDbInstanceInput.MasterUserPassword = aws.String(passwordWO)
-			requiresModifyDbInstance = true
-		}
-
 		if v, ok := d.GetOk(names.AttrPort); ok {
 			input.Port = aws.Int32(int32(v.(int)))
 		}
@@ -1817,10 +1778,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if passwordWO != "" {
-			input.MasterUserPassword = aws.String(passwordWO)
-		}
-
 		if v, ok := d.GetOk(names.AttrParameterGroupName); ok {
 			input.DBParameterGroupName = aws.String(v.(string))
 		}
@@ -2449,8 +2406,7 @@ func dbInstanceCreateReadReplica(ctx context.Context, conn *rds.Client, input *r
 	return outputRaw.(*rds.CreateDBInstanceReadReplicaOutput), nil
 }
 
-func dbInstancePopulateModify(input *rds.ModifyDBInstanceInput, d *schema.ResourceData) (bool, diag.Diagnostics) {
-	var diags diag.Diagnostics
+func dbInstancePopulateModify(input *rds.ModifyDBInstanceInput, d *schema.ResourceData) bool {
 	needsModify := false
 
 	if d.HasChanges(names.AttrAllocatedStorage, names.AttrIOPS) {
@@ -2625,18 +2581,6 @@ func dbInstancePopulateModify(input *rds.ModifyDBInstanceInput, d *schema.Resour
 		}
 	}
 
-	if d.HasChange("password_wo_version") {
-		passwordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("password_wo"))
-		diags = append(diags, di...)
-		if diags.HasError() {
-			return false, diags
-		}
-
-		if passwordWO != "" {
-			input.MasterUserPassword = aws.String(passwordWO)
-		}
-	}
-
 	if d.HasChanges("performance_insights_enabled", "performance_insights_kms_key_id", "performance_insights_retention_period") {
 		needsModify = true
 		input.EnablePerformanceInsights = aws.Bool(d.Get("performance_insights_enabled").(bool))
@@ -2701,7 +2645,7 @@ func dbInstancePopulateModify(input *rds.ModifyDBInstanceInput, d *schema.Resour
 		}
 	}
 
-	return needsModify, diags
+	return needsModify
 }
 
 func dbInstanceModify(ctx context.Context, conn *rds.Client, resourceID string, input *rds.ModifyDBInstanceInput, timeout time.Duration) error {
diff --git a/internal/service/redshift/cluster.go b/internal/service/redshift/cluster.go
index 5105adf126..a2c81bec8f 100644
--- a/internal/service/redshift/cluster.go
+++ b/internal/service/redshift/cluster.go
@@ -16,7 +16,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/aws/arn"
 	"github.com/aws/aws-sdk-go-v2/service/redshift"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -268,7 +267,7 @@ func resourceCluster() *schema.Resource {
 			"manage_master_password": {
 				Type:          schema.TypeBool,
 				Optional:      true,
-				ConflictsWith: []string{"master_password", "master_password_wo"},
+				ConflictsWith: []string{"master_password"},
 			},
 			"manual_snapshot_retention_period": {
 				Type:         schema.TypeInt,
@@ -287,27 +286,7 @@ func resourceCluster() *schema.Resource {
 					validation.StringMatch(regexache.MustCompile(`^.*[0-9].*`), "must contain at least one number"),
 					validation.StringMatch(regexache.MustCompile(`^[^\@\/'" ]*$`), "cannot contain [/@\"' ]"),
 				),
-				ConflictsWith: []string{"manage_master_password", "master_password_wo"},
-			},
-			"master_password_wo": {
-				Type:      schema.TypeString,
-				Optional:  true,
-				WriteOnly: true,
-				Sensitive: true,
-				ValidateFunc: validation.All(
-					validation.StringLenBetween(8, 64),
-					validation.StringMatch(regexache.MustCompile(`^.*[a-z].*`), "must contain at least one lowercase letter"),
-					validation.StringMatch(regexache.MustCompile(`^.*[A-Z].*`), "must contain at least one uppercase letter"),
-					validation.StringMatch(regexache.MustCompile(`^.*[0-9].*`), "must contain at least one number"),
-					validation.StringMatch(regexache.MustCompile(`^[^\@\/'" ]*$`), "cannot contain [/@\"' ]"),
-				),
-				ConflictsWith: []string{"manage_master_password", "master_password"},
-				RequiredWith:  []string{"master_password_wo_version"},
-			},
-			"master_password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"master_password_wo"},
+				ConflictsWith: []string{"manage_master_password"},
 			},
 			"master_password_secret_arn": {
 				Type:     schema.TypeString,
@@ -474,13 +453,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 		Tags:                             getTagsIn(ctx),
 	}
 
-	// get write-only value from configuration
-	masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	if v, ok := d.GetOk("aqua_configuration_status"); ok {
 		inputR.AquaConfigurationStatus = awstypes.AquaConfigurationStatus(v.(string))
 		inputC.AquaConfigurationStatus = awstypes.AquaConfigurationStatus(v.(string))
@@ -517,7 +489,7 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 	}
 
 	if v, ok := d.GetOk(names.AttrEncrypted); ok {
-		inputC.Encrypted = aws.Bool(v.(bool)) // encryption is true by default
+		inputC.Encrypted = aws.Bool(v.(bool))
 		inputR.Encrypted = aws.Bool(v.(bool))
 	}
 
@@ -555,10 +527,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 		inputC.MasterUserPassword = aws.String(v.(string))
 	}
 
-	if masterPasswordWO != "" {
-		inputC.MasterUserPassword = aws.String(masterPasswordWO)
-	}
-
 	if v, ok := d.GetOk("master_password_secret_kms_key_id"); ok {
 		inputR.MasterPasswordSecretKmsKeyId = aws.String(v.(string))
 		inputC.MasterPasswordSecretKmsKeyId = aws.String(v.(string))
@@ -609,7 +577,7 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 
 		d.SetId(aws.ToString(output.Cluster.ClusterIdentifier))
 	} else {
-		if _, ok := d.GetOk("master_password"); !ok && masterPasswordWO == "" {
+		if _, ok := d.GetOk("master_password"); !ok {
 			if _, ok := d.GetOk("manage_master_password"); !ok {
 				return sdkdiag.AppendErrorf(diags, `provider.aws: aws_redshift_cluster: %s: one of "manage_master_password" or "master_password" is required`, d.Get(names.AttrClusterIdentifier).(string))
 			}
@@ -838,18 +806,6 @@ func resourceClusterUpdate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(d.Get("master_password").(string))
 		}
 
-		if d.HasChange("master_password_wo_version") {
-			masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if masterPasswordWO != "" {
-				input.MasterUserPassword = aws.String(masterPasswordWO)
-			}
-		}
-
 		if d.HasChange("master_password_secret_kms_key_id") {
 			input.MasterPasswordSecretKmsKeyId = aws.String(d.Get("master_password_secret_kms_key_id").(string))
 		}
diff --git a/internal/service/redshiftserverless/namespace.go b/internal/service/redshiftserverless/namespace.go
index 45cb36632a..9d23dc755c 100644
--- a/internal/service/redshiftserverless/namespace.go
+++ b/internal/service/redshiftserverless/namespace.go
@@ -14,7 +14,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/aws/arn"
 	"github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/redshiftserverless/types"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -57,19 +56,7 @@ func resourceNamespace() *schema.Resource {
 				Type:          schema.TypeString,
 				Optional:      true,
 				Sensitive:     true,
-				ConflictsWith: []string{"manage_admin_password", "admin_user_password_wo"},
-			},
-			"admin_user_password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				ConflictsWith: []string{"admin_user_password", "manage_admin_password"},
-				RequiredWith:  []string{"admin_user_password_wo_version"},
-			},
-			"admin_user_password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"admin_user_password_wo"},
+				ConflictsWith: []string{"manage_admin_password"},
 			},
 			"admin_username": {
 				Type:      schema.TypeString,
@@ -118,7 +105,7 @@ func resourceNamespace() *schema.Resource {
 			"manage_admin_password": {
 				Type:          schema.TypeBool,
 				Optional:      true,
-				ConflictsWith: []string{"admin_user_password", "admin_user_password_wo"},
+				ConflictsWith: []string{"admin_user_password"},
 			},
 			"namespace_id": {
 				Type:     schema.TypeString,
@@ -145,12 +132,6 @@ func resourceNamespaceCreate(ctx context.Context, d *schema.ResourceData, meta i
 		Tags:          getTagsIn(ctx),
 	}
 
-	adminUserPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("admin_user_password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	if v, ok := d.GetOk("admin_password_secret_kms_key_id"); ok {
 		input.AdminPasswordSecretKmsKeyId = aws.String(v.(string))
 	}
@@ -159,10 +140,6 @@ func resourceNamespaceCreate(ctx context.Context, d *schema.ResourceData, meta i
 		input.AdminUserPassword = aws.String(v.(string))
 	}
 
-	if adminUserPasswordWO != "" {
-		input.AdminUserPassword = aws.String(adminUserPasswordWO)
-	}
-
 	if v, ok := d.GetOk("admin_username"); ok {
 		input.AdminUsername = aws.String(v.(string))
 	}
@@ -246,22 +223,12 @@ func resourceNamespaceUpdate(ctx context.Context, d *schema.ResourceData, meta i
 			input.AdminPasswordSecretKmsKeyId = aws.String(d.Get("admin_password_secret_kms_key_id").(string))
 		}
 
-		if d.HasChanges("admin_username", "admin_user_password", "admin_user_password_wo_version") {
+		if d.HasChanges("admin_username", "admin_user_password") {
 			input.AdminUsername = aws.String(d.Get("admin_username").(string))
 
 			if v, ok := d.Get("admin_user_password").(string); ok {
 				input.AdminUserPassword = aws.String(v)
 			}
-
-			adminUserPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("admin_user_password_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if adminUserPasswordWO != "" {
-				input.AdminUserPassword = aws.String(adminUserPasswordWO)
-			}
 		}
 
 		if d.HasChange("default_iam_role_arn") {
diff --git a/internal/service/redshiftserverless/namespace_test.go b/internal/service/redshiftserverless/namespace_test.go
index 7ffef0cb5c..0534a0155f 100644
--- a/internal/service/redshiftserverless/namespace_test.go
+++ b/internal/service/redshiftserverless/namespace_test.go
@@ -9,11 +9,9 @@ import (
 	"testing"
 
 	"github.com/YakDriver/regexache"
-	"github.com/hashicorp/go-version"
 	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
 	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
 	"github.com/hashicorp/terraform-plugin-testing/terraform"
-	"github.com/hashicorp/terraform-plugin-testing/tfversion"
 	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
 	tfredshiftserverless "github.com/hashicorp/terraform-provider-aws/internal/service/redshiftserverless"
@@ -128,36 +126,6 @@ func TestAccRedshiftServerlessNamespace_user(t *testing.T) {
 	})
 }
 
-func TestAccRedshiftServerlessNamespace_userPasswordWriteOnly(t *testing.T) {
-	ctx := acctest.Context(t)
-	resourceName := "aws_redshiftserverless_namespace.test"
-	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
-
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:   func() { acctest.PreCheck(ctx, t) },
-		ErrorCheck: acctest.ErrorCheck(t, names.RedshiftServerlessServiceID),
-		TerraformVersionChecks: []tfversion.TerraformVersionCheck{
-			tfversion.SkipBelow(version.Must(version.NewVersion("1.11.0"))),
-		},
-		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
-		CheckDestroy:             testAccCheckNamespaceDestroy(ctx),
-		Steps: []resource.TestStep{
-			{
-				Config: testAccNamespaceConfig_userPasswordWriteOnly(rName, "Password123", 1),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNamespaceExists(ctx, resourceName),
-				),
-			},
-			{
-				Config: testAccNamespaceConfig_userPasswordWriteOnly(rName, "Password123updated", 2),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNamespaceExists(ctx, resourceName),
-				),
-			},
-		},
-	})
-}
-
 func TestAccRedshiftServerlessNamespace_tags(t *testing.T) {
 	ctx := acctest.Context(t)
 	resourceName := "aws_redshiftserverless_namespace.test"
diff --git a/internal/service/secretsmanager/secret_version.go b/internal/service/secretsmanager/secret_version.go
index 6ded7ef7b2..b6ec344a65 100644
--- a/internal/service/secretsmanager/secret_version.go
+++ b/internal/service/secretsmanager/secret_version.go
@@ -12,7 +12,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/aws"
 	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
 	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
@@ -41,10 +40,7 @@ func resourceSecretVersion() *schema.Resource {
 		DeleteWithoutTimeout: resourceSecretVersionDelete,
 
 		Importer: &schema.ResourceImporter{
-			StateContext: func(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
-				d.Set("has_secret_string_wo", false)
-				return []*schema.ResourceData{d}, nil
-			},
+			StateContext: schema.ImportStatePassthroughContext,
 		},
 
 		Schema: map[string]*schema.Schema{
@@ -52,10 +48,6 @@ func resourceSecretVersion() *schema.Resource {
 				Type:     schema.TypeString,
 				Computed: true,
 			},
-			"has_secret_string_wo": {
-				Type:     schema.TypeBool,
-				Computed: true,
-			},
 			"secret_id": {
 				Type:     schema.TypeString,
 				Required: true,
@@ -66,7 +58,7 @@ func resourceSecretVersion() *schema.Resource {
 				Optional:      true,
 				ForceNew:      true,
 				Sensitive:     true,
-				ConflictsWith: []string{"secret_string", "secret_string_wo"},
+				ConflictsWith: []string{"secret_string"},
 				ValidateFunc:  verify.ValidBase64String,
 			},
 			"secret_string": {
@@ -74,21 +66,7 @@ func resourceSecretVersion() *schema.Resource {
 				Optional:      true,
 				ForceNew:      true,
 				Sensitive:     true,
-				ConflictsWith: []string{"secret_binary", "secret_string_wo"},
-			},
-			"secret_string_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				Sensitive:     true,
-				ConflictsWith: []string{"secret_binary", "secret_string"},
-				RequiredWith:  []string{"secret_string_wo_version"},
-			},
-			"secret_string_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				ForceNew:     true,
-				RequiredWith: []string{"secret_string_wo"},
+				ConflictsWith: []string{"secret_binary"},
 			},
 			"version_id": {
 				Type:     schema.TypeString,
@@ -120,22 +98,10 @@ func resourceSecretVersionCreate(ctx context.Context, d *schema.ResourceData, me
 		if err != nil {
 			return sdkdiag.AppendFromErr(diags, err)
 		}
-	}
-
-	if v, ok := d.GetOk("secret_string"); ok {
+	} else if v, ok := d.GetOk("secret_string"); ok {
 		input.SecretString = aws.String(v.(string))
 	}
 
-	secretStringWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("secret_string_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
-	if secretStringWO != "" {
-		input.SecretString = aws.String(secretStringWO)
-	}
-
 	if v, ok := d.GetOk("version_stages"); ok && v.(*schema.Set).Len() > 0 {
 		input.VersionStages = flex.ExpandStringValueSet(v.(*schema.Set))
 	}
@@ -188,23 +154,6 @@ func resourceSecretVersionRead(ctx context.Context, d *schema.ResourceData, meta
 	d.Set("version_id", output.VersionId)
 	d.Set("version_stages", output.VersionStages)
 
-	// unset secret_string if the value is configured as write-only
-	hasWriteOnly := flex.HasWriteOnlyValue(d, "secret_string_wo")
-	secretStringWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("secret_string_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
-	if secretStringWO != "" {
-		hasWriteOnly = true
-	}
-
-	if hasWriteOnly {
-		d.Set("has_secret_string_wo", true)
-		d.Set("secret_string", nil)
-	}
-
 	return diags
 }
 
diff --git a/internal/service/ssm/parameter.go b/internal/service/ssm/parameter.go
index 9c4666ea58..cd2dd706a5 100644
--- a/internal/service/ssm/parameter.go
+++ b/internal/service/ssm/parameter.go
@@ -12,7 +12,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/service/ssm"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
 	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
@@ -22,7 +21,6 @@ import (
 	"github.com/hashicorp/terraform-provider-aws/internal/enum"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
-	"github.com/hashicorp/terraform-provider-aws/internal/flex"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
 	"github.com/hashicorp/terraform-provider-aws/names"
@@ -31,7 +29,6 @@ import (
 // @SDKResource("aws_ssm_parameter", name="Parameter")
 // @Tags(identifierAttribute="id", resourceType="Parameter")
 // @Testing(existsType="github.com/aws/aws-sdk-go-v2/service/ssm/types;awstypes;awstypes.Parameter")
-// @Testing(importIgnore="has_value_wo")
 func resourceParameter() *schema.Resource {
 	return &schema.Resource{
 		CreateWithoutTimeout: resourceParameterCreate,
@@ -40,10 +37,7 @@ func resourceParameter() *schema.Resource {
 		DeleteWithoutTimeout: resourceParameterDelete,
 
 		Importer: &schema.ResourceImporter{
-			StateContext: func(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
-				d.Set("has_value_wo", false)
-				return []*schema.ResourceData{d}, nil
-			},
+			StateContext: schema.ImportStatePassthroughContext,
 		},
 
 		Schema: map[string]*schema.Schema{
@@ -73,15 +67,10 @@ func resourceParameter() *schema.Resource {
 				Optional:     true,
 				ValidateFunc: validation.StringLenBetween(0, 1024),
 			},
-			"has_value_wo": {
-				Type:     schema.TypeBool,
-				Computed: true,
-			},
 			"insecure_value": {
-				Type:         schema.TypeString,
-				Optional:     true,
-				Computed:     true,
-				ExactlyOneOf: []string{"value_wo", "insecure_value", names.AttrValue},
+				Type:     schema.TypeString,
+				Optional: true,
+				Computed: true,
 			},
 			names.AttrKeyID: {
 				Type:     schema.TypeString,
@@ -121,24 +110,10 @@ func resourceParameter() *schema.Resource {
 				ValidateDiagFunc: enum.Validate[awstypes.ParameterType](),
 			},
 			names.AttrValue: {
-				Type:         schema.TypeString,
-				Optional:     true,
-				Sensitive:    true,
-				Computed:     true,
-				ExactlyOneOf: []string{"value_wo", "insecure_value", names.AttrValue},
-			},
-			"value_wo": {
-				Type:         schema.TypeString,
-				Optional:     true,
-				Sensitive:    true,
-				WriteOnly:    true,
-				ExactlyOneOf: []string{"value_wo", "insecure_value", names.AttrValue},
-				RequiredWith: []string{"value_wo_version"},
-			},
-			"value_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"value_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
+				Computed:  true,
 			},
 			names.AttrVersion: {
 				Type:     schema.TypeInt,
@@ -161,9 +136,6 @@ func resourceParameter() *schema.Resource {
 			customdiff.ComputedIf("insecure_value", func(_ context.Context, diff *schema.ResourceDiff, meta interface{}) bool {
 				return diff.HasChange(names.AttrValue)
 			}),
-			customdiff.ComputedIf("has_value_wo", func(_ context.Context, diff *schema.ResourceDiff, meta interface{}) bool {
-				return diff.HasChange("value_wo_version")
-			}),
 		),
 	}
 }
@@ -179,16 +151,6 @@ func resourceParameterCreate(ctx context.Context, d *schema.ResourceData, meta i
 		value = v
 	}
 
-	valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
-	if valueWO != "" {
-		value = valueWO
-	}
-
 	input := &ssm.PutParameterInput{
 		AllowedPattern: aws.String(d.Get("allowed_pattern").(string)),
 		Name:           aws.String(name),
@@ -284,31 +246,12 @@ func resourceParameterRead(ctx context.Context, d *schema.ResourceData, meta int
 	d.Set(names.AttrType, param.Type)
 	d.Set(names.AttrVersion, param.Version)
 
-	hasWriteOnly := d.Get("has_value_wo").(bool)
-	rawConfig := d.GetRawConfig()
-	if !rawConfig.IsNull() {
-		valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
-		diags = append(diags, di...)
-		if diags.HasError() {
-			return diags
-		}
-
-		if valueWO != "" {
-			hasWriteOnly = true
-		}
-	}
-
 	if _, ok := d.GetOk("insecure_value"); ok && param.Type != awstypes.ParameterTypeSecureString {
 		d.Set("insecure_value", param.Value)
 	} else {
 		d.Set(names.AttrValue, param.Value)
 	}
 
-	if hasWriteOnly {
-		d.Set("has_value_wo", true)
-		d.Set(names.AttrValue, nil)
-	}
-
 	if param.Type == awstypes.ParameterTypeSecureString && d.Get("insecure_value").(string) != "" {
 		return sdkdiag.AppendErrorf(diags, "invalid configuration, cannot set type = %s and insecure_value", param.Type)
 	}
@@ -345,18 +288,6 @@ func resourceParameterUpdate(ctx context.Context, d *schema.ResourceData, meta i
 			value = v
 		}
 
-		if d.HasChanges("value_wo_version") {
-			valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if valueWO != "" {
-				value = valueWO
-			}
-		}
-
 		input := &ssm.PutParameterInput{
 			AllowedPattern: aws.String(d.Get("allowed_pattern").(string)),
 			Name:           aws.String(d.Id()),
