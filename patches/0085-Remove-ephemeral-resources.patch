From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: guineveresaenger <guinevere@pulumi.com>
Date: Fri, 21 Feb 2025 12:12:31 -0800
Subject: [PATCH] Remove ephemeral resources


diff --git a/internal/service/docdb/cluster.go b/internal/service/docdb/cluster.go
index f41827f444..c56f993e9a 100644
--- a/internal/service/docdb/cluster.go
+++ b/internal/service/docdb/cluster.go
@@ -15,7 +15,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/service/docdb"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/docdb/types"
 	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -58,10 +57,6 @@ func resourceCluster() *schema.Resource {
 			Delete: schema.DefaultTimeout(120 * time.Minute),
 		},
 
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath("master_password"), cty.GetAttrPath("master_password_wo")),
-		},
-
 		Schema: map[string]*schema.Schema{
 			names.AttrAllowMajorVersionUpgrade: {
 				Type:     schema.TypeBool,
@@ -191,21 +186,9 @@ func resourceCluster() *schema.Resource {
 				ValidateFunc: verify.ValidARN,
 			},
 			"master_password": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				ConflictsWith: []string{"master_password_wo"},
-			},
-			"master_password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				ConflictsWith: []string{"master_password"},
-			},
-			"master_password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"master_password_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
 			},
 			"master_username": {
 				Type:     schema.TypeString,
@@ -349,13 +332,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 		ApplyImmediately: aws.Bool(true),
 	}
 
-	// get write-only value from configuration
-	masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	if _, ok := d.GetOk("snapshot_identifier"); ok {
 		input := &docdb.RestoreDBClusterFromSnapshotInput{
 			DBClusterIdentifier: aws.String(identifier),
@@ -400,11 +376,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			requiresModifyDbCluster = true
 		}
 
-		if masterPasswordWO != "" {
-			inputM.MasterUserPassword = aws.String(masterPasswordWO)
-			requiresModifyDbCluster = true
-		}
-
 		if v, ok := d.GetOk(names.AttrPort); ok {
 			input.Port = aws.Int32(int32(v.(int)))
 		}
@@ -493,8 +464,8 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 	} else {
 		// Secondary DocDB clusters part of a global cluster will not supply the master_password
 		if _, ok := d.GetOk("global_cluster_identifier"); !ok {
-			if _, ok := d.GetOk("master_password"); !ok && masterPasswordWO == "" {
-				return sdkdiag.AppendErrorf(diags, `provider.aws: aws_docdb_cluster: %s: "master_password", "master_password_wo": required field is not set`, identifier)
+			if _, ok := d.GetOk("master_password"); !ok {
+				return sdkdiag.AppendErrorf(diags, `provider.aws: aws_docdb_cluster: %s: "master_password": required field is not set`, identifier)
 			}
 		}
 
@@ -545,14 +516,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			input.KmsKeyId = aws.String(v.(string))
 		}
 
-		if v, ok := d.GetOk("master_password"); ok {
-			input.MasterUserPassword = aws.String(v.(string))
-		}
-
-		if masterPasswordWO != "" {
-			input.MasterUserPassword = aws.String(masterPasswordWO)
-		}
-
 		if v, ok := d.GetOk(names.AttrPort); ok {
 			input.Port = aws.Int32(int32(v.(int)))
 		}
@@ -709,18 +672,6 @@ func resourceClusterUpdate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(d.Get("master_password").(string))
 		}
 
-		if d.HasChange("master_password_wo_version") {
-			masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if masterPasswordWO != "" {
-				input.MasterUserPassword = aws.String(masterPasswordWO)
-			}
-		}
-
 		if d.HasChange("preferred_backup_window") {
 			input.PreferredBackupWindow = aws.String(d.Get("preferred_backup_window").(string))
 		}
diff --git a/internal/service/rds/blue_green.go b/internal/service/rds/blue_green.go
index 5b77bc91bc..8d37d35b94 100644
--- a/internal/service/rds/blue_green.go
+++ b/internal/service/rds/blue_green.go
@@ -14,7 +14,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/service/rds/types"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs"
-	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
 	"github.com/hashicorp/terraform-provider-aws/names"
 )
@@ -150,10 +149,7 @@ func (h *instanceHandler) modifyTarget(ctx context.Context, identifier string, d
 		DBInstanceIdentifier: aws.String(identifier),
 	}
 
-	needsModify, diags := dbInstancePopulateModify(modifyInput, d)
-	if diags.HasError() {
-		return fmt.Errorf("populating modify input: %s", sdkdiag.DiagnosticsString(diags))
-	}
+	needsModify := dbInstancePopulateModify(modifyInput, d)
 
 	if needsModify {
 		log.Printf("[DEBUG] %s: Updating Green environment", operation)
diff --git a/internal/service/rds/cluster.go b/internal/service/rds/cluster.go
index 82d64a53a1..5a8ab3b32e 100644
--- a/internal/service/rds/cluster.go
+++ b/internal/service/rds/cluster.go
@@ -16,7 +16,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/service/rds"
 	"github.com/aws/aws-sdk-go-v2/service/rds/types"
 	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
@@ -69,10 +68,6 @@ func resourceCluster() *schema.Resource {
 			},
 		},
 
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath("master_password"), cty.GetAttrPath("master_password_wo")),
-		},
-
 		Schema: map[string]*schema.Schema{
 			names.AttrAllocatedStorage: {
 				Type:     schema.TypeInt,
@@ -308,7 +303,7 @@ func resourceCluster() *schema.Resource {
 			"manage_master_user_password": {
 				Type:          schema.TypeBool,
 				Optional:      true,
-				ConflictsWith: []string{"master_password", "master_password_wo"},
+				ConflictsWith: []string{"master_password"},
 			},
 			"master_user_secret": {
 				Type:     schema.TypeList,
@@ -337,22 +332,9 @@ func resourceCluster() *schema.Resource {
 				ValidateFunc: verify.ValidKMSKeyID,
 			},
 			"master_password": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				ConflictsWith: []string{"manage_master_user_password", "master_password_wo"},
-			},
-			"master_password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				WriteOnly:     true,
-				ConflictsWith: []string{"manage_master_user_password", "master_password"},
-			},
-			"master_password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"master_password_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
 			},
 			"master_username": {
 				Type:     schema.TypeString,
@@ -688,13 +670,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 		create.WithDefaultPrefix("tf-"),
 	).Generate()
 
-	// get write-only value from configuration
-	masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	// Some API calls (e.g. RestoreDBClusterFromSnapshot do not support all
 	// parameters to correctly apply all settings in one pass. For missing
 	// parameters or unsupported configurations, we may need to call
@@ -775,11 +750,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			requiresModifyDbCluster = true
 		}
 
-		if masterPasswordWO != "" {
-			modifyDbClusterInput.MasterUserPassword = aws.String(masterPasswordWO)
-			requiresModifyDbCluster = true
-		}
-
 		if v, ok := d.GetOk("master_user_secret_kms_key_id"); ok {
 			modifyDbClusterInput.MasterUserSecretKmsKeyId = aws.String(v.(string))
 			requiresModifyDbCluster = true
@@ -928,10 +898,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if masterPasswordWO != "" {
-			input.MasterUserPassword = aws.String(masterPasswordWO)
-		}
-
 		if v, ok := d.GetOk("network_type"); ok {
 			input.NetworkType = aws.String(v.(string))
 		}
@@ -1042,11 +1008,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			requiresModifyDbCluster = true
 		}
 
-		if masterPasswordWO != "" {
-			modifyDbClusterInput.MasterUserPassword = aws.String(masterPasswordWO)
-			requiresModifyDbCluster = true
-		}
-
 		if v, ok := d.GetOk("master_user_secret_kms_key_id"); ok {
 			modifyDbClusterInput.MasterUserSecretKmsKeyId = aws.String(v.(string))
 			requiresModifyDbCluster = true
@@ -1237,10 +1198,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if masterPasswordWO != "" {
-			input.MasterUserPassword = aws.String(masterPasswordWO)
-		}
-
 		if v, ok := d.GetOk("master_user_secret_kms_key_id"); ok {
 			input.MasterUserSecretKmsKeyId = aws.String(v.(string))
 		}
@@ -1641,18 +1598,6 @@ func resourceClusterUpdate(ctx context.Context, d *schema.ResourceData, meta int
 			}
 		}
 
-		if d.HasChange("master_password_wo_version") {
-			masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if masterPasswordWO != "" {
-				input.MasterUserPassword = aws.String(masterPasswordWO)
-			}
-		}
-
 		if d.HasChange("master_user_secret_kms_key_id") {
 			if v, ok := d.GetOk("master_user_secret_kms_key_id"); ok {
 				input.MasterUserSecretKmsKeyId = aws.String(v.(string))
diff --git a/internal/service/rds/instance.go b/internal/service/rds/instance.go
index cc9b4727b4..3ac360e02f 100644
--- a/internal/service/rds/instance.go
+++ b/internal/service/rds/instance.go
@@ -85,10 +85,6 @@ func resourceInstance() *schema.Resource {
 			Delete: schema.DefaultTimeout(60 * time.Minute),
 		},
 
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath(names.AttrPassword), cty.GetAttrPath("password_wo")),
-		},
-
 		Schema: map[string]*schema.Schema{
 			names.AttrAddress: {
 				Type:     schema.TypeString,
@@ -420,7 +416,7 @@ func resourceInstance() *schema.Resource {
 			"manage_master_user_password": {
 				Type:          schema.TypeBool,
 				Optional:      true,
-				ConflictsWith: []string{names.AttrPassword, "password_wo"},
+				ConflictsWith: []string{names.AttrPassword},
 			},
 			"master_user_secret": {
 				Type:     schema.TypeList,
@@ -498,22 +494,9 @@ func resourceInstance() *schema.Resource {
 				Computed: true,
 			},
 			names.AttrPassword: {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				ConflictsWith: []string{"manage_master_user_password", "password_wo"},
-			},
-			"password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				Sensitive:     true,
-				ConflictsWith: []string{"manage_master_user_password", names.AttrPassword},
-			},
-			"password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"password_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
 			},
 			"performance_insights_enabled": {
 				Type:     schema.TypeBool,
@@ -786,13 +769,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 		}
 	}
 
-	// get write-only value from configuration
-	passwordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	if v, ok := d.GetOk("replicate_source_db"); ok {
 		sourceDBInstanceID := v.(string)
 		input := &rds.CreateDBInstanceReadReplicaInput{
@@ -1025,10 +1001,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			requiresModifyDbInstance = true
 		}
 
-		if passwordWO != "" {
-			modifyDbInstanceInput.MasterUserPassword = aws.String(passwordWO)
-			requiresModifyDbInstance = true
-		}
 	} else if v, ok := d.GetOk("s3_import"); ok {
 		if _, ok := d.GetOk(names.AttrAllocatedStorage); !ok {
 			diags = sdkdiag.AppendErrorf(diags, `"allocated_storage": required field is not set`)
@@ -1142,10 +1114,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if passwordWO != "" {
-			input.MasterUserPassword = aws.String(passwordWO)
-		}
-
 		if v, ok := d.GetOk("performance_insights_enabled"); ok {
 			input.EnablePerformanceInsights = aws.Bool(v.(bool))
 		}
@@ -1389,11 +1357,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			requiresModifyDbInstance = true
 		}
 
-		if passwordWO != "" {
-			modifyDbInstanceInput.MasterUserPassword = aws.String(passwordWO)
-			requiresModifyDbInstance = true
-		}
-
 		if v, ok := d.GetOk("performance_insights_enabled"); ok {
 			modifyDbInstanceInput.EnablePerformanceInsights = aws.Bool(v.(bool))
 			requiresModifyDbInstance = true
@@ -1620,11 +1583,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			requiresModifyDbInstance = true
 		}
 
-		if passwordWO != "" {
-			modifyDbInstanceInput.MasterUserPassword = aws.String(passwordWO)
-			requiresModifyDbInstance = true
-		}
-
 		if v, ok := d.GetOk(names.AttrPort); ok {
 			input.Port = aws.Int32(int32(v.(int)))
 		}
@@ -1821,10 +1779,6 @@ func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta in
 			input.MasterUserPassword = aws.String(v.(string))
 		}
 
-		if passwordWO != "" {
-			input.MasterUserPassword = aws.String(passwordWO)
-		}
-
 		if v, ok := d.GetOk(names.AttrParameterGroupName); ok {
 			input.DBParameterGroupName = aws.String(v.(string))
 		}
@@ -2453,8 +2407,7 @@ func dbInstanceCreateReadReplica(ctx context.Context, conn *rds.Client, input *r
 	return outputRaw.(*rds.CreateDBInstanceReadReplicaOutput), nil
 }
 
-func dbInstancePopulateModify(input *rds.ModifyDBInstanceInput, d *schema.ResourceData) (bool, diag.Diagnostics) {
-	var diags diag.Diagnostics
+func dbInstancePopulateModify(input *rds.ModifyDBInstanceInput, d *schema.ResourceData) bool {
 	needsModify := false
 
 	if d.HasChanges(names.AttrAllocatedStorage, names.AttrIOPS) {
@@ -2629,18 +2582,6 @@ func dbInstancePopulateModify(input *rds.ModifyDBInstanceInput, d *schema.Resour
 		}
 	}
 
-	if d.HasChange("password_wo_version") {
-		passwordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("password_wo"))
-		diags = append(diags, di...)
-		if diags.HasError() {
-			return false, diags
-		}
-
-		if passwordWO != "" {
-			input.MasterUserPassword = aws.String(passwordWO)
-		}
-	}
-
 	if d.HasChanges("performance_insights_enabled", "performance_insights_kms_key_id", "performance_insights_retention_period") {
 		needsModify = true
 		input.EnablePerformanceInsights = aws.Bool(d.Get("performance_insights_enabled").(bool))
@@ -2705,7 +2646,7 @@ func dbInstancePopulateModify(input *rds.ModifyDBInstanceInput, d *schema.Resour
 		}
 	}
 
-	return needsModify, diags
+	return needsModify
 }
 
 func dbInstanceModify(ctx context.Context, conn *rds.Client, resourceID string, input *rds.ModifyDBInstanceInput, timeout time.Duration) error {
diff --git a/internal/service/redshift/cluster.go b/internal/service/redshift/cluster.go
index ce935c71af..7bd0519124 100644
--- a/internal/service/redshift/cluster.go
+++ b/internal/service/redshift/cluster.go
@@ -16,7 +16,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/aws/arn"
 	"github.com/aws/aws-sdk-go-v2/service/redshift"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -52,10 +51,6 @@ func resourceCluster() *schema.Resource {
 			Delete: schema.DefaultTimeout(40 * time.Minute),
 		},
 
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath("master_password"), cty.GetAttrPath("master_password_wo")),
-		},
-
 		Schema: map[string]*schema.Schema{
 			"allow_version_upgrade": {
 				Type:     schema.TypeBool,
@@ -272,7 +267,7 @@ func resourceCluster() *schema.Resource {
 			"manage_master_password": {
 				Type:          schema.TypeBool,
 				Optional:      true,
-				ConflictsWith: []string{"master_password", "master_password_wo"},
+				ConflictsWith: []string{"master_password"},
 			},
 			"manual_snapshot_retention_period": {
 				Type:         schema.TypeInt,
@@ -291,26 +286,7 @@ func resourceCluster() *schema.Resource {
 					validation.StringMatch(regexache.MustCompile(`^.*[0-9].*`), "must contain at least one number"),
 					validation.StringMatch(regexache.MustCompile(`^[^\@\/'" ]*$`), "cannot contain [/@\"' ]"),
 				),
-				ConflictsWith: []string{"manage_master_password", "master_password_wo"},
-			},
-			"master_password_wo": {
-				Type:      schema.TypeString,
-				Optional:  true,
-				WriteOnly: true,
-				Sensitive: true,
-				ValidateFunc: validation.All(
-					validation.StringLenBetween(8, 64),
-					validation.StringMatch(regexache.MustCompile(`^.*[a-z].*`), "must contain at least one lowercase letter"),
-					validation.StringMatch(regexache.MustCompile(`^.*[A-Z].*`), "must contain at least one uppercase letter"),
-					validation.StringMatch(regexache.MustCompile(`^.*[0-9].*`), "must contain at least one number"),
-					validation.StringMatch(regexache.MustCompile(`^[^\@\/'" ]*$`), "cannot contain [/@\"' ]"),
-				),
-				ConflictsWith: []string{"manage_master_password", "master_password"},
-			},
-			"master_password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"master_password_wo"},
+				ConflictsWith: []string{"manage_master_password"},
 			},
 			"master_password_secret_arn": {
 				Type:     schema.TypeString,
@@ -479,13 +455,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 		Tags:                             getTagsIn(ctx),
 	}
 
-	// get write-only value from configuration
-	masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	if v, ok := d.GetOk("aqua_configuration_status"); ok {
 		inputR.AquaConfigurationStatus = awstypes.AquaConfigurationStatus(v.(string))
 		inputC.AquaConfigurationStatus = awstypes.AquaConfigurationStatus(v.(string))
@@ -522,7 +491,7 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 	}
 
 	if v, ok := d.GetOk(names.AttrEncrypted); ok {
-		inputC.Encrypted = aws.Bool(v.(bool)) // encryption is true by default
+		inputC.Encrypted = aws.Bool(v.(bool))
 		inputR.Encrypted = aws.Bool(v.(bool))
 	}
 
@@ -560,10 +529,6 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 		inputC.MasterUserPassword = aws.String(v.(string))
 	}
 
-	if masterPasswordWO != "" {
-		inputC.MasterUserPassword = aws.String(masterPasswordWO)
-	}
-
 	if v, ok := d.GetOk("master_password_secret_kms_key_id"); ok {
 		inputR.MasterPasswordSecretKmsKeyId = aws.String(v.(string))
 		inputC.MasterPasswordSecretKmsKeyId = aws.String(v.(string))
@@ -614,7 +579,7 @@ func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta int
 
 		d.SetId(aws.ToString(output.Cluster.ClusterIdentifier))
 	} else {
-		if _, ok := d.GetOk("master_password"); !ok && masterPasswordWO == "" {
+		if _, ok := d.GetOk("master_password"); !ok {
 			if _, ok := d.GetOk("manage_master_password"); !ok {
 				return sdkdiag.AppendErrorf(diags, `provider.aws: aws_redshift_cluster: %s: one of "manage_master_password" or "master_password" is required`, d.Get(names.AttrClusterIdentifier).(string))
 			}
@@ -843,18 +808,6 @@ func resourceClusterUpdate(ctx context.Context, d *schema.ResourceData, meta int
 			input.MasterUserPassword = aws.String(d.Get("master_password").(string))
 		}
 
-		if d.HasChange("master_password_wo_version") {
-			masterPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("master_password_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if masterPasswordWO != "" {
-				input.MasterUserPassword = aws.String(masterPasswordWO)
-			}
-		}
-
 		if d.HasChange("master_password_secret_kms_key_id") {
 			input.MasterPasswordSecretKmsKeyId = aws.String(d.Get("master_password_secret_kms_key_id").(string))
 		}
diff --git a/internal/service/redshiftserverless/namespace.go b/internal/service/redshiftserverless/namespace.go
index 388f3ae376..069a3136d8 100644
--- a/internal/service/redshiftserverless/namespace.go
+++ b/internal/service/redshiftserverless/namespace.go
@@ -14,11 +14,9 @@ import (
 	"github.com/aws/aws-sdk-go-v2/aws/arn"
 	"github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/redshiftserverless/types"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
 	"github.com/hashicorp/terraform-provider-aws/internal/enum"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs"
@@ -43,10 +41,6 @@ func resourceNamespace() *schema.Resource {
 			StateContext: schema.ImportStatePassthroughContext,
 		},
 
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath("admin_user_password"), cty.GetAttrPath("admin_user_password_wo")),
-		},
-
 		Schema: map[string]*schema.Schema{
 			"admin_password_secret_arn": {
 				Type:     schema.TypeString,
@@ -62,18 +56,7 @@ func resourceNamespace() *schema.Resource {
 				Type:          schema.TypeString,
 				Optional:      true,
 				Sensitive:     true,
-				ConflictsWith: []string{"manage_admin_password", "admin_user_password_wo"},
-			},
-			"admin_user_password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				ConflictsWith: []string{"admin_user_password", "manage_admin_password"},
-			},
-			"admin_user_password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"admin_user_password_wo"},
+				ConflictsWith: []string{"manage_admin_password"},
 			},
 			"admin_username": {
 				Type:      schema.TypeString,
@@ -122,7 +105,7 @@ func resourceNamespace() *schema.Resource {
 			"manage_admin_password": {
 				Type:          schema.TypeBool,
 				Optional:      true,
-				ConflictsWith: []string{"admin_user_password", "admin_user_password_wo"},
+				ConflictsWith: []string{"admin_user_password"},
 			},
 			"namespace_id": {
 				Type:     schema.TypeString,
@@ -151,12 +134,6 @@ func resourceNamespaceCreate(ctx context.Context, d *schema.ResourceData, meta i
 		Tags:          getTagsIn(ctx),
 	}
 
-	adminUserPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("admin_user_password_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
 	if v, ok := d.GetOk("admin_password_secret_kms_key_id"); ok {
 		input.AdminPasswordSecretKmsKeyId = aws.String(v.(string))
 	}
@@ -165,10 +142,6 @@ func resourceNamespaceCreate(ctx context.Context, d *schema.ResourceData, meta i
 		input.AdminUserPassword = aws.String(v.(string))
 	}
 
-	if adminUserPasswordWO != "" {
-		input.AdminUserPassword = aws.String(adminUserPasswordWO)
-	}
-
 	if v, ok := d.GetOk("admin_username"); ok {
 		input.AdminUsername = aws.String(v.(string))
 	}
@@ -252,22 +225,8 @@ func resourceNamespaceUpdate(ctx context.Context, d *schema.ResourceData, meta i
 			input.AdminPasswordSecretKmsKeyId = aws.String(d.Get("admin_password_secret_kms_key_id").(string))
 		}
 
-		if d.HasChanges("admin_username", "admin_user_password", "admin_user_password_wo_version") {
+		if d.HasChanges("admin_username", "admin_user_password") {
 			input.AdminUsername = aws.String(d.Get("admin_username").(string))
-
-			if v, ok := d.Get("admin_user_password").(string); ok {
-				input.AdminUserPassword = aws.String(v)
-			}
-
-			adminUserPasswordWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("admin_user_password_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if adminUserPasswordWO != "" {
-				input.AdminUserPassword = aws.String(adminUserPasswordWO)
-			}
 		}
 
 		if d.HasChange("default_iam_role_arn") {
diff --git a/internal/service/secretsmanager/secret_version.go b/internal/service/secretsmanager/secret_version.go
index d6f5aa5cc2..b6ec344a65 100644
--- a/internal/service/secretsmanager/secret_version.go
+++ b/internal/service/secretsmanager/secret_version.go
@@ -12,12 +12,10 @@ import (
 	"github.com/aws/aws-sdk-go-v2/aws"
 	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
 	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
@@ -42,14 +40,7 @@ func resourceSecretVersion() *schema.Resource {
 		DeleteWithoutTimeout: resourceSecretVersionDelete,
 
 		Importer: &schema.ResourceImporter{
-			StateContext: func(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
-				d.Set("has_secret_string_wo", false)
-				return []*schema.ResourceData{d}, nil
-			},
-		},
-
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath("secret_string"), cty.GetAttrPath("secret_string_wo")),
+			StateContext: schema.ImportStatePassthroughContext,
 		},
 
 		Schema: map[string]*schema.Schema{
@@ -57,10 +48,6 @@ func resourceSecretVersion() *schema.Resource {
 				Type:     schema.TypeString,
 				Computed: true,
 			},
-			"has_secret_string_wo": {
-				Type:     schema.TypeBool,
-				Computed: true,
-			},
 			"secret_id": {
 				Type:     schema.TypeString,
 				Required: true,
@@ -71,7 +58,7 @@ func resourceSecretVersion() *schema.Resource {
 				Optional:      true,
 				ForceNew:      true,
 				Sensitive:     true,
-				ConflictsWith: []string{"secret_string", "secret_string_wo"},
+				ConflictsWith: []string{"secret_string"},
 				ValidateFunc:  verify.ValidBase64String,
 			},
 			"secret_string": {
@@ -79,20 +66,7 @@ func resourceSecretVersion() *schema.Resource {
 				Optional:      true,
 				ForceNew:      true,
 				Sensitive:     true,
-				ConflictsWith: []string{"secret_binary", "secret_string_wo"},
-			},
-			"secret_string_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				Sensitive:     true,
-				ConflictsWith: []string{"secret_binary", "secret_string"},
-			},
-			"secret_string_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				ForceNew:     true,
-				RequiredWith: []string{"secret_string_wo"},
+				ConflictsWith: []string{"secret_binary"},
 			},
 			"version_id": {
 				Type:     schema.TypeString,
@@ -124,22 +98,10 @@ func resourceSecretVersionCreate(ctx context.Context, d *schema.ResourceData, me
 		if err != nil {
 			return sdkdiag.AppendFromErr(diags, err)
 		}
-	}
-
-	if v, ok := d.GetOk("secret_string"); ok {
+	} else if v, ok := d.GetOk("secret_string"); ok {
 		input.SecretString = aws.String(v.(string))
 	}
 
-	secretStringWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("secret_string_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
-	if secretStringWO != "" {
-		input.SecretString = aws.String(secretStringWO)
-	}
-
 	if v, ok := d.GetOk("version_stages"); ok && v.(*schema.Set).Len() > 0 {
 		input.VersionStages = flex.ExpandStringValueSet(v.(*schema.Set))
 	}
@@ -192,23 +154,6 @@ func resourceSecretVersionRead(ctx context.Context, d *schema.ResourceData, meta
 	d.Set("version_id", output.VersionId)
 	d.Set("version_stages", output.VersionStages)
 
-	// unset secret_string if the value is configured as write-only
-	hasWriteOnly := flex.HasWriteOnlyValue(d, "secret_string_wo")
-	secretStringWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("secret_string_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
-	if secretStringWO != "" {
-		hasWriteOnly = true
-	}
-
-	if hasWriteOnly {
-		d.Set("has_secret_string_wo", true)
-		d.Set("secret_string", nil)
-	}
-
 	return diags
 }
 
diff --git a/internal/service/ssm/parameter.go b/internal/service/ssm/parameter.go
index 1a37dd6a69..e405bd0a33 100644
--- a/internal/service/ssm/parameter.go
+++ b/internal/service/ssm/parameter.go
@@ -12,7 +12,6 @@ import (
 	"github.com/aws/aws-sdk-go-v2/service/ssm"
 	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
 	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
@@ -22,7 +21,6 @@ import (
 	"github.com/hashicorp/terraform-provider-aws/internal/enum"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
-	"github.com/hashicorp/terraform-provider-aws/internal/flex"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
 	"github.com/hashicorp/terraform-provider-aws/internal/verify"
@@ -32,7 +30,6 @@ import (
 // @SDKResource("aws_ssm_parameter", name="Parameter")
 // @Tags(identifierAttribute="id", resourceType="Parameter")
 // @Testing(existsType="github.com/aws/aws-sdk-go-v2/service/ssm/types;awstypes;awstypes.Parameter")
-// @Testing(importIgnore="has_value_wo")
 func resourceParameter() *schema.Resource {
 	return &schema.Resource{
 		CreateWithoutTimeout: resourceParameterCreate,
@@ -41,15 +38,9 @@ func resourceParameter() *schema.Resource {
 		DeleteWithoutTimeout: resourceParameterDelete,
 
 		Importer: &schema.ResourceImporter{
-			StateContext: func(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
-				d.Set("has_value_wo", false)
-				return []*schema.ResourceData{d}, nil
-			},
+			StateContext: schema.ImportStatePassthroughContext,
 		},
 
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath(names.AttrValue), cty.GetAttrPath("value_wo")),
-		},
 		Schema: map[string]*schema.Schema{
 			"allowed_pattern": {
 				Type:         schema.TypeString,
@@ -77,15 +68,10 @@ func resourceParameter() *schema.Resource {
 				Optional:     true,
 				ValidateFunc: validation.StringLenBetween(0, 1024),
 			},
-			"has_value_wo": {
-				Type:     schema.TypeBool,
-				Computed: true,
-			},
 			"insecure_value": {
-				Type:         schema.TypeString,
-				Optional:     true,
-				Computed:     true,
-				ExactlyOneOf: []string{"value_wo", "insecure_value", names.AttrValue},
+				Type:     schema.TypeString,
+				Optional: true,
+				Computed: true,
 			},
 			names.AttrKeyID: {
 				Type:     schema.TypeString,
@@ -125,24 +111,10 @@ func resourceParameter() *schema.Resource {
 				ValidateDiagFunc: enum.Validate[awstypes.ParameterType](),
 			},
 			names.AttrValue: {
-				Type:         schema.TypeString,
-				Optional:     true,
-				Sensitive:    true,
-				Computed:     true,
-				ExactlyOneOf: []string{"value_wo", "insecure_value", names.AttrValue},
-			},
-			"value_wo": {
-				Type:         schema.TypeString,
-				Optional:     true,
-				Sensitive:    true,
-				WriteOnly:    true,
-				ExactlyOneOf: []string{"value_wo", "insecure_value", names.AttrValue},
-				RequiredWith: []string{"value_wo_version"},
-			},
-			"value_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"value_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
+				Computed:  true,
 			},
 			names.AttrVersion: {
 				Type:     schema.TypeInt,
@@ -165,9 +137,6 @@ func resourceParameter() *schema.Resource {
 			customdiff.ComputedIf("insecure_value", func(_ context.Context, diff *schema.ResourceDiff, meta interface{}) bool {
 				return diff.HasChange(names.AttrValue)
 			}),
-			customdiff.ComputedIf("has_value_wo", func(_ context.Context, diff *schema.ResourceDiff, meta interface{}) bool {
-				return diff.HasChange("value_wo_version")
-			}),
 			verify.SetTagsDiff,
 		),
 	}
@@ -184,16 +153,6 @@ func resourceParameterCreate(ctx context.Context, d *schema.ResourceData, meta i
 		value = v
 	}
 
-	valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
-	diags = append(diags, di...)
-	if diags.HasError() {
-		return diags
-	}
-
-	if valueWO != "" {
-		value = valueWO
-	}
-
 	input := &ssm.PutParameterInput{
 		AllowedPattern: aws.String(d.Get("allowed_pattern").(string)),
 		Name:           aws.String(name),
@@ -289,31 +248,12 @@ func resourceParameterRead(ctx context.Context, d *schema.ResourceData, meta int
 	d.Set(names.AttrType, param.Type)
 	d.Set(names.AttrVersion, param.Version)
 
-	hasWriteOnly := d.Get("has_value_wo").(bool)
-	rawConfig := d.GetRawConfig()
-	if !rawConfig.IsNull() {
-		valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
-		diags = append(diags, di...)
-		if diags.HasError() {
-			return diags
-		}
-
-		if valueWO != "" {
-			hasWriteOnly = true
-		}
-	}
-
 	if _, ok := d.GetOk("insecure_value"); ok && param.Type != awstypes.ParameterTypeSecureString {
 		d.Set("insecure_value", param.Value)
 	} else {
 		d.Set(names.AttrValue, param.Value)
 	}
 
-	if hasWriteOnly {
-		d.Set("has_value_wo", true)
-		d.Set(names.AttrValue, nil)
-	}
-
 	if param.Type == awstypes.ParameterTypeSecureString && d.Get("insecure_value").(string) != "" {
 		return sdkdiag.AppendErrorf(diags, "invalid configuration, cannot set type = %s and insecure_value", param.Type)
 	}
@@ -350,18 +290,6 @@ func resourceParameterUpdate(ctx context.Context, d *schema.ResourceData, meta i
 			value = v
 		}
 
-		if d.HasChanges("value_wo_version") {
-			valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
-			diags = append(diags, di...)
-			if diags.HasError() {
-				return diags
-			}
-
-			if valueWO != "" {
-				value = valueWO
-			}
-		}
-
 		input := &ssm.PutParameterInput{
 			AllowedPattern: aws.String(d.Get("allowed_pattern").(string)),
 			Name:           aws.String(d.Id()),
