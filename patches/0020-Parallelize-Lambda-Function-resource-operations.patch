From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Florian Stadler <florian@pulumi.com>
Date: Wed, 22 May 2024 17:01:32 +0200
Subject: [PATCH] Parallelize Lambda Function resource operations

Upstream introduced serialization of Lambda Function resource
operations to fight high memory usage when managing a lot of
Lambda functions.
We think this was an optimization for a special edge case that
drastically worsens the UX for the majority of users.

diff --git a/internal/service/lambda/function.go b/internal/service/lambda/function.go
index f7294983e2d..bb6d966ab42 100644
--- a/internal/service/lambda/function.go
+++ b/internal/service/lambda/function.go
@@ -37,7 +37,6 @@ import (
 
 const (
 	FunctionVersionLatest = "$LATEST"
-	mutexKey              = `aws_lambda_function`
 	listVersionsMaxItems  = 10000
 )
 
@@ -498,11 +497,6 @@ func resourceFunctionCreate(ctx context.Context, d *schema.ResourceData, meta an
 	}
 
 	if v, ok := d.GetOk("filename"); ok {
-		// Grab an exclusive lock so that we're only reading one function into memory at a time.
-		// See https://github.com/hashicorp/terraform/issues/9364.
-		conns.GlobalMutexKV.Lock(mutexKey)
-		defer conns.GlobalMutexKV.Unlock(mutexKey)
-
 		zipFile, err := tfio.ReadFileContents(v.(string))
 
 		if err != nil {
@@ -995,11 +989,6 @@ func resourceFunctionUpdate(ctx context.Context, d *schema.ResourceData, meta an
 		}
 
 		if v, ok := d.GetOk("filename"); ok {
-			// Grab an exclusive lock so that we're only reading one function into memory at a time.
-			// See https://github.com/hashicorp/terraform/issues/9364
-			conns.GlobalMutexKV.Lock(mutexKey)
-			defer conns.GlobalMutexKV.Unlock(mutexKey)
-
 			zipFile, err := tfio.ReadFileContents(v.(string))
 
 			if err != nil {
