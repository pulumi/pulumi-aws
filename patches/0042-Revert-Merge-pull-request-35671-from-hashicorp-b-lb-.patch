From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Venelin <venelin@pulumi.com>
Date: Wed, 14 Feb 2024 14:49:38 +0000
Subject: [PATCH 42/46] Revert "Merge pull request #35671 from
 hashicorp/b-lb-listener-stickiness-3"

This reverts commit 32a681fcfcd8d78c5ac9e199384a980bb71c82ed, reversing
changes made to 18afc65502825fcff19b8be8588836a66a96e06a.

diff --git a/.changelog/35671.txt b/.changelog/35671.txt
deleted file mode 100644
index 7c9da01c62..0000000000
--- a/.changelog/35671.txt
+++ /dev/null
@@ -1,15 +0,0 @@
-```release-note:bug
-resource/aws_lb_listener: Was not storing `default_action[].forward` in state if only a single `target_group` was set.
-```
-
-```release-note:bug
-resource/aws_lb_listener_rule: Was not storing `action[].forward` in state if only a single `target_group` was set.
-```
-
-```release-note:bug
-resource/aws_lb_listener: Was incorrectly reporting conflicting `default_action[].target_group_arn` when `ignore_changes` was set.
-```
-
-```release-note:bug
-resource/aws_lb_listener_rule: Was incorrectly reporting conflicting `action[].target_group_arn` when `ignore_changes` was set.
-```
diff --git a/internal/service/elbv2/listener.go b/internal/service/elbv2/listener.go
index 159d62abf7..dd0eaddc43 100644
--- a/internal/service/elbv2/listener.go
+++ b/internal/service/elbv2/listener.go
@@ -214,11 +214,9 @@ func ResourceListener() *schema.Resource {
 							},
 						},
 						"forward": {
-							Type:                  schema.TypeList,
-							Optional:              true,
-							DiffSuppressOnRefresh: true,
-							DiffSuppressFunc:      diffSuppressMissingForward("default_action"),
-							MaxItems:              1,
+							Type:     schema.TypeList,
+							Optional: true,
+							MaxItems: 1,
 							Elem: &schema.Resource{
 								Schema: map[string]*schema.Schema{
 									"target_group": {
@@ -513,7 +511,7 @@ func resourceListenerRead(ctx context.Context, d *schema.ResourceData, meta inte
 	sort.Slice(listener.DefaultActions, func(i, j int) bool {
 		return aws.ToInt32(listener.DefaultActions[i].Order) < aws.ToInt32(listener.DefaultActions[j].Order)
 	})
-	if err := d.Set("default_action", flattenLbListenerActions(d, "default_action", listener.DefaultActions)); err != nil {
+	if err := d.Set("default_action", flattenLbListenerActions(d, listener.DefaultActions)); err != nil {
 		return sdkdiag.AppendErrorf(diags, "setting default_action: %s", err)
 	}
 	d.Set("load_balancer_arn", listener.LoadBalancerArn)
@@ -930,26 +928,20 @@ func expandLbListenerActionForwardConfigTargetGroupStickinessConfig(l []interfac
 		return nil
 	}
 
-	// The Plugin SDK stores a `nil` returned by the API as a `0` in the state. This is a invalid value.
-	var duration *int32
-	if v := tfMap["duration"].(int); v > 0 {
-		duration = aws.Int32(int32(v))
-	}
-
 	return &awstypes.TargetGroupStickinessConfig{
 		Enabled:         aws.Bool(tfMap["enabled"].(bool)),
-		DurationSeconds: duration,
+		DurationSeconds: aws.Int32(int32(tfMap["duration"].(int))),
 	}
 }
 
-func flattenLbListenerActions(d *schema.ResourceData, attrName string, actions []awstypes.Action) []interface{} {
-	if len(actions) == 0 {
+func flattenLbListenerActions(d *schema.ResourceData, Actions []awstypes.Action) []interface{} {
+	if len(Actions) == 0 {
 		return []interface{}{}
 	}
 
 	var vActions []interface{}
 
-	for i, action := range actions {
+	for i, action := range Actions {
 		m := map[string]interface{}{
 			"type":  string(action.Type),
 			"order": aws.ToInt32(action.Order),
@@ -957,7 +949,11 @@ func flattenLbListenerActions(d *schema.ResourceData, attrName string, actions [
 
 		switch action.Type {
 		case awstypes.ActionTypeEnumForward:
-			flattenLbForwardAction(d, attrName, i, action, m)
+			if aws.ToString(action.TargetGroupArn) != "" {
+				m["target_group_arn"] = aws.ToString(action.TargetGroupArn)
+			} else {
+				m["forward"] = flattenLbListenerActionForwardConfig(action.ForwardConfig)
+			}
 
 		case awstypes.ActionTypeEnumRedirect:
 			m["redirect"] = flattenLbListenerActionRedirectConfig(action.RedirectConfig)
@@ -972,7 +968,7 @@ func flattenLbListenerActions(d *schema.ResourceData, attrName string, actions [
 			// The LB API currently provides no way to read the ClientSecret
 			// Instead we passthrough the configuration value into the state
 			var clientSecret string
-			if v, ok := d.GetOk(attrName + "." + strconv.Itoa(i) + ".authenticate_oidc.0.client_secret"); ok {
+			if v, ok := d.GetOk("default_action." + strconv.Itoa(i) + ".authenticate_oidc.0.client_secret"); ok {
 				clientSecret = v.(string)
 			}
 
@@ -985,50 +981,6 @@ func flattenLbListenerActions(d *schema.ResourceData, attrName string, actions [
 	return vActions
 }
 
-func flattenLbForwardAction(d *schema.ResourceData, attrName string, i int, awsAction awstypes.Action, actionMap map[string]any) {
-	// On create and update, we have a Config
-	// On refresh, we have a populated State
-	// On import, we have an empty State and empty Config
-
-	if rawConfig := d.GetRawConfig(); rawConfig.IsKnown() && !rawConfig.IsNull() {
-		actions := rawConfig.GetAttr(attrName)
-		flattenLbForwardActionOneOf(actions, i, awsAction, actionMap)
-		return
-	}
-
-	rawState := d.GetRawState()
-	defaultActions := rawState.GetAttr(attrName)
-
-	if defaultActions.LengthInt() > 0 {
-		flattenLbForwardActionOneOf(defaultActions, i, awsAction, actionMap)
-		return
-	}
-
-	flattenLbForwardActionBoth(awsAction, actionMap)
-}
-
-func flattenLbForwardActionOneOf(actions cty.Value, i int, awsAction awstypes.Action, actionMap map[string]any) {
-	if actions.IsKnown() && !actions.IsNull() {
-		index := cty.NumberIntVal(int64(i))
-		if actions.HasIndex(index).True() {
-			action := actions.Index(index)
-			if action.IsKnown() && !action.IsNull() {
-				forward := action.GetAttr("forward")
-				if forward.IsKnown() && forward.LengthInt() > 0 {
-					actionMap["forward"] = flattenLbListenerActionForwardConfig(awsAction.ForwardConfig)
-				} else {
-					actionMap["target_group_arn"] = aws.ToString(awsAction.TargetGroupArn)
-				}
-			}
-		}
-	}
-}
-
-func flattenLbForwardActionBoth(awsAction awstypes.Action, actionMap map[string]any) {
-	actionMap["target_group_arn"] = aws.ToString(awsAction.TargetGroupArn)
-	actionMap["forward"] = flattenLbListenerActionForwardConfig(awsAction.ForwardConfig)
-}
-
 func flattenMutualAuthenticationAttributes(description *awstypes.MutualAuthenticationAttributes) []interface{} {
 	if description == nil {
 		return []interface{}{}
@@ -1243,8 +1195,7 @@ func listenerActionPlantimeValidate(actionPath cty.Path, action cty.Value, diags
 		tga := action.GetAttr("target_group_arn")
 		f := action.GetAttr("forward")
 
-		// If `ignore_changes` is set, even if there is no value in the configuration, the value in RawConfig is "" on refresh.
-		if (tga.IsKnown() && !tga.IsNull() && tga.AsString() != "") && (f.IsKnown() && !f.IsNull() && f.LengthInt() > 0) {
+		if !tga.IsNull() && (!f.IsNull() && f.LengthInt() > 0) {
 			*diags = append(*diags, errs.NewAttributeErrorDiagnostic(actionPath,
 				"Invalid Attribute Combination",
 				fmt.Sprintf("Only one of %q or %q can be specified.",
@@ -1370,15 +1321,3 @@ func listenerActionRuntimeValidate(actionPath cty.Path, action map[string]any, d
 		}
 	}
 }
-
-func diffSuppressMissingForward(attrName string) schema.SchemaDiffSuppressFunc {
-	return func(k, old, new string, d *schema.ResourceData) bool {
-		if regexache.MustCompile(fmt.Sprintf(`^%s\.\d+\.forward\.#$`, attrName)).MatchString(k) {
-			return old == "1" && new == "0"
-		}
-		if regexache.MustCompile(fmt.Sprintf(`^%s\.\d+\.forward\.\d+\.target_group\.#$`, attrName)).MatchString(k) {
-			return old == "1" && new == "0"
-		}
-		return false
-	}
-}
diff --git a/internal/service/elbv2/listener_data_source.go b/internal/service/elbv2/listener_data_source.go
index a209c9338b..c9ec31a266 100644
--- a/internal/service/elbv2/listener_data_source.go
+++ b/internal/service/elbv2/listener_data_source.go
@@ -338,7 +338,7 @@ func dataSourceListenerRead(ctx context.Context, d *schema.ResourceData, meta in
 	sort.Slice(listener.DefaultActions, func(i, j int) bool {
 		return aws.ToInt32(listener.DefaultActions[i].Order) < aws.ToInt32(listener.DefaultActions[j].Order)
 	})
-	if err := d.Set("default_action", flattenLbListenerActions(d, "default_action", listener.DefaultActions)); err != nil {
+	if err := d.Set("default_action", flattenLbListenerActions(d, listener.DefaultActions)); err != nil {
 		return sdkdiag.AppendErrorf(diags, "setting default_action: %s", err)
 	}
 	d.Set("load_balancer_arn", listener.LoadBalancerArn)
diff --git a/internal/service/elbv2/listener_rule.go b/internal/service/elbv2/listener_rule.go
index 047ee68dee..6da74fd123 100644
--- a/internal/service/elbv2/listener_rule.go
+++ b/internal/service/elbv2/listener_rule.go
@@ -98,11 +98,9 @@ func ResourceListenerRule() *schema.Resource {
 						},
 
 						"forward": {
-							Type:                  schema.TypeList,
-							Optional:              true,
-							DiffSuppressOnRefresh: true,
-							DiffSuppressFunc:      diffSuppressMissingForward("action"),
-							MaxItems:              1,
+							Type:     schema.TypeList,
+							Optional: true,
+							MaxItems: 1,
 							Elem: &schema.Resource{
 								Schema: map[string]*schema.Schema{
 									"target_group": {
@@ -593,9 +591,41 @@ func resourceListenerRuleRead(ctx context.Context, d *schema.ResourceData, meta
 	sort.Slice(rule.Actions, func(i, j int) bool {
 		return aws.ToInt32(rule.Actions[i].Order) < aws.ToInt32(rule.Actions[j].Order)
 	})
-	if err := d.Set("action", flattenLbListenerActions(d, "action", rule.Actions)); err != nil {
-		return sdkdiag.AppendErrorf(diags, "setting action: %s", err)
+	actions := make([]interface{}, len(rule.Actions))
+	for i, action := range rule.Actions {
+		actionMap := map[string]interface{}{
+			"type":  string(action.Type),
+			"order": aws.ToInt32(action.Order),
+		}
+
+		switch action.Type {
+		case awstypes.ActionTypeEnumForward:
+			if aws.ToString(action.TargetGroupArn) != "" {
+				actionMap["target_group_arn"] = aws.ToString(action.TargetGroupArn)
+			} else {
+				actionMap["forward"] = flattenLbListenerActionForwardConfig(action.ForwardConfig)
+			}
+
+		case awstypes.ActionTypeEnumRedirect:
+			actionMap["redirect"] = flattenLbListenerActionRedirectConfig(action.RedirectConfig)
+
+		case awstypes.ActionTypeEnumFixedResponse:
+			actionMap["fixed_response"] = flattenLbListenerActionFixedResponseConfig(action.FixedResponseConfig)
+
+		case awstypes.ActionTypeEnumAuthenticateCognito:
+			actionMap["authenticate_cognito"] = flattenLbListenerActionAuthenticateCognitoConfig(action.AuthenticateCognitoConfig)
+
+		case awstypes.ActionTypeEnumAuthenticateOidc:
+			// The LB API currently provides no way to read the ClientSecret
+			// Instead we passthrough the configuration value into the state
+			clientSecret := d.Get("action." + strconv.Itoa(i) + ".authenticate_oidc.0.client_secret").(string)
+
+			actionMap["authenticate_oidc"] = flattenAuthenticateOIDCActionConfig(action.AuthenticateOidcConfig, clientSecret)
+		}
+
+		actions[i] = actionMap
 	}
+	d.Set("action", actions)
 
 	conditions := make([]interface{}, len(rule.Conditions))
 	for i, condition := range rule.Conditions {
diff --git a/website/docs/r/lb_listener.html.markdown b/website/docs/r/lb_listener.html.markdown
index 1e934ff25e..1695adb02f 100644
--- a/website/docs/r/lb_listener.html.markdown
+++ b/website/docs/r/lb_listener.html.markdown
@@ -278,19 +278,10 @@ The following arguments are optional:
 * `authenticate_cognito` - (Optional) Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. Detailed below.
 * `authenticate_oidc` - (Optional) Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. Detailed below.
 * `fixed_response` - (Optional) Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
-* `forward` - (Optional) Configuration block for creating an action that distributes requests among one or more target groups.
-  Specify only if `type` is `forward`.
-  Cannot be specified with `target_group_arn`.
-  Detailed below.
-* `order` - (Optional) Order for the action.
-  The action with the lowest value for order is performed first.
-  Valid values are between `1` and `50000`.
-  Defaults to the position in the list of actions.
+* `forward` - (Optional) Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`. Detailed below.
+* `order` - (Optional) Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`.
 * `redirect` - (Optional) Configuration block for creating a redirect action. Required if `type` is `redirect`. Detailed below.
-* `target_group_arn` - (Optional) ARN of the Target Group to which to route traffic.
-  Specify only if `type` is `forward` and you want to route to a single target group.
-  To route to one or more target groups, use a `forward` block instead.
-  Cannot be specified with `forward`.
+* `target_group_arn` - (Optional) ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
 
 #### authenticate_cognito
 
diff --git a/website/docs/r/lb_listener_rule.html.markdown b/website/docs/r/lb_listener_rule.html.markdown
index f6f117d743..f3f610075d 100644
--- a/website/docs/r/lb_listener_rule.html.markdown
+++ b/website/docs/r/lb_listener_rule.html.markdown
@@ -219,21 +219,12 @@ This resource supports the following arguments:
 Action Blocks (for `action`) support the following:
 
 * `type` - (Required) The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
+* `target_group_arn` - (Optional) The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
+* `forward` - (Optional) Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
+* `redirect` - (Optional) Information for creating a redirect action. Required if `type` is `redirect`.
+* `fixed_response` - (Optional) Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
 * `authenticate_cognito` - (Optional) Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
 * `authenticate_oidc` - (Optional) Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
-* `fixed_response` - (Optional) Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
-* `forward` - (Optional) Configuration block for creating an action that distributes requests among one or more target groups.
-  Specify only if `type` is `forward`.
-  Cannot be specified with `target_group_arn`.
-* `order` - (Optional) Order for the action.
-  The action with the lowest value for order is performed first.
-  Valid values are between `1` and `50000`.
-  Defaults to the position in the list of actions.
-* `redirect` - (Optional) Information for creating a redirect action. Required if `type` is `redirect`.
-* `target_group_arn` - (Optional) ARN of the Target Group to which to route traffic.
-  Specify only if `type` is `forward` and you want to route to a single target group.
-  To route to one or more target groups, use a `forward` block instead.
-  Cannot be specified with `forward`.
 
 Forward Blocks (for `forward`) support the following:
 
