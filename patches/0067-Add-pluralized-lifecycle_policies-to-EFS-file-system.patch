From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Florian Stadler <florian@pulumi.com>
Date: Tue, 1 Oct 2024 20:39:29 +0200
Subject: [PATCH] Add pluralized lifecycle_policies to EFS file system data
 source

The lifecycle_policy attribute has MaxItemsOne hardcoded on the
Pulumi side and this triggers panics when there is more than
one lifecycle policy on the resource.
By adding pluralized lifecycle_policies and fixing the singular
version to only return at most one element we're able to fix this
panic without introducing breaking changes.

diff --git a/internal/service/efs/file_system_data_source.go b/internal/service/efs/file_system_data_source.go
index f045aa36a4..a7b710fe9b 100644
--- a/internal/service/efs/file_system_data_source.go
+++ b/internal/service/efs/file_system_data_source.go
@@ -63,6 +63,28 @@ func dataSourceFileSystem() *schema.Resource {
 				Computed: true,
 			},
 			"lifecycle_policy": {
+				Type:       schema.TypeList,
+				Computed:   true,
+				Deprecated: "Use `lifecycle_policies` instead. This field will be removed in the next major version.",
+				Elem: &schema.Resource{
+					Schema: map[string]*schema.Schema{
+						"transition_to_archive": {
+							Type:     schema.TypeString,
+							Computed: true,
+						},
+						"transition_to_ia": {
+							Type:     schema.TypeString,
+							Computed: true,
+						},
+						"transition_to_primary_storage_class": {
+							Type:     schema.TypeString,
+							Computed: true,
+						},
+					},
+				},
+			},
+			// duplicating lifecycle_policy to drop the hard coded MaxItemsOne on the Pulumi side without a breaking change
+			"lifecycle_policies": {
 				Type:     schema.TypeList,
 				Computed: true,
 				Elem: &schema.Resource{
@@ -179,9 +201,20 @@ func dataSourceFileSystemRead(ctx context.Context, d *schema.ResourceData, meta
 		return sdkdiag.AppendErrorf(diags, "reading EFS File System (%s) lifecycle configuration: %s", d.Id(), err)
 	}
 
-	if err := d.Set("lifecycle_policy", flattenLifecyclePolicies(output.LifecyclePolicies)); err != nil {
+	flattenedLifecyclePolicies := flattenLifecyclePolicies(output.LifecyclePolicies)
+
+	// if there are any lifecycle policies then set the first one as the singular version
+	var singularLifeCyclePolicy []interface{}
+	if len(flattenedLifecyclePolicies) > 0 {
+		singularLifeCyclePolicy = append(singularLifeCyclePolicy, flattenedLifecyclePolicies[0])
+	}
+
+	if err := d.Set("lifecycle_policy", singularLifeCyclePolicy); err != nil {
 		return sdkdiag.AppendErrorf(diags, "setting lifecycle_policy: %s", err)
 	}
+	if err := d.Set("lifecycle_policies", flattenedLifecyclePolicies); err != nil {
+		return sdkdiag.AppendErrorf(diags, "setting lifecycle_policies: %s", err)
+	}
 
 	return diags
 }
