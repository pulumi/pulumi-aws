From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Wed, 1 Nov 2023 10:54:08 -0400
Subject: [PATCH 34/34] Copy tags schema to tags_all schema, remove exceptions


diff --git a/shim/shim.go b/shim/shim.go
index f15010faff..ce64074bfd 100644
--- a/shim/shim.go
+++ b/shim/shim.go
@@ -38,39 +38,25 @@ func NewTagConfig(ctx context.Context, i interface{}) TagConfig {
 	return TagConfig{Tags: tags.New(ctx, i)}
 }
 
+// For resources with tags_all attribute, ensures that the schema of tags_all matches the schema of
+// tags. In particular, this makes sure tags_all is not computed and is ForceNew if necessary. The
+// rationale for this is that Pulumi copies tags to tags_all before it hits the TF layer, so these
+// attributes must match in schema.
 func markTagsAllNotComputedForResources(sdkV2Provider *schema.Provider) {
 	updatedResourcesMap := map[string]*schema.Resource{}
 	for rn, r := range sdkV2Provider.ResourcesMap {
-
-		// Not skipping these resources results in an error:
-		//
-		// * resource aws_macie2_custom_data_identifier: No Update defined, must set ForceNew on: []string{"tags_all"}
-		// * resource aws_emrcontainers_job_template: No Update defined, must set ForceNew on: []string{"tags_all"}
-		// * resource aws_ivs_playback_key_pair: No Update defined, must set ForceNew on: []string{"tags_all"}
-		// * resource aws_ivs_recording_configuration: No Update defined, must set ForceNew on: []string{"tags_all"}
-		// * resource aws_ssm_activation: No Update defined, must set ForceNew on: []string{"tags_all"}
-		switch rn {
-		case "aws_macie2_custom_data_identifier",
-			"aws_emrcontainers_job_template",
-			"aws_ivs_playback_key_pair",
-			"aws_ivs_recording_configuration",
-			"aws_ssm_activation":
-			continue
-		}
-
 		if _, ok := r.Schema["tags_all"]; ok {
 			var updatedResource schema.Resource = *r
 			updatedResource.Schema = map[string]*schema.Schema{}
 
 			for k, v := range r.Schema {
 				if k == "tags_all" {
-					var tagsAll schema.Schema
-					tagsAll = *v
-					tagsAll.Computed = false
-					if !(tagsAll.Required || tagsAll.Optional) {
-						tagsAll.Optional = true
+					if tagsSchema, ok := r.Schema["tags"]; ok {
+						tagsAll := *tagsSchema
+						updatedResource.Schema[k] = &tagsAll
+					} else {
+						panic("Unable to edit tagsAll schema for " + rn)
 					}
-					updatedResource.Schema[k] = &tagsAll
 				} else {
 					updatedResource.Schema[k] = v
 				}
