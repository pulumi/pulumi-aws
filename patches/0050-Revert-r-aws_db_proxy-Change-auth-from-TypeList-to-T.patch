From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: corymhall <43035978+corymhall@users.noreply.github.com>
Date: Wed, 29 May 2024 09:11:43 -0400
Subject: [PATCH] Revert "r/aws_db_proxy: Change `auth` from `TypeList` to
 `TypeSet` as order is not significant."

This reverts commit 2db643f461c058fb7a9e9940afef240016412050.

Beyond a mechanical revert, during v5.74.0 release resolution there were some conflicts over the test file that are
resolved in favor of upstream.

diff --git a/internal/service/rds/proxy.go b/internal/service/rds/proxy.go
index d2d41676c1..8492711d7c 100644
--- a/internal/service/rds/proxy.go
+++ b/internal/service/rds/proxy.go
@@ -19,7 +19,6 @@ import (
 	"github.com/hashicorp/terraform-provider-aws/internal/errs"
 	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
 	"github.com/hashicorp/terraform-provider-aws/internal/flex"
-	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
 	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
@@ -53,7 +52,7 @@ func resourceProxy() *schema.Resource {
 				Computed: true,
 			},
 			"auth": {
-				Type:     schema.TypeSet,
+				Type:     schema.TypeList,
 				Required: true,
 				Elem: &schema.Resource{
 					Schema: map[string]*schema.Schema{
@@ -88,7 +87,6 @@ func resourceProxy() *schema.Resource {
 						},
 					},
 				},
-				Set: sdkv2.SimpleSchemaSetFunc("auth_scheme", names.AttrDescription, "iam_auth", "secret_arn", names.AttrUsername),
 			},
 			"debug_logging": {
 				Type:     schema.TypeBool,
@@ -147,7 +145,7 @@ func resourceProxyCreate(ctx context.Context, d *schema.ResourceData, meta inter
 
 	name := d.Get(names.AttrName).(string)
 	input := &rds.CreateDBProxyInput{
-		Auth:         expandUserAuthConfigs(d.Get("auth").(*schema.Set).List()),
+		Auth:         expandUserAuthConfigs(d.Get("auth").([]interface{})),
 		DBProxyName:  aws.String(name),
 		EngineFamily: types.EngineFamily(d.Get("engine_family").(string)),
 		RoleArn:      aws.String(d.Get(names.AttrRoleARN).(string)),
@@ -224,7 +222,7 @@ func resourceProxyUpdate(ctx context.Context, d *schema.ResourceData, meta inter
 	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
 		oName, nName := d.GetChange(names.AttrName)
 		input := &rds.ModifyDBProxyInput{
-			Auth:           expandUserAuthConfigs(d.Get("auth").(*schema.Set).List()),
+			Auth:           expandUserAuthConfigs(d.Get("auth").([]interface{})),
 			DBProxyName:    aws.String(oName.(string)),
 			DebugLogging:   aws.Bool(d.Get("debug_logging").(bool)),
 			NewDBProxyName: aws.String(nName.(string)),
diff --git a/internal/service/rds/proxy_test.go b/internal/service/rds/proxy_test.go
index 884f83084b..0856302c30 100644
--- a/internal/service/rds/proxy_test.go
+++ b/internal/service/rds/proxy_test.go
@@ -40,12 +40,13 @@ func TestAccRDSProxy_basic(t *testing.T) {
 		Steps: []resource.TestStep{
 			{
 				Config: testAccProxyConfig_basic(rName),
-				Check: resource.ComposeAggregateTestCheckFunc(
+				Check: resource.ComposeTestCheckFunc(
 					testAccCheckProxyExists(ctx, resourceName, &v),
 					resource.TestCheckResourceAttr(resourceName, names.AttrName, rName),
 					resource.TestCheckResourceAttr(resourceName, "engine_family", "MYSQL"),
 					acctest.MatchResourceAttrRegionalARN(ctx, resourceName, names.AttrARN, "rds", regexache.MustCompile(`db-proxy:.+`)),
 					resource.TestCheckResourceAttr(resourceName, "auth.#", "1"),
+
 					resource.TestCheckTypeSetElemNestedAttrs(resourceName, "auth.*", map[string]string{
 						"auth_scheme":               "SECRETS",
 						"client_password_auth_type": "MYSQL_NATIVE_PASSWORD",
@@ -393,10 +394,7 @@ func TestAccRDSProxy_authIAMAuth(t *testing.T) {
 				Config: testAccProxyConfig_authIAMAuth(rName, iamAuth),
 				Check: resource.ComposeTestCheckFunc(
 					testAccCheckProxyExists(ctx, resourceName, &dbProxy),
-					resource.TestCheckResourceAttr(resourceName, "auth.#", "1"),
-					resource.TestCheckTypeSetElemNestedAttrs(resourceName, "auth.*", map[string]string{
-						"iam_auth": iamAuth,
-					}),
+					resource.TestCheckResourceAttr(resourceName, "auth.0.iam_auth", iamAuth),
 				),
 			},
 		},
@@ -455,6 +453,8 @@ func TestAccRDSProxy_tags(t *testing.T) {
 	var dbProxy types.DBProxy
 	resourceName := "aws_db_proxy.test"
 	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
+	key := "foo"
+	value := "bar"
 
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck:                 func() { acctest.PreCheck(ctx, t); testAccDBProxyPreCheck(ctx, t) },
@@ -463,7 +463,7 @@ func TestAccRDSProxy_tags(t *testing.T) {
 		CheckDestroy:             testAccCheckProxyDestroy(ctx),
 		Steps: []resource.TestStep{
 			{
-				Config: testAccProxyConfig_tags1(rName, acctest.CtKey1, acctest.CtValue1),
+				Config: testAccProxyConfig_name(rName, rName),
 				Check: resource.ComposeTestCheckFunc(
 					testAccCheckProxyExists(ctx, resourceName, &dbProxy),
 					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, "1"),
@@ -476,7 +476,7 @@ func TestAccRDSProxy_tags(t *testing.T) {
 				ImportStateVerify: true,
 			},
 			{
-				Config: testAccProxyConfig_tags2(rName, acctest.CtKey1, acctest.CtValue1Updated, acctest.CtKey2, acctest.CtValue2),
+				Config: testAccProxyConfig_tags(rName, key, value),
 				Check: resource.ComposeTestCheckFunc(
 					testAccCheckProxyExists(ctx, resourceName, &dbProxy),
 					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, "2"),
@@ -485,7 +485,7 @@ func TestAccRDSProxy_tags(t *testing.T) {
 				),
 			},
 			{
-				Config: testAccProxyConfig_tags1(rName, acctest.CtKey2, acctest.CtValue2),
+				Config: testAccProxyConfig_tags(rName, acctest.CtKey2, acctest.CtValue2),
 				Check: resource.ComposeTestCheckFunc(
 					testAccCheckProxyExists(ctx, resourceName, &dbProxy),
 					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, "1"),
@@ -585,7 +585,7 @@ func testAccCheckProxyExists(ctx context.Context, n string, v *types.DBProxy) re
 	}
 }
 
-func testAccProxyConfig_base(rName string) string {
+func testAccProxyBaseConfig(rName string) string {
 	return fmt.Sprintf(`
 # Secrets Manager setup
 
@@ -675,14 +675,14 @@ resource "aws_subnet" "test" {
 }
 
 func testAccProxyConfig_basic(rName string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name                   = %[1]q
+  name                   = "%[1]s"
   debug_logging          = false
   engine_family          = "MYSQL"
   idle_client_timeout    = 1800
@@ -697,19 +697,23 @@ resource "aws_db_proxy" "test" {
     iam_auth    = "DISABLED"
     secret_arn  = aws_secretsmanager_secret.test.arn
   }
+
+  tags = {
+    Name = "%[1]s"
+  }
 }
-`, rName))
+`, rName)
 }
 
 func testAccProxyConfig_name(rName, nName string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name                   = %[1]q
+  name                   = "%[2]s"
   engine_family          = "MYSQL"
   role_arn               = aws_iam_role.test.arn
   vpc_security_group_ids = [aws_security_group.test.id]
@@ -722,18 +726,18 @@ resource "aws_db_proxy" "test" {
     secret_arn  = aws_secretsmanager_secret.test.arn
   }
 }
-`, nName))
+`, rName, nName)
 }
 
 func testAccProxyConfig_debugLogging(rName string, debugLogging bool) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name           = %[1]q
+  name           = "%[1]s"
   debug_logging  = %[2]t
   engine_family  = "MYSQL"
   role_arn       = aws_iam_role.test.arn
@@ -746,18 +750,18 @@ resource "aws_db_proxy" "test" {
     secret_arn  = aws_secretsmanager_secret.test.arn
   }
 }
-`, rName, debugLogging))
+`, rName, debugLogging)
 }
 
 func testAccProxyConfig_idleClientTimeout(rName string, idleClientTimeout int) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name                = %[1]q
+  name                = "%[1]s"
   idle_client_timeout = %[2]d
   engine_family       = "MYSQL"
   role_arn            = aws_iam_role.test.arn
@@ -770,18 +774,18 @@ resource "aws_db_proxy" "test" {
     secret_arn  = aws_secretsmanager_secret.test.arn
   }
 }
-`, rName, idleClientTimeout))
+`, rName, idleClientTimeout)
 }
 
 func testAccProxyConfig_requireTLS(rName string, requireTls bool) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name           = %[1]q
+  name           = "%[1]s"
   require_tls    = %[2]t
   engine_family  = "MYSQL"
   role_arn       = aws_iam_role.test.arn
@@ -794,18 +798,18 @@ resource "aws_db_proxy" "test" {
     secret_arn  = aws_secretsmanager_secret.test.arn
   }
 }
-`, rName, requireTls))
+`, rName, requireTls)
 }
 
 func testAccProxyConfig_roleARN(rName, nName string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test2
   ]
 
-  name           = %[1]q
+  name           = "%[1]s"
   engine_family  = "MYSQL"
   role_arn       = aws_iam_role.test2.arn
   vpc_subnet_ids = aws_subnet.test[*].id
@@ -818,8 +822,10 @@ resource "aws_db_proxy" "test" {
   }
 }
 
+# IAM setup
+
 resource "aws_iam_role" "test2" {
-  name               = %[2]q
+  name               = "%[2]s"
   assume_role_policy = data.aws_iam_policy_document.assume.json
 }
 
@@ -827,18 +833,18 @@ resource "aws_iam_role_policy" "test2" {
   role   = aws_iam_role.test.id
   policy = data.aws_iam_policy_document.test.json
 }
-`, rName, nName))
+`, rName, nName)
 }
 
 func testAccProxyConfig_vpcSecurityGroupIDs(rName, nName string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name                   = %[1]q
+  name                   = "%[1]s"
   engine_family          = "MYSQL"
   role_arn               = aws_iam_role.test.arn
   vpc_security_group_ids = [aws_security_group.test2.id]
@@ -853,25 +859,21 @@ resource "aws_db_proxy" "test" {
 }
 
 resource "aws_security_group" "test2" {
-  name   = %[2]q
+  name   = "%[2]s"
   vpc_id = aws_vpc.test.id
-
-  tags = {
-    Name = %[2]q
-  }
 }
-`, rName, nName))
+`, rName, nName)
 }
 
 func testAccProxyConfig_authDescription(rName, description string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name                   = %[1]q
+  name                   = "%[1]s"
   engine_family          = "MYSQL"
   role_arn               = aws_iam_role.test.arn
   vpc_security_group_ids = [aws_security_group.test.id]
@@ -879,23 +881,23 @@ resource "aws_db_proxy" "test" {
 
   auth {
     auth_scheme = "SECRETS"
-    description = %[2]q
+    description = "%[2]s"
     iam_auth    = "DISABLED"
     secret_arn  = aws_secretsmanager_secret.test.arn
   }
 }
-`, rName, description))
+`, rName, description)
 }
 
 func testAccProxyConfig_authIAMAuth(rName, iamAuth string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name                   = %[1]q
+  name                   = "%[1]s"
   engine_family          = "MYSQL"
   role_arn               = aws_iam_role.test.arn
   require_tls            = true
@@ -905,22 +907,22 @@ resource "aws_db_proxy" "test" {
   auth {
     auth_scheme = "SECRETS"
     description = "test"
-    iam_auth    = %[2]q
+    iam_auth    = "%[2]s"
     secret_arn  = aws_secretsmanager_secret.test.arn
   }
 }
-`, rName, iamAuth))
+`, rName, iamAuth)
 }
 
 func testAccProxyConfig_authSecretARN(rName, nName string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+	return testAccProxyBaseConfig(rName) + fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name                   = %[1]q
+  name                   = "%[1]s"
   engine_family          = "MYSQL"
   role_arn               = aws_iam_role.test.arn
   vpc_security_group_ids = [aws_security_group.test.id]
@@ -944,7 +946,7 @@ resource "aws_db_proxy" "test" {
 }
 
 resource "aws_secretsmanager_secret" "test2" {
-  name                    = %[2]q
+  name                    = "%[2]s"
   recovery_window_in_days = 0
 }
 
@@ -952,46 +954,18 @@ resource "aws_secretsmanager_secret_version" "test2" {
   secret_id     = aws_secretsmanager_secret.test2.id
   secret_string = "{\"username\":\"db_user\",\"password\":\"db_user_password\"}"
 }
-`, rName, nName))
-}
-
-func testAccProxyConfig_tags1(rName, tagKey1, tagValue1 string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
-resource "aws_db_proxy" "test" {
-  depends_on = [
-    aws_secretsmanager_secret_version.test,
-    aws_iam_role_policy.test
-  ]
-
-  name                   = %[1]q
-  engine_family          = "MYSQL"
-  role_arn               = aws_iam_role.test.arn
-  vpc_security_group_ids = [aws_security_group.test.id]
-  vpc_subnet_ids         = aws_subnet.test[*].id
-
-  auth {
-    auth_scheme = "SECRETS"
-    description = "test"
-    iam_auth    = "DISABLED"
-    secret_arn  = aws_secretsmanager_secret.test.arn
-  }
-
-  tags = {
-    %[2]q = %[3]q
-  }
-}
-`, rName, tagKey1, tagValue1))
+`, rName, nName)
 }
 
-func testAccProxyConfig_tags2(rName, tagKey1, tagValue1, tagKey2, tagValue2 string) string {
-	return acctest.ConfigCompose(testAccProxyConfig_base(rName), fmt.Sprintf(`
+func testAccProxyConfig_tags(rName, key, value string) string {
+	return acctest.ConfigCompose(testAccProxyBaseConfig(rName), fmt.Sprintf(`
 resource "aws_db_proxy" "test" {
   depends_on = [
     aws_secretsmanager_secret_version.test,
     aws_iam_role_policy.test
   ]
 
-  name                   = %[1]q
+  name                   = "%[1]s"
   engine_family          = "MYSQL"
   role_arn               = aws_iam_role.test.arn
   vpc_security_group_ids = [aws_security_group.test.id]
@@ -1005,9 +979,8 @@ resource "aws_db_proxy" "test" {
   }
 
   tags = {
-    %[2]q = %[3]q
-    %[4]q = %[5]q
+    %[2]s = "%[3]s"
   }
 }
-`, rName, tagKey1, tagValue1, tagKey2, tagValue2))
+`, rName, key, value))
 }
