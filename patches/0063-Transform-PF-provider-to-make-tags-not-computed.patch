From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Mon, 1 Jul 2024 14:57:50 -0400
Subject: [PATCH] Transform PF provider to make tags not computed


diff --git a/shim/pf.go b/shim/pf.go
new file mode 100644
index 0000000000..9caf1e72fa
--- /dev/null
+++ b/shim/pf.go
@@ -0,0 +1,142 @@
+package shim
+
+import (
+	"context"
+
+	"github.com/hashicorp/terraform-plugin-framework/function"
+	"github.com/hashicorp/terraform-plugin-framework/provider"
+	"github.com/hashicorp/terraform-plugin-framework/resource"
+	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
+)
+
+type transformedFrameworkProvider struct {
+	provider.Provider
+}
+
+var _ provider.Provider = (*transformedFrameworkProvider)(nil)
+var _ provider.ProviderWithFunctions = (*transformedFrameworkProvider)(nil)
+
+func (t *transformedFrameworkProvider) Functions(ctx context.Context) []func() function.Function {
+	if pf, ok := t.Provider.(provider.ProviderWithFunctions); ok {
+		return pf.Functions(ctx)
+	}
+	return nil
+}
+
+func (t *transformedFrameworkProvider) Resources(ctx context.Context) []func() resource.Resource {
+	r := t.Provider.Resources(ctx)
+	result := []func() resource.Resource{}
+	for i := range r {
+		i := i
+		result = append(result, func() resource.Resource {
+			return &transformedFrameworkResource{result[i]()}
+		})
+	}
+	return result
+}
+
+type transformedFrameworkResource struct {
+	resource.Resource
+}
+
+func (r *transformedFrameworkResource) Schema(
+	ctx context.Context,
+	req resource.SchemaRequest,
+	resp *resource.SchemaResponse,
+) {
+	r.Resource.Schema(ctx, req, resp)
+	attrs := resp.Schema.Attributes
+	if attrs == nil {
+		return
+	}
+	t := attrs["tags_all"]
+	if t != nil && t.IsComputed() {
+		attrs["tags_all"] = &transformedAttr{t}
+	}
+}
+
+var _ resource.Resource = &transformedFrameworkResource{}
+var _ resource.ResourceWithConfigValidators = &transformedFrameworkResource{}
+var _ resource.ResourceWithConfigure = &transformedFrameworkResource{}
+var _ resource.ResourceWithImportState = &transformedFrameworkResource{}
+var _ resource.ResourceWithModifyPlan = &transformedFrameworkResource{}
+var _ resource.ResourceWithMoveState = &transformedFrameworkResource{}
+var _ resource.ResourceWithUpgradeState = &transformedFrameworkResource{}
+var _ resource.ResourceWithValidateConfig = &transformedFrameworkResource{}
+
+func (r *transformedFrameworkResource) ConfigValidators(ctx context.Context) []resource.ConfigValidator {
+	if v, ok := r.Resource.(resource.ResourceWithConfigValidators); ok {
+		return v.ConfigValidators(ctx)
+	}
+	return nil
+}
+
+func (r *transformedFrameworkResource) Configure(
+	ctx context.Context,
+	req resource.ConfigureRequest,
+	resp *resource.ConfigureResponse,
+) {
+	if v, ok := r.Resource.(resource.ResourceWithConfigure); ok {
+		v.Configure(ctx, req, resp)
+	}
+}
+
+func (r *transformedFrameworkResource) ImportState(
+	ctx context.Context,
+	req resource.ImportStateRequest,
+	resp *resource.ImportStateResponse,
+) {
+	if v, ok := r.Resource.(resource.ResourceWithImportState); ok {
+		v.ImportState(ctx, req, resp)
+	}
+	return
+}
+
+func (r *transformedFrameworkResource) ModifyPlan(
+	ctx context.Context,
+	req resource.ModifyPlanRequest,
+	resp *resource.ModifyPlanResponse,
+) {
+	if v, ok := r.Resource.(resource.ResourceWithModifyPlan); ok {
+		v.ModifyPlan(ctx, req, resp)
+	}
+	return
+}
+
+func (r *transformedFrameworkResource) MoveState(ctx context.Context) []resource.StateMover {
+	if v, ok := r.Resource.(resource.ResourceWithMoveState); ok {
+		return v.MoveState(ctx)
+	}
+	return nil
+}
+
+func (r *transformedFrameworkResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
+	if v, ok := r.Resource.(resource.ResourceWithUpgradeState); ok {
+		return v.UpgradeState(ctx)
+	}
+	return nil
+}
+
+func (r *transformedFrameworkResource) ValidateConfig(
+	ctx context.Context,
+	req resource.ValidateConfigRequest,
+	resp *resource.ValidateConfigResponse,
+) {
+	if v, ok := r.Resource.(resource.ResourceWithValidateConfig); ok {
+		v.ValidateConfig(ctx, req, resp)
+	}
+}
+
+type transformedAttr struct {
+	schema.Attribute
+}
+
+func (*transformedAttr) IsComputed() bool {
+	return false
+}
+
+func (*transformedAttr) IsOptional() bool {
+	return true
+}
+
+var _ schema.Attribute = (*transformedAttr)(nil)
diff --git a/shim/shim.go b/shim/shim.go
index b94f722d26..512c20315b 100644
--- a/shim/shim.go
+++ b/shim/shim.go
@@ -25,7 +25,7 @@ func NewUpstreamProvider(ctx context.Context) (UpstreamProvider, error) {
 	if primary != nil {
 		markTagsAllNotComputedForResources(primary)
 	}
-	pf := fwprovider.New(primary)
+	pf := &transformedFrameworkProvider{fwprovider.New(primary)}
 	return UpstreamProvider{
 		SDKV2Provider:           primary,
 		PluginFrameworkProvider: pf,
