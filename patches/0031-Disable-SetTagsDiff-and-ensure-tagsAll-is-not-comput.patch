From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Tue, 31 Oct 2023 12:42:59 -0400
Subject: [PATCH 31/31] Disable SetTagsDiff and ensure tagsAll is not computed
 at TF level


diff --git a/internal/verify/diff.go b/internal/verify/diff.go
index 5e9c779a28..87a57e6076 100644
--- a/internal/verify/diff.go
+++ b/internal/verify/diff.go
@@ -5,103 +5,14 @@ package verify
 
 import (
 	"context"
-	"fmt"
 	"strings"
 	"time"
 
 	"github.com/aws/aws-sdk-go/aws"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-provider-aws/internal/conns"
-	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 )
 
-// Find JSON diff functions in the json.go file.
-
-// SetTagsDiff sets the new plan difference with the result of
-// merging resource tags on to those defined at the provider-level;
-// returns an error if unsuccessful or if the resource tags are identical
-// to those configured at the provider-level to avoid non-empty plans
-// after resource READ operations as resource and provider-level tags
-// will be indistinguishable when returned from an AWS API.
 func SetTagsDiff(ctx context.Context, diff *schema.ResourceDiff, meta interface{}) error {
-	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
-	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig
-
-	resourceTags := tftags.New(ctx, diff.Get("tags").(map[string]interface{}))
-
-	allTags := defaultTagsConfig.MergeTags(resourceTags).IgnoreConfig(ignoreTagsConfig)
-	// To ensure "tags_all" is correctly computed, we explicitly set the attribute diff
-	// when the merger of resource-level tags onto provider-level tags results in n > 0 tags,
-	// otherwise we mark the attribute as "Computed" only when there is a known diff (excluding an empty map)
-	// or a change for "tags_all".
-	// Reference: https://github.com/hashicorp/terraform-provider-aws/issues/18366
-	// Reference: https://github.com/hashicorp/terraform-provider-aws/issues/19005
-
-	if !diff.GetRawPlan().GetAttr("tags").IsWhollyKnown() {
-		if err := diff.SetNewComputed("tags_all"); err != nil {
-			return fmt.Errorf("setting tags_all to computed: %w", err)
-		}
-		return nil
-	}
-
-	if diff.HasChange("tags") {
-		_, n := diff.GetChange("tags")
-		newTags := tftags.New(ctx, n.(map[string]interface{}))
-
-		if newTags.HasZeroValue() {
-			if err := diff.SetNewComputed("tags_all"); err != nil {
-				return fmt.Errorf("setting tags_all to computed: %w", err)
-			}
-		}
-
-		if len(allTags) > 0 && (!newTags.HasZeroValue() || !allTags.HasZeroValue()) {
-			if err := diff.SetNew("tags_all", allTags.Map()); err != nil {
-				return fmt.Errorf("setting new tags_all diff: %w", err)
-			}
-		}
-
-		if len(allTags) == 0 {
-			if err := diff.SetNewComputed("tags_all"); err != nil {
-				return fmt.Errorf("setting tags_all to computed: %w", err)
-			}
-		}
-	} else if !diff.HasChange("tags") {
-		if len(allTags) > 0 && !allTags.HasZeroValue() {
-			if err := diff.SetNew("tags_all", allTags.Map()); err != nil {
-				return fmt.Errorf("setting new tags_all diff: %w", err)
-			}
-			return nil
-		}
-
-		var ta tftags.KeyValueTags
-		if tagsAll, ok := diff.Get("tags_all").(map[string]interface{}); ok {
-			ta = tftags.New(ctx, tagsAll)
-		}
-		if len(allTags) > 0 && !ta.DeepEqual(allTags) && allTags.HasZeroValue() {
-			if err := diff.SetNewComputed("tags_all"); err != nil {
-				return fmt.Errorf("setting tags_all to computed: %w", err)
-			}
-			return nil
-		}
-	} else if tagsAll, ok := diff.Get("tags_all").(map[string]interface{}); ok {
-		ta := tftags.New(ctx, tagsAll)
-		if !ta.DeepEqual(allTags) {
-			if allTags.HasZeroValue() {
-				if err := diff.SetNewComputed("tags_all"); err != nil {
-					return fmt.Errorf("setting tags_all to computed: %w", err)
-				}
-			}
-		}
-	} else if len(diff.Get("tags_all").(map[string]interface{})) > 0 {
-		if err := diff.SetNewComputed("tags_all"); err != nil {
-			return fmt.Errorf("setting tags_all to computed: %w", err)
-		}
-	} else if diff.HasChange("tags_all") {
-		if err := diff.SetNewComputed("tags_all"); err != nil {
-			return fmt.Errorf("setting tags_all to computed: %w", err)
-		}
-	}
-
 	return nil
 }
 
diff --git a/shim/shim.go b/shim/shim.go
index 2af7c06925..2073270778 100644
--- a/shim/shim.go
+++ b/shim/shim.go
@@ -17,6 +17,7 @@ type UpstreamProvider struct {
 
 func NewUpstreamProvider(ctx context.Context) (UpstreamProvider, error) {
 	primary, err := provider.New(ctx)
+	markTagsAllNotComputedForResources(primary)
 	if err != nil {
 		return UpstreamProvider{}, err
 	}
@@ -34,3 +35,31 @@ type TagIgnoreConfig = tags.IgnoreConfig
 func NewTagConfig(ctx context.Context, i interface{}) TagConfig {
 	return TagConfig{Tags: tags.New(ctx, i)}
 }
+
+func markTagsAllNotComputedForResources(sdkV2Provider *schema.Provider) {
+	for rn, r := range sdkV2Provider.ResourcesMap {
+
+		// Not skipping these resources results in an error:
+		//
+		// * resource aws_macie2_custom_data_identifier: No Update defined, must set ForceNew on: []string{"tags_all"}
+		// * resource aws_emrcontainers_job_template: No Update defined, must set ForceNew on: []string{"tags_all"}
+		// * resource aws_ivs_playback_key_pair: No Update defined, must set ForceNew on: []string{"tags_all"}
+		// * resource aws_ivs_recording_configuration: No Update defined, must set ForceNew on: []string{"tags_all"}
+		// * resource aws_ssm_activation: No Update defined, must set ForceNew on: []string{"tags_all"}
+		switch rn {
+		case "aws_macie2_custom_data_identifier",
+			"aws_emrcontainers_job_template",
+			"aws_ivs_playback_key_pair",
+			"aws_ivs_recording_configuration",
+			"aws_ssm_activation":
+			continue
+		}
+
+		if tagsAll, ok := r.Schema["tags_all"]; ok {
+			tagsAll.Computed = false
+			if !(tagsAll.Required || tagsAll.Optional) {
+				tagsAll.Optional = true
+			}
+		}
+	}
+}
