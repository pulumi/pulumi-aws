From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Mon, 6 Nov 2023 11:17:16 -0500
Subject: [PATCH] Do not compute tags_all at TF level


diff --git a/internal/provider/fwprovider/provider.go b/internal/provider/fwprovider/provider.go
index 1bfa22c88b..9f08eec23b 100644
--- a/internal/provider/fwprovider/provider.go
+++ b/internal/provider/fwprovider/provider.go
@@ -422,8 +422,8 @@ func (p *fwprovider) Resources(ctx context.Context) []func() resource.Resource {
 					continue
 				}
 				if v, ok := schemaResponse.Schema.Attributes[names.AttrTagsAll]; ok {
-					if !v.IsComputed() {
-						errs = append(errs, fmt.Errorf("`%s` attribute must be Computed: %s", names.AttrTagsAll, typeName))
+					if v.IsComputed() {
+						errs = append(errs, fmt.Errorf("`%s` attribute must not be Computed: %s", names.AttrTagsAll, typeName))
 						continue
 					}
 				} else {
diff --git a/internal/service/appconfig/environment.go b/internal/service/appconfig/environment.go
index 387ec284ef..0be585776b 100644
--- a/internal/service/appconfig/environment.go
+++ b/internal/service/appconfig/environment.go
@@ -85,7 +85,7 @@ func (r *environmentResource) Schema(ctx context.Context, request resource.Schem
 				Computed: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			"monitor": schema.SetNestedBlock{
diff --git a/internal/service/auditmanager/assessment.go b/internal/service/auditmanager/assessment.go
index d7100e8193..e8139a048a 100644
--- a/internal/service/auditmanager/assessment.go
+++ b/internal/service/auditmanager/assessment.go
@@ -91,7 +91,7 @@ func (r *resourceAssessment) Schema(ctx context.Context, req resource.SchemaRequ
 				Computed: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			"assessment_reports_destination": schema.ListNestedBlock{
diff --git a/internal/service/auditmanager/control.go b/internal/service/auditmanager/control.go
index a92da515fe..5aca63a43e 100644
--- a/internal/service/auditmanager/control.go
+++ b/internal/service/auditmanager/control.go
@@ -63,7 +63,7 @@ func (r *resourceControl) Schema(ctx context.Context, req resource.SchemaRequest
 				Required: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			"testing_information": schema.StringAttribute{
 				Optional: true,
 			},
diff --git a/internal/service/auditmanager/framework.go b/internal/service/auditmanager/framework.go
index 0e92b05365..08051ccf5e 100644
--- a/internal/service/auditmanager/framework.go
+++ b/internal/service/auditmanager/framework.go
@@ -65,7 +65,7 @@ func (r *resourceFramework) Schema(ctx context.Context, req resource.SchemaReque
 				Required: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			"control_sets": schema.SetNestedBlock{
diff --git a/internal/service/batch/job_queue.go b/internal/service/batch/job_queue.go
index 1b99732c45..0ee48b941b 100644
--- a/internal/service/batch/job_queue.go
+++ b/internal/service/batch/job_queue.go
@@ -93,7 +93,7 @@ func (r *jobQueueResource) Schema(ctx context.Context, request resource.SchemaRe
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/service/batch/job_queue_migrate.go b/internal/service/batch/job_queue_migrate.go
index 3d442ce442..d4c8454958 100644
--- a/internal/service/batch/job_queue_migrate.go
+++ b/internal/service/batch/job_queue_migrate.go
@@ -39,7 +39,7 @@ func jobQueueSchema0(ctx context.Context) schema.Schema {
 				Required: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/service/ec2/ec2_instance_connect_endpoint.go b/internal/service/ec2/ec2_instance_connect_endpoint.go
index c18a27c103..caf5b73210 100644
--- a/internal/service/ec2/ec2_instance_connect_endpoint.go
+++ b/internal/service/ec2/ec2_instance_connect_endpoint.go
@@ -114,7 +114,7 @@ func (r *instanceConnectEndpointResource) Schema(ctx context.Context, req resour
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			names.AttrVPCID: schema.StringAttribute{
 				Computed: true,
 				PlanModifiers: []planmodifier.String{
diff --git a/internal/service/ec2/vpc_security_group_ingress_rule.go b/internal/service/ec2/vpc_security_group_ingress_rule.go
index 6b991afb0a..133991c9aa 100644
--- a/internal/service/ec2/vpc_security_group_ingress_rule.go
+++ b/internal/service/ec2/vpc_security_group_ingress_rule.go
@@ -225,7 +225,7 @@ func (r *securityGroupRuleResource) Schema(ctx context.Context, request resource
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			"to_port": schema.Int64Attribute{
 				Optional: true,
 				Validators: []validator.Int64{
diff --git a/internal/service/lexv2models/bot.go b/internal/service/lexv2models/bot.go
index a97ae5a1e3..c8bd13c6d7 100644
--- a/internal/service/lexv2models/bot.go
+++ b/internal/service/lexv2models/bot.go
@@ -78,7 +78,7 @@ func (r *resourceBot) Schema(ctx context.Context, req resource.SchemaRequest, re
 				Required:   true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			"test_bot_alias_tags": schema.MapAttribute{
 				ElementType: types.StringType,
 				Optional:    true,
diff --git a/internal/service/opensearchserverless/collection.go b/internal/service/opensearchserverless/collection.go
index 30ecec3d52..072b191ce2 100644
--- a/internal/service/opensearchserverless/collection.go
+++ b/internal/service/opensearchserverless/collection.go
@@ -120,7 +120,7 @@ func (r *resourceCollection) Schema(ctx context.Context, req resource.SchemaRequ
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			names.AttrType: schema.StringAttribute{
 				Optional: true,
 				Computed: true,
diff --git a/internal/service/quicksight/namespace.go b/internal/service/quicksight/namespace.go
index eeaf0e4d0b..9a22b58102 100644
--- a/internal/service/quicksight/namespace.go
+++ b/internal/service/quicksight/namespace.go
@@ -94,7 +94,7 @@ func (r *namespaceResource) Schema(ctx context.Context, req resource.SchemaReque
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/service/quicksight/vpc_connection.go b/internal/service/quicksight/vpc_connection.go
index c71d94f6db..2295d26c20 100644
--- a/internal/service/quicksight/vpc_connection.go
+++ b/internal/service/quicksight/vpc_connection.go
@@ -137,7 +137,7 @@ func (r *vpcConnectionResource) Schema(ctx context.Context, req resource.SchemaR
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/service/resourceexplorer2/index.go b/internal/service/resourceexplorer2/index.go
index 4de81bb813..873c485df3 100644
--- a/internal/service/resourceexplorer2/index.go
+++ b/internal/service/resourceexplorer2/index.go
@@ -54,7 +54,7 @@ func (r *indexResource) Schema(ctx context.Context, request resource.SchemaReque
 			names.AttrARN:     framework.ARNAttributeComputedOnly(),
 			names.AttrID:      framework.IDAttribute(),
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			names.AttrType: schema.StringAttribute{
 				CustomType: fwtypes.StringEnumType[awstypes.IndexType](),
 				Required:   true,
diff --git a/internal/service/resourceexplorer2/view.go b/internal/service/resourceexplorer2/view.go
index 3ae60f804c..40934ffb79 100644
--- a/internal/service/resourceexplorer2/view.go
+++ b/internal/service/resourceexplorer2/view.go
@@ -77,7 +77,7 @@ func (r *viewResource) Schema(ctx context.Context, request resource.SchemaReques
 				Computed: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			"filters": schema.ListNestedBlock{
diff --git a/internal/service/workspaces/connection_alias.go b/internal/service/workspaces/connection_alias.go
index f343ca3b29..70db910245 100644
--- a/internal/service/workspaces/connection_alias.go
+++ b/internal/service/workspaces/connection_alias.go
@@ -71,7 +71,7 @@ func (r *connectionAliasResource) Schema(ctx context.Context, request resource.S
 				Description: "The current state of the connection alias.",
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/shim/shim.go b/shim/shim.go
index 2af7c06925..ce64074bfd 100644
--- a/shim/shim.go
+++ b/shim/shim.go
@@ -20,6 +20,9 @@ func NewUpstreamProvider(ctx context.Context) (UpstreamProvider, error) {
 	if err != nil {
 		return UpstreamProvider{}, err
 	}
+	if primary != nil {
+		markTagsAllNotComputedForResources(primary)
+	}
 	pf := fwprovider.New(primary)
 	return UpstreamProvider{
 		SDKV2Provider:           primary,
@@ -34,3 +37,35 @@ type TagIgnoreConfig = tags.IgnoreConfig
 func NewTagConfig(ctx context.Context, i interface{}) TagConfig {
 	return TagConfig{Tags: tags.New(ctx, i)}
 }
+
+// For resources with tags_all attribute, ensures that the schema of tags_all matches the schema of
+// tags. In particular, this makes sure tags_all is not computed and is ForceNew if necessary. The
+// rationale for this is that Pulumi copies tags to tags_all before it hits the TF layer, so these
+// attributes must match in schema.
+func markTagsAllNotComputedForResources(sdkV2Provider *schema.Provider) {
+	updatedResourcesMap := map[string]*schema.Resource{}
+	for rn, r := range sdkV2Provider.ResourcesMap {
+		if _, ok := r.Schema["tags_all"]; ok {
+			var updatedResource schema.Resource = *r
+			updatedResource.Schema = map[string]*schema.Schema{}
+
+			for k, v := range r.Schema {
+				if k == "tags_all" {
+					if tagsSchema, ok := r.Schema["tags"]; ok {
+						tagsAll := *tagsSchema
+						updatedResource.Schema[k] = &tagsAll
+					} else {
+						panic("Unable to edit tagsAll schema for " + rn)
+					}
+				} else {
+					updatedResource.Schema[k] = v
+				}
+			}
+
+			updatedResourcesMap[rn] = &updatedResource
+		} else {
+			updatedResourcesMap[rn] = r
+		}
+	}
+	sdkV2Provider.ResourcesMap = updatedResourcesMap
+}
