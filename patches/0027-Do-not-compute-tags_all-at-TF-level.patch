From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Mon, 6 Nov 2023 11:17:16 -0500
Subject: [PATCH] Do not compute tags_all at TF level


diff --git a/internal/framework/resource_with_configure.go b/internal/framework/resource_with_configure.go
index 7c33a2aae0..3c17d64604 100644
--- a/internal/framework/resource_with_configure.go
+++ b/internal/framework/resource_with_configure.go
@@ -30,6 +30,11 @@ func (r *ResourceWithConfigure) Configure(_ context.Context, request resource.Co
 
 // SetTagsAll calculates the new value for the `tags_all` attribute.
 func (r *ResourceWithConfigure) SetTagsAll(ctx context.Context, request resource.ModifyPlanRequest, response *resource.ModifyPlanResponse) {
+	// Skip SetTagsAll in Pulumi because it is handled at Pulumi provider level.
+	if 1+1 == 2 {
+		return
+	}
+
 	// If the entire plan is null, the resource is planned for destruction.
 	if request.Plan.Raw.IsNull() {
 		return
diff --git a/internal/provider/fwprovider/provider.go b/internal/provider/fwprovider/provider.go
index 5435b50317..1e888e3ae9 100644
--- a/internal/provider/fwprovider/provider.go
+++ b/internal/provider/fwprovider/provider.go
@@ -435,8 +435,8 @@ func (p *fwprovider) Resources(ctx context.Context) []func() resource.Resource {
 					continue
 				}
 				if v, ok := schemaResponse.Schema.Attributes[names.AttrTagsAll]; ok {
-					if !v.IsComputed() {
-						errs = append(errs, fmt.Errorf("`%s` attribute must be Computed: %s", names.AttrTagsAll, typeName))
+					if v.IsComputed() {
+						errs = append(errs, fmt.Errorf("`%s` attribute must not be Computed: %s", names.AttrTagsAll, typeName))
 						continue
 					}
 				} else {
diff --git a/internal/service/appconfig/environment.go b/internal/service/appconfig/environment.go
index facee5530d..faa7d62e28 100644
--- a/internal/service/appconfig/environment.go
+++ b/internal/service/appconfig/environment.go
@@ -104,7 +104,7 @@ func (r *resourceEnvironment) Schema(ctx context.Context, request resource.Schem
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			"monitor": schema.SetNestedBlock{
diff --git a/internal/service/auditmanager/assessment.go b/internal/service/auditmanager/assessment.go
index 633319638e..323cd0f205 100644
--- a/internal/service/auditmanager/assessment.go
+++ b/internal/service/auditmanager/assessment.go
@@ -95,7 +95,7 @@ func (r *resourceAssessment) Schema(ctx context.Context, req resource.SchemaRequ
 				Computed: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			"assessment_reports_destination": schema.ListNestedBlock{
diff --git a/internal/service/auditmanager/control.go b/internal/service/auditmanager/control.go
index 818a884c4b..26342bdb52 100644
--- a/internal/service/auditmanager/control.go
+++ b/internal/service/auditmanager/control.go
@@ -67,7 +67,7 @@ func (r *resourceControl) Schema(ctx context.Context, req resource.SchemaRequest
 				Required: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			"testing_information": schema.StringAttribute{
 				Optional: true,
 			},
diff --git a/internal/service/auditmanager/framework.go b/internal/service/auditmanager/framework.go
index ffa236c568..5733dd6110 100644
--- a/internal/service/auditmanager/framework.go
+++ b/internal/service/auditmanager/framework.go
@@ -69,7 +69,7 @@ func (r *resourceFramework) Schema(ctx context.Context, req resource.SchemaReque
 				Required: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			"control_sets": schema.SetNestedBlock{
diff --git a/internal/service/batch/job_queue.go b/internal/service/batch/job_queue.go
index 6a3347c16c..daad08c471 100644
--- a/internal/service/batch/job_queue.go
+++ b/internal/service/batch/job_queue.go
@@ -95,7 +95,7 @@ func (r *jobQueueResource) Schema(ctx context.Context, request resource.SchemaRe
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/service/batch/job_queue_migrate.go b/internal/service/batch/job_queue_migrate.go
index 4c20570739..2338b2a656 100644
--- a/internal/service/batch/job_queue_migrate.go
+++ b/internal/service/batch/job_queue_migrate.go
@@ -39,7 +39,7 @@ func jobQueueSchema0(ctx context.Context) schema.Schema {
 				Required: true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/service/ec2/ec2_instance_connect_endpoint.go b/internal/service/ec2/ec2_instance_connect_endpoint.go
index 0d83e03d8b..69f1612f75 100644
--- a/internal/service/ec2/ec2_instance_connect_endpoint.go
+++ b/internal/service/ec2/ec2_instance_connect_endpoint.go
@@ -118,7 +118,7 @@ func (r *instanceConnectEndpointResource) Schema(ctx context.Context, req resour
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			names.AttrVPCID: schema.StringAttribute{
 				Computed: true,
 				PlanModifiers: []planmodifier.String{
diff --git a/internal/service/ec2/vpc_security_group_ingress_rule.go b/internal/service/ec2/vpc_security_group_ingress_rule.go
index a707a1277b..cd8d6dfd54 100644
--- a/internal/service/ec2/vpc_security_group_ingress_rule.go
+++ b/internal/service/ec2/vpc_security_group_ingress_rule.go
@@ -228,7 +228,7 @@ func (r *securityGroupRuleResource) Schema(ctx context.Context, request resource
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			"to_port": schema.Int64Attribute{
 				Optional: true,
 				Validators: []validator.Int64{
diff --git a/internal/service/lexv2models/bot.go b/internal/service/lexv2models/bot.go
index dc959ccd7e..1d0f2caaa0 100644
--- a/internal/service/lexv2models/bot.go
+++ b/internal/service/lexv2models/bot.go
@@ -83,7 +83,7 @@ func (r *resourceBot) Schema(ctx context.Context, req resource.SchemaRequest, re
 				Required:   true,
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			"test_bot_alias_tags": schema.MapAttribute{
 				ElementType: types.StringType,
 				Optional:    true,
diff --git a/internal/service/opensearchserverless/collection.go b/internal/service/opensearchserverless/collection.go
index 44577f9026..53692013d0 100644
--- a/internal/service/opensearchserverless/collection.go
+++ b/internal/service/opensearchserverless/collection.go
@@ -123,7 +123,7 @@ func (r *resourceCollection) Schema(ctx context.Context, req resource.SchemaRequ
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			names.AttrType: schema.StringAttribute{
 				Optional: true,
 				Computed: true,
diff --git a/internal/service/quicksight/namespace.go b/internal/service/quicksight/namespace.go
index 959c129103..185c8f7d74 100644
--- a/internal/service/quicksight/namespace.go
+++ b/internal/service/quicksight/namespace.go
@@ -93,7 +93,7 @@ func (r *resourceNamespace) Schema(ctx context.Context, req resource.SchemaReque
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/service/quicksight/vpc_connection.go b/internal/service/quicksight/vpc_connection.go
index ac4f6d5e83..059732c2fc 100644
--- a/internal/service/quicksight/vpc_connection.go
+++ b/internal/service/quicksight/vpc_connection.go
@@ -142,7 +142,7 @@ func (r *resourceVPCConnection) Schema(ctx context.Context, req resource.SchemaR
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/service/resourceexplorer2/index.go b/internal/service/resourceexplorer2/index.go
index 011191840f..8e90530806 100644
--- a/internal/service/resourceexplorer2/index.go
+++ b/internal/service/resourceexplorer2/index.go
@@ -56,7 +56,7 @@ func (r *resourceIndex) Schema(ctx context.Context, request resource.SchemaReque
 			names.AttrARN:     framework.ARNAttributeComputedOnly(),
 			names.AttrID:      framework.IDAttribute(),
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 			names.AttrType: schema.StringAttribute{
 				CustomType: fwtypes.StringEnumType[awstypes.IndexType](),
 				Required:   true,
diff --git a/internal/service/resourceexplorer2/view.go b/internal/service/resourceexplorer2/view.go
index 56e257f3d0..fddc928d9b 100644
--- a/internal/service/resourceexplorer2/view.go
+++ b/internal/service/resourceexplorer2/view.go
@@ -76,7 +76,7 @@ func (r *resourceView) Schema(ctx context.Context, request resource.SchemaReques
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			"filters": schema.ListNestedBlock{
diff --git a/internal/service/workspaces/connection_alias.go b/internal/service/workspaces/connection_alias.go
index a6a9f582fa..77cd122278 100644
--- a/internal/service/workspaces/connection_alias.go
+++ b/internal/service/workspaces/connection_alias.go
@@ -82,7 +82,7 @@ func (r *resourceConnectionAlias) Schema(ctx context.Context, req resource.Schem
 				},
 			},
 			names.AttrTags:    tftags.TagsAttribute(),
-			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
+			names.AttrTagsAll: tftags.TagsAttribute(),
 		},
 		Blocks: map[string]schema.Block{
 			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
diff --git a/internal/verify/diff.go b/internal/verify/diff.go
index 0bc956a747..e0636e99ce 100644
--- a/internal/verify/diff.go
+++ b/internal/verify/diff.go
@@ -5,101 +5,12 @@ package verify
 
 import (
 	"context"
-	"fmt"
 	"time"
 
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-provider-aws/internal/conns"
-	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 )
 
-// Find JSON diff functions in the json.go file.
-
-// SetTagsDiff sets the new plan difference with the result of
-// merging resource tags on to those defined at the provider-level;
-// returns an error if unsuccessful or if the resource tags are identical
-// to those configured at the provider-level to avoid non-empty plans
-// after resource READ operations as resource and provider-level tags
-// will be indistinguishable when returned from an AWS API.
 func SetTagsDiff(ctx context.Context, diff *schema.ResourceDiff, meta interface{}) error {
-	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
-	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig
-
-	resourceTags := tftags.New(ctx, diff.Get("tags").(map[string]interface{}))
-
-	allTags := defaultTagsConfig.MergeTags(resourceTags).IgnoreConfig(ignoreTagsConfig)
-	// To ensure "tags_all" is correctly computed, we explicitly set the attribute diff
-	// when the merger of resource-level tags onto provider-level tags results in n > 0 tags,
-	// otherwise we mark the attribute as "Computed" only when there is a known diff (excluding an empty map)
-	// or a change for "tags_all".
-	// Reference: https://github.com/hashicorp/terraform-provider-aws/issues/18366
-	// Reference: https://github.com/hashicorp/terraform-provider-aws/issues/19005
-
-	if !diff.GetRawPlan().GetAttr("tags").IsWhollyKnown() {
-		if err := diff.SetNewComputed("tags_all"); err != nil {
-			return fmt.Errorf("setting tags_all to computed: %w", err)
-		}
-		return nil
-	}
-
-	if diff.HasChange("tags") {
-		_, n := diff.GetChange("tags")
-		newTags := tftags.New(ctx, n.(map[string]interface{}))
-
-		if newTags.HasZeroValue() {
-			if err := diff.SetNewComputed("tags_all"); err != nil {
-				return fmt.Errorf("setting tags_all to computed: %w", err)
-			}
-		}
-
-		if len(allTags) > 0 && (!newTags.HasZeroValue() || !allTags.HasZeroValue()) {
-			if err := diff.SetNew("tags_all", allTags.Map()); err != nil {
-				return fmt.Errorf("setting new tags_all diff: %w", err)
-			}
-		}
-
-		if len(allTags) == 0 {
-			if err := diff.SetNew("tags_all", allTags.Map()); err != nil {
-				return fmt.Errorf("setting new tags_all diff: %w", err)
-			}
-		}
-	} else if !diff.HasChange("tags") {
-		if len(allTags) > 0 && !allTags.HasZeroValue() {
-			if err := diff.SetNew("tags_all", allTags.Map()); err != nil {
-				return fmt.Errorf("setting new tags_all diff: %w", err)
-			}
-			return nil
-		}
-
-		var ta tftags.KeyValueTags
-		if tagsAll, ok := diff.Get("tags_all").(map[string]interface{}); ok {
-			ta = tftags.New(ctx, tagsAll)
-		}
-		if len(allTags) > 0 && !ta.DeepEqual(allTags) && allTags.HasZeroValue() {
-			if err := diff.SetNewComputed("tags_all"); err != nil {
-				return fmt.Errorf("setting tags_all to computed: %w", err)
-			}
-			return nil
-		}
-	} else if tagsAll, ok := diff.Get("tags_all").(map[string]interface{}); ok {
-		ta := tftags.New(ctx, tagsAll)
-		if !ta.DeepEqual(allTags) {
-			if allTags.HasZeroValue() {
-				if err := diff.SetNewComputed("tags_all"); err != nil {
-					return fmt.Errorf("setting tags_all to computed: %w", err)
-				}
-			}
-		}
-	} else if len(diff.Get("tags_all").(map[string]interface{})) > 0 {
-		if err := diff.SetNewComputed("tags_all"); err != nil {
-			return fmt.Errorf("setting tags_all to computed: %w", err)
-		}
-	} else if diff.HasChange("tags_all") {
-		if err := diff.SetNewComputed("tags_all"); err != nil {
-			return fmt.Errorf("setting tags_all to computed: %w", err)
-		}
-	}
-
 	return nil
 }
 
diff --git a/shim/shim.go b/shim/shim.go
index 2af7c06925..ce64074bfd 100644
--- a/shim/shim.go
+++ b/shim/shim.go
@@ -20,6 +20,9 @@ func NewUpstreamProvider(ctx context.Context) (UpstreamProvider, error) {
 	if err != nil {
 		return UpstreamProvider{}, err
 	}
+	if primary != nil {
+		markTagsAllNotComputedForResources(primary)
+	}
 	pf := fwprovider.New(primary)
 	return UpstreamProvider{
 		SDKV2Provider:           primary,
@@ -34,3 +37,35 @@ type TagIgnoreConfig = tags.IgnoreConfig
 func NewTagConfig(ctx context.Context, i interface{}) TagConfig {
 	return TagConfig{Tags: tags.New(ctx, i)}
 }
+
+// For resources with tags_all attribute, ensures that the schema of tags_all matches the schema of
+// tags. In particular, this makes sure tags_all is not computed and is ForceNew if necessary. The
+// rationale for this is that Pulumi copies tags to tags_all before it hits the TF layer, so these
+// attributes must match in schema.
+func markTagsAllNotComputedForResources(sdkV2Provider *schema.Provider) {
+	updatedResourcesMap := map[string]*schema.Resource{}
+	for rn, r := range sdkV2Provider.ResourcesMap {
+		if _, ok := r.Schema["tags_all"]; ok {
+			var updatedResource schema.Resource = *r
+			updatedResource.Schema = map[string]*schema.Schema{}
+
+			for k, v := range r.Schema {
+				if k == "tags_all" {
+					if tagsSchema, ok := r.Schema["tags"]; ok {
+						tagsAll := *tagsSchema
+						updatedResource.Schema[k] = &tagsAll
+					} else {
+						panic("Unable to edit tagsAll schema for " + rn)
+					}
+				} else {
+					updatedResource.Schema[k] = v
+				}
+			}
+
+			updatedResourcesMap[rn] = &updatedResource
+		} else {
+			updatedResourcesMap[rn] = r
+		}
+	}
+	sdkV2Provider.ResourcesMap = updatedResourcesMap
+}
