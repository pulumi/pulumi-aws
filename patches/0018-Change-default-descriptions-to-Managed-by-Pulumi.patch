From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: corymhall <43035978+corymhall@users.noreply.github.com>
Date: Wed, 29 May 2024 09:05:36 -0400
Subject: [PATCH] Change default descriptions to "Managed by Pulumi"


diff --git a/internal/service/apigateway/api_key.go b/internal/service/apigateway/api_key.go
index abc31f0d40..ebf1de5fb3 100644
--- a/internal/service/apigateway/api_key.go
+++ b/internal/service/apigateway/api_key.go
@@ -56,7 +56,7 @@ func resourceAPIKey() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrEnabled: {
 				Type:     schema.TypeBool,
diff --git a/internal/service/appsync/api_key.go b/internal/service/appsync/api_key.go
index fbdca7da91..9cdc01f8ec 100644
--- a/internal/service/appsync/api_key.go
+++ b/internal/service/appsync/api_key.go
@@ -49,7 +49,7 @@ func resourceAPIKey() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			"expires": {
 				Type:     schema.TypeString,
diff --git a/internal/service/cloudfront/origin_access_control.go b/internal/service/cloudfront/origin_access_control.go
index 837e79c057..8fc8280900 100644
--- a/internal/service/cloudfront/origin_access_control.go
+++ b/internal/service/cloudfront/origin_access_control.go
@@ -38,7 +38,7 @@ func resourceOriginAccessControl() *schema.Resource {
 			names.AttrDescription: {
 				Type:         schema.TypeString,
 				Optional:     true,
-				Default:      "Managed by Terraform",
+				Default:      "Managed by Pulumi",
 				ValidateFunc: validation.StringLenBetween(0, 256),
 			},
 			"etag": {
diff --git a/internal/service/docdb/cluster_parameter_group.go b/internal/service/docdb/cluster_parameter_group.go
index d530b2a85c..c14f298606 100644
--- a/internal/service/docdb/cluster_parameter_group.go
+++ b/internal/service/docdb/cluster_parameter_group.go
@@ -50,7 +50,7 @@ func ResourceClusterParameterGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrFamily: {
 				Type:     schema.TypeString,
diff --git a/internal/service/docdb/subnet_group.go b/internal/service/docdb/subnet_group.go
index 70a69db303..5f1045af17 100644
--- a/internal/service/docdb/subnet_group.go
+++ b/internal/service/docdb/subnet_group.go
@@ -46,7 +46,7 @@ func ResourceSubnetGroup() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrName: {
 				Type:          schema.TypeString,
diff --git a/internal/service/ec2/vpc_security_group.go b/internal/service/ec2/vpc_security_group.go
index 6730abbc03..1ed388d36b 100644
--- a/internal/service/ec2/vpc_security_group.go
+++ b/internal/service/ec2/vpc_security_group.go
@@ -69,7 +69,7 @@ func resourceSecurityGroup() *schema.Resource {
 				Type:         schema.TypeString,
 				Optional:     true,
 				ForceNew:     true,
-				Default:      "Managed by Terraform",
+				Default:      "Managed by Pulumi",
 				ValidateFunc: validation.StringLenBetween(0, 255),
 			},
 			"egress":  securityGroupRuleSetNestedBlock,
diff --git a/internal/service/elasticache/parameter_group.go b/internal/service/elasticache/parameter_group.go
index c4ae847827..182682ea9f 100644
--- a/internal/service/elasticache/parameter_group.go
+++ b/internal/service/elasticache/parameter_group.go
@@ -49,7 +49,7 @@ func resourceParameterGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrFamily: {
 				Type:     schema.TypeString,
diff --git a/internal/service/elasticache/security_group.go b/internal/service/elasticache/security_group.go
new file mode 100644
index 0000000000..f587fcbcce
--- /dev/null
+++ b/internal/service/elasticache/security_group.go
@@ -0,0 +1,127 @@
+package elasticache
+
+import (
+	"context"
+	"log"
+	"time"
+
+	"github.com/aws/aws-sdk-go/aws"
+	"github.com/aws/aws-sdk-go/service/elasticache"
+	"github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
+	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
+	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
+)
+
+// @SDKResource("aws_elasticache_security_group")
+func ResourceSecurityGroup() *schema.Resource {
+	return &schema.Resource{
+		CreateWithoutTimeout: resourceSecurityGroupCreate,
+		ReadWithoutTimeout:   resourceSecurityGroupRead,
+		DeleteWithoutTimeout: resourceSecurityGroupDelete,
+		Importer: &schema.ResourceImporter{
+			StateContext: schema.ImportStatePassthroughContext,
+		},
+
+		Schema: map[string]*schema.Schema{
+			"description": {
+				Type:     schema.TypeString,
+				Optional: true,
+				ForceNew: true,
+				Default:  "Managed by Pulumi",
+			},
+			"name": {
+				Type:     schema.TypeString,
+				Required: true,
+				ForceNew: true,
+			},
+			"security_group_names": {
+				Type:     schema.TypeSet,
+				Required: true,
+				ForceNew: true,
+				Elem:     &schema.Schema{Type: schema.TypeString},
+				Set:      schema.HashString,
+			},
+		},
+
+		DeprecationMessage: `With the retirement of EC2-Classic the aws_elasticache_security_group resource has been deprecated and will be removed in a future version.`,
+	}
+}
+
+func resourceSecurityGroupCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
+	var diags diag.Diagnostics
+	return sdkdiag.AppendErrorf(diags, `with the retirement of EC2-Classic no new ElastiCache Security Groups can be created`)
+}
+
+func resourceSecurityGroupRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
+	var diags diag.Diagnostics
+	conn := meta.(*conns.AWSClient).ElastiCacheConn()
+	req := &elasticache.DescribeCacheSecurityGroupsInput{
+		CacheSecurityGroupName: aws.String(d.Id()),
+	}
+
+	res, err := conn.DescribeCacheSecurityGroupsWithContext(ctx, req)
+	if err != nil {
+		return sdkdiag.AppendErrorf(diags, "reading ElastiCache Cache Security Group (%s): %s", d.Id(), err)
+	}
+	if len(res.CacheSecurityGroups) == 0 {
+		return sdkdiag.AppendErrorf(diags, "reading ElastiCache Cache Security Group (%s): empty response", d.Id())
+	}
+
+	var group *elasticache.CacheSecurityGroup
+	for _, g := range res.CacheSecurityGroups {
+		if aws.StringValue(g.CacheSecurityGroupName) == d.Id() {
+			group = g
+		}
+	}
+	if group == nil {
+		return sdkdiag.AppendErrorf(diags, "reading ElastiCache Cache Security Group (%s): not found", d.Id())
+	}
+
+	d.Set("name", group.CacheSecurityGroupName)
+	d.Set("description", group.Description)
+
+	sgNames := make([]string, 0, len(group.EC2SecurityGroups))
+	for _, sg := range group.EC2SecurityGroups {
+		sgNames = append(sgNames, *sg.EC2SecurityGroupName)
+	}
+	d.Set("security_group_names", sgNames)
+
+	return diags
+}
+
+func resourceSecurityGroupDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
+	var diags diag.Diagnostics
+	conn := meta.(*conns.AWSClient).ElastiCacheConn()
+
+	log.Printf("[DEBUG] Cache security group delete: %s", d.Id())
+
+	err := retry.RetryContext(ctx, 5*time.Minute, func() *retry.RetryError {
+		_, err := conn.DeleteCacheSecurityGroupWithContext(ctx, &elasticache.DeleteCacheSecurityGroupInput{
+			CacheSecurityGroupName: aws.String(d.Id()),
+		})
+
+		if tfawserr.ErrCodeEquals(err, "InvalidCacheSecurityGroupState", "DependencyViolation") {
+			return retry.RetryableError(err)
+		}
+
+		if err != nil {
+			return retry.RetryableError(err)
+		}
+
+		return nil
+	})
+
+	if tfresource.TimedOut(err) {
+		_, err = conn.DeleteCacheSecurityGroupWithContext(ctx, &elasticache.DeleteCacheSecurityGroupInput{
+			CacheSecurityGroupName: aws.String(d.Id()),
+		})
+	}
+	if err != nil {
+		return sdkdiag.AppendErrorf(diags, "deleting ElastiCache Cache Security Group (%s): %s", d.Id(), err)
+	}
+	return diags
+}
diff --git a/internal/service/elasticache/subnet_group.go b/internal/service/elasticache/subnet_group.go
index 44f753bb0c..9820b8a602 100644
--- a/internal/service/elasticache/subnet_group.go
+++ b/internal/service/elasticache/subnet_group.go
@@ -48,7 +48,7 @@ func resourceSubnetGroup() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrName: {
 				Type:     schema.TypeString,
diff --git a/internal/service/mediapackage/channel.go b/internal/service/mediapackage/channel.go
index 961d1f0438..710fd0b998 100644
--- a/internal/service/mediapackage/channel.go
+++ b/internal/service/mediapackage/channel.go
@@ -51,7 +51,7 @@ func ResourceChannel() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			"hls_ingest": {
 				Type:     schema.TypeList,
diff --git a/internal/service/memorydb/cluster.go b/internal/service/memorydb/cluster.go
index 57542e6c86..9d63e79904 100644
--- a/internal/service/memorydb/cluster.go
+++ b/internal/service/memorydb/cluster.go
@@ -74,7 +74,7 @@ func resourceCluster() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			"engine_patch_version": {
 				Type:     schema.TypeString,
diff --git a/internal/service/memorydb/parameter_group.go b/internal/service/memorydb/parameter_group.go
index 0444678df5..f788d07914 100644
--- a/internal/service/memorydb/parameter_group.go
+++ b/internal/service/memorydb/parameter_group.go
@@ -53,7 +53,7 @@ func resourceParameterGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrFamily: {
 				Type:     schema.TypeString,
diff --git a/internal/service/memorydb/subnet_group.go b/internal/service/memorydb/subnet_group.go
index c4c6f7c64b..df3d2d3544 100644
--- a/internal/service/memorydb/subnet_group.go
+++ b/internal/service/memorydb/subnet_group.go
@@ -47,7 +47,7 @@ func resourceSubnetGroup() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrName: {
 				Type:          schema.TypeString,
diff --git a/internal/service/neptune/cluster_parameter_group.go b/internal/service/neptune/cluster_parameter_group.go
index e87f859edf..23da80a091 100644
--- a/internal/service/neptune/cluster_parameter_group.go
+++ b/internal/service/neptune/cluster_parameter_group.go
@@ -48,7 +48,7 @@ func ResourceClusterParameterGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrFamily: {
 				Type:     schema.TypeString,
diff --git a/internal/service/neptune/parameter_group.go b/internal/service/neptune/parameter_group.go
index 1850017051..963b73dbbd 100644
--- a/internal/service/neptune/parameter_group.go
+++ b/internal/service/neptune/parameter_group.go
@@ -52,7 +52,7 @@ func ResourceParameterGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrFamily: {
 				Type:     schema.TypeString,
diff --git a/internal/service/neptune/subnet_group.go b/internal/service/neptune/subnet_group.go
index fc60010e7d..0b213b1bf7 100644
--- a/internal/service/neptune/subnet_group.go
+++ b/internal/service/neptune/subnet_group.go
@@ -44,7 +44,7 @@ func ResourceSubnetGroup() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrName: {
 				Type:          schema.TypeString,
diff --git a/internal/service/rds/cluster_parameter_group.go b/internal/service/rds/cluster_parameter_group.go
index ccfdc6bfcd..609718eef3 100644
--- a/internal/service/rds/cluster_parameter_group.go
+++ b/internal/service/rds/cluster_parameter_group.go
@@ -51,7 +51,7 @@ func resourceClusterParameterGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrFamily: {
 				Type:     schema.TypeString,
diff --git a/internal/service/rds/option_group.go b/internal/service/rds/option_group.go
index d19358fa76..b13859ab8e 100644
--- a/internal/service/rds/option_group.go
+++ b/internal/service/rds/option_group.go
@@ -127,7 +127,7 @@ func resourceOptionGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrSkipDestroy: {
 				Type:     schema.TypeBool,
diff --git a/internal/service/rds/parameter_group.go b/internal/service/rds/parameter_group.go
index 8c49d1133c..17c729d305 100644
--- a/internal/service/rds/parameter_group.go
+++ b/internal/service/rds/parameter_group.go
@@ -53,7 +53,7 @@ func resourceParameterGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrFamily: {
 				Type:     schema.TypeString,
diff --git a/internal/service/rds/subnet_group.go b/internal/service/rds/subnet_group.go
index 646add5ad8..2731f4e425 100644
--- a/internal/service/rds/subnet_group.go
+++ b/internal/service/rds/subnet_group.go
@@ -48,7 +48,7 @@ func resourceSubnetGroup() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrName: {
 				Type:          schema.TypeString,
diff --git a/internal/service/redshift/parameter_group.go b/internal/service/redshift/parameter_group.go
index 1a1a3536eb..8901974885 100644
--- a/internal/service/redshift/parameter_group.go
+++ b/internal/service/redshift/parameter_group.go
@@ -50,7 +50,7 @@ func resourceParameterGroup() *schema.Resource {
 				Type:     schema.TypeString,
 				Optional: true,
 				ForceNew: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrFamily: {
 				Type:     schema.TypeString,
diff --git a/internal/service/redshift/security_group.go b/internal/service/redshift/security_group.go
new file mode 100644
index 0000000000..47b5d7cda2
--- /dev/null
+++ b/internal/service/redshift/security_group.go
@@ -0,0 +1,291 @@
+package redshift
+
+import (
+	"bytes"
+	"context"
+	"fmt"
+	"log"
+	"regexp"
+
+	"github.com/aws/aws-sdk-go/aws"
+	"github.com/aws/aws-sdk-go/service/redshift"
+	"github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
+	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	"github.com/hashicorp/terraform-provider-aws/internal/create"
+	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
+	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
+)
+
+// @SDKResource("aws_redshift_security_group")
+func ResourceSecurityGroup() *schema.Resource {
+	return &schema.Resource{
+		CreateWithoutTimeout: resourceSecurityGroupCreate,
+		ReadWithoutTimeout:   resourceSecurityGroupRead,
+		UpdateWithoutTimeout: resourceSecurityGroupUpdate,
+		DeleteWithoutTimeout: resourceSecurityGroupDelete,
+		Importer: &schema.ResourceImporter{
+			StateContext: schema.ImportStatePassthroughContext,
+		},
+
+		Schema: map[string]*schema.Schema{
+			"name": {
+				Type:     schema.TypeString,
+				Required: true,
+				ForceNew: true,
+				ValidateFunc: validation.All(
+					validation.StringLenBetween(1, 255),
+					validation.StringNotInSlice([]string{"default"}, false),
+					validation.StringMatch(regexp.MustCompile(`^[0-9a-z-]+$`), "must contain only lowercase alphanumeric characters and hyphens"),
+				),
+			},
+
+			"description": {
+				Type:     schema.TypeString,
+				Optional: true,
+				ForceNew: true,
+				Default:  "Managed by Pulumi",
+			},
+
+			"ingress": {
+				Type:     schema.TypeSet,
+				Required: true,
+				Elem: &schema.Resource{
+					Schema: map[string]*schema.Schema{
+						"cidr": {
+							Type:     schema.TypeString,
+							Optional: true,
+						},
+
+						"security_group_name": {
+							Type:     schema.TypeString,
+							Optional: true,
+							Computed: true,
+						},
+
+						"security_group_owner_id": {
+							Type:     schema.TypeString,
+							Optional: true,
+							Computed: true,
+						},
+					},
+				},
+				Set: resourceSecurityGroupIngressHash,
+			},
+		},
+
+		DeprecationMessage: `With the retirement of EC2-Classic the aws_redshift_security_group resource has been deprecated and will be removed in a future version.`,
+	}
+}
+
+func resourceSecurityGroupCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
+	var diags diag.Diagnostics
+	return sdkdiag.AppendErrorf(diags, `with the retirement of EC2-Classic no new Redshift Security Groups can be created`)
+}
+
+func resourceSecurityGroupRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
+	var diags diag.Diagnostics
+	sg, err := resourceSecurityGroupRetrieve(ctx, d, meta)
+	if err != nil {
+		return sdkdiag.AppendErrorf(diags, "reading Redshift Security Group (%s): %s", d.Id(), err)
+	}
+
+	rules := &schema.Set{
+		F: resourceSecurityGroupIngressHash,
+	}
+
+	for _, v := range sg.IPRanges {
+		rule := map[string]interface{}{"cidr": aws.StringValue(v.CIDRIP)}
+		rules.Add(rule)
+	}
+
+	for _, g := range sg.EC2SecurityGroups {
+		rule := map[string]interface{}{
+			"security_group_name":     aws.StringValue(g.EC2SecurityGroupName),
+			"security_group_owner_id": aws.StringValue(g.EC2SecurityGroupOwnerId),
+		}
+		rules.Add(rule)
+	}
+
+	d.Set("ingress", rules)
+	d.Set("name", sg.ClusterSecurityGroupName)
+	d.Set("description", sg.Description)
+
+	return diags
+}
+
+func resourceSecurityGroupUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
+	var diags diag.Diagnostics
+	conn := meta.(*conns.AWSClient).RedshiftConn()
+
+	if d.HasChange("ingress") {
+		o, n := d.GetChange("ingress")
+		if o == nil {
+			o = new(schema.Set)
+		}
+		if n == nil {
+			n = new(schema.Set)
+		}
+
+		os := o.(*schema.Set)
+		ns := n.(*schema.Set)
+
+		removeIngressRules := expandSGRevokeIngress(os.Difference(ns).List())
+		if len(removeIngressRules) > 0 {
+			for _, r := range removeIngressRules {
+				r.ClusterSecurityGroupName = aws.String(d.Id())
+
+				_, err := conn.RevokeClusterSecurityGroupIngressWithContext(ctx, &r)
+				if err != nil {
+					return sdkdiag.AppendErrorf(diags, "updating Redshift Security Group (%s): revoking ingress: %s", d.Id(), err)
+				}
+			}
+		}
+
+		addIngressRules := expandSGAuthorizeIngress(ns.Difference(os).List())
+		if len(addIngressRules) > 0 {
+			for _, r := range addIngressRules {
+				r.ClusterSecurityGroupName = aws.String(d.Id())
+
+				_, err := conn.AuthorizeClusterSecurityGroupIngressWithContext(ctx, &r)
+				if err != nil {
+					return sdkdiag.AppendErrorf(diags, "updating Redshift Security Group (%s): authorizing ingress: %s", d.Id(), err)
+				}
+			}
+		}
+	}
+	return append(diags, resourceSecurityGroupRead(ctx, d, meta)...)
+}
+
+func resourceSecurityGroupDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
+	var diags diag.Diagnostics
+	conn := meta.(*conns.AWSClient).RedshiftConn()
+
+	log.Printf("[DEBUG] Redshift Security Group destroy: %v", d.Id())
+	opts := redshift.DeleteClusterSecurityGroupInput{
+		ClusterSecurityGroupName: aws.String(d.Id()),
+	}
+
+	_, err := conn.DeleteClusterSecurityGroupWithContext(ctx, &opts)
+
+	if tfawserr.ErrCodeEquals(err, "InvalidRedshiftSecurityGroup.NotFound") {
+		return diags
+	}
+
+	if err != nil {
+		return sdkdiag.AppendErrorf(diags, "deleting Redshift Security Group (%s): %s", d.Id(), err)
+	}
+
+	return diags
+}
+
+func resourceSecurityGroupRetrieve(ctx context.Context, d *schema.ResourceData, meta interface{}) (*redshift.ClusterSecurityGroup, error) {
+	conn := meta.(*conns.AWSClient).RedshiftConn()
+
+	opts := redshift.DescribeClusterSecurityGroupsInput{
+		ClusterSecurityGroupName: aws.String(d.Id()),
+	}
+
+	resp, err := conn.DescribeClusterSecurityGroupsWithContext(ctx, &opts)
+	if err != nil {
+		return nil, &retry.NotFoundError{
+			LastError:   err,
+			LastRequest: opts,
+		}
+	}
+
+	if len(resp.ClusterSecurityGroups) == 0 || resp.ClusterSecurityGroups[0] == nil {
+		return nil, tfresource.NewEmptyResultError(opts)
+	}
+
+	if l := len(resp.ClusterSecurityGroups); l > 1 {
+		return nil, tfresource.NewTooManyResultsError(l, opts)
+	}
+
+	result := resp.ClusterSecurityGroups[0]
+	if aws.StringValue(result.ClusterSecurityGroupName) != d.Id() {
+		return nil, &retry.NotFoundError{
+			LastRequest: opts,
+		}
+	}
+
+	return result, nil
+}
+
+func resourceSecurityGroupIngressHash(v interface{}) int {
+	var buf bytes.Buffer
+	m := v.(map[string]interface{})
+
+	if v, ok := m["cidr"]; ok {
+		buf.WriteString(fmt.Sprintf("%s-", v.(string)))
+	}
+
+	if v, ok := m["security_group_name"]; ok {
+		buf.WriteString(fmt.Sprintf("%s-", v.(string)))
+	}
+
+	if v, ok := m["security_group_owner_id"]; ok {
+		buf.WriteString(fmt.Sprintf("%s-", v.(string)))
+	}
+
+	return create.StringHashcode(buf.String())
+}
+
+func expandSGAuthorizeIngress(configured []interface{}) []redshift.AuthorizeClusterSecurityGroupIngressInput {
+	var ingress []redshift.AuthorizeClusterSecurityGroupIngressInput
+
+	// Loop over our configured parameters and create
+	// an array of aws-sdk-go compatible objects
+	for _, pRaw := range configured {
+		data := pRaw.(map[string]interface{})
+
+		i := redshift.AuthorizeClusterSecurityGroupIngressInput{}
+
+		if v, ok := data["cidr"]; ok {
+			i.CIDRIP = aws.String(v.(string))
+		}
+
+		if v, ok := data["security_group_name"]; ok {
+			i.EC2SecurityGroupName = aws.String(v.(string))
+		}
+
+		if v, ok := data["security_group_owner_id"]; ok {
+			i.EC2SecurityGroupOwnerId = aws.String(v.(string))
+		}
+
+		ingress = append(ingress, i)
+	}
+
+	return ingress
+}
+
+func expandSGRevokeIngress(configured []interface{}) []redshift.RevokeClusterSecurityGroupIngressInput {
+	var ingress []redshift.RevokeClusterSecurityGroupIngressInput
+
+	// Loop over our configured parameters and create
+	// an array of aws-sdk-go compatible objects
+	for _, pRaw := range configured {
+		data := pRaw.(map[string]interface{})
+
+		i := redshift.RevokeClusterSecurityGroupIngressInput{}
+
+		if v, ok := data["cidr"]; ok {
+			i.CIDRIP = aws.String(v.(string))
+		}
+
+		if v, ok := data["security_group_name"]; ok {
+			i.EC2SecurityGroupName = aws.String(v.(string))
+		}
+
+		if v, ok := data["security_group_owner_id"]; ok {
+			i.EC2SecurityGroupOwnerId = aws.String(v.(string))
+		}
+
+		ingress = append(ingress, i)
+	}
+
+	return ingress
+}
diff --git a/internal/service/redshift/subnet_group.go b/internal/service/redshift/subnet_group.go
index 2d1a8f8bcb..47c939f356 100644
--- a/internal/service/redshift/subnet_group.go
+++ b/internal/service/redshift/subnet_group.go
@@ -45,7 +45,7 @@ func resourceSubnetGroup() *schema.Resource {
 			names.AttrDescription: {
 				Type:     schema.TypeString,
 				Optional: true,
-				Default:  "Managed by Terraform",
+				Default:  "Managed by Pulumi",
 			},
 			names.AttrName: {
 				Type:     schema.TypeString,
diff --git a/internal/service/route53/record.go b/internal/service/route53/record.go
index aeef59b958..abac8702c5 100644
--- a/internal/service/route53/record.go
+++ b/internal/service/route53/record.go
@@ -360,7 +360,7 @@ func resourceRecordCreate(ctx context.Context, d *schema.ResourceData, meta inte
 					ResourceRecordSet: expandResourceRecordSet(d, aws.ToString(zoneRecord.HostedZone.Name)),
 				},
 			},
-			Comment: aws.String("Managed by Terraform"),
+			Comment: aws.String("Managed by Pulumi"),
 		},
 		HostedZoneId: aws.String(cleanZoneID(aws.ToString(zoneRecord.HostedZone.Id))),
 	}
@@ -662,7 +662,7 @@ func resourceRecordUpdate(ctx context.Context, d *schema.ResourceData, meta inte
 					ResourceRecordSet: expandResourceRecordSet(d, aws.ToString(zoneRecord.HostedZone.Name)),
 				},
 			},
-			Comment: aws.String("Managed by Terraform"),
+			Comment: aws.String("Managed by Pulumi"),
 		},
 		HostedZoneId: aws.String(cleanZoneID(aws.ToString(zoneRecord.HostedZone.Id))),
 	}
@@ -729,7 +729,7 @@ func resourceRecordDelete(ctx context.Context, d *schema.ResourceData, meta inte
 					ResourceRecordSet: rec,
 				},
 			},
-			Comment: aws.String("Deleted by Terraform"),
+			Comment: aws.String("Deleted by Pulumi"),
 		},
 		HostedZoneId: aws.String(zoneID),
 	}
diff --git a/internal/service/route53/zone.go b/internal/service/route53/zone.go
index 15edc9f2af..db519dc744 100644
--- a/internal/service/route53/zone.go
+++ b/internal/service/route53/zone.go
@@ -53,7 +53,7 @@ func resourceZone() *schema.Resource {
 			names.AttrComment: {
 				Type:         schema.TypeString,
 				Optional:     true,
-				Default:      "Managed by Terraform",
+				Default:      "Managed by Pulumi",
 				ValidateFunc: validation.StringLenBetween(0, 256),
 			},
 			"delegation_set_id": {
diff --git a/internal/service/route53/zone_association.go b/internal/service/route53/zone_association.go
index 9223463906..943ab16d4f 100644
--- a/internal/service/route53/zone_association.go
+++ b/internal/service/route53/zone_association.go
@@ -74,7 +74,7 @@ func resourceZoneAssociationCreate(ctx context.Context, d *schema.ResourceData,
 	zoneID := d.Get("zone_id").(string)
 	id := zoneAssociationCreateResourceID(zoneID, vpcID, vpcRegion)
 	input := &route53.AssociateVPCWithHostedZoneInput{
-		Comment:      aws.String("Managed by Terraform"),
+		Comment:      aws.String("Managed by Pulumi"),
 		HostedZoneId: aws.String(zoneID),
 		VPC: &awstypes.VPC{
 			VPCId:     aws.String(vpcID),
@@ -158,7 +158,7 @@ func resourceZoneAssociationDelete(ctx context.Context, d *schema.ResourceData,
 
 	log.Printf("[INFO] Deleting Route53 Zone Association: %s", d.Id())
 	output, err := conn.DisassociateVPCFromHostedZone(ctx, &route53.DisassociateVPCFromHostedZoneInput{
-		Comment:      aws.String("Managed by Terraform"),
+		Comment:      aws.String("Managed by Pulumi"),
 		HostedZoneId: aws.String(zoneID),
 		VPC: &awstypes.VPC{
 			VPCId:     aws.String(vpcID),
