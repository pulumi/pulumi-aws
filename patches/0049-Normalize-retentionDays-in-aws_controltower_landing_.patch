From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Fri, 12 Apr 2024 16:34:51 -0400
Subject: [PATCH] Normalize retentionDays in aws_controltower_landing_zone
 manifest_json

Prior to this change interacting with aws_controltower_landing_zone could cause spurious diffs where retentionDays
sub-property would cycle between a string form like "365" and an integer form like 365.

With this change such diffs are suppressed and data is written to state in a form that is normalized to the integer like
365.

According to https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch.html the numerical form is the
preferred one.

diff --git a/internal/service/controltower/landing_zone.go b/internal/service/controltower/landing_zone.go
index e7b8eee730..dd0fe7097b 100644
--- a/internal/service/controltower/landing_zone.go
+++ b/internal/service/controltower/landing_zone.go
@@ -5,8 +5,10 @@ package controltower
 
 import (
 	"context"
+	stdjson "encoding/json"
 	"errors"
 	"log"
+	"strconv"
 	"strings"
 	"time"
 
@@ -18,7 +20,6 @@ import (
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
 	"github.com/hashicorp/terraform-provider-aws/internal/enum"
@@ -27,7 +28,6 @@ import (
 	"github.com/hashicorp/terraform-provider-aws/internal/json"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
-	"github.com/hashicorp/terraform-provider-aws/internal/verify"
 	"github.com/hashicorp/terraform-provider-aws/names"
 )
 
@@ -75,12 +75,9 @@ func resourceLandingZone() *schema.Resource {
 				Type:                  schema.TypeString,
 				Required:              true,
 				ValidateFunc:          validation.StringIsJSON,
-				DiffSuppressFunc:      verify.SuppressEquivalentJSONDiffs,
+				DiffSuppressFunc:      resourceLandingZoneManfiestSuppressEquivalentJSONDiffs,
 				DiffSuppressOnRefresh: true,
-				StateFunc: func(v any) string {
-					json, _ := structure.NormalizeJsonString(v)
-					return json
-				},
+				StateFunc:             resourceLandingZoneManfiestStateFunc,
 			},
 			names.AttrVersion: {
 				Type:     schema.TypeString,
@@ -327,3 +324,80 @@ func flattenLandingZoneDriftStatusSummary(apiObject *types.LandingZoneDriftStatu
 
 	return tfMap
 }
+
+// Normalize JSON manifest to avoid significant space and fix retentionDays cycling between string and number. This
+// normalizes retentionDays to always use numbers.
+func resourceLandingZoneNormalizeManifest(jsonManifest string) (string, error) {
+	var data any
+	if err := stdjson.Unmarshal([]byte(jsonManifest), &data); err != nil {
+		return "", err
+	}
+
+	normRetentionDays := func(key string, value any) (any, bool) {
+		if key != "retentionDays" {
+			return nil, false
+		}
+		valueStr, isStr := value.(string)
+		if !isStr {
+			return nil, false
+		}
+		valueInt, err := strconv.Atoi(valueStr)
+		if err != nil {
+			return nil, false
+		}
+		return valueInt, true
+	}
+
+	var walk func(any)
+	walk = func(node any) {
+		switch n := node.(type) {
+		case []any:
+			for _, elem := range n {
+				walk(elem)
+			}
+		case map[string]any:
+			for key, elem := range n {
+				if newElem, ok := normRetentionDays(key, elem); ok {
+					n[key] = newElem
+				}
+			}
+			for _, elem := range n {
+				walk(elem)
+			}
+		default:
+			{
+			}
+		}
+	}
+	walk(data)
+
+	bytes, err := stdjson.Marshal(data)
+	if err != nil {
+		return "", err
+	}
+	return string(bytes[:]), nil
+}
+
+func resourceLandingZoneManfiestSuppressEquivalentJSONDiffs(k, old, new string, d *schema.ResourceData) bool {
+	oldNorm, err := resourceLandingZoneNormalizeManifest(old)
+	if err != nil {
+		return false
+	}
+	newNorm, err := resourceLandingZoneNormalizeManifest(new)
+	if err != nil {
+		return false
+	}
+	return oldNorm == newNorm
+}
+
+func resourceLandingZoneManfiestStateFunc(jsonString any) string {
+	s, ok := jsonString.(string)
+	if !ok {
+		return ""
+	}
+	ns, err := resourceLandingZoneNormalizeManifest(s)
+	if err != nil {
+		return s
+	}
+	return ns
+}
diff --git a/internal/service/controltower/landing_zone_internals_test.go b/internal/service/controltower/landing_zone_internals_test.go
new file mode 100644
index 0000000000..7c97e09ce2
--- /dev/null
+++ b/internal/service/controltower/landing_zone_internals_test.go
@@ -0,0 +1,50 @@
+// Copyright (c) HashiCorp, Inc.
+// SPDX-License-Identifier: MPL-2.0
+
+package controltower
+
+import (
+	"testing"
+)
+
+func TestResourceLandingZoneNormalizeManifest(t *testing.T) {
+	actual, err := resourceLandingZoneNormalizeManifest(`
+	{
+	  "governedRegions": [
+	    "REGION"
+	  ],
+	  "organizationStructure": {
+	    "security": {
+	      "name": "Security"
+	    }
+	  },
+	  "centralizedLogging": {
+	    "accountId": "89XXXXXXXX39",
+	    "configurations": {
+	      "accessLoggingBucket": {
+		"retentionDays": "3650"
+	      },
+	      "kmsKeyArn": "arn:PARTITION:kms:REGION:89XXXXXXXX25:key/10e27ec4-5555-4444-b408-777777777777",
+	      "loggingBucket": {
+		"retentionDays": "365"
+	      }
+	    },
+	    "enabled": true
+	  },
+	  "securityRoles": {
+	    "accountId": "89XXXXXXXX42"
+	  },
+	  "accessManagement": {
+	    "enabled": true
+	  }
+	}`)
+	if err != nil {
+		t.Error(err)
+	}
+	expected := `{"accessManagement":{"enabled":true},"centralizedLogging":{"accountId":"89XXXXXXXX39","configurations":{"accessLoggingBucket":{"retentionDays":3650},"kmsKeyArn":"arn:PARTITION:kms:REGION:89XXXXXXXX25:key/10e27ec4-5555-4444-b408-777777777777","loggingBucket":{"retentionDays":365}},"enabled":true},"governedRegions":["REGION"],"organizationStructure":{"security":{"name":"Security"}},"securityRoles":{"accountId":"89XXXXXXXX42"}}`
+	if expected != actual {
+		t.Logf("Expected: %s", expected)
+		t.Logf("Actual: %s", actual)
+		t.Error("Unexpected result")
+	}
+}
