From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Fri, 16 Aug 2024 09:46:57 -0400
Subject: [PATCH] Adapt gamelift matchmaking* resources

Upstream has made changes that do not allow a resource to use both sdkv1
& sdkv2 resources. This updates the gamelift resources to v2.

diff --git a/internal/service/gamelift/matchmaking_configuration.go b/internal/service/gamelift/matchmaking_configuration.go
index 89ecad9db0..5811f1f884 100644
--- a/internal/service/gamelift/matchmaking_configuration.go
+++ b/internal/service/gamelift/matchmaking_configuration.go
@@ -5,17 +5,20 @@ import (
 	"log"
 	"regexp"
 
-	"github.com/aws/aws-sdk-go/aws"
-	"github.com/aws/aws-sdk-go/service/gamelift"
-	"github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
+	"github.com/aws/aws-sdk-go-v2/aws"
+	"github.com/aws/aws-sdk-go-v2/service/gamelift"
+	awstypes "github.com/aws/aws-sdk-go-v2/service/gamelift/types"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	"github.com/hashicorp/terraform-provider-aws/internal/enum"
+	"github.com/hashicorp/terraform-provider-aws/internal/errs"
 	"github.com/hashicorp/terraform-provider-aws/internal/flex"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 )
 
+// @SDKResource("aws_gamelift_matchmaking_configuration", name="Gamelift Matchmaking Configuration")
 func ResourceMatchMakingConfiguration() *schema.Resource {
 	return &schema.Resource{
 		CreateWithoutTimeout: resourceMatchmakingConfigurationCreate,
@@ -46,9 +49,9 @@ func ResourceMatchMakingConfiguration() *schema.Resource {
 				Computed: true,
 			},
 			"backfill_mode": {
-				Type:         schema.TypeString,
-				Optional:     true,
-				ValidateFunc: validation.StringInSlice([]string{gamelift.BackfillModeAutomatic, gamelift.BackfillModeManual}, false),
+				Type:             schema.TypeString,
+				Optional:         true,
+				ValidateDiagFunc: enum.Validate[awstypes.BackfillMode](),
 			},
 			"creation_time": {
 				Type:     schema.TypeString,
@@ -65,10 +68,10 @@ func ResourceMatchMakingConfiguration() *schema.Resource {
 				ValidateFunc: validation.StringLenBetween(1, 1024),
 			},
 			"flex_match_mode": {
-				Type:         schema.TypeString,
-				Optional:     true,
-				Computed:     true,
-				ValidateFunc: validation.StringInSlice([]string{gamelift.FlexMatchModeStandalone, gamelift.FlexMatchModeWithQueue}, false),
+				Type:             schema.TypeString,
+				Optional:         true,
+				Computed:         true,
+				ValidateDiagFunc: enum.Validate[awstypes.FlexMatchMode](),
 			},
 			"game_property": {
 				Type:     schema.TypeSet,
@@ -146,26 +149,26 @@ func ResourceMatchMakingConfiguration() *schema.Resource {
 }
 
 func resourceMatchmakingConfigurationCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
-	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
+	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
+	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig(ctx)
 	tags := defaultTagsConfig.MergeTags(tftags.New(ctx, d.Get("tags").(map[string]interface{})))
 
 	input := gamelift.CreateMatchmakingConfigurationInput{
 		AcceptanceRequired:    aws.Bool(d.Get("acceptance_required").(bool)),
 		Name:                  aws.String(d.Get("name").(string)),
-		RequestTimeoutSeconds: aws.Int64(int64(d.Get("request_timeout_seconds").(int))),
+		RequestTimeoutSeconds: aws.Int32(int32(d.Get("request_timeout_seconds").(int))),
 		RuleSetName:           aws.String(d.Get("rule_set_name").(string)),
 		Tags:                  Tags(tags.IgnoreAWS()),
 	}
 
 	if v, ok := d.GetOk("acceptance_timeout_seconds"); ok {
-		input.AcceptanceTimeoutSeconds = aws.Int64(int64(v.(int)))
+		input.AcceptanceTimeoutSeconds = aws.Int32(int32(v.(int)))
 	}
 	if v, ok := d.GetOk("additional_player_count"); ok {
-		input.AdditionalPlayerCount = aws.Int64(int64(v.(int)))
+		input.AdditionalPlayerCount = aws.Int32(int32(v.(int)))
 	}
 	if v, ok := d.GetOk("backfill_mode"); ok {
-		input.BackfillMode = aws.String(v.(string))
+		input.BackfillMode = awstypes.BackfillMode(v.(string))
 	}
 	if v, ok := d.GetOk("custom_event_data"); ok {
 		input.CustomEventData = aws.String(v.(string))
@@ -174,7 +177,7 @@ func resourceMatchmakingConfigurationCreate(ctx context.Context, d *schema.Resou
 		input.Description = aws.String(v.(string))
 	}
 	if v, ok := d.GetOk("flex_match_mode"); ok {
-		input.FlexMatchMode = aws.String(v.(string))
+		input.FlexMatchMode = awstypes.FlexMatchMode(v.(string))
 	}
 	if v, ok := d.GetOk("game_property"); ok {
 		set := v.(*schema.Set)
@@ -184,33 +187,34 @@ func resourceMatchmakingConfigurationCreate(ctx context.Context, d *schema.Resou
 		input.GameSessionData = aws.String(v.(string))
 	}
 	if v, ok := d.GetOk("game_session_queue_arns"); ok {
-		input.GameSessionQueueArns = flex.ExpandStringSet(v.(*schema.Set))
+		input.GameSessionQueueArns = flex.ExpandStringValueSet(v.(*schema.Set))
 	}
 	if v, ok := d.GetOk("notification_target"); ok {
 		input.NotificationTarget = aws.String(v.(string))
 	}
 
-	log.Printf("[INFO] Creating GameLift Matchmaking Configuration: %s", input)
-	out, err := conn.CreateMatchmakingConfiguration(&input)
+	log.Printf("[INFO] Creating GameLift Matchmaking Configuration: %v", input)
+	out, err := conn.CreateMatchmakingConfiguration(ctx, &input)
 	if err != nil {
 		return diag.Errorf("error creating GameLift Matchmaking Configuration: %s", err)
 	}
 
-	d.SetId(aws.StringValue(out.Configuration.ConfigurationArn))
+	d.SetId(aws.ToString(out.Configuration.ConfigurationArn))
 	return resourceMatchmakingConfigurationRead(ctx, d, meta)
 }
 
 func resourceMatchmakingConfigurationRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
-	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
+	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
+	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig(ctx)
 	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig
 
 	log.Printf("[INFO] Describing GameLift Matchmaking Configuration: %s", d.Id())
-	out, err := conn.DescribeMatchmakingConfigurations(&gamelift.DescribeMatchmakingConfigurationsInput{
-		Names: aws.StringSlice([]string{d.Id()}),
+	out, err := conn.DescribeMatchmakingConfigurations(ctx, &gamelift.DescribeMatchmakingConfigurationsInput{
+		Names: []string{d.Id()},
 	})
 	if err != nil {
-		if tfawserr.ErrStatusCodeEquals(err, 400) || tfawserr.ErrCodeEquals(err, gamelift.ErrCodeNotFoundException) {
+		if errs.IsAErrorMessageContains[*awstypes.InvalidRequestException](err, "Configuration not found") ||
+			errs.IsA[*awstypes.NotFoundException](err) {
 			log.Printf("[WARN] GameLift Matchmaking Configuration (%s) not found, removing from state", d.Id())
 			d.SetId("")
 			return nil
@@ -230,7 +234,7 @@ func resourceMatchmakingConfigurationRead(ctx context.Context, d *schema.Resourc
 	}
 	configuration := configurations[0]
 
-	arn := aws.StringValue(configuration.ConfigurationArn)
+	arn := aws.ToString(configuration.ConfigurationArn)
 	d.Set("acceptance_required", configuration.AcceptanceRequired)
 	d.Set("acceptance_timeout_seconds", configuration.AcceptanceTimeoutSeconds)
 	d.Set("additional_player_count", configuration.AdditionalPlayerCount)
@@ -270,25 +274,25 @@ func resourceMatchmakingConfigurationRead(ctx context.Context, d *schema.Resourc
 }
 
 func resourceMatchmakingConfigurationUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
+	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
 
 	log.Printf("[INFO] Updating GameLift Matchmaking Configuration: %s", d.Id())
 
 	input := gamelift.UpdateMatchmakingConfigurationInput{
 		Name:                  aws.String(d.Id()),
 		AcceptanceRequired:    aws.Bool(d.Get("acceptance_required").(bool)),
-		RequestTimeoutSeconds: aws.Int64(int64(d.Get("request_timeout_seconds").(int))),
+		RequestTimeoutSeconds: aws.Int32(int32(d.Get("request_timeout_seconds").(int))),
 		RuleSetName:           aws.String(d.Get("rule_set_name").(string)),
 	}
 
 	if v, ok := d.GetOk("acceptance_timeout_seconds"); ok {
-		input.AcceptanceTimeoutSeconds = aws.Int64(int64(v.(int)))
+		input.AcceptanceTimeoutSeconds = aws.Int32(int32(v.(int)))
 	}
 	if v, ok := d.GetOk("additional_player_count"); ok {
-		input.AdditionalPlayerCount = aws.Int64(int64(v.(int)))
+		input.AdditionalPlayerCount = aws.Int32(int32(v.(int)))
 	}
 	if v, ok := d.GetOk("backfill_mode"); ok {
-		input.BackfillMode = aws.String(v.(string))
+		input.BackfillMode = awstypes.BackfillMode(v.(string))
 	}
 	if v, ok := d.GetOk("custom_event_data"); ok {
 		input.CustomEventData = aws.String(v.(string))
@@ -298,7 +302,7 @@ func resourceMatchmakingConfigurationUpdate(ctx context.Context, d *schema.Resou
 	}
 	if d.HasChange("flex_match_mode") {
 		if v, ok := d.GetOk("flex_match_mode"); ok {
-			input.FlexMatchMode = aws.String(v.(string))
+			input.FlexMatchMode = awstypes.FlexMatchMode(v.(string))
 		}
 	}
 	if v, ok := d.GetOk("game_property"); ok {
@@ -309,13 +313,13 @@ func resourceMatchmakingConfigurationUpdate(ctx context.Context, d *schema.Resou
 		input.GameSessionData = aws.String(v.(string))
 	}
 	if v, ok := d.GetOk("game_session_queue_arns"); ok {
-		input.GameSessionQueueArns = flex.ExpandStringSet(v.(*schema.Set))
+		input.GameSessionQueueArns = flex.ExpandStringValueSet(v.(*schema.Set))
 	}
 	if v, ok := d.GetOk("notification_target"); ok {
 		input.NotificationTarget = aws.String(v.(string))
 	}
 
-	_, err := conn.UpdateMatchmakingConfiguration(&input)
+	_, err := conn.UpdateMatchmakingConfiguration(ctx, &input)
 	if err != nil {
 		return diag.Errorf("error updating Gamelift Matchmaking Configuration (%s): %s", d.Id(), err)
 	}
@@ -334,12 +338,13 @@ func resourceMatchmakingConfigurationUpdate(ctx context.Context, d *schema.Resou
 }
 
 func resourceMatchmakingConfigurationDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
+	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
 	log.Printf("[INFO] Deleting GameLift Matchmaking Configuration: %s", d.Id())
-	_, err := conn.DeleteMatchmakingConfiguration(&gamelift.DeleteMatchmakingConfigurationInput{
+	_, err := conn.DeleteMatchmakingConfiguration(ctx, &gamelift.DeleteMatchmakingConfigurationInput{
 		Name: aws.String(d.Id()),
 	})
-	if tfawserr.ErrStatusCodeEquals(err, 400) || tfawserr.ErrCodeEquals(err, gamelift.ErrCodeNotFoundException) {
+	if errs.IsAErrorMessageContains[*awstypes.InvalidRequestException](err, "Configuration not found") ||
+		errs.IsA[*awstypes.NotFoundException](err) {
 		return nil
 	}
 	if err != nil {
@@ -349,11 +354,11 @@ func resourceMatchmakingConfigurationDelete(ctx context.Context, d *schema.Resou
 	return nil
 }
 
-func expandGameliftGameProperties(cfg []interface{}) []*gamelift.GameProperty {
-	properties := make([]*gamelift.GameProperty, len(cfg))
+func expandGameliftGameProperties(cfg []interface{}) []awstypes.GameProperty {
+	properties := make([]awstypes.GameProperty, len(cfg))
 	for i, property := range cfg {
 		prop := property.(map[string]interface{})
-		properties[i] = &gamelift.GameProperty{
+		properties[i] = awstypes.GameProperty{
 			Key:   aws.String(prop["key"].(string)),
 			Value: aws.String(prop["value"].(string)),
 		}
@@ -361,7 +366,7 @@ func expandGameliftGameProperties(cfg []interface{}) []*gamelift.GameProperty {
 	return properties
 }
 
-func flattenGameliftGameProperties(awsProperties []*gamelift.GameProperty) []interface{} {
+func flattenGameliftGameProperties(awsProperties []awstypes.GameProperty) []interface{} {
 	properties := []interface{}{}
 	for _, awsProperty := range awsProperties {
 		property := map[string]string{
diff --git a/internal/service/gamelift/matchmaking_configuration_test.go b/internal/service/gamelift/matchmaking_configuration_test.go
index 6453fa75a0..480b62b36b 100644
--- a/internal/service/gamelift/matchmaking_configuration_test.go
+++ b/internal/service/gamelift/matchmaking_configuration_test.go
@@ -6,8 +6,8 @@ import (
 	"regexp"
 	"testing"
 
-	"github.com/aws/aws-sdk-go/aws"
-	"github.com/aws/aws-sdk-go/service/gamelift"
+	"github.com/aws/aws-sdk-go-v2/service/gamelift"
+	awstypes "github.com/aws/aws-sdk-go-v2/service/gamelift/types"
 
 	"github.com/hashicorp/terraform-plugin-testing/terraform"
 
@@ -16,12 +16,13 @@ import (
 	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
 	tfgamelift "github.com/hashicorp/terraform-provider-aws/internal/service/gamelift"
+	"github.com/hashicorp/terraform-provider-aws/names"
 )
 
 func TestAccMatchmakingConfiguration_basic(t *testing.T) {
 
 	ctx := acctest.Context(t)
-	var conf gamelift.MatchmakingConfiguration
+	var conf awstypes.MatchmakingConfiguration
 
 	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
 	resourceName := "aws_gamelift_matchmaking_configuration.test"
@@ -33,10 +34,10 @@ func TestAccMatchmakingConfiguration_basic(t *testing.T) {
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck: func() {
 			acctest.PreCheck(ctx, t)
-			acctest.PreCheckPartitionHasService(t, gamelift.EndpointsID)
+			acctest.PreCheckPartitionHasService(t, names.GameLiftEndpointID)
 			testAccPreCheck(ctx, t)
 		},
-		ErrorCheck:               acctest.ErrorCheck(t, gamelift.EndpointsID),
+		ErrorCheck:               acctest.ErrorCheck(t, names.GameLiftEndpointID),
 		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
 		CheckDestroy:             testAccCheckGameServerGroupDestroy(ctx),
 		Steps: []resource.TestStep{
@@ -51,7 +52,7 @@ func TestAccMatchmakingConfiguration_basic(t *testing.T) {
 					resource.TestCheckResourceAttr(resourceName, "game_session_data", "game_session_data"),
 					resource.TestCheckResourceAttr(resourceName, "acceptance_required", "false"),
 					resource.TestCheckResourceAttr(resourceName, "request_timeout_seconds", "10"),
-					resource.TestCheckResourceAttr(resourceName, "backfill_mode", gamelift.BackfillModeManual),
+					resource.TestCheckResourceAttr(resourceName, "backfill_mode", string(awstypes.BackfillModeManual)),
 				),
 			},
 			{
@@ -66,7 +67,7 @@ func TestAccMatchmakingConfiguration_basic(t *testing.T) {
 func TestAccMatchmakingConfiguration_tags(t *testing.T) {
 
 	ctx := acctest.Context(t)
-	var conf gamelift.MatchmakingConfiguration
+	var conf awstypes.MatchmakingConfiguration
 
 	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
 	resourceName := "aws_gamelift_matchmaking_configuration.test"
@@ -78,10 +79,10 @@ func TestAccMatchmakingConfiguration_tags(t *testing.T) {
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck: func() {
 			acctest.PreCheck(ctx, t)
-			acctest.PreCheckPartitionHasService(t, gamelift.EndpointsID)
+			acctest.PreCheckPartitionHasService(t, names.GameLiftEndpointID)
 			testAccPreCheck(ctx, t)
 		},
-		ErrorCheck:               acctest.ErrorCheck(t, gamelift.EndpointsID),
+		ErrorCheck:               acctest.ErrorCheck(t, names.GameLiftEndpointID),
 		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
 		CheckDestroy:             testAccCheckGameServerGroupDestroy(ctx),
 		Steps: []resource.TestStep{
@@ -97,7 +98,7 @@ func TestAccMatchmakingConfiguration_tags(t *testing.T) {
 					resource.TestCheckResourceAttr(resourceName, "game_session_data", "game_session_data"),
 					resource.TestCheckResourceAttr(resourceName, "acceptance_required", "false"),
 					resource.TestCheckResourceAttr(resourceName, "request_timeout_seconds", "10"),
-					resource.TestCheckResourceAttr(resourceName, "backfill_mode", gamelift.BackfillModeManual),
+					resource.TestCheckResourceAttr(resourceName, "backfill_mode", string(awstypes.BackfillModeManual)),
 				),
 			},
 			{
@@ -112,7 +113,7 @@ func TestAccMatchmakingConfiguration_tags(t *testing.T) {
 func TestAccMatchmakingConfiguration_disappears(t *testing.T) {
 
 	ctx := acctest.Context(t)
-	var conf gamelift.MatchmakingConfiguration
+	var conf awstypes.MatchmakingConfiguration
 
 	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
 	resourceName := "aws_gamelift_matchmaking_configuration.test"
@@ -124,10 +125,10 @@ func TestAccMatchmakingConfiguration_disappears(t *testing.T) {
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck: func() {
 			acctest.PreCheck(ctx, t)
-			acctest.PreCheckPartitionHasService(t, gamelift.EndpointsID)
+			acctest.PreCheckPartitionHasService(t, names.GameLiftEndpointID)
 			testAccPreCheck(ctx, t)
 		},
-		ErrorCheck:               acctest.ErrorCheck(t, gamelift.EndpointsID),
+		ErrorCheck:               acctest.ErrorCheck(t, names.GameLiftEndpointID),
 		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
 		CheckDestroy:             testAccCheckGameServerGroupDestroy(ctx),
 		Steps: []resource.TestStep{
@@ -143,7 +144,7 @@ func TestAccMatchmakingConfiguration_disappears(t *testing.T) {
 	})
 }
 
-func testAccCheckMatchmakingConfigurationExists(ctx context.Context, n string, res *gamelift.MatchmakingConfiguration) resource.TestCheckFunc {
+func testAccCheckMatchmakingConfigurationExists(ctx context.Context, n string, res *awstypes.MatchmakingConfiguration) resource.TestCheckFunc {
 	return func(s *terraform.State) error {
 
 		rs, ok := s.RootModule().Resources[n]
@@ -155,11 +156,11 @@ func testAccCheckMatchmakingConfigurationExists(ctx context.Context, n string, r
 			return fmt.Errorf("no Gamelift Matchmaking Configuration Name is set")
 		}
 
-		conn := acctest.Provider.Meta().(*conns.AWSClient).GameLiftConn(ctx)
+		conn := acctest.Provider.Meta().(*conns.AWSClient).GameLiftClient(ctx)
 
 		name := rs.Primary.Attributes["name"]
-		out, err := conn.DescribeMatchmakingConfigurationsWithContext(ctx, &gamelift.DescribeMatchmakingConfigurationsInput{
-			Names: aws.StringSlice([]string{name}),
+		out, err := conn.DescribeMatchmakingConfigurations(ctx, &gamelift.DescribeMatchmakingConfigurationsInput{
+			Names: []string{name},
 		})
 
 		if err != nil {
@@ -169,7 +170,7 @@ func testAccCheckMatchmakingConfigurationExists(ctx context.Context, n string, r
 		if len(configurations) == 0 {
 			return fmt.Errorf("GameLift Matchmaking Configuration %q not found", name)
 		}
-		*res = *configurations[0]
+		*res = configurations[0]
 
 		return nil
 	}
@@ -189,7 +190,7 @@ func testAccAWSGameliftMatchMakingConfigurationRuleSetBody() string {
 }
 
 func testAccGameServerMatchmakingConfiguration_basic(rName string, queueName string, ruleSetName string, additionalParameters string, requestTimeoutSeconds int) string {
-	backfillMode := gamelift.BackfillModeManual
+	backfillMode := awstypes.BackfillModeManual
 	return fmt.Sprintf(`
 resource "aws_gamelift_game_session_queue" "test" {
 	name         = %[2]q
@@ -230,7 +231,7 @@ resource "aws_gamelift_matchmaking_configuration" "test" {
 }
 
 func testAccGameServerMatchmakingConfiguration_tags(rName string, queueName string, ruleSetName string, additionalParameters string, requestTimeoutSeconds int) string {
-	backfillMode := gamelift.BackfillModeManual
+	backfillMode := awstypes.BackfillModeManual
 	return fmt.Sprintf(`
 resource "aws_gamelift_game_session_queue" "test" {
 	name         = %[2]q
diff --git a/internal/service/gamelift/matchmaking_rule_set.go b/internal/service/gamelift/matchmaking_rule_set.go
index d9f2424b7a..5b34ab8669 100644
--- a/internal/service/gamelift/matchmaking_rule_set.go
+++ b/internal/service/gamelift/matchmaking_rule_set.go
@@ -4,18 +4,20 @@ import (
 	"context"
 	"log"
 
-	"github.com/aws/aws-sdk-go/aws"
-	"github.com/aws/aws-sdk-go/service/gamelift"
-	"github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
+	"github.com/aws/aws-sdk-go-v2/aws"
+	"github.com/aws/aws-sdk-go-v2/service/gamelift"
+	awstypes "github.com/aws/aws-sdk-go-v2/service/gamelift/types"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	"github.com/hashicorp/terraform-provider-aws/internal/errs"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 	"github.com/hashicorp/terraform-provider-aws/internal/verify"
 )
 
+// @SDKResource("aws_gamelift_matchmaking_rule_set", name="Gamelift Matchmaking Rule Set")
 func ResourceMatchmakingRuleSet() *schema.Resource {
 	return &schema.Resource{
 		CreateWithoutTimeout: resourceMatchmakingRuleSetCreate,
@@ -58,8 +60,8 @@ func ResourceMatchmakingRuleSet() *schema.Resource {
 }
 
 func resourceMatchmakingRuleSetCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
-	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
+	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
+	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig(ctx)
 	tags := defaultTagsConfig.MergeTags(tftags.New(ctx, d.Get("tags").(map[string]interface{})))
 
 	input := gamelift.CreateMatchmakingRuleSetInput{
@@ -67,27 +69,28 @@ func resourceMatchmakingRuleSetCreate(ctx context.Context, d *schema.ResourceDat
 		RuleSetBody: aws.String(d.Get("rule_set_body").(string)),
 		Tags:        Tags(tags.IgnoreAWS()),
 	}
-	log.Printf("[INFO] Creating GameLift Matchmaking Rule Set: %s", input)
-	out, err := conn.CreateMatchmakingRuleSet(&input)
+	log.Printf("[INFO] Creating GameLift Matchmaking Rule Set: %v", input)
+	out, err := conn.CreateMatchmakingRuleSet(ctx, &input)
 	if err != nil {
 		return diag.Errorf("error creating GameLift Matchmaking Rule Set: %s", err)
 	}
 
-	d.SetId(aws.StringValue(out.RuleSet.RuleSetName))
+	d.SetId(aws.ToString(out.RuleSet.RuleSetName))
 
 	return resourceMatchmakingRuleSetRead(ctx, d, meta)
 }
 
 func resourceMatchmakingRuleSetRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
-	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
+	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
+	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig(ctx)
 
 	log.Printf("[INFO] Describing GameLift Matchmaking Rule Set: %s", d.Id())
-	out, err := conn.DescribeMatchmakingRuleSets(&gamelift.DescribeMatchmakingRuleSetsInput{
-		Names: aws.StringSlice([]string{d.Id()}),
+	out, err := conn.DescribeMatchmakingRuleSets(ctx, &gamelift.DescribeMatchmakingRuleSetsInput{
+		Names: []string{d.Id()},
 	})
 	if err != nil {
-		if tfawserr.ErrStatusCodeEquals(err, 400) || tfawserr.ErrCodeEquals(err, gamelift.ErrCodeNotFoundException) {
+		if errs.IsAErrorMessageContains[*awstypes.InvalidRequestException](err, "Failed to find rule set") ||
+			errs.IsA[*awstypes.NotFoundException](err) {
 			log.Printf("[WARN] GameLift Matchmaking Rule Set (%s) not found, removing from state", d.Id())
 			d.SetId("")
 			return nil
@@ -107,7 +110,7 @@ func resourceMatchmakingRuleSetRead(ctx context.Context, d *schema.ResourceData,
 	}
 	ruleSet := ruleSets[0]
 
-	arn := aws.StringValue(ruleSet.RuleSetArn)
+	arn := aws.ToString(ruleSet.RuleSetArn)
 	d.Set("arn", arn)
 	d.Set("name", ruleSet.RuleSetName)
 	d.Set("rule_set_body", ruleSet.RuleSetBody)
@@ -130,7 +133,7 @@ func resourceMatchmakingRuleSetRead(ctx context.Context, d *schema.ResourceData,
 }
 
 func resourceMatchmakingRuleSetUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
+	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
 
 	log.Printf("[INFO] Updating GameLift Matchmaking Rule Set: %s", d.Id())
 
@@ -147,12 +150,13 @@ func resourceMatchmakingRuleSetUpdate(ctx context.Context, d *schema.ResourceDat
 }
 
 func resourceMatchmakingRuleSetDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
+	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
 	log.Printf("[INFO] Deleting GameLift Matchmaking Rule Set: %s", d.Id())
-	_, err := conn.DeleteMatchmakingRuleSet(&gamelift.DeleteMatchmakingRuleSetInput{
+	_, err := conn.DeleteMatchmakingRuleSet(ctx, &gamelift.DeleteMatchmakingRuleSetInput{
 		Name: aws.String(d.Id()),
 	})
-	if tfawserr.ErrCodeEquals(err, gamelift.ErrCodeNotFoundException) {
+	if errs.IsAErrorMessageContains[*awstypes.InvalidRequestException](err, "Failed to find rule set") ||
+		errs.IsA[*awstypes.NotFoundException](err) {
 		return nil
 	}
 	if err != nil {
diff --git a/internal/service/gamelift/matchmaking_rule_set_test.go b/internal/service/gamelift/matchmaking_rule_set_test.go
index 4295987ae6..377b46816e 100644
--- a/internal/service/gamelift/matchmaking_rule_set_test.go
+++ b/internal/service/gamelift/matchmaking_rule_set_test.go
@@ -6,20 +6,21 @@ import (
 	"regexp"
 	"testing"
 
-	"github.com/aws/aws-sdk-go/aws"
-	"github.com/aws/aws-sdk-go/service/gamelift"
+	"github.com/aws/aws-sdk-go-v2/service/gamelift"
+	awstypes "github.com/aws/aws-sdk-go-v2/service/gamelift/types"
 	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
 	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
 	"github.com/hashicorp/terraform-plugin-testing/terraform"
 	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
 	tfgamelift "github.com/hashicorp/terraform-provider-aws/internal/service/gamelift"
+	"github.com/hashicorp/terraform-provider-aws/names"
 )
 
 func TestAccMatchmakingRuleSet_basic(t *testing.T) {
 	ctx := acctest.Context(t)
 
-	var conf gamelift.MatchmakingRuleSet
+	var conf awstypes.MatchmakingRuleSet
 
 	ruleSetName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
 	resourceName := "aws_gamelift_matchmaking_rule_set.test"
@@ -28,10 +29,10 @@ func TestAccMatchmakingRuleSet_basic(t *testing.T) {
 	resource.Test(t, resource.TestCase{
 		PreCheck: func() {
 			acctest.PreCheck(ctx, t)
-			acctest.PreCheckPartitionHasService(t, gamelift.EndpointsID)
+			acctest.PreCheckPartitionHasService(t, names.GameLiftEndpointID)
 			testAccPreCheck(ctx, t)
 		},
-		ErrorCheck:               acctest.ErrorCheck(t, gamelift.EndpointsID),
+		ErrorCheck:               acctest.ErrorCheck(t, names.GameLiftEndpointID),
 		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
 		CheckDestroy:             testAccCheckGameServerGroupDestroy(ctx),
 		Steps: []resource.TestStep{
@@ -57,7 +58,7 @@ func TestAccMatchmakingRuleSet_basic(t *testing.T) {
 func TestAccMatchmakingRuleSet_disappears(t *testing.T) {
 	ctx := acctest.Context(t)
 
-	var conf gamelift.MatchmakingRuleSet
+	var conf awstypes.MatchmakingRuleSet
 
 	ruleSetName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
 	resourceName := "aws_gamelift_matchmaking_rule_set.test"
@@ -66,10 +67,10 @@ func TestAccMatchmakingRuleSet_disappears(t *testing.T) {
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck: func() {
 			acctest.PreCheck(ctx, t)
-			acctest.PreCheckPartitionHasService(t, gamelift.EndpointsID)
+			acctest.PreCheckPartitionHasService(t, names.GameLiftEndpointID)
 			testAccPreCheck(ctx, t)
 		},
-		ErrorCheck:               acctest.ErrorCheck(t, gamelift.EndpointsID),
+		ErrorCheck:               acctest.ErrorCheck(t, names.GameLiftEndpointID),
 		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
 		CheckDestroy:             testAccCheckGameServerGroupDestroy(ctx),
 		Steps: []resource.TestStep{
@@ -85,7 +86,7 @@ func TestAccMatchmakingRuleSet_disappears(t *testing.T) {
 	})
 }
 
-func testAccCheckMatchmakingRuleSetExists(ctx context.Context, n string, res *gamelift.MatchmakingRuleSet) resource.TestCheckFunc {
+func testAccCheckMatchmakingRuleSetExists(ctx context.Context, n string, res *awstypes.MatchmakingRuleSet) resource.TestCheckFunc {
 	return func(s *terraform.State) error {
 		rs, ok := s.RootModule().Resources[n]
 
@@ -97,11 +98,11 @@ func testAccCheckMatchmakingRuleSetExists(ctx context.Context, n string, res *ga
 			return fmt.Errorf("no Gamelift Matchmaking Rule Set Name is set")
 		}
 
-		conn := acctest.Provider.Meta().(*conns.AWSClient).GameLiftConn(ctx)
+		conn := acctest.Provider.Meta().(*conns.AWSClient).GameLiftClient(ctx)
 
 		name := rs.Primary.Attributes["name"]
-		out, err := conn.DescribeMatchmakingRuleSets(&gamelift.DescribeMatchmakingRuleSetsInput{
-			Names: aws.StringSlice([]string{name}),
+		out, err := conn.DescribeMatchmakingRuleSets(ctx, &gamelift.DescribeMatchmakingRuleSetsInput{
+			Names: []string{name},
 		})
 		if err != nil {
 			return err
@@ -111,7 +112,7 @@ func testAccCheckMatchmakingRuleSetExists(ctx context.Context, n string, res *ga
 			return fmt.Errorf("GameLift Matchmaking Rule Set %q not found", name)
 		}
 
-		*res = *ruleSets[0]
+		*res = ruleSets[0]
 
 		return nil
 	}
diff --git a/names/data/names_data.hcl b/names/data/names_data.hcl
index b46f324edb..e6820d0986 100644
--- a/names/data/names_data.hcl
+++ b/names/data/names_data.hcl
@@ -3883,7 +3883,8 @@ service "fsx" {
 
 service "gamelift" {
   sdk {
-    id = "GameLift"
+    id             = "GameLift"
+    client_version = 2
   }
 
   names {
