From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: corymhall <43035978+corymhall@users.noreply.github.com>
Date: Wed, 29 May 2024 09:07:38 -0400
Subject: [PATCH] Restore legacy bucket


diff --git a/internal/conns/awsclient.go b/internal/conns/awsclient.go
index c98bc7fc2f..b9d46d6765 100644
--- a/internal/conns/awsclient.go
+++ b/internal/conns/awsclient.go
@@ -101,6 +101,10 @@ func (c *AWSClient) S3UsePathStyle(context.Context) bool {
 	return c.s3UsePathStyle
 }
 
+func (c *AWSClient) S3Conn(ctx context.Context) *s3_sdkv1.S3 {
+	return errs.Must(conn[*s3_sdkv1.S3](ctx, c, names.S3, make(map[string]any)))
+}
+
 func (client *AWSClient) S3ConnURICleaningDisabled(ctx context.Context) *s3_sdkv1.S3 {
 	config := client.S3Conn(ctx).Config
 	config.DisableRestProtocolURICleaning = aws_sdkv2.Bool(true)
diff --git a/internal/provider/provider.go b/internal/provider/provider.go
index 4221a35f24..af988348da 100644
--- a/internal/provider/provider.go
+++ b/internal/provider/provider.go
@@ -17,7 +17,6 @@ import (
 
 	"github.com/hashicorp/terraform-provider-aws/internal/service/ecr"
 	"github.com/hashicorp/terraform-provider-aws/internal/service/gamelift"
-	"github.com/hashicorp/terraform-provider-aws/internal/service/s3legacy"
 
 	"github.com/aws/aws-sdk-go-v2/feature/ec2/imds"
 	awsbase "github.com/hashicorp/aws-sdk-go-base/v2"
@@ -270,8 +269,6 @@ func New(ctx context.Context) (*schema.Provider, error) {
 		},
 
 		ResourcesMap: map[string]*schema.Resource{
-			"aws_s3_bucket_legacy": s3legacy.ResourceBucketLegacy(),
-
 			"aws_gamelift_matchmaking_configuration": gamelift.ResourceMatchMakingConfiguration(),
 			"aws_gamelift_matchmaking_rule_set":      gamelift.ResourceMatchmakingRuleSet(),
 		},
@@ -284,7 +281,7 @@ func New(ctx context.Context) (*schema.Provider, error) {
 	var errs []error
 	servicePackageMap := make(map[string]conns.ServicePackage)
 
-	for _, sp := range servicePackages(ctx) {
+	for _, sp := range servicePackagesAll(ctx) {
 		servicePackageName := sp.ServicePackageName()
 		servicePackageMap[servicePackageName] = sp
 
diff --git a/internal/provider/service_packages_all.go b/internal/provider/service_packages_all.go
new file mode 100644
index 0000000000..51ca53f883
--- /dev/null
+++ b/internal/provider/service_packages_all.go
@@ -0,0 +1,12 @@
+package provider
+
+import (
+	"context"
+
+	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	"github.com/hashicorp/terraform-provider-aws/internal/service/s3legacy"
+)
+
+func servicePackagesAll(ctx context.Context) []conns.ServicePackage {
+	return append(servicePackages(ctx), s3legacy.ServicePackage(ctx))
+}
diff --git a/internal/service/s3/service_package_bwcompat.go b/internal/service/s3/service_package_bwcompat.go
new file mode 100644
index 0000000000..4278d1e70a
--- /dev/null
+++ b/internal/service/s3/service_package_bwcompat.go
@@ -0,0 +1,57 @@
+// Copyright (c) HashiCorp, Inc.
+// SPDX-License-Identifier: MPL-2.0
+
+package s3
+
+import (
+	"context"
+	"fmt"
+
+	aws_sdkv1 "github.com/aws/aws-sdk-go/aws"
+	endpoints_sdkv1 "github.com/aws/aws-sdk-go/aws/endpoints"
+	request_sdkv1 "github.com/aws/aws-sdk-go/aws/request"
+	session_sdkv1 "github.com/aws/aws-sdk-go/aws/session"
+	s3_sdkv1 "github.com/aws/aws-sdk-go/service/s3"
+	tfawserr_sdkv1 "github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
+)
+
+// NewConn returns a new AWS SDK for Go v1 client for this service package's AWS API.
+func (p *servicePackage) NewConn(ctx context.Context, m map[string]any) (*s3_sdkv1.S3, error) {
+	sess := m["session"].(*session_sdkv1.Session)
+	config := &aws_sdkv1.Config{
+		Endpoint:         aws_sdkv1.String(m["endpoint"].(string)),
+		S3ForcePathStyle: aws_sdkv1.Bool(m["s3_use_path_style"].(bool)),
+	}
+
+	if v, ok := m["s3_us_east_1_regional_endpoint"]; ok {
+		switch v := v.(type) {
+		case string:
+			if v == "" {
+				config.S3UsEast1RegionalEndpoint = endpoints_sdkv1.RegionalS3UsEast1Endpoint
+			} else {
+				e, err := endpoints_sdkv1.GetS3UsEast1RegionalEndpoint(v)
+				if err != nil {
+					return nil, err
+				}
+				config.S3UsEast1RegionalEndpoint = e
+			}
+		case endpoints_sdkv1.S3UsEast1RegionalEndpoint:
+			config.S3UsEast1RegionalEndpoint = v
+		default:
+			return nil, fmt.Errorf("Unexpected type of s3_us_east_1_regional_endpoint")
+		}
+	}
+
+	return s3_sdkv1.New(sess.Copy(config)), nil
+}
+
+// CustomizeConn customizes a new AWS SDK for Go v1 client for this service package's AWS API.
+func (p *servicePackage) CustomizeConn(ctx context.Context, conn *s3_sdkv1.S3) (*s3_sdkv1.S3, error) {
+	conn.Handlers.Retry.PushBack(func(r *request_sdkv1.Request) {
+		if tfawserr_sdkv1.ErrMessageContains(r.Error, errCodeOperationAborted, "A conflicting conditional operation is currently in progress against this resource. Please try again.") {
+			r.Retryable = aws_sdkv1.Bool(true)
+		}
+	})
+
+	return conn, nil
+}
diff --git a/internal/service/s3legacy/bucket_legacy.go b/internal/service/s3legacy/bucket_legacy.go
index 007c2f2dc1..40fd0b7be2 100644
--- a/internal/service/s3legacy/bucket_legacy.go
+++ b/internal/service/s3legacy/bucket_legacy.go
@@ -19,7 +19,6 @@ import (
 	"github.com/aws/aws-sdk-go/aws/request"
 	"github.com/aws/aws-sdk-go/service/s3"
 	"github.com/aws/aws-sdk-go/service/s3/s3manager"
-	"github.com/hashicorp/aws-sdk-go-base/tfawserr"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
@@ -31,7 +30,7 @@ import (
 	"github.com/hashicorp/terraform-provider-aws/internal/flex"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
-	"github.com/hashicorp/terraform-provider-aws/internal/types"
+	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
 	"github.com/hashicorp/terraform-provider-aws/internal/verify"
 )
 
@@ -1393,7 +1392,7 @@ func resourceBucketLegacyRead(ctx context.Context, d *schema.ResourceData, meta
 	}
 
 	if inContext, ok := tftags.FromContext(ctx); ok {
-		inContext.TagsOut = types.Some(tags)
+		inContext.TagsOut = option.Some(tags)
 	}
 
 	arn := arn.ARN{
diff --git a/internal/service/s3legacy/object.go b/internal/service/s3legacy/object.go
index f44b435af6..58f6e95d83 100644
--- a/internal/service/s3legacy/object.go
+++ b/internal/service/s3legacy/object.go
@@ -2,10 +2,10 @@ package s3legacy
 
 import (
 	"fmt"
+	"log"
+
 	"github.com/aws/aws-sdk-go/aws"
 	"github.com/aws/aws-sdk-go/service/s3"
-	"github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
-	"log"
 )
 
 // DeleteAllObjectVersions deletes all versions of a specified key from an S3 bucket.
diff --git a/internal/service/s3legacy/retry.go b/internal/service/s3legacy/retry.go
index dcf7e39759..f578947ae6 100644
--- a/internal/service/s3legacy/retry.go
+++ b/internal/service/s3legacy/retry.go
@@ -1,10 +1,10 @@
 package s3legacy
 
 import (
-	"github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
+	"time"
+
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
-	"time"
 )
 
 // FORK: Adding the retryOnAWSCode to the fork for the old AWS S3 Logic
diff --git a/internal/service/s3legacy/service_package.go b/internal/service/s3legacy/service_package.go
new file mode 100644
index 0000000000..5d2ea27364
--- /dev/null
+++ b/internal/service/s3legacy/service_package.go
@@ -0,0 +1,78 @@
+package s3legacy
+
+import (
+	"context"
+
+	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	"github.com/hashicorp/terraform-provider-aws/internal/types"
+)
+
+type servicePackage struct{}
+
+func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
+	return []*types.ServicePackageFrameworkDataSource{}
+}
+
+func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
+	return []*types.ServicePackageFrameworkResource{}
+}
+
+func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
+	return []*types.ServicePackageSDKDataSource{}
+}
+
+func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
+	return []*types.ServicePackageSDKResource{
+		{
+			Factory:  ResourceBucketLegacy,
+			TypeName: "aws_s3_bucket_legacy",
+			Name:     "BucketLegacy",
+			Tags: &types.ServicePackageResourceTags{
+				IdentifierAttribute: "bucket",
+				ResourceType:        "Bucket",
+			},
+		},
+	}
+}
+
+func (p *servicePackage) ServicePackageName() string {
+	return "s3legacy"
+}
+
+func ServicePackage(ctx context.Context) conns.ServicePackage {
+	return &servicePackage{}
+}
+
+// import (
+// 	"context"
+
+// 	"github.com/aws/aws-sdk-go-v2/aws"
+// 	"github.com/aws/aws-sdk-go-v2/aws/retry"
+// 	"github.com/aws/aws-sdk-go-v2/service/s3"
+// 	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
+// 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+// 	"github.com/hashicorp/terraform-provider-aws/names"
+// )
+
+// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
+// func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*s3.Client, error) {
+// 	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
+
+// 	return s3.NewFromConfig(cfg, func(o *s3.Options) {
+// 		if endpoint := config["endpoint"].(string); endpoint != "" {
+// 			o.BaseEndpoint = aws.String(endpoint)
+// 		} else if o.Region == names.USEast1RegionID && config["s3_us_east_1_regional_endpoint"].(string) != "regional" {
+// 			// Maintain the AWS SDK for Go v1 default of using the global endpoint in us-east-1.
+// 			// See https://github.com/hashicorp/terraform-provider-aws/issues/33028.
+// 			o.Region = names.GlobalRegionID
+// 		}
+// 		o.UsePathStyle = config["s3_use_path_style"].(bool)
+
+// 		o.Retryer = conns.AddIsErrorRetryables(cfg.Retryer().(aws.RetryerV2), retry.IsErrorRetryableFunc(func(err error) aws.Ternary {
+// 			if tfawserr.ErrMessageContains(err, errCodeOperationAborted, "A conflicting conditional operation is currently in progress against this resource. Please try again.") {
+// 				return aws.TrueTernary
+// 			}
+// 			return aws.UnknownTernary // Delegate to configured Retryer.
+// 		}))
+// 	}), nil
+// }
diff --git a/internal/service/s3legacy/tags.go b/internal/service/s3legacy/tags.go
index 669813747b..b727c54640 100644
--- a/internal/service/s3legacy/tags.go
+++ b/internal/service/s3legacy/tags.go
@@ -11,7 +11,6 @@ import (
 	"github.com/aws/aws-sdk-go/aws"
 	"github.com/aws/aws-sdk-go/aws/awserr"
 	"github.com/aws/aws-sdk-go/service/s3"
-	"github.com/hashicorp/aws-sdk-go-base/tfawserr"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
diff --git a/internal/service/s3legacy/tfawserr_shim.go b/internal/service/s3legacy/tfawserr_shim.go
new file mode 100644
index 0000000000..b8b0660d7a
--- /dev/null
+++ b/internal/service/s3legacy/tfawserr_shim.go
@@ -0,0 +1,40 @@
+package s3legacy
+
+import (
+	"errors"
+	"strings"
+
+	"github.com/aws/aws-sdk-go/aws/awserr"
+)
+
+type tfawserrshim struct{}
+
+var tfawserr *tfawserrshim = &tfawserrshim{}
+
+func (*tfawserrshim) ErrCodeEquals(err error, codes ...string) bool {
+	var awsErr awserr.Error
+	if errors.As(err, &awsErr) {
+		for _, code := range codes {
+			if awsErr.Code() == code {
+				return true
+			}
+		}
+	}
+	return false
+}
+
+func (*tfawserrshim) ErrMessageContains(err error, code string, message string) bool {
+	var awsErr awserr.Error
+	if errors.As(err, &awsErr) {
+		return awsErr.Code() == code && strings.Contains(awsErr.Message(), message)
+	}
+	return false
+}
+
+func (*tfawserrshim) ErrStatusCodeEquals(err error, statusCode int) bool {
+	var awsErr awserr.RequestFailure
+	if errors.As(err, &awsErr) {
+		return awsErr.StatusCode() == statusCode
+	}
+	return false
+}
