From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: corymhall <43035978+corymhall@users.noreply.github.com>
Date: Wed, 29 May 2024 09:07:38 -0400
Subject: [PATCH] Restore legacy bucket


diff --git a/go.mod b/go.mod
index 36f2fcef44..28650bd62f 100644
--- a/go.mod
+++ b/go.mod
@@ -192,6 +192,7 @@ require (
 	github.com/gertd/go-pluralize v0.2.1
 	github.com/google/go-cmp v0.6.0
 	github.com/hashicorp/aws-cloudformation-resource-schema-sdk-go v0.23.0
+	github.com/hashicorp/aws-sdk-go-base v1.1.0
 	github.com/hashicorp/aws-sdk-go-base/v2 v2.0.0-beta.53
 	github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2 v2.0.0-beta.54
 	github.com/hashicorp/awspolicyequivalence v1.6.0
diff --git a/go.sum b/go.sum
index 735d96f3c3..28554e52ad 100644
--- a/go.sum
+++ b/go.sum
@@ -447,6 +447,7 @@ github.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=
 github.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
 github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
 github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
+github.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=
 github.com/go-test/deep v1.1.0 h1:WOcxcdHcvdgThNXjw0t76K42FXTU7HpNQWHpA2HHNlg=
 github.com/go-test/deep v1.1.0/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=
 github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
@@ -466,6 +467,8 @@ github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
 github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/hashicorp/aws-cloudformation-resource-schema-sdk-go v0.23.0 h1:l16/Vrl0+x+HjHJWEjcKPwHYoxN9EC78gAFXKlH6m84=
 github.com/hashicorp/aws-cloudformation-resource-schema-sdk-go v0.23.0/go.mod h1:HAmscHyzSOfB1Dr16KLc177KNbn83wscnZC+N7WyaM8=
+github.com/hashicorp/aws-sdk-go-base v1.1.0 h1:27urM3JAp6v+Oj/Ea5ULZwuFPK9cO1RUdEpV+rNdSAc=
+github.com/hashicorp/aws-sdk-go-base v1.1.0/go.mod h1:2fRjWDv3jJBeN6mVWFHV6hFTNeFBx2gpDLQaZNxUVAY=
 github.com/hashicorp/aws-sdk-go-base/v2 v2.0.0-beta.53 h1:jgOMbQlypMpUMaqYJotjT7ERSMvQP00Mppgjgh8lNt8=
 github.com/hashicorp/aws-sdk-go-base/v2 v2.0.0-beta.53/go.mod h1:nvpXIeF0ANfZ7sMssXKSSR3pyXfksajxoC2tl4jjN08=
 github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2 v2.0.0-beta.54 h1:raRbM2Wynqv0Nyhe7AwVnFgb2roGSvpSUeQKxEg8Lts=
@@ -541,6 +544,7 @@ github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i
 github.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=
 github.com/jhump/protoreflect v1.15.1 h1:HUMERORf3I3ZdX05WaQ6MIpd/NJ434hTp5YiKgfCL6c=
 github.com/jhump/protoreflect v1.15.1/go.mod h1:jD/2GMKKE6OqX8qTjhADU1e6DShO+gavG9e0Q693nKo=
+github.com/jmespath/go-jmespath v0.3.0/go.mod h1:9QtRXoHjLGCJ5IBSaohpXITPlowMeeYCZ7fLUTSywik=
 github.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=
 github.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=
 github.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=
@@ -653,6 +657,7 @@ golang.org/x/mod v0.16.0 h1:QX4fJ0Rr5cPQCF7O9lh9Se4pmwfwskqZfq5moyldzic=
 golang.org/x/mod v0.16.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
 golang.org/x/net v0.2.0/go.mod h1:KqCZLdyyvdV855qA2rE3GC2aiw5xGR5TEjj8smXukLY=
diff --git a/internal/conns/awsclient.go b/internal/conns/awsclient.go
index e291c29b74..1d4fd254d7 100644
--- a/internal/conns/awsclient.go
+++ b/internal/conns/awsclient.go
@@ -145,6 +145,10 @@ func (c *AWSClient) S3UsePathStyle(context.Context) bool {
 	return c.s3UsePathStyle
 }
 
+func (c *AWSClient) S3Conn(ctx context.Context) *s3_sdkv1.S3 {
+	return errs.Must(conn[*s3_sdkv1.S3](ctx, c, names.S3, make(map[string]any)))
+}
+
 func (client *AWSClient) S3ConnURICleaningDisabled(ctx context.Context) *s3_sdkv1.S3 {
 	config := client.S3Conn(ctx).Config
 	config.DisableRestProtocolURICleaning = aws_sdkv2.Bool(true)
diff --git a/internal/provider/provider.go b/internal/provider/provider.go
index ef67582664..03965fe068 100644
--- a/internal/provider/provider.go
+++ b/internal/provider/provider.go
@@ -16,7 +16,6 @@ import (
 
 	"github.com/hashicorp/terraform-provider-aws/internal/service/ecr"
 	"github.com/hashicorp/terraform-provider-aws/internal/service/gamelift"
-	"github.com/hashicorp/terraform-provider-aws/internal/service/s3legacy"
 
 	"github.com/aws/aws-sdk-go-v2/feature/ec2/imds"
 	awsbase "github.com/hashicorp/aws-sdk-go-base/v2"
@@ -264,8 +263,6 @@ func New(ctx context.Context) (*schema.Provider, error) {
 		},
 
 		ResourcesMap: map[string]*schema.Resource{
-			"aws_s3_bucket_legacy": s3legacy.ResourceBucketLegacy(),
-
 			"aws_gamelift_matchmaking_configuration": gamelift.ResourceMatchMakingConfiguration(),
 			"aws_gamelift_matchmaking_rule_set":      gamelift.ResourceMatchmakingRuleSet(),
 		},
@@ -278,7 +275,7 @@ func New(ctx context.Context) (*schema.Provider, error) {
 	var errs []error
 	servicePackageMap := make(map[string]conns.ServicePackage)
 
-	for _, sp := range servicePackages(ctx) {
+	for _, sp := range servicePackagesAll(ctx) {
 		servicePackageName := sp.ServicePackageName()
 		servicePackageMap[servicePackageName] = sp
 
diff --git a/internal/provider/service_packages_all.go b/internal/provider/service_packages_all.go
new file mode 100644
index 0000000000..51ca53f883
--- /dev/null
+++ b/internal/provider/service_packages_all.go
@@ -0,0 +1,12 @@
+package provider
+
+import (
+	"context"
+
+	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	"github.com/hashicorp/terraform-provider-aws/internal/service/s3legacy"
+)
+
+func servicePackagesAll(ctx context.Context) []conns.ServicePackage {
+	return append(servicePackages(ctx), s3legacy.ServicePackage(ctx))
+}
diff --git a/internal/service/s3/service_package_bwcompat.go b/internal/service/s3/service_package_bwcompat.go
new file mode 100644
index 0000000000..4278d1e70a
--- /dev/null
+++ b/internal/service/s3/service_package_bwcompat.go
@@ -0,0 +1,57 @@
+// Copyright (c) HashiCorp, Inc.
+// SPDX-License-Identifier: MPL-2.0
+
+package s3
+
+import (
+	"context"
+	"fmt"
+
+	aws_sdkv1 "github.com/aws/aws-sdk-go/aws"
+	endpoints_sdkv1 "github.com/aws/aws-sdk-go/aws/endpoints"
+	request_sdkv1 "github.com/aws/aws-sdk-go/aws/request"
+	session_sdkv1 "github.com/aws/aws-sdk-go/aws/session"
+	s3_sdkv1 "github.com/aws/aws-sdk-go/service/s3"
+	tfawserr_sdkv1 "github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
+)
+
+// NewConn returns a new AWS SDK for Go v1 client for this service package's AWS API.
+func (p *servicePackage) NewConn(ctx context.Context, m map[string]any) (*s3_sdkv1.S3, error) {
+	sess := m["session"].(*session_sdkv1.Session)
+	config := &aws_sdkv1.Config{
+		Endpoint:         aws_sdkv1.String(m["endpoint"].(string)),
+		S3ForcePathStyle: aws_sdkv1.Bool(m["s3_use_path_style"].(bool)),
+	}
+
+	if v, ok := m["s3_us_east_1_regional_endpoint"]; ok {
+		switch v := v.(type) {
+		case string:
+			if v == "" {
+				config.S3UsEast1RegionalEndpoint = endpoints_sdkv1.RegionalS3UsEast1Endpoint
+			} else {
+				e, err := endpoints_sdkv1.GetS3UsEast1RegionalEndpoint(v)
+				if err != nil {
+					return nil, err
+				}
+				config.S3UsEast1RegionalEndpoint = e
+			}
+		case endpoints_sdkv1.S3UsEast1RegionalEndpoint:
+			config.S3UsEast1RegionalEndpoint = v
+		default:
+			return nil, fmt.Errorf("Unexpected type of s3_us_east_1_regional_endpoint")
+		}
+	}
+
+	return s3_sdkv1.New(sess.Copy(config)), nil
+}
+
+// CustomizeConn customizes a new AWS SDK for Go v1 client for this service package's AWS API.
+func (p *servicePackage) CustomizeConn(ctx context.Context, conn *s3_sdkv1.S3) (*s3_sdkv1.S3, error) {
+	conn.Handlers.Retry.PushBack(func(r *request_sdkv1.Request) {
+		if tfawserr_sdkv1.ErrMessageContains(r.Error, errCodeOperationAborted, "A conflicting conditional operation is currently in progress against this resource. Please try again.") {
+			r.Retryable = aws_sdkv1.Bool(true)
+		}
+	})
+
+	return conn, nil
+}
diff --git a/internal/service/s3legacy/bucket_legacy.go b/internal/service/s3legacy/bucket_legacy.go
index 007c2f2dc1..5f64a814be 100644
--- a/internal/service/s3legacy/bucket_legacy.go
+++ b/internal/service/s3legacy/bucket_legacy.go
@@ -31,7 +31,7 @@ import (
 	"github.com/hashicorp/terraform-provider-aws/internal/flex"
 	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
 	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
-	"github.com/hashicorp/terraform-provider-aws/internal/types"
+	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
 	"github.com/hashicorp/terraform-provider-aws/internal/verify"
 )
 
@@ -1393,7 +1393,7 @@ func resourceBucketLegacyRead(ctx context.Context, d *schema.ResourceData, meta
 	}
 
 	if inContext, ok := tftags.FromContext(ctx); ok {
-		inContext.TagsOut = types.Some(tags)
+		inContext.TagsOut = option.Some(tags)
 	}
 
 	arn := arn.ARN{
diff --git a/internal/service/s3legacy/service_package.go b/internal/service/s3legacy/service_package.go
new file mode 100644
index 0000000000..5d2ea27364
--- /dev/null
+++ b/internal/service/s3legacy/service_package.go
@@ -0,0 +1,78 @@
+package s3legacy
+
+import (
+	"context"
+
+	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	"github.com/hashicorp/terraform-provider-aws/internal/types"
+)
+
+type servicePackage struct{}
+
+func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
+	return []*types.ServicePackageFrameworkDataSource{}
+}
+
+func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
+	return []*types.ServicePackageFrameworkResource{}
+}
+
+func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
+	return []*types.ServicePackageSDKDataSource{}
+}
+
+func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
+	return []*types.ServicePackageSDKResource{
+		{
+			Factory:  ResourceBucketLegacy,
+			TypeName: "aws_s3_bucket_legacy",
+			Name:     "BucketLegacy",
+			Tags: &types.ServicePackageResourceTags{
+				IdentifierAttribute: "bucket",
+				ResourceType:        "Bucket",
+			},
+		},
+	}
+}
+
+func (p *servicePackage) ServicePackageName() string {
+	return "s3legacy"
+}
+
+func ServicePackage(ctx context.Context) conns.ServicePackage {
+	return &servicePackage{}
+}
+
+// import (
+// 	"context"
+
+// 	"github.com/aws/aws-sdk-go-v2/aws"
+// 	"github.com/aws/aws-sdk-go-v2/aws/retry"
+// 	"github.com/aws/aws-sdk-go-v2/service/s3"
+// 	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
+// 	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+// 	"github.com/hashicorp/terraform-provider-aws/names"
+// )
+
+// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
+// func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*s3.Client, error) {
+// 	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
+
+// 	return s3.NewFromConfig(cfg, func(o *s3.Options) {
+// 		if endpoint := config["endpoint"].(string); endpoint != "" {
+// 			o.BaseEndpoint = aws.String(endpoint)
+// 		} else if o.Region == names.USEast1RegionID && config["s3_us_east_1_regional_endpoint"].(string) != "regional" {
+// 			// Maintain the AWS SDK for Go v1 default of using the global endpoint in us-east-1.
+// 			// See https://github.com/hashicorp/terraform-provider-aws/issues/33028.
+// 			o.Region = names.GlobalRegionID
+// 		}
+// 		o.UsePathStyle = config["s3_use_path_style"].(bool)
+
+// 		o.Retryer = conns.AddIsErrorRetryables(cfg.Retryer().(aws.RetryerV2), retry.IsErrorRetryableFunc(func(err error) aws.Ternary {
+// 			if tfawserr.ErrMessageContains(err, errCodeOperationAborted, "A conflicting conditional operation is currently in progress against this resource. Please try again.") {
+// 				return aws.TrueTernary
+// 			}
+// 			return aws.UnknownTernary // Delegate to configured Retryer.
+// 		}))
+// 	}), nil
+// }
