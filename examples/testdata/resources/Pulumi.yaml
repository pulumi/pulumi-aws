name: resources
description: A collection of resource configurations to thoroughly test.

runtime:
  name: yaml

resources:

  provider:
    type: pulumi:providers:aws
    options:
      version: 5.42.0

  s3-bucket-simple:
    type: aws:s3/bucket:Bucket
    properties:
      bucket: testbucket-${pulumi.stack}
    options:
      provider: ${provider}

  rds-instance-withname:
    type: aws:rds/instance:Instance
    properties:
      engine: postgres
      instanceClass: db.t4g.micro
      allocatedStorage: 30
      name: mydbname
      username: mydbuser
      password: mypassword
      skipFinalSnapshot: true
    options:
      provider: ${provider}

  "ekscluster1":
    type: aws:eks:Cluster
    properties:
      roleArn: ${ekscluster1role.arn}
      vpcConfig:
        subnetIds:
          - ${subnet1.id}
          - ${subnet2.id}
    options:
      provider: ${provider}

  "ekscluster1role":
    type: aws:iam:Role
    properties:
      assumeRolePolicy:
        fn::invoke:
           return: json
           function: aws:iam:getPolicyDocument
           arguments:
             statements:
               - effect: Allow
                 principals:
                   - type: Service
                     identifiers:
                       - eks.amazonaws.com
                 actions:
                   - sts:AssumeRole
    options:
      provider: ${provider}

  "ekscluster1roleattach1":
    type: aws:iam:RolePolicyAttachment
    properties:
      policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      role: ${ekscluster1role.name}
    options:
      provider: ${provider}

  "ekscluster1roleattach2":
    type: aws:iam:RolePolicyAttachment
    properties:
      policyArn: arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      role: ${ekscluster1role.name}
    options:
      provider: ${provider}

  "vpc1":
    type: aws:ec2/vpc:Vpc
    properties:
      cidrBlock: "10.192.0.0/16"
    options:
      provider: ${provider}

  "subnet1":
    type: aws:ec2/subnet:Subnet
    properties:
      cidrBlock: 10.192.20.0/24
      vpcId: ${vpc1.id}
      mapPublicIpOnLaunch: false
      availabilityZone: us-west-2a
    options:
      provider: ${provider}

  "subnet2":
    type: aws:ec2/subnet:Subnet
    properties:
      cidrBlock: 10.192.21.0/24
      vpcId: ${vpc1.id}
      mapPublicIpOnLaunch: false
      availabilityZone: us-west-2b
    options:
      provider: ${provider}

  securityGroupAllowTLS1:
    type: aws:ec2:SecurityGroup
    properties:
      description: Allow TLS inbound traffic
      vpcId: ${vpc1.id}
      ingress:
        - description: TLS from VPC
          fromPort: 443
          toPort: 443
          protocol: tcp
          cidrBlocks:
            - ${vpc1.cidrBlock}
      egress:
        - fromPort: 0
          toPort: 0
          protocol: '-1'
          cidrBlocks:
            - 0.0.0.0/0
          ipv6CidrBlocks:
            - ::/0
    options:
      provider: ${provider}

  route53ResolverEndpoint1:
    type: aws:route53:ResolverEndpoint
    properties:
      direction: INBOUND
      securityGroupIds:
        - ${securityGroupAllowTLS1.id}
      ipAddresses:
        - subnetId: ${subnet1.id}
        - subnetId: ${subnet2.id}
          ip: 10.192.21.4
    options:
      provider: ${provider}
