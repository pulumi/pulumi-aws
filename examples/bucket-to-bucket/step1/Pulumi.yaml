name: test-aws-bucket-migration
runtime: yaml
resources:
  aws:
    type: pulumi:providers:aws
    defaultProvider: true
    options:
      version: 7.0.0
  replication:
    type: aws:iam:Role
    properties:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "s3.amazonaws.com"
              },
              "Effect": "Allow",
              "Sid": ""
            }
          ]
        }
  replicationPolicy:
    type: aws:iam:Policy
    name: replication
    properties:
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:GetReplicationConfiguration",
                "s3:ListBucket"
              ],
              "Effect": "Allow",
              "Resource": [
                "${migrationBucket.arn}"
              ]
            },
            {
              "Action": [
                "s3:GetObjectVersionForReplication",
                "s3:GetObjectVersionAcl",
                 "s3:GetObjectVersionTagging"
              ],
              "Effect": "Allow",
              "Resource": [
                "${migrationBucket.arn}/*"
              ]
            },
            {
              "Action": [
                "s3:ReplicateObject",
                "s3:ReplicateDelete",
                "s3:ReplicateTags"
              ],
              "Effect": "Allow",
              "Resource": "${destinationBucket.arn}/*"
            }
          ]
        }
  replicationRolePolicyAttachment:
    type: aws:iam:RolePolicyAttachment
    name: replication
    properties:
      role: ${replication.name}
      policyArn: ${replicationPolicy.arn}
  destinationBucket:
    type: aws:s3:Bucket
    properties:
      forceDestroy: true
      versioning:
        enabled: true
  loggingBucket:
    type: aws:s3:Bucket
    properties:
      forceDestroy: true
  exampleBucketOwnershipControls:
    type: aws:s3:BucketOwnershipControls
    properties:
      bucket: ${loggingBucket.id}
      rule:
        objectOwnership: BucketOwnerPreferred
  exampleBucketAclV2:
    type: aws:s3:BucketAcl
    properties:
      bucket: ${loggingBucket.id}
      acl: log-delivery-write
    options:
      dependsOn:
        - ${exampleBucketOwnershipControls}

  migrationBucket:
    type: aws:s3:Bucket
    properties:
      forceDestroy: true
      serverSideEncryptionConfiguration:
        rule:
          applyServerSideEncryptionByDefault:
              sseAlgorithm: "AES256"
      corsRules:
        - allowedHeaders:
            - '*'
          allowedMethods:
            - PUT
            - POST
          allowedOrigins:
            - https://s3-website-test.mydomain.com
          exposeHeaders:
            - ETag
          maxAgeSeconds: 3000
      lifecycleRules:
         - id: noncurrent
           enabled: true
           expiration:
             days: 30
           noncurrentVersionExpiration:
             days: 30
         - id: log
           enabled: true
           prefix: log/
           tags:
             rule: log
             autoclean: 'true'
           transitions:
             - days: 30
               storageClass: STANDARD_IA
      logging:
        targetBucket: ${loggingBucket.bucket}
        targetPrefix: /log
      website:
        indexDocument: index.html
        errorDocument: error.html
        routingRules: |
          [{
            "Condition": {
              "KeyPrefixEquals": "docs"
            },
            "Redirect": {
              "ReplaceKeyPrefixWith": "documents/"
            }
          }]
      versioning:
        enabled: true
      replicationConfiguration:
        role: ${replication.arn}
        rules:
          - id: foobar
            status: Disabled
            filter:
              tags: {}
            # sourceSelectionCriterias:
            #   - sseKmsEncryptedObjects:
            #       - enabled: false
            destination:
              bucket: ${destinationBucket.arn}
              replicationTime:
                status: Disabled
                minutes: 15
              # not testing because we don't want to change the owner
              # accessControlTranslation:
              metrics:
                status: Disabled
                minutes: 15
