// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

import {RestApi} from "./restApi";

/**
 * Provides an HTTP Method Integration Response for an API Gateway Resource.
 * 
 * -> **Note:** Depends on having `aws_api_gateway_integration` inside your rest api. To ensure this
 * you might need to add an explicit `depends_on` for clean runs.
 */
export class IntegrationResponse extends pulumi.Resource {
    /**
     * Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
     */
    public readonly contentHandling?: pulumi.Computed<string>;
    /**
     * The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
     */
    public readonly httpMethod: pulumi.Computed<string>;
    /**
     * The API resource ID
     */
    public readonly resourceId: pulumi.Computed<string>;
    /**
     * A map of response parameters that can be read from the backend response.
     * For example: `response_parameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`,
     */
    public readonly responseParameters?: pulumi.Computed<{[key: string]: string}>;
    /**
     * **Deprecated**, use `response_parameters` instead.
     */
    public readonly responseParametersInJson?: pulumi.Computed<string>;
    /**
     * A map specifying the templates used to transform the integration response body
     */
    public readonly responseTemplates?: pulumi.Computed<{[key: string]: string}>;
    /**
     * The ID of the associated REST API
     */
    public readonly restApi: pulumi.Computed<RestApi>;
    /**
     * Specifies the regular expression pattern used to choose
     * an integration response based on the response from the backend.
     * If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched.
     * For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
     */
    public readonly selectionPattern?: pulumi.Computed<string>;
    /**
     * The HTTP status code
     */
    public readonly statusCode: pulumi.Computed<string>;

    /**
     * Create a IntegrationResponse resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this IntegrationResponse instance
     * @param args A collection of arguments for creating this IntegrationResponse intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: IntegrationResponseArgs, dependsOn?: pulumi.Resource[]) {
        if (args.httpMethod === undefined) {
            throw new Error("Missing required property 'httpMethod'");
        }
        if (args.resourceId === undefined) {
            throw new Error("Missing required property 'resourceId'");
        }
        if (args.restApi === undefined) {
            throw new Error("Missing required property 'restApi'");
        }
        if (args.statusCode === undefined) {
            throw new Error("Missing required property 'statusCode'");
        }
        super("aws:apigateway/integrationResponse:IntegrationResponse", urnName, {
            "contentHandling": args.contentHandling,
            "httpMethod": args.httpMethod,
            "resourceId": args.resourceId,
            "responseParameters": args.responseParameters,
            "responseParametersInJson": args.responseParametersInJson,
            "responseTemplates": args.responseTemplates,
            "restApi": args.restApi,
            "selectionPattern": args.selectionPattern,
            "statusCode": args.statusCode,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a IntegrationResponse resource.
 */
export interface IntegrationResponseArgs {
    /**
     * Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
     */
    readonly contentHandling?: pulumi.ComputedValue<string>;
    /**
     * The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
     */
    readonly httpMethod: pulumi.ComputedValue<string>;
    /**
     * The API resource ID
     */
    readonly resourceId: pulumi.ComputedValue<string>;
    /**
     * A map of response parameters that can be read from the backend response.
     * For example: `response_parameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`,
     */
    readonly responseParameters?: pulumi.ComputedValue<{[key: string]: pulumi.ComputedValue<string>}>;
    /**
     * **Deprecated**, use `response_parameters` instead.
     */
    readonly responseParametersInJson?: pulumi.ComputedValue<string>;
    /**
     * A map specifying the templates used to transform the integration response body
     */
    readonly responseTemplates?: pulumi.ComputedValue<{[key: string]: pulumi.ComputedValue<string>}>;
    /**
     * The ID of the associated REST API
     */
    readonly restApi: pulumi.ComputedValue<RestApi>;
    /**
     * Specifies the regular expression pattern used to choose
     * an integration response based on the response from the backend.
     * If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched.
     * For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
     */
    readonly selectionPattern?: pulumi.ComputedValue<string>;
    /**
     * The HTTP status code
     */
    readonly statusCode: pulumi.ComputedValue<string>;
}

