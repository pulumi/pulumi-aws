// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

/**
 * Provides an AWS EBS Volume Attachment as a top level resource, to attach and
 * detach volumes from AWS Instances.
 * 
 * ~> **NOTE on EBS block devices:** If you use `ebs_block_device` on an `aws_instance`, Terraform will assume management over the full set of non-root EBS block devices for the instance, and treats additional block devices as drift. For this reason, `ebs_block_device` cannot be mixed with external `aws_ebs_volume` + `aws_ebs_volume_attachment` resources for a given instance.
 */
export class VolumeAttachment extends pulumi.Resource {
    /**
     * The device name to expose to the instance (for
     * example, `/dev/sdh` or `xvdh`)
     */
    public readonly deviceName: pulumi.Computed<string>;
    /**
     * Set to `true` if you want to force the
     * volume to detach. Useful if previous attempts failed, but use this option only
     * as a last resort, as this can result in **data loss**. See
     * [Detaching an Amazon EBS Volume from an Instance][1] for more information.
     */
    public readonly forceDetach: pulumi.Computed<boolean>;
    /**
     * ID of the Instance to attach to
     */
    public readonly instanceId: pulumi.Computed<string>;
    /**
     * Set this to true if you do not wish
     * to detach the volume from the instance to which it is attached at destroy
     * time, and instead just remove the attachment from Terraform state. This is
     * useful when destroying an instance which has volumes created by some other
     * means attached.
     */
    public readonly skipDestroy: pulumi.Computed<boolean>;
    /**
     * ID of the Volume to be attached
     */
    public readonly volumeId: pulumi.Computed<string>;

    /**
     * Create a VolumeAttachment resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this VolumeAttachment instance
     * @param args A collection of arguments for creating this VolumeAttachment intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: VolumeAttachmentArgs, dependsOn?: pulumi.Resource[]) {
        if (args.deviceName === undefined) {
            throw new Error("Missing required property 'deviceName'");
        }
        if (args.instanceId === undefined) {
            throw new Error("Missing required property 'instanceId'");
        }
        if (args.volumeId === undefined) {
            throw new Error("Missing required property 'volumeId'");
        }
        super("aws:ec2/volumeAttachment:VolumeAttachment", urnName, {
            "deviceName": args.deviceName,
            "forceDetach": args.forceDetach,
            "instanceId": args.instanceId,
            "skipDestroy": args.skipDestroy,
            "volumeId": args.volumeId,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a VolumeAttachment resource.
 */
export interface VolumeAttachmentArgs {
    /**
     * The device name to expose to the instance (for
     * example, `/dev/sdh` or `xvdh`)
     */
    readonly deviceName: pulumi.ComputedValue<string>;
    /**
     * Set to `true` if you want to force the
     * volume to detach. Useful if previous attempts failed, but use this option only
     * as a last resort, as this can result in **data loss**. See
     * [Detaching an Amazon EBS Volume from an Instance][1] for more information.
     */
    readonly forceDetach?: pulumi.ComputedValue<boolean>;
    /**
     * ID of the Instance to attach to
     */
    readonly instanceId: pulumi.ComputedValue<string>;
    /**
     * Set this to true if you do not wish
     * to detach the volume from the instance to which it is attached at destroy
     * time, and instead just remove the attachment from Terraform state. This is
     * useful when destroying an instance which has volumes created by some other
     * means attached.
     */
    readonly skipDestroy?: pulumi.ComputedValue<boolean>;
    /**
     * ID of the Volume to be attached
     */
    readonly volumeId: pulumi.ComputedValue<string>;
}

