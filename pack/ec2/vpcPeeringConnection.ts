// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

/**
 * Provides a resource to manage a VPC Peering Connection resource.
 * 
 * -> **Note:** For cross-account (requester's AWS account differs from the accepter's AWS account) VPC Peering Connections
 * use the `aws_vpc_peering_connection` resource to manage the requester's side of the connection and
 * use the `aws_vpc_peering_connection_accepter` resource to manage the accepter's side of the connection.
 */
export class VpcPeeringConnection extends pulumi.Resource {
    /**
     * The status of the VPC Peering Connection request.
     */
    public /*out*/ readonly acceptStatus: pulumi.Computed<string>;
    /**
     * An optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     */
    public readonly accepter: pulumi.Computed<{ allowClassicLinkToRemoteVpc?: boolean, allowRemoteVpcDnsResolution?: boolean, allowVpcToRemoteClassicLink?: boolean }[]>;
    /**
     * Accept the peering (both VPCs need to be in the same AWS account).
     */
    public readonly autoAccept?: pulumi.Computed<boolean>;
    /**
     * The AWS account ID of the owner of the peer VPC.
     * Defaults to the account ID the [AWS provider][1] is currently connected to.
     */
    public readonly peerOwnerId: pulumi.Computed<string>;
    /**
     * The ID of the VPC with which you are creating the VPC Peering Connection.
     */
    public readonly peerVpcId: pulumi.Computed<string>;
    /**
     * A optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     */
    public readonly requester: pulumi.Computed<{ allowClassicLinkToRemoteVpc?: boolean, allowRemoteVpcDnsResolution?: boolean, allowVpcToRemoteClassicLink?: boolean }[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags?: pulumi.Computed<{[key: string]: any}>;
    /**
     * The ID of the requester VPC.
     */
    public readonly vpcId: pulumi.Computed<string>;

    /**
     * Create a VpcPeeringConnection resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this VpcPeeringConnection instance
     * @param args A collection of arguments for creating this VpcPeeringConnection intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: VpcPeeringConnectionArgs, dependsOn?: pulumi.Resource[]) {
        if (args.peerVpcId === undefined) {
            throw new Error("Missing required property 'peerVpcId'");
        }
        if (args.vpcId === undefined) {
            throw new Error("Missing required property 'vpcId'");
        }
        super("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", urnName, {
            "accepter": args.accepter,
            "autoAccept": args.autoAccept,
            "peerOwnerId": args.peerOwnerId,
            "peerVpcId": args.peerVpcId,
            "requester": args.requester,
            "tags": args.tags,
            "vpcId": args.vpcId,
            "acceptStatus": undefined,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a VpcPeeringConnection resource.
 */
export interface VpcPeeringConnectionArgs {
    /**
     * An optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     */
    readonly accepter?: pulumi.ComputedValue<{ allowClassicLinkToRemoteVpc?: pulumi.ComputedValue<boolean>, allowRemoteVpcDnsResolution?: pulumi.ComputedValue<boolean>, allowVpcToRemoteClassicLink?: pulumi.ComputedValue<boolean> }>[];
    /**
     * Accept the peering (both VPCs need to be in the same AWS account).
     */
    readonly autoAccept?: pulumi.ComputedValue<boolean>;
    /**
     * The AWS account ID of the owner of the peer VPC.
     * Defaults to the account ID the [AWS provider][1] is currently connected to.
     */
    readonly peerOwnerId?: pulumi.ComputedValue<string>;
    /**
     * The ID of the VPC with which you are creating the VPC Peering Connection.
     */
    readonly peerVpcId: pulumi.ComputedValue<string>;
    /**
     * A optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     */
    readonly requester?: pulumi.ComputedValue<{ allowClassicLinkToRemoteVpc?: pulumi.ComputedValue<boolean>, allowRemoteVpcDnsResolution?: pulumi.ComputedValue<boolean>, allowVpcToRemoteClassicLink?: pulumi.ComputedValue<boolean> }>[];
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: pulumi.ComputedValue<{[key: string]: any}>;
    /**
     * The ID of the requester VPC.
     */
    readonly vpcId: pulumi.ComputedValue<string>;
}

