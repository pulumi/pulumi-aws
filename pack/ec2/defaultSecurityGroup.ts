// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

/**
 * Provides a resource to manage the default AWS Security Group.
 * 
 * For EC2 Classic accounts, each region comes with a Default Security Group.
 * Additionally, each VPC created in AWS comes with a Default Security Group that can be managed, but not
 * destroyed. **This is an advanced resource**, and has special caveats to be aware
 * of when using it. Please read this document in its entirety before using this
 * resource.
 * 
 * The `aws_default_security_group` behaves differently from normal resources, in that
 * Terraform does not _create_ this resource, but instead "adopts" it
 * into management. We can do this because these default security groups cannot be
 * destroyed, and are created with a known set of default ingress/egress rules.
 * 
 * When Terraform first adopts the Default Security Group, it **immediately removes all
 * ingress and egress rules in the Security Group**. It then proceeds to create any rules specified in the
 * configuration. This step is required so that only the rules specified in the
 * configuration are created.
 * 
 * This resource treats it's inline rules as absolute; only the rules defined
 * inline are created, and any additions/removals external to this resource will
 * result in diff shown. For these reasons, this resource is incompatible with the
 * `aws_security_group_rule` resource.
 * 
 * For more information about Default Security Groups, see the AWS Documentation on
 * [Default Security Groups][aws-default-security-groups].
 */
export class DefaultSecurityGroup extends pulumi.Resource {
    /**
     * Can be specified multiple times for each
     * egress rule. Each egress block supports fields documented below.
     */
    public readonly egress?: pulumi.Computed<{ cidrBlocks?: string[], fromPort: number, ipv6CidrBlocks?: string[], prefixListIds?: string[], protocol: string, securityGroups?: string[], self?: boolean, toPort: number }[]>;
    /**
     * Can be specified multiple times for each
     * ingress rule. Each ingress block supports fields documented below.
     */
    public readonly ingress?: pulumi.Computed<{ cidrBlocks?: string[], fromPort: number, ipv6CidrBlocks?: string[], protocol: string, securityGroups?: string[], self?: boolean, toPort: number }[]>;
    /**
     * The name of the security group
     */
    public /*out*/ readonly name: pulumi.Computed<string>;
    /**
     * The owner ID.
     */
    public /*out*/ readonly ownerId: pulumi.Computed<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags?: pulumi.Computed<{[key: string]: any}>;
    /**
     * The VPC ID. **Note that changing
     * the `vpc_id` will _not_ restore any default security group rules that were
     * modified, added, or removed.** It will be left in it's current state
     */
    public readonly vpcId: pulumi.Computed<string>;

    /**
     * Create a DefaultSecurityGroup resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this DefaultSecurityGroup instance
     * @param args A collection of arguments for creating this DefaultSecurityGroup intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args?: DefaultSecurityGroupArgs, dependsOn?: pulumi.Resource[]) {
        super("aws:ec2/defaultSecurityGroup:DefaultSecurityGroup", urnName, {
            "egress": args.egress,
            "ingress": args.ingress,
            "tags": args.tags,
            "vpcId": args.vpcId,
            "name": undefined,
            "ownerId": undefined,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a DefaultSecurityGroup resource.
 */
export interface DefaultSecurityGroupArgs {
    /**
     * Can be specified multiple times for each
     * egress rule. Each egress block supports fields documented below.
     */
    readonly egress?: pulumi.ComputedValue<{ cidrBlocks?: pulumi.ComputedValue<pulumi.ComputedValue<string>>[], fromPort: pulumi.ComputedValue<number>, ipv6CidrBlocks?: pulumi.ComputedValue<pulumi.ComputedValue<string>>[], prefixListIds?: pulumi.ComputedValue<pulumi.ComputedValue<string>>[], protocol: pulumi.ComputedValue<string>, securityGroups?: pulumi.ComputedValue<pulumi.ComputedValue<string>>[], self?: pulumi.ComputedValue<boolean>, toPort: pulumi.ComputedValue<number> }>[];
    /**
     * Can be specified multiple times for each
     * ingress rule. Each ingress block supports fields documented below.
     */
    readonly ingress?: pulumi.ComputedValue<{ cidrBlocks?: pulumi.ComputedValue<pulumi.ComputedValue<string>>[], fromPort: pulumi.ComputedValue<number>, ipv6CidrBlocks?: pulumi.ComputedValue<pulumi.ComputedValue<string>>[], protocol: pulumi.ComputedValue<string>, securityGroups?: pulumi.ComputedValue<pulumi.ComputedValue<string>>[], self?: pulumi.ComputedValue<boolean>, toPort: pulumi.ComputedValue<number> }>[];
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: pulumi.ComputedValue<{[key: string]: any}>;
    /**
     * The VPC ID. **Note that changing
     * the `vpc_id` will _not_ restore any default security group rules that were
     * modified, added, or removed.** It will be left in it's current state
     */
    readonly vpcId?: pulumi.ComputedValue<string>;
}

