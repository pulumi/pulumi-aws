// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class DefaultNetworkAcl extends lumi.NamedResource implements DefaultNetworkAclArgs {
    public readonly defaultNetworkAclId: string;
    public readonly egress?: { action: string, cidrBlock?: string, fromPort: number, icmpCode?: number, icmpType?: number, ipv6CidrBlock?: string, protocol: string, ruleNo: number, toPort: number }[];
    public readonly ingress?: { action: string, cidrBlock?: string, fromPort: number, icmpCode?: number, icmpType?: number, ipv6CidrBlock?: string, protocol: string, ruleNo: number, toPort: number }[];
    public readonly subnetIds?: string[];
    public readonly tags?: {[key: string]: any};
    public /*out*/ readonly vpcId: string;

    public static get(id: lumi.ID): DefaultNetworkAcl {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): DefaultNetworkAcl[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: DefaultNetworkAclArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.defaultNetworkAclId, "") === undefined) {
            throw new Error("Property argument 'defaultNetworkAclId' is required, but was missing");
        }
        this.defaultNetworkAclId = args.defaultNetworkAclId;
        this.egress = args.egress;
        this.ingress = args.ingress;
        this.subnetIds = args.subnetIds;
        this.tags = args.tags;
    }
}

export interface DefaultNetworkAclArgs {
    readonly defaultNetworkAclId: string;
    readonly egress?: { action: string, cidrBlock?: string, fromPort: number, icmpCode?: number, icmpType?: number, ipv6CidrBlock?: string, protocol: string, ruleNo: number, toPort: number }[];
    readonly ingress?: { action: string, cidrBlock?: string, fromPort: number, icmpCode?: number, icmpType?: number, ipv6CidrBlock?: string, protocol: string, ruleNo: number, toPort: number }[];
    readonly subnetIds?: string[];
    readonly tags?: {[key: string]: any};
}

