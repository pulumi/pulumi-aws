// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class FirehoseDeliveryStream extends fabric.Resource {
    public readonly arn: fabric.Computed<string>;
    public readonly destination: fabric.Computed<string>;
    public readonly destinationId: fabric.Computed<string>;
    public readonly elasticsearchConfiguration?: fabric.Computed<{ bufferingInterval?: number, bufferingSize?: number, cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }[], domainArn: string, indexName: string, indexRotationPeriod?: string, retryDuration?: number, roleArn: string, s3BackupMode?: string, typeName?: string }[]>;
    public readonly name: fabric.Computed<string>;
    public readonly redshiftConfiguration?: fabric.Computed<{ cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }[], clusterJdbcurl: string, copyOptions?: string, dataTableColumns?: string, dataTableName: string, password: string, retryDuration?: number, roleArn: string, username: string }[]>;
    public readonly s3Configuration: fabric.Computed<{ bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }[], compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string }[]>;
    public readonly versionId: fabric.Computed<string>;

    constructor(urnName: string, args: FirehoseDeliveryStreamArgs, dependsOn?: fabric.Resource[]) {
        if (args.destination === undefined) {
            throw new Error("Missing required property 'destination'");
        }
        if (args.s3Configuration === undefined) {
            throw new Error("Missing required property 's3Configuration'");
        }
        super("aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream", urnName, {
            "arn": args.arn,
            "destination": args.destination,
            "destinationId": args.destinationId,
            "elasticsearchConfiguration": args.elasticsearchConfiguration,
            "name": args.name,
            "redshiftConfiguration": args.redshiftConfiguration,
            "s3Configuration": args.s3Configuration,
            "versionId": args.versionId,
        }, dependsOn);
    }
}

export interface FirehoseDeliveryStreamArgs {
    readonly arn?: fabric.ComputedValue<string>;
    readonly destination: fabric.ComputedValue<string>;
    readonly destinationId?: fabric.ComputedValue<string>;
    readonly elasticsearchConfiguration?: fabric.ComputedValue<{ bufferingInterval?: fabric.ComputedValue<number>, bufferingSize?: fabric.ComputedValue<number>, cloudwatchLoggingOptions?: fabric.ComputedValue<{ enabled?: fabric.ComputedValue<boolean>, logGroupName?: fabric.ComputedValue<string>, logStreamName?: fabric.ComputedValue<string> }>[], domainArn: fabric.ComputedValue<string>, indexName: fabric.ComputedValue<string>, indexRotationPeriod?: fabric.ComputedValue<string>, retryDuration?: fabric.ComputedValue<number>, roleArn: fabric.ComputedValue<string>, s3BackupMode?: fabric.ComputedValue<string>, typeName?: fabric.ComputedValue<string> }>[];
    readonly name?: fabric.ComputedValue<string>;
    readonly redshiftConfiguration?: fabric.ComputedValue<{ cloudwatchLoggingOptions?: fabric.ComputedValue<{ enabled?: fabric.ComputedValue<boolean>, logGroupName?: fabric.ComputedValue<string>, logStreamName?: fabric.ComputedValue<string> }>[], clusterJdbcurl: fabric.ComputedValue<string>, copyOptions?: fabric.ComputedValue<string>, dataTableColumns?: fabric.ComputedValue<string>, dataTableName: fabric.ComputedValue<string>, password: fabric.ComputedValue<string>, retryDuration?: fabric.ComputedValue<number>, roleArn: fabric.ComputedValue<string>, username: fabric.ComputedValue<string> }>[];
    readonly s3Configuration: fabric.ComputedValue<{ bucketArn: fabric.ComputedValue<string>, bufferInterval?: fabric.ComputedValue<number>, bufferSize?: fabric.ComputedValue<number>, cloudwatchLoggingOptions?: fabric.ComputedValue<{ enabled?: fabric.ComputedValue<boolean>, logGroupName?: fabric.ComputedValue<string>, logStreamName?: fabric.ComputedValue<string> }>[], compressionFormat?: fabric.ComputedValue<string>, kmsKeyArn?: fabric.ComputedValue<string>, prefix?: fabric.ComputedValue<string>, roleArn: fabric.ComputedValue<string> }>[];
    readonly versionId?: fabric.ComputedValue<string>;
}

