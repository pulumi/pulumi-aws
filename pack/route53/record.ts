// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class Record extends fabric.Resource {
    public readonly alias?: fabric.Computed<{ evaluateTargetHealth: boolean, name: string, zoneId: string }[]>;
    public readonly failoverRoutingPolicy?: fabric.Computed<{ type: string }[]>;
    public /*out*/ readonly fqdn: fabric.Computed<string>;
    public readonly geolocationRoutingPolicy?: fabric.Computed<{ continent?: string, country?: string, subdivision?: string }[]>;
    public readonly healthCheckId?: fabric.Computed<string>;
    public readonly latencyRoutingPolicy?: fabric.Computed<{ region: string }[]>;
    public readonly name: fabric.Computed<string>;
    public readonly records?: fabric.Computed<string[]>;
    public readonly setIdentifier?: fabric.Computed<string>;
    public readonly ttl?: fabric.Computed<number>;
    public readonly type: fabric.Computed<string>;
    public readonly weightedRoutingPolicy?: fabric.Computed<{ weight: number }[]>;
    public readonly zoneId: fabric.Computed<string>;

    constructor(urnName: string, args: RecordArgs, dependsOn?: fabric.Resource[]) {
        if (args.type === undefined) {
            throw new Error("Missing required property 'type'");
        }
        if (args.zoneId === undefined) {
            throw new Error("Missing required property 'zoneId'");
        }
        super("aws:route53/record:Record", urnName, {
            "alias": args.alias,
            "failoverRoutingPolicy": args.failoverRoutingPolicy,
            "geolocationRoutingPolicy": args.geolocationRoutingPolicy,
            "healthCheckId": args.healthCheckId,
            "latencyRoutingPolicy": args.latencyRoutingPolicy,
            "name": args.name,
            "records": args.records,
            "setIdentifier": args.setIdentifier,
            "ttl": args.ttl,
            "type": args.type,
            "weightedRoutingPolicy": args.weightedRoutingPolicy,
            "zoneId": args.zoneId,
            "fqdn": undefined,
        }, dependsOn);
    }
}

export interface RecordArgs {
    readonly alias?: fabric.ComputedValue<{ evaluateTargetHealth: fabric.ComputedValue<boolean>, name: fabric.ComputedValue<string>, zoneId: fabric.ComputedValue<string> }>[];
    readonly failoverRoutingPolicy?: fabric.ComputedValue<{ type: fabric.ComputedValue<string> }>[];
    readonly geolocationRoutingPolicy?: fabric.ComputedValue<{ continent?: fabric.ComputedValue<string>, country?: fabric.ComputedValue<string>, subdivision?: fabric.ComputedValue<string> }>[];
    readonly healthCheckId?: fabric.ComputedValue<string>;
    readonly latencyRoutingPolicy?: fabric.ComputedValue<{ region: fabric.ComputedValue<string> }>[];
    readonly name?: fabric.ComputedValue<string>;
    readonly records?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly setIdentifier?: fabric.ComputedValue<string>;
    readonly ttl?: fabric.ComputedValue<number>;
    readonly type: fabric.ComputedValue<string>;
    readonly weightedRoutingPolicy?: fabric.ComputedValue<{ weight: fabric.ComputedValue<number> }>[];
    readonly zoneId: fabric.ComputedValue<string>;
}

