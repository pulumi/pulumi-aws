// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class HealthCheck extends fabric.Resource {
    public readonly childHealthThreshold?: fabric.Computed<number>;
    public readonly childHealthchecks?: fabric.Computed<string[]>;
    public readonly cloudwatchAlarmName?: fabric.Computed<string>;
    public readonly cloudwatchAlarmRegion?: fabric.Computed<string>;
    public readonly enableSni: fabric.Computed<boolean>;
    public readonly failureThreshold?: fabric.Computed<number>;
    public readonly fqdn?: fabric.Computed<string>;
    public readonly insufficientDataHealthStatus?: fabric.Computed<string>;
    public readonly invertHealthcheck?: fabric.Computed<boolean>;
    public readonly ipAddress?: fabric.Computed<string>;
    public readonly measureLatency?: fabric.Computed<boolean>;
    public readonly port?: fabric.Computed<number>;
    public readonly referenceName?: fabric.Computed<string>;
    public readonly regions?: fabric.Computed<string[]>;
    public readonly requestInterval?: fabric.Computed<number>;
    public readonly resourcePath?: fabric.Computed<string>;
    public readonly searchString?: fabric.Computed<string>;
    public readonly tags?: fabric.Computed<{[key: string]: any}>;
    public readonly type: fabric.Computed<string>;

    constructor(urnName: string, args: HealthCheckArgs, dependsOn?: fabric.Resource[]) {
        if (args.type === undefined) {
            throw new Error("Missing required property 'type'");
        }
        super("aws:route53/healthCheck:HealthCheck", urnName, {
            "childHealthThreshold": args.childHealthThreshold,
            "childHealthchecks": args.childHealthchecks,
            "cloudwatchAlarmName": args.cloudwatchAlarmName,
            "cloudwatchAlarmRegion": args.cloudwatchAlarmRegion,
            "enableSni": args.enableSni,
            "failureThreshold": args.failureThreshold,
            "fqdn": args.fqdn,
            "insufficientDataHealthStatus": args.insufficientDataHealthStatus,
            "invertHealthcheck": args.invertHealthcheck,
            "ipAddress": args.ipAddress,
            "measureLatency": args.measureLatency,
            "port": args.port,
            "referenceName": args.referenceName,
            "regions": args.regions,
            "requestInterval": args.requestInterval,
            "resourcePath": args.resourcePath,
            "searchString": args.searchString,
            "tags": args.tags,
            "type": args.type,
        }, dependsOn);
    }
}

export interface HealthCheckArgs {
    readonly childHealthThreshold?: fabric.ComputedValue<number>;
    readonly childHealthchecks?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly cloudwatchAlarmName?: fabric.ComputedValue<string>;
    readonly cloudwatchAlarmRegion?: fabric.ComputedValue<string>;
    readonly enableSni?: fabric.ComputedValue<boolean>;
    readonly failureThreshold?: fabric.ComputedValue<number>;
    readonly fqdn?: fabric.ComputedValue<string>;
    readonly insufficientDataHealthStatus?: fabric.ComputedValue<string>;
    readonly invertHealthcheck?: fabric.ComputedValue<boolean>;
    readonly ipAddress?: fabric.ComputedValue<string>;
    readonly measureLatency?: fabric.ComputedValue<boolean>;
    readonly port?: fabric.ComputedValue<number>;
    readonly referenceName?: fabric.ComputedValue<string>;
    readonly regions?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly requestInterval?: fabric.ComputedValue<number>;
    readonly resourcePath?: fabric.ComputedValue<string>;
    readonly searchString?: fabric.ComputedValue<string>;
    readonly tags?: fabric.ComputedValue<{[key: string]: any}>;
    readonly type: fabric.ComputedValue<string>;
}

