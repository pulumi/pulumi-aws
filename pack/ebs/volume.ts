// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

/**
 * Manages a single EBS volume.
 */
export class Volume extends pulumi.Resource {
    /**
     * The AZ where the EBS volume will exist.
     */
    public readonly availabilityZone: pulumi.Computed<string>;
    /**
     * If true, the disk will be encrypted.
     */
    public readonly encrypted: pulumi.Computed<boolean>;
    /**
     * The amount of IOPS to provision for the disk.
     */
    public readonly iops: pulumi.Computed<number>;
    /**
     * The ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true.
     */
    public readonly kmsKeyId: pulumi.Computed<string>;
    /**
     * The size of the drive in GiBs.
     */
    public readonly size: pulumi.Computed<number>;
    /**
     * A snapshot to base the EBS volume off of.
     */
    public readonly snapshotId: pulumi.Computed<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags?: pulumi.Computed<{[key: string]: any}>;
    /**
     * The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard").
     */
    public readonly type: pulumi.Computed<string>;

    /**
     * Create a Volume resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this Volume instance
     * @param args A collection of arguments for creating this Volume intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: VolumeArgs, dependsOn?: pulumi.Resource[]) {
        if (args.availabilityZone === undefined) {
            throw new Error("Missing required property 'availabilityZone'");
        }
        super("aws:ebs/volume:Volume", urnName, {
            "availabilityZone": args.availabilityZone,
            "encrypted": args.encrypted,
            "iops": args.iops,
            "kmsKeyId": args.kmsKeyId,
            "size": args.size,
            "snapshotId": args.snapshotId,
            "tags": args.tags,
            "type": args.type,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The AZ where the EBS volume will exist.
     */
    readonly availabilityZone: pulumi.ComputedValue<string>;
    /**
     * If true, the disk will be encrypted.
     */
    readonly encrypted?: pulumi.ComputedValue<boolean>;
    /**
     * The amount of IOPS to provision for the disk.
     */
    readonly iops?: pulumi.ComputedValue<number>;
    /**
     * The ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true.
     */
    readonly kmsKeyId?: pulumi.ComputedValue<string>;
    /**
     * The size of the drive in GiBs.
     */
    readonly size?: pulumi.ComputedValue<number>;
    /**
     * A snapshot to base the EBS volume off of.
     */
    readonly snapshotId?: pulumi.ComputedValue<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: pulumi.ComputedValue<{[key: string]: any}>;
    /**
     * The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard").
     */
    readonly type?: pulumi.ComputedValue<string>;
}

