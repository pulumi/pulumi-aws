// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class Cluster extends fabric.Resource {
    public readonly applications?: fabric.Computed<string[]>;
    public readonly autoscalingRole?: fabric.Computed<string>;
    public readonly bootstrapAction?: fabric.Computed<{ args?: string[], name: string, path: string }[]>;
    public /*out*/ readonly clusterState: fabric.Computed<string>;
    public readonly configurations?: fabric.Computed<string>;
    public readonly coreInstanceCount?: fabric.Computed<number>;
    public readonly coreInstanceType: fabric.Computed<string>;
    public readonly ec2Attributes?: fabric.Computed<{ additionalMasterSecurityGroups?: string, additionalSlaveSecurityGroups?: string, emrManagedMasterSecurityGroup?: string, emrManagedSlaveSecurityGroup?: string, instanceProfile: string, keyName?: string, serviceAccessSecurityGroup?: string, subnetId?: string }[]>;
    public readonly keepJobFlowAliveWhenNoSteps: fabric.Computed<boolean>;
    public readonly logUri?: fabric.Computed<string>;
    public readonly masterInstanceType: fabric.Computed<string>;
    public /*out*/ readonly masterPublicDns: fabric.Computed<string>;
    public readonly name: fabric.Computed<string>;
    public readonly releaseLabel: fabric.Computed<string>;
    public readonly securityConfiguration?: fabric.Computed<string>;
    public readonly serviceRole: fabric.Computed<string>;
    public readonly tags?: fabric.Computed<{[key: string]: any}>;
    public readonly terminationProtection: fabric.Computed<boolean>;
    public readonly visibleToAllUsers?: fabric.Computed<boolean>;

    constructor(urnName: string, args: ClusterArgs, dependsOn?: fabric.Resource[]) {
        if (args.masterInstanceType === undefined) {
            throw new Error("Missing required property 'masterInstanceType'");
        }
        if (args.releaseLabel === undefined) {
            throw new Error("Missing required property 'releaseLabel'");
        }
        if (args.serviceRole === undefined) {
            throw new Error("Missing required property 'serviceRole'");
        }
        super("aws:emr/cluster:Cluster", urnName, {
            "applications": args.applications,
            "autoscalingRole": args.autoscalingRole,
            "bootstrapAction": args.bootstrapAction,
            "configurations": args.configurations,
            "coreInstanceCount": args.coreInstanceCount,
            "coreInstanceType": args.coreInstanceType,
            "ec2Attributes": args.ec2Attributes,
            "keepJobFlowAliveWhenNoSteps": args.keepJobFlowAliveWhenNoSteps,
            "logUri": args.logUri,
            "masterInstanceType": args.masterInstanceType,
            "name": args.name,
            "releaseLabel": args.releaseLabel,
            "securityConfiguration": args.securityConfiguration,
            "serviceRole": args.serviceRole,
            "tags": args.tags,
            "terminationProtection": args.terminationProtection,
            "visibleToAllUsers": args.visibleToAllUsers,
            "clusterState": undefined,
            "masterPublicDns": undefined,
        }, dependsOn);
    }
}

export interface ClusterArgs {
    readonly applications?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly autoscalingRole?: fabric.ComputedValue<string>;
    readonly bootstrapAction?: fabric.ComputedValue<{ args?: fabric.ComputedValue<fabric.ComputedValue<string>>[], name: fabric.ComputedValue<string>, path: fabric.ComputedValue<string> }>[];
    readonly configurations?: fabric.ComputedValue<string>;
    readonly coreInstanceCount?: fabric.ComputedValue<number>;
    readonly coreInstanceType?: fabric.ComputedValue<string>;
    readonly ec2Attributes?: fabric.ComputedValue<{ additionalMasterSecurityGroups?: fabric.ComputedValue<string>, additionalSlaveSecurityGroups?: fabric.ComputedValue<string>, emrManagedMasterSecurityGroup?: fabric.ComputedValue<string>, emrManagedSlaveSecurityGroup?: fabric.ComputedValue<string>, instanceProfile: fabric.ComputedValue<string>, keyName?: fabric.ComputedValue<string>, serviceAccessSecurityGroup?: fabric.ComputedValue<string>, subnetId?: fabric.ComputedValue<string> }>[];
    readonly keepJobFlowAliveWhenNoSteps?: fabric.ComputedValue<boolean>;
    readonly logUri?: fabric.ComputedValue<string>;
    readonly masterInstanceType: fabric.ComputedValue<string>;
    readonly name?: fabric.ComputedValue<string>;
    readonly releaseLabel: fabric.ComputedValue<string>;
    readonly securityConfiguration?: fabric.ComputedValue<string>;
    readonly serviceRole: fabric.ComputedValue<string>;
    readonly tags?: fabric.ComputedValue<{[key: string]: any}>;
    readonly terminationProtection?: fabric.ComputedValue<boolean>;
    readonly visibleToAllUsers?: fabric.ComputedValue<boolean>;
}

