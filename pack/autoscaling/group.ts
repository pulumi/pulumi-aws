// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

/**
 * Provides an AutoScaling Group resource.
 */
export class Group extends fabric.Resource {
    /**
     * The ARN for this AutoScaling Group
     */
    public /*out*/ readonly arn: fabric.Computed<string>;
    /**
     * A list of AZs to launch resources in.
     * Required only if you do not specify any `vpc_zone_identifier`
     */
    public readonly availabilityZones: fabric.Computed<string[]>;
    /**
     * The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     */
    public readonly defaultCooldown: fabric.Computed<number>;
    /**
     * The number of Amazon EC2 instances that
     * should be running in the group. (See also [Waiting for
     * Capacity](#waiting-for-capacity) below.)
     */
    public readonly desiredCapacity: fabric.Computed<number>;
    /**
     * A list of metrics to collect. The allowed values are `GroupMinSize`, `GroupMaxSize`, `GroupDesiredCapacity`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupTerminatingInstances`, `GroupTotalInstances`.
     * * `wait_for_capacity_timeout` (Default: "10m") A maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that Terraform should
     * wait for ASG instances to be healthy before timing out.  (See also [Waiting
     * for Capacity](#waiting-for-capacity) below.) Setting this to "0" causes
     * Terraform to skip all Capacity Waiting behavior.
     */
    public readonly enabledMetrics?: fabric.Computed<string[]>;
    /**
     * Allows deleting the autoscaling group without waiting
     * for all instances in the pool to terminate.  You can force an autoscaling group to delete
     * even if it's in the process of scaling a resource. Normally, Terraform
     * drains all the instances before deleting the group.  This bypasses that
     * behavior and potentially leaves resources dangling.
     */
    public readonly forceDelete?: fabric.Computed<boolean>;
    /**
     * Time (in seconds) after instance comes into service before checking health.
     */
    public readonly healthCheckGracePeriod?: fabric.Computed<number>;
    /**
     * "EC2" or "ELB". Controls how health checking is done.
     */
    public readonly healthCheckType: fabric.Computed<string>;
    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the autoscaling group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * [`aws_autoscaling_lifecycle_hook`](/docs/providers/aws/r/autoscaling_lifecycle_hooks.html)
     * resource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating
     * a new autoscaling group. For all other use-cases, please use `aws_autoscaling_lifecycle_hook` resource.
     */
    public readonly initialLifecycleHook?: fabric.Computed<{ defaultResult: string, heartbeatTimeout?: number, lifecycleTransition: string, name: string, notificationMetadata?: string, notificationTargetArn?: string, roleArn?: string }[]>;
    /**
     * The name of the launch configuration to use.
     */
    public readonly launchConfiguration: fabric.Computed<string>;
    /**
     * A list of elastic load balancer names to add to the autoscaling
     * group names.
     */
    public readonly loadBalancers: fabric.Computed<string[]>;
    /**
     * The maximum size of the auto scale group.
     */
    public readonly maxSize: fabric.Computed<number>;
    /**
     * The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     */
    public readonly metricsGranularity?: fabric.Computed<string>;
    /**
     * Setting this causes Terraform to wait for
     * this number of instances to show up healthy in the ELB only on creation.
     * Updates will not wait on ELB instance number changes.
     * (See also [Waiting for Capacity](#waiting-for-capacity) below.)
     */
    public readonly minElbCapacity?: fabric.Computed<number>;
    /**
     * The minimum size of the auto scale group.
     * (See also [Waiting for Capacity](#waiting-for-capacity) below.)
     */
    public readonly minSize: fabric.Computed<number>;
    /**
     * The name of the auto scaling group. By default generated by Terraform.
     */
    public readonly name: fabric.Computed<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    public readonly namePrefix?: fabric.Computed<string>;
    /**
     * The name of the placement group into which you'll launch your instances, if any.
     */
    public readonly placementGroup?: fabric.Computed<string>;
    /**
     * Allows setting instance protection. The
     * autoscaling group will not select instances with this setting for terminination
     * during scale in events.
     */
    public readonly protectFromScaleIn?: fabric.Computed<boolean>;
    /**
     * A list of processes to suspend for the AutoScaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your autoscaling group from functioning properly.
     */
    public readonly suspendedProcesses?: fabric.Computed<string[]>;
    /**
     * A list of tag blocks. Tags documented below.
     */
    public readonly tag?: fabric.Computed<{ key: string, propagateAtLaunch: boolean, value: string }[]>;
    /**
     * A list of tag blocks (maps). Tags documented below.
     */
    public readonly tags?: fabric.Computed<{[key: string]: any}[]>;
    /**
     * A list of `aws_alb_target_group` ARNs, for use with
     * Application Load Balancing
     */
    public readonly targetGroupArns: fabric.Computed<string[]>;
    /**
     * A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `Default`.
     */
    public readonly terminationPolicies?: fabric.Computed<string[]>;
    /**
     * A list of subnet IDs to launch resources in.
     */
    public readonly vpcZoneIdentifier: fabric.Computed<string[]>;
    public readonly waitForCapacityTimeout?: fabric.Computed<string>;
    /**
     * Setting this will cause Terraform to wait
     * for exactly this number of healthy instances in all attached load balancers
     * on both create and update operations. (Takes precedence over
     * `min_elb_capacity` behavior.)
     * (See also [Waiting for Capacity](#waiting-for-capacity) below.)
     */
    public readonly waitForElbCapacity?: fabric.Computed<number>;

    /**
     * Create a Group resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this Group instance
     * @param args A collection of arguments for creating this Group intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: GroupArgs, dependsOn?: fabric.Resource[]) {
        if (args.launchConfiguration === undefined) {
            throw new Error("Missing required property 'launchConfiguration'");
        }
        if (args.maxSize === undefined) {
            throw new Error("Missing required property 'maxSize'");
        }
        if (args.minSize === undefined) {
            throw new Error("Missing required property 'minSize'");
        }
        super("aws:autoscaling/group:Group", urnName, {
            "availabilityZones": args.availabilityZones,
            "defaultCooldown": args.defaultCooldown,
            "desiredCapacity": args.desiredCapacity,
            "enabledMetrics": args.enabledMetrics,
            "forceDelete": args.forceDelete,
            "healthCheckGracePeriod": args.healthCheckGracePeriod,
            "healthCheckType": args.healthCheckType,
            "initialLifecycleHook": args.initialLifecycleHook,
            "launchConfiguration": args.launchConfiguration,
            "loadBalancers": args.loadBalancers,
            "maxSize": args.maxSize,
            "metricsGranularity": args.metricsGranularity,
            "minElbCapacity": args.minElbCapacity,
            "minSize": args.minSize,
            "name": args.name,
            "namePrefix": args.namePrefix,
            "placementGroup": args.placementGroup,
            "protectFromScaleIn": args.protectFromScaleIn,
            "suspendedProcesses": args.suspendedProcesses,
            "tag": args.tag,
            "tags": args.tags,
            "targetGroupArns": args.targetGroupArns,
            "terminationPolicies": args.terminationPolicies,
            "vpcZoneIdentifier": args.vpcZoneIdentifier,
            "waitForCapacityTimeout": args.waitForCapacityTimeout,
            "waitForElbCapacity": args.waitForElbCapacity,
            "arn": undefined,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * A list of AZs to launch resources in.
     * Required only if you do not specify any `vpc_zone_identifier`
     */
    readonly availabilityZones?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     */
    readonly defaultCooldown?: fabric.ComputedValue<number>;
    /**
     * The number of Amazon EC2 instances that
     * should be running in the group. (See also [Waiting for
     * Capacity](#waiting-for-capacity) below.)
     */
    readonly desiredCapacity?: fabric.ComputedValue<number>;
    /**
     * A list of metrics to collect. The allowed values are `GroupMinSize`, `GroupMaxSize`, `GroupDesiredCapacity`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupTerminatingInstances`, `GroupTotalInstances`.
     * * `wait_for_capacity_timeout` (Default: "10m") A maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that Terraform should
     * wait for ASG instances to be healthy before timing out.  (See also [Waiting
     * for Capacity](#waiting-for-capacity) below.) Setting this to "0" causes
     * Terraform to skip all Capacity Waiting behavior.
     */
    readonly enabledMetrics?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * Allows deleting the autoscaling group without waiting
     * for all instances in the pool to terminate.  You can force an autoscaling group to delete
     * even if it's in the process of scaling a resource. Normally, Terraform
     * drains all the instances before deleting the group.  This bypasses that
     * behavior and potentially leaves resources dangling.
     */
    readonly forceDelete?: fabric.ComputedValue<boolean>;
    /**
     * Time (in seconds) after instance comes into service before checking health.
     */
    readonly healthCheckGracePeriod?: fabric.ComputedValue<number>;
    /**
     * "EC2" or "ELB". Controls how health checking is done.
     */
    readonly healthCheckType?: fabric.ComputedValue<string>;
    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the autoscaling group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * [`aws_autoscaling_lifecycle_hook`](/docs/providers/aws/r/autoscaling_lifecycle_hooks.html)
     * resource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating
     * a new autoscaling group. For all other use-cases, please use `aws_autoscaling_lifecycle_hook` resource.
     */
    readonly initialLifecycleHook?: fabric.ComputedValue<{ defaultResult?: fabric.ComputedValue<string>, heartbeatTimeout?: fabric.ComputedValue<number>, lifecycleTransition: fabric.ComputedValue<string>, name: fabric.ComputedValue<string>, notificationMetadata?: fabric.ComputedValue<string>, notificationTargetArn?: fabric.ComputedValue<string>, roleArn?: fabric.ComputedValue<string> }>[];
    /**
     * The name of the launch configuration to use.
     */
    readonly launchConfiguration: fabric.ComputedValue<string>;
    /**
     * A list of elastic load balancer names to add to the autoscaling
     * group names.
     */
    readonly loadBalancers?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * The maximum size of the auto scale group.
     */
    readonly maxSize: fabric.ComputedValue<number>;
    /**
     * The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     */
    readonly metricsGranularity?: fabric.ComputedValue<string>;
    /**
     * Setting this causes Terraform to wait for
     * this number of instances to show up healthy in the ELB only on creation.
     * Updates will not wait on ELB instance number changes.
     * (See also [Waiting for Capacity](#waiting-for-capacity) below.)
     */
    readonly minElbCapacity?: fabric.ComputedValue<number>;
    /**
     * The minimum size of the auto scale group.
     * (See also [Waiting for Capacity](#waiting-for-capacity) below.)
     */
    readonly minSize: fabric.ComputedValue<number>;
    /**
     * The name of the auto scaling group. By default generated by Terraform.
     */
    readonly name?: fabric.ComputedValue<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix?: fabric.ComputedValue<string>;
    /**
     * The name of the placement group into which you'll launch your instances, if any.
     */
    readonly placementGroup?: fabric.ComputedValue<string>;
    /**
     * Allows setting instance protection. The
     * autoscaling group will not select instances with this setting for terminination
     * during scale in events.
     */
    readonly protectFromScaleIn?: fabric.ComputedValue<boolean>;
    /**
     * A list of processes to suspend for the AutoScaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your autoscaling group from functioning properly.
     */
    readonly suspendedProcesses?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * A list of tag blocks. Tags documented below.
     */
    readonly tag?: fabric.ComputedValue<{ key: fabric.ComputedValue<string>, propagateAtLaunch: fabric.ComputedValue<boolean>, value: fabric.ComputedValue<string> }>[];
    /**
     * A list of tag blocks (maps). Tags documented below.
     */
    readonly tags?: fabric.ComputedValue<fabric.ComputedValue<{[key: string]: any}>>[];
    /**
     * A list of `aws_alb_target_group` ARNs, for use with
     * Application Load Balancing
     */
    readonly targetGroupArns?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `Default`.
     */
    readonly terminationPolicies?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * A list of subnet IDs to launch resources in.
     */
    readonly vpcZoneIdentifier?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly waitForCapacityTimeout?: fabric.ComputedValue<string>;
    /**
     * Setting this will cause Terraform to wait
     * for exactly this number of healthy instances in all attached load balancers
     * on both create and update operations. (Takes precedence over
     * `min_elb_capacity` behavior.)
     * (See also [Waiting for Capacity](#waiting-for-capacity) below.)
     */
    readonly waitForElbCapacity?: fabric.ComputedValue<number>;
}

