// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

/**
 * Provides an Elastic Load Balancer resource, also known as a "Classic
 * Load Balancer" after the release of
 * [Application Load Balancers](/docs/providers/aws/r/alb.html).
 * 
 * ~> **NOTE on ELB Instances and ELB Attachments:** Terraform currently
 * provides both a standalone [ELB Attachment resource](elb_attachment.html)
 * (describing an instance attached to an ELB), and an ELB resource with
 * `instances` defined in-line. At this time you cannot use an ELB with in-line
 * instances in conjunction with a ELB Attachment resources. Doing so will cause a
 * conflict and will overwrite attachments.
 */
export class LoadBalancer extends fabric.Resource {
    /**
     * An Access Logs block. Access Logs documented below.
     */
    public readonly accessLogs?: fabric.Computed<{ bucket: string, bucketPrefix?: string, enabled?: boolean, interval?: number }[]>;
    /**
     * The AZ's to serve traffic in.
     */
    public readonly availabilityZones: fabric.Computed<string[]>;
    /**
     * Boolean to enable connection draining. Default: `false`
     */
    public readonly connectionDraining?: fabric.Computed<boolean>;
    /**
     * The time in seconds to allow for connections to drain. Default: `300`
     */
    public readonly connectionDrainingTimeout?: fabric.Computed<number>;
    /**
     * Enable cross-zone load balancing. Default: `true`
     */
    public readonly crossZoneLoadBalancing?: fabric.Computed<boolean>;
    /**
     * The DNS name of the ELB
     */
    public /*out*/ readonly dnsName: fabric.Computed<string>;
    /**
     * A health_check block. Health Check documented below.
     */
    public readonly healthCheck: fabric.Computed<{ healthyThreshold: number, interval: number, target: string, timeout: number, unhealthyThreshold: number }[]>;
    /**
     * The time in seconds that the connection is allowed to be idle. Default: `60`
     */
    public readonly idleTimeout?: fabric.Computed<number>;
    /**
     * A list of instance ids to place in the ELB pool.
     */
    public readonly instances: fabric.Computed<string[]>;
    /**
     * If true, ELB will be an internal ELB.
     */
    public readonly internal: fabric.Computed<boolean>;
    /**
     * A list of listener blocks. Listeners documented below.
     */
    public readonly listener: fabric.Computed<{ instancePort: number, instanceProtocol: string, lbPort: number, lbProtocol: string, sslCertificateId?: string }[]>;
    /**
     * The name of the ELB. By default generated by Terraform.
     */
    public readonly name: fabric.Computed<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    public readonly namePrefix?: fabric.Computed<string>;
    /**
     * A list of security group IDs to assign to the ELB.
     * Only valid if creating an ELB within a VPC
     */
    public readonly securityGroups: fabric.Computed<string[]>;
    /**
     * The name of the security group that you can use as
     * part of your inbound rules for your load balancer's back-end application
     * instances. Use this for Classic or Default VPC only.
     */
    public readonly sourceSecurityGroup: fabric.Computed<string>;
    /**
     * The ID of the security group that you can use as
     * part of your inbound rules for your load balancer's back-end application
     * instances. Only available on ELBs launched in a VPC.
     */
    public /*out*/ readonly sourceSecurityGroupId: fabric.Computed<string>;
    /**
     * A list of subnet IDs to attach to the ELB.
     */
    public readonly subnets: fabric.Computed<string[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags?: fabric.Computed<{[key: string]: any}>;
    /**
     * The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
     */
    public /*out*/ readonly zoneId: fabric.Computed<string>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this LoadBalancer instance
     * @param args A collection of arguments for creating this LoadBalancer intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: LoadBalancerArgs, dependsOn?: fabric.Resource[]) {
        if (args.listener === undefined) {
            throw new Error("Missing required property 'listener'");
        }
        super("aws:elasticloadbalancing/loadBalancer:LoadBalancer", urnName, {
            "accessLogs": args.accessLogs,
            "availabilityZones": args.availabilityZones,
            "connectionDraining": args.connectionDraining,
            "connectionDrainingTimeout": args.connectionDrainingTimeout,
            "crossZoneLoadBalancing": args.crossZoneLoadBalancing,
            "healthCheck": args.healthCheck,
            "idleTimeout": args.idleTimeout,
            "instances": args.instances,
            "internal": args.internal,
            "listener": args.listener,
            "name": args.name,
            "namePrefix": args.namePrefix,
            "securityGroups": args.securityGroups,
            "sourceSecurityGroup": args.sourceSecurityGroup,
            "subnets": args.subnets,
            "tags": args.tags,
            "dnsName": undefined,
            "sourceSecurityGroupId": undefined,
            "zoneId": undefined,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * An Access Logs block. Access Logs documented below.
     */
    readonly accessLogs?: fabric.ComputedValue<{ bucket: fabric.ComputedValue<string>, bucketPrefix?: fabric.ComputedValue<string>, enabled?: fabric.ComputedValue<boolean>, interval?: fabric.ComputedValue<number> }>[];
    /**
     * The AZ's to serve traffic in.
     */
    readonly availabilityZones?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * Boolean to enable connection draining. Default: `false`
     */
    readonly connectionDraining?: fabric.ComputedValue<boolean>;
    /**
     * The time in seconds to allow for connections to drain. Default: `300`
     */
    readonly connectionDrainingTimeout?: fabric.ComputedValue<number>;
    /**
     * Enable cross-zone load balancing. Default: `true`
     */
    readonly crossZoneLoadBalancing?: fabric.ComputedValue<boolean>;
    /**
     * A health_check block. Health Check documented below.
     */
    readonly healthCheck?: fabric.ComputedValue<{ healthyThreshold: fabric.ComputedValue<number>, interval: fabric.ComputedValue<number>, target: fabric.ComputedValue<string>, timeout: fabric.ComputedValue<number>, unhealthyThreshold: fabric.ComputedValue<number> }>[];
    /**
     * The time in seconds that the connection is allowed to be idle. Default: `60`
     */
    readonly idleTimeout?: fabric.ComputedValue<number>;
    /**
     * A list of instance ids to place in the ELB pool.
     */
    readonly instances?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * If true, ELB will be an internal ELB.
     */
    readonly internal?: fabric.ComputedValue<boolean>;
    /**
     * A list of listener blocks. Listeners documented below.
     */
    readonly listener: fabric.ComputedValue<{ instancePort: fabric.ComputedValue<number>, instanceProtocol: fabric.ComputedValue<string>, lbPort: fabric.ComputedValue<number>, lbProtocol: fabric.ComputedValue<string>, sslCertificateId?: fabric.ComputedValue<string> }>[];
    /**
     * The name of the ELB. By default generated by Terraform.
     */
    readonly name?: fabric.ComputedValue<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix?: fabric.ComputedValue<string>;
    /**
     * A list of security group IDs to assign to the ELB.
     * Only valid if creating an ELB within a VPC
     */
    readonly securityGroups?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly sourceSecurityGroup?: fabric.ComputedValue<string>;
    /**
     * A list of subnet IDs to attach to the ELB.
     */
    readonly subnets?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: fabric.ComputedValue<{[key: string]: any}>;
}

