// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class ReplicationGroup extends fabric.Resource {
    public readonly applyImmediately: fabric.Computed<boolean>;
    public readonly autoMinorVersionUpgrade?: fabric.Computed<boolean>;
    public readonly automaticFailoverEnabled?: fabric.Computed<boolean>;
    public readonly availabilityZones?: fabric.Computed<string[]>;
    public readonly clusterMode?: fabric.Computed<{ numNodeGroups: number, replicasPerNodeGroup: number }[]>;
    public /*out*/ readonly configurationEndpointAddress: fabric.Computed<string>;
    public readonly engine?: fabric.Computed<string>;
    public readonly engineVersion: fabric.Computed<string>;
    public readonly maintenanceWindow: fabric.Computed<string>;
    public readonly nodeType: fabric.Computed<string>;
    public readonly notificationTopicArn?: fabric.Computed<string>;
    public readonly numberCacheClusters: fabric.Computed<number>;
    public readonly parameterGroupName: fabric.Computed<string>;
    public readonly port: fabric.Computed<number>;
    public /*out*/ readonly primaryEndpointAddress: fabric.Computed<string>;
    public readonly replicationGroupDescription: fabric.Computed<string>;
    public readonly replicationGroupId: fabric.Computed<string>;
    public readonly securityGroupIds: fabric.Computed<string[]>;
    public readonly securityGroupNames: fabric.Computed<string[]>;
    public readonly snapshotArns?: fabric.Computed<string[]>;
    public readonly snapshotName?: fabric.Computed<string>;
    public readonly snapshotRetentionLimit?: fabric.Computed<number>;
    public readonly snapshotWindow: fabric.Computed<string>;
    public readonly subnetGroupName: fabric.Computed<string>;
    public readonly tags?: fabric.Computed<{[key: string]: any}>;

    constructor(urnName: string, args: ReplicationGroupArgs, dependsOn?: fabric.Resource[]) {
        if (args.nodeType === undefined) {
            throw new Error("Missing required property 'nodeType'");
        }
        if (args.port === undefined) {
            throw new Error("Missing required property 'port'");
        }
        if (args.replicationGroupDescription === undefined) {
            throw new Error("Missing required property 'replicationGroupDescription'");
        }
        if (args.replicationGroupId === undefined) {
            throw new Error("Missing required property 'replicationGroupId'");
        }
        super("aws:elasticache/replicationGroup:ReplicationGroup", urnName, {
            "applyImmediately": args.applyImmediately,
            "autoMinorVersionUpgrade": args.autoMinorVersionUpgrade,
            "automaticFailoverEnabled": args.automaticFailoverEnabled,
            "availabilityZones": args.availabilityZones,
            "clusterMode": args.clusterMode,
            "engine": args.engine,
            "engineVersion": args.engineVersion,
            "maintenanceWindow": args.maintenanceWindow,
            "nodeType": args.nodeType,
            "notificationTopicArn": args.notificationTopicArn,
            "numberCacheClusters": args.numberCacheClusters,
            "parameterGroupName": args.parameterGroupName,
            "port": args.port,
            "replicationGroupDescription": args.replicationGroupDescription,
            "replicationGroupId": args.replicationGroupId,
            "securityGroupIds": args.securityGroupIds,
            "securityGroupNames": args.securityGroupNames,
            "snapshotArns": args.snapshotArns,
            "snapshotName": args.snapshotName,
            "snapshotRetentionLimit": args.snapshotRetentionLimit,
            "snapshotWindow": args.snapshotWindow,
            "subnetGroupName": args.subnetGroupName,
            "tags": args.tags,
            "configurationEndpointAddress": undefined,
            "primaryEndpointAddress": undefined,
        }, dependsOn);
    }
}

export interface ReplicationGroupArgs {
    readonly applyImmediately?: fabric.ComputedValue<boolean>;
    readonly autoMinorVersionUpgrade?: fabric.ComputedValue<boolean>;
    readonly automaticFailoverEnabled?: fabric.ComputedValue<boolean>;
    readonly availabilityZones?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly clusterMode?: fabric.ComputedValue<{ numNodeGroups: fabric.ComputedValue<number>, replicasPerNodeGroup: fabric.ComputedValue<number> }>[];
    readonly engine?: fabric.ComputedValue<string>;
    readonly engineVersion?: fabric.ComputedValue<string>;
    readonly maintenanceWindow?: fabric.ComputedValue<string>;
    readonly nodeType: fabric.ComputedValue<string>;
    readonly notificationTopicArn?: fabric.ComputedValue<string>;
    readonly numberCacheClusters?: fabric.ComputedValue<number>;
    readonly parameterGroupName?: fabric.ComputedValue<string>;
    readonly port: fabric.ComputedValue<number>;
    readonly replicationGroupDescription: fabric.ComputedValue<string>;
    readonly replicationGroupId: fabric.ComputedValue<string>;
    readonly securityGroupIds?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly securityGroupNames?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly snapshotArns?: fabric.ComputedValue<fabric.ComputedValue<string>>[];
    readonly snapshotName?: fabric.ComputedValue<string>;
    readonly snapshotRetentionLimit?: fabric.ComputedValue<number>;
    readonly snapshotWindow?: fabric.ComputedValue<string>;
    readonly subnetGroupName?: fabric.ComputedValue<string>;
    readonly tags?: fabric.ComputedValue<{[key: string]: any}>;
}

