// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

import {ARN} from "../index";
import {Group} from "./group";
import {Role} from "./role";
import {User} from "./user";

/**
 * Attaches a Managed IAM Policy to user(s), role(s), and/or group(s)
 * 
 * !> **WARNING:** The aws_iam_policy_attachment resource creates **exclusive** attachments of IAM policies. Across the entire AWS account, all of the users/roles/groups to which a single policy is attached must be declared by a single aws_iam_policy_attachment resource. This means that even any users/roles/groups that have the attached policy via some mechanism other than Terraform will have that attached policy revoked by Terraform. Consider `aws_iam_role_policy_attachment`, `iam_user_policy_attachment`, or `iam_group_policy_attachment` instead. These resources do not enforce exclusive attachment of an IAM policy. 
 * 
 * ```hcl
 * resource "aws_iam_user" "user" {
 *   name = "test-user"
 * }
 * 
 * resource "aws_iam_role" "role" {
 *   name = "test-role"
 * }
 * 
 * resource "aws_iam_group" "group" {
 *   name = "test-group"
 * }
 * 
 * resource "aws_iam_policy" "policy" {
 *   name        = "test-policy"
 *   description = "A test policy"
 *   policy      =  # omitted
 * }
 * 
 * resource "aws_iam_policy_attachment" "test-attach" {
 *   name       = "test-attachment"
 *   users      = ["${aws_iam_user.user.name}"]
 *   roles      = ["${aws_iam_role.role.name}"]
 *   groups     = ["${aws_iam_group.group.name}"]
 *   policy_arn = "${aws_iam_policy.policy.arn}"
 * }
 * ```
 */
export class PolicyAttachment extends fabric.Resource {
    /**
     * The group(s) the policy should be applied to
     */
    public readonly groups?: fabric.Computed<Group[]>;
    /**
     * The name of the policy. This cannot be an empty string.
     */
    public readonly name: fabric.Computed<string>;
    /**
     * The ARN of the policy you want to apply
     */
    public readonly policyArn: fabric.Computed<ARN>;
    /**
     * The role(s) the policy should be applied to
     */
    public readonly roles?: fabric.Computed<Role[]>;
    /**
     * The user(s) the policy should be applied to
     */
    public readonly users?: fabric.Computed<User[]>;

    /**
     * Create a PolicyAttachment resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this PolicyAttachment instance
     * @param args A collection of arguments for creating this PolicyAttachment intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: PolicyAttachmentArgs, dependsOn?: fabric.Resource[]) {
        if (args.policyArn === undefined) {
            throw new Error("Missing required property 'policyArn'");
        }
        super("aws:iam/policyAttachment:PolicyAttachment", urnName, {
            "groups": args.groups,
            "name": args.name,
            "policyArn": args.policyArn,
            "roles": args.roles,
            "users": args.users,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a PolicyAttachment resource.
 */
export interface PolicyAttachmentArgs {
    /**
     * The group(s) the policy should be applied to
     */
    readonly groups?: fabric.ComputedValue<fabric.ComputedValue<Group>>[];
    /**
     * The name of the policy. This cannot be an empty string.
     */
    readonly name?: fabric.ComputedValue<string>;
    /**
     * The ARN of the policy you want to apply
     */
    readonly policyArn: fabric.ComputedValue<ARN>;
    /**
     * The role(s) the policy should be applied to
     */
    readonly roles?: fabric.ComputedValue<fabric.ComputedValue<Role>>[];
    /**
     * The user(s) the policy should be applied to
     */
    readonly users?: fabric.ComputedValue<fabric.ComputedValue<User>>[];
}

