// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

/**
 * -> **Note:** To prevent a race condition during service deletion, make sure to set `depends_on` to the related `aws_iam_role_policy`; otherwise, the policy may be destroyed too soon and the ECS service will then get stuck in the `DRAINING` state.
 * 
 * Provides an ECS service - effectively a task that is expected to run until an error occurs or a user terminates it (typically a webserver or a database).
 * 
 * See [ECS Services section in AWS developer guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
 */
export class Service extends pulumi.Resource {
    /**
     * ARN of an ECS cluster
     */
    public readonly cluster: pulumi.Computed<string>;
    /**
     * The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment.
     */
    public readonly deploymentMaximumPercent?: pulumi.Computed<number>;
    /**
     * The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
     */
    public readonly deploymentMinimumHealthyPercent?: pulumi.Computed<number>;
    /**
     * The number of instances of the task definition to place and keep running
     */
    public readonly desiredCount?: pulumi.Computed<number>;
    /**
     * The ARN of IAM role that allows your Amazon ECS container agent to make calls to your load balancer on your behalf. This parameter is only required if you are using a load balancer with your service.
     */
    public readonly iamRole?: pulumi.Computed<string>;
    /**
     * A load balancer block. Load balancers documented below.
     */
    public readonly loadBalancers?: pulumi.Computed<{ containerName: string, containerPort: number, elbName?: string, targetGroupArn?: string }[]>;
    /**
     * The name of the service (up to 255 letters, numbers, hyphens, and underscores)
     */
    public readonly name: pulumi.Computed<string>;
    /**
     * rules that are taken into consideration during task placement. Maximum number of
     * `placement_constraints` is `10`. Defined below.
     */
    public readonly placementConstraints?: pulumi.Computed<{ expression?: string, type: string }[]>;
    /**
     * Service level strategy rules that are taken
     * into consideration during task placement. The maximum number of
     * `placement_strategy` blocks is `5`. Defined below.
     */
    public readonly placementStrategy?: pulumi.Computed<{ field?: string, type: string }[]>;
    /**
     * The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
     */
    public readonly taskDefinition: pulumi.Computed<string>;

    /**
     * Create a Service resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this Service instance
     * @param args A collection of arguments for creating this Service intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: ServiceArgs, dependsOn?: pulumi.Resource[]) {
        if (args.taskDefinition === undefined) {
            throw new Error("Missing required property 'taskDefinition'");
        }
        super("aws:ecs/service:Service", urnName, {
            "cluster": args.cluster,
            "deploymentMaximumPercent": args.deploymentMaximumPercent,
            "deploymentMinimumHealthyPercent": args.deploymentMinimumHealthyPercent,
            "desiredCount": args.desiredCount,
            "iamRole": args.iamRole,
            "loadBalancers": args.loadBalancers,
            "name": args.name,
            "placementConstraints": args.placementConstraints,
            "placementStrategy": args.placementStrategy,
            "taskDefinition": args.taskDefinition,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * ARN of an ECS cluster
     */
    readonly cluster?: pulumi.ComputedValue<string>;
    /**
     * The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment.
     */
    readonly deploymentMaximumPercent?: pulumi.ComputedValue<number>;
    /**
     * The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
     */
    readonly deploymentMinimumHealthyPercent?: pulumi.ComputedValue<number>;
    /**
     * The number of instances of the task definition to place and keep running
     */
    readonly desiredCount?: pulumi.ComputedValue<number>;
    /**
     * The ARN of IAM role that allows your Amazon ECS container agent to make calls to your load balancer on your behalf. This parameter is only required if you are using a load balancer with your service.
     */
    readonly iamRole?: pulumi.ComputedValue<string>;
    /**
     * A load balancer block. Load balancers documented below.
     */
    readonly loadBalancers?: pulumi.ComputedValue<{ containerName: pulumi.ComputedValue<string>, containerPort: pulumi.ComputedValue<number>, elbName?: pulumi.ComputedValue<string>, targetGroupArn?: pulumi.ComputedValue<string> }>[];
    /**
     * The name of the service (up to 255 letters, numbers, hyphens, and underscores)
     */
    readonly name?: pulumi.ComputedValue<string>;
    /**
     * rules that are taken into consideration during task placement. Maximum number of
     * `placement_constraints` is `10`. Defined below.
     */
    readonly placementConstraints?: pulumi.ComputedValue<{ expression?: pulumi.ComputedValue<string>, type: pulumi.ComputedValue<string> }>[];
    /**
     * Service level strategy rules that are taken
     * into consideration during task placement. The maximum number of
     * `placement_strategy` blocks is `5`. Defined below.
     */
    readonly placementStrategy?: pulumi.ComputedValue<{ field?: pulumi.ComputedValue<string>, type: pulumi.ComputedValue<string> }>[];
    /**
     * The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
     */
    readonly taskDefinition: pulumi.ComputedValue<string>;
}

