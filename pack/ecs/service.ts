// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class Service extends fabric.Resource {
    public readonly cluster: fabric.Computed<string>;
    public readonly deploymentMaximumPercent?: fabric.Computed<number>;
    public readonly deploymentMinimumHealthyPercent?: fabric.Computed<number>;
    public readonly desiredCount?: fabric.Computed<number>;
    public readonly iamRole?: fabric.Computed<string>;
    public readonly loadBalancers?: fabric.Computed<{ containerName: string, containerPort: number, elbName?: string, targetGroupArn?: string }[]>;
    public readonly name: fabric.Computed<string>;
    public readonly placementConstraints?: fabric.Computed<{ expression?: string, type: string }[]>;
    public readonly placementStrategy?: fabric.Computed<{ field?: string, type: string }[]>;
    public readonly taskDefinition: fabric.Computed<string>;

    constructor(urnName: string, args: ServiceArgs, dependsOn?: fabric.Resource[]) {
        if (args.taskDefinition === undefined) {
            throw new Error("Missing required property 'taskDefinition'");
        }
        super("aws:ecs/service:Service", urnName, {
            "cluster": args.cluster,
            "deploymentMaximumPercent": args.deploymentMaximumPercent,
            "deploymentMinimumHealthyPercent": args.deploymentMinimumHealthyPercent,
            "desiredCount": args.desiredCount,
            "iamRole": args.iamRole,
            "loadBalancers": args.loadBalancers,
            "name": args.name,
            "placementConstraints": args.placementConstraints,
            "placementStrategy": args.placementStrategy,
            "taskDefinition": args.taskDefinition,
        }, dependsOn);
    }
}

export interface ServiceArgs {
    readonly cluster?: fabric.ComputedValue<string>;
    readonly deploymentMaximumPercent?: fabric.ComputedValue<number>;
    readonly deploymentMinimumHealthyPercent?: fabric.ComputedValue<number>;
    readonly desiredCount?: fabric.ComputedValue<number>;
    readonly iamRole?: fabric.ComputedValue<string>;
    readonly loadBalancers?: fabric.ComputedValue<{ containerName: fabric.ComputedValue<string>, containerPort: fabric.ComputedValue<number>, elbName?: fabric.ComputedValue<string>, targetGroupArn?: fabric.ComputedValue<string> }>[];
    readonly name?: fabric.ComputedValue<string>;
    readonly placementConstraints?: fabric.ComputedValue<{ expression?: fabric.ComputedValue<string>, type: fabric.ComputedValue<string> }>[];
    readonly placementStrategy?: fabric.ComputedValue<{ field?: fabric.ComputedValue<string>, type: fabric.ComputedValue<string> }>[];
    readonly taskDefinition: fabric.ComputedValue<string>;
}

