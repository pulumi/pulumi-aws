// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

import {LogGroup} from "./logGroup";

/**
 * Provides a CloudWatch Logs subscription filter resource.
 */
export class LogSubscriptionFilter extends pulumi.Resource {
    /**
     * The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
     */
    public readonly destinationArn: pulumi.Computed<string>;
    /**
     * A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
     */
    public readonly filterPattern: pulumi.Computed<string>;
    /**
     * The name of the log group to associate the subscription filter with
     */
    public readonly logGroup: pulumi.Computed<LogGroup>;
    /**
     * A name for the subscription filter
     */
    public readonly name: pulumi.Computed<string>;
    /**
     * The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws_lambda_permission` resource for granting access from CloudWatch logs to the destination Lambda function. 
     */
    public readonly roleArn: pulumi.Computed<string>;

    /**
     * Create a LogSubscriptionFilter resource with the given unique name, arguments and optional additional
     * resource dependencies.
     *
     * @param urnName A _unique_ name for this LogSubscriptionFilter instance
     * @param args A collection of arguments for creating this LogSubscriptionFilter intance
     * @param dependsOn A optional array of additional resources this intance depends on
     */
    constructor(urnName: string, args: LogSubscriptionFilterArgs, dependsOn?: pulumi.Resource[]) {
        if (args.destinationArn === undefined) {
            throw new Error("Missing required property 'destinationArn'");
        }
        if (args.filterPattern === undefined) {
            throw new Error("Missing required property 'filterPattern'");
        }
        if (args.logGroup === undefined) {
            throw new Error("Missing required property 'logGroup'");
        }
        super("aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter", urnName, {
            "destinationArn": args.destinationArn,
            "filterPattern": args.filterPattern,
            "logGroup": args.logGroup,
            "name": args.name,
            "roleArn": args.roleArn,
        }, dependsOn);
    }
}

/**
 * The set of arguments for constructing a LogSubscriptionFilter resource.
 */
export interface LogSubscriptionFilterArgs {
    /**
     * The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
     */
    readonly destinationArn: pulumi.ComputedValue<string>;
    /**
     * A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
     */
    readonly filterPattern: pulumi.ComputedValue<string>;
    /**
     * The name of the log group to associate the subscription filter with
     */
    readonly logGroup: pulumi.ComputedValue<LogGroup>;
    /**
     * A name for the subscription filter
     */
    readonly name?: pulumi.ComputedValue<string>;
    /**
     * The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws_lambda_permission` resource for granting access from CloudWatch logs to the destination Lambda function. 
     */
    readonly roleArn?: pulumi.ComputedValue<string>;
}

